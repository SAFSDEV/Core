<!DOCTYPE html>
<html>
<head>
<title>Using SAFS with Cucumber-JVM</title>
<link rel="stylesheet" type="text/css" href="safsdev.css">
</head>
<body>
<header class=banner>
   <div class=doctitle>Using SAFS with <a href="http://github.com/cucumber/cucumber/wiki" alt="Cucumber" title="Cucumber"><image src="https://docs.cucumber.io/img/cucumber-black-128.png" alt="Cucumber" title="Cucumber"/></a></div>
       <div class=docmodified >Updated: 2018.11.16</div>
</header>

<small><a href="#seleniumplus">Goto new SeleniumPlus information...</a></small>

<section class=intro>
Beginning Sept 20, 2013 SAFS was enhanced to support <a href="https://github.com/cucumber/cucumber/wiki" alt="Cukes/Cucumber Homepage" title="Cukes/Cucumber Homepage">Cucumber</a> integration using <a href="http://github.com/cucumber/cucumber-jvm" alt="Cucumber-JVM Homepage on GITHub" title="Cucumber-JVM Homepage on GITHub">Cucumber-JVM</a>
<p>
SAFS users can now use Cucumber to define behavior-driven tests using standard Cucumber <a href="https://github.com/cucumber/cucumber/wiki/Gherkin" alt="Cucumber Feature File Syntax" title="Cucumber Feature File Syntax">Feature files</a>.  When executing those tests via Cucumber-JVM there are <a href="../doc/org/safs/cukes/StepDriver.html" alt="SAFS Cukes JavaDoc" title="SAFS Cukes JavaDoc">SAFS Cukes classes</a> that can automatically invoke and initialize the SAFS framework and execute commands and actions as directed by the Scenario Steps, or as called explicitly by the tester's own Java Step Definition implementations.
</section>

<section class=requirements>
<div class=requirementstitle>Requirements:</div>
In order to use SAFS with Cucumber-JVM your environment must meet the following requirements:
<p>
<ol>
	<li>Minimum <a href="http://cukes.info/install-cucumber-jvm.html" alt="Cucumber-JVM Install Site" title="Cucumber-JVM Install Site">Cucumber-JVM installed</a> with:
		<ul>
			<li>cucumber-core
			<li>cucumber-java
		</ul>
	<p>
	<li><a href="https://github.com/SAFSDEV/Core/releases" alt="SAFS Files Download Site" title="SAFS Files Download Site">SAFS Installed</a>
	    <ul>
	    	<li>SAFS Win only one tested with Cucumber-JVM at this time.
	    	<li>SAFS JAR libraries (up)dated to Sep 20, 2013 or later.
	    	<li>SAFS test project configured to run any SAFS Engines used for testing.
	    	<div class="itemnote">(SAFS for RFT , SAFS for TestComplete, SAFS for Android, SAFS for iOS, SAFS IBT, etc..)</div>
	    </ul>
</ol>
</section>

<section class=usage>
<div class=usagetitle>Usage:</div>

    <article class=subsection><div class=subsectiontitle>Cucumber Feature Files:</div>
    Develop tests using standard Cucumber/Gherkin <a href="https://github.com/cucumber/cucumber/wiki/Gherkin" alt="Cucumber Feature File Syntax" title="Cucumber Feature File Syntax">Feature file</a> syntax.  Scenario steps that don't map to SAFS StepDefinitions will map to your Java Step Definition files.  When necessary, your Step Definition implementation can invoke SAFS Step Definition implementations allowing you to execute SAFS commands or actions when needed.

    <article class=subsection><div class=subsectiontitle>SAFS Scenario Steps:</div>
    You can cause Cucumber to invoke SAFS commands or actions directly by using the appropriate SAFS Step syntax in your Scenario Steps (Given, When, Then, etc..)

        <article class=subsection><div class=subsectiontitle>SAFS Commands (Driver Commands):</div>
		To cause the execution of a SAFS Command--also known as a Driver Command--the following Scenario step syntax is supported:
		<ul>
		<li>For a command taking no parameters:
		<p><code>
		Then do safs command &lt;command>
		</code><p>
		Example:
		<p><code>
		    Then do safs command ClearAppMapCache
		</code></p>
		<p>
		<li>For a command taking one or more parameters use a standard syntax that Cucumber will parse into a List of values passed to running step definition.  Generally, that means one or more values separated by commas with the entire set of values enclosed in double-quotes:
		<p><code>
		Then do safs command &lt;command> using "param 1, param 2, param 3"
		</code><p>
		Examples:
		<p><code>
		    Then do safs command <a href="SAFSReference.php?rt=C&lib=DDDriverCommands&cmd=SetApplicationMap" alt="SAFS Reference Doc" title="SAFS Reference Doc" target="_safs_reference">SetApplicationMap</a> using "MyAppMap.map"<br>
		    Then do safs command <a href="SAFSReference.php?rt=C&lib=DDDriverCommands&cmd=GetAppMapValue" alt="SAFS Reference Doc" title="SAFS Reference Doc" target="_safs_reference">GetAppMapValue</a> using " , , theItem, theVar"<br>
		</code>
		<div class=itemnote>(Note how a command's unused optional params must still be provided as empty values.)</div>
		<p>
		</ul>
        </article>

        <article class=subsection><div class=subsectiontitle>SAFS Actions (Component Functions):</div>
		To cause the execution of a SAFS Action--also known as a Component Function--the following Scenario step syntax is supported:
		<ul>
			<li>For an action on a Window or Component taking no parameters:
			<p><code>
			    Then do safs action &lt;action> on &lt;windowname><br>
			    Or<br>
			    Then do safs action &lt;action> on &lt;childname> in &lt;windowname>
			</code><p>
			Examples:
			<p><code>
			    Then do safs action <a href="SAFSReference.php?lib=GenericObjectFunctions&cmd=Click" alt="SAFS Reference Doc" title="SAFS Reference Doc" target="_safs_reference">Click</a> on LoginWindow<br>
			    Or<br>
			    Then do safs action <a href="SAFSReference.php?lib=GenericObjectFunctions&cmd=Click" alt="SAFS Reference Doc" title="SAFS Reference Doc" target="_safs_reference">Click</a> on Submit in LoginWindow
			</code></p>
			<p>
			<li>For an action on a component taking one or more parameters use a standard syntax that Cucumber will parse into a List of values passed to running step definition.  Generally, that means one or more values separated by commas with the entire set of values enclosed in double-quotes:
			<p><code>
			    Then do safs &lt;action> on &lt;windowname> using "param 1, param 2, param 3"<br>
			    Or<br>
			    Then do safs &lt;action> on &lt;childname> in &lt;windowname> using "param 1, param 2, param 3"
			</code><p>
			Examples:
			<p><code>
				Then do safs action <a href="SAFSReference.php?lib=GenericObjectFunctions&cmd=Click" alt="SAFS Reference Doc" title="SAFS Reference Doc" target="_safs_reference">Click</a> on LoginWindow using "TopLeft"<br>
				Or<br>
				Then do safs action <a href="SAFSReference.php?lib=GenericMasterFunctions&cmd=VerifyProperty" alt="SAFS Reference Doc" title="SAFS Reference Doc" target="_safs_reference">VerifyProperty</a> on Submit in LoginWindow using "Enabled, True, CaseInsensitive"<br>
			</code>
			<p>
		</ul>
        </article>

        <article class=subsection><div class=subsectiontitle>SAFS Expressions and Variables:</div>
		If the Scenario Step is going to contain a SAFS expression then it must be entered as a double-quoted value since the Cucumber parser will want to strip the outer quotes off any value it sees:
		<p>
		<code>
		""The variable value is: "& ^varValue"
		</code>
		<p>
		Example:
		<p>
		<code>
        Then do safs command <a href="SAFSReference.php?rt=C&lib=DDDriverLogCommands&cmd=LogMessage" alt="SAFS Reference Doc" title="SAFS Reference Doc" target="_safs_reference">LogMessage</a> using ""The stored property value is: "& ^varValue"
		</code>
        </article>
    </article>

    <article class=subsection><div class=subsectiontitle>Cucumber-JVM Step Definition Files:</div>
    To implement the Cucumber-JVM Step Definitions to access the SAFS Framework and available SAFS Step Definition methods at runtime, please consult the following:
    <ol>
    <li>SAFS Cukes <a href="../doc/org/safs/cukes/StepDriver.html" alt="SAFS Cukes JavaDoc" title="SAFS Cukes JavaDoc" target="_safs_reference">StepDriver class</a> -- provides access to the SAFS Framework.
    <li>SAFS Cukes <a href="../doc/org/safs/cukes/steps/SAFSSteps.html" alt="SAFS Cukes JavaDoc" title="SAFS Cukes JavaDoc" target="_safs_reference">SAFSSteps class</a> -- step definitions superclass to extend.
    <li>SAFS Cukes <a href="../doc/org/safs/cukes/steps/StepDefinitions.html" alt="SAFS Cukes JavaDoc" title="SAFS Cukes JavaDoc" target="_safs_reference">StepDefinitions class</a> -- runtime access to SAFS Commands and Actions.
    </ol>
    <p>
    Primarily, any and all Cucumber-JVM step definition class files that intend to use SAFS *MUST* insure SAFS is running and initialized by implementing an <b>@Before</b> Cucumber hook, like below:
    <p>
    <code><pre>
    @Before(order=10)
    public void beforeAll(){
        safsstep.beforeAll();
    }
    </pre></code>
    <p>
    The easiest way to do this is to have affected step definition classes extend the <a href="../doc/org/safs/cukes/steps/SAFSSteps.html" alt="SAFS Cukes JavaDoc" title="SAFS Cukes JavaDoc" target="_safs_reference">SAFSSteps class</a>.  Though, this is not required.
    <p>
    The SAFSSteps class provides all subclasses with ready access to the initialized SAFS JSAFSDriver and SAFS StepDefinition methods for running SAFS DriverCommands and ComponentFunctions.
    <p>
    You can invoke a SAFS DriverCommand or ComponentFunction from within your own step definition implementations like below:
    <p>
    <code><pre>
    public void yourImplementedMethod(){
        helper = safsstep.runDriverCommand("SetApplicationMap", Arrays.asList("MyAppMap.map"));
        helper = safsstep.runComponentFunction("Click", "Submit", "LoginWindow", Arrays.asList("TopLeft"));
    }
    </pre></code>
    <p>
    Of course, you would want to use static String constants or other lookups rather than hardcoded literal Strings wherever possible.
    </article>
</section>

<!--                  -->
<!--   SELENIUM PLUS  -->
<!--                  -->

<a name="seleniumplus" />
<div class=requirementstitle>Cucumber with SeleniumPlus</div>
<section class=intro>
When configured as described below, SeleniumPlus can invoke any number of Cucumber tests at runtime.  The SeleniumPlus test can be made up entirely of Cucumber test invocations, or Cucumber tests can be interspersed between standard SeleniumPlus calls to TestRuns, TestCases, and any other arbitrary Java code.
</section>
<p>
<section class=requirements>
<div class=requirementstitle>Requirements:</div>
In order to use Cucumber with SeleniumPlus, your environment must meet the following requirements:
<p>
<ol>
	<li><a href="https://github.com/SAFSDEV/SeleniumPlus-Plugin/releases" alt="SeleniumPlus Files Download Site" title="SeleniumPlus Files Download Site">SeleniumPlus Installed</a>
	<p>
	<li>Minimum <a href="https://docs.cucumber.io/installation/java/" alt="Cucumber-JVM Install Site" title="Cucumber-JVM Install Site">Cucumber-JVM installed</a> with:
	<p><ul>
			<li>cucumber-core-4.2.0.jar
			<li>cucumber-java-4.2.0.jar
			<li>cucumber-jvm-deps-1.0.6.jar
			<li>cucumber-expressions-6.2.0.jar
			<li>datatable-1.1.7.jar
			<li>datatable-dependencies-1.1.7.jar
			<li>gherkin-5.0.0.jar
		</ul>
		<p>
	These files are also accessible from <a href="https://github.com/SAFSDEV/Core/tree/master/dependencies/cuke">SAFS/SeleniumPlus Cuke Dependencies</a>.
	<p>
	<li>A SeleniumPlus test project created whose BuildPath is updated with the above dependencies.
	<p>
	<li>Your <a href="https://docs.cucumber.io/cucumber/step-definitions/">Cucumber Step Definition (Java) files</a>  developed in the test project, or accessible to your test project via JAR file(s) at runtime.  Examples are shown below:
	<p>
	<div><ul>
	<b>&lt;project>/Tests/&lt;project>.cukes.stepdefs.MyStepDefs.java</b>
	<p>
	<b>Cukes/Tests/cukes/stepdefs/MyStepDefs.java</b>
	</ul></div>
	<p>
	Your TestCases classes can also serve as Cucumber Step Definition files containing Step Definition methods, if desired.
    <p>
	<div><ul><b>Cukes/Tests/cukes/testcases/TestCase1.java</b></ul>
	</div>
	<p>
	<li>Your <a href="https://docs.cucumber.io/gherkin/reference/">Cucumber/Gherkin Feature Files</a> developed in the test project, or otherwise properly accessible to your test project at runtime.
	<p>
	<div>
	<ul><b>&lt;project>/resources/features/MyFirstCucumber.feature</b></ul>
	<p>
	<ul><b>Cukes/resources/features/MyFirstCucumber.feature</b></ul>
	</div>
	<p>
	<li>Provide one or more methods that can launch the specific Cucumber test(s) you wish to execute.  The example below might be in a SeleniumPlus TestRun, or TestCase, or any Class and Method name of your choosing:
	<div class=itemnote><code><pre>
    @Override
    public void runTest() throws Throwable {
        final Runtime runtime = Runtime.builder()
            .withArgs(new String[]{
                "--glue", "cukes",       // the Java package root containing your Step Definition files
                ".\\resources\\simple"   // the location of your Gherkin Feature files
            })
            .withClassLoader(Thread.currentThread().getContextClassLoader())
            .build();

        runtime.run();
        byte exitcode = runtime.exitStatus();
    }</pre></code></div>
	<p>
	This is simply launching the Cucumber test using Cucumber's Runtime command-line options.
</ol>
</section>

<section class=usage>
<div class=usagetitle>Usage:</div>

    <article class=subsection><div class=subsectiontitle>Cucumber Feature Files:</div>
		Develop tests using standard <a href="https://docs.cucumber.io/gherkin/reference/" alt="Cucumber Feature File Syntax" title="Cucumber Feature File Syntax">Cucumber/Gherkin Feature Files</a> syntax.
		<p>
		While it is not absolutely necessary, it is recommended to write, maintain, and deploy these feature files as part of the SeleniumPlus test project as mentioned in Requirements above.
    </article>
    <article class=subsection><div class=subsectiontitle>Step Definitions with SeleniumPlus:</div>
	    Place your custom <a href="https://docs.cucumber.io/cucumber/step-definitions/">Cucumber Step Definition</a> methods into the Step Definition classes mentioned above. An example Step Definition method using SeleniumPlus invocations is shown below:
	    <p><code><pre>
    @Given("^I initialize my test automation$")
    public void <b>I_initialize_my_test_automation()</b> throws Throwable{
        Logging.LogMessage("'I am initializing my NEW test automation'.");
        StartWebBrowser(Map.TestURL, Map.SessionID, GetVariableValue(Map.Browser));
    }</pre></code>
	<div class=itemnote>
	<ul>Note: the invocation of SeleniumPlus functionality directly as shown above is most concise  if the Step Definition or TestCase is a subclass of the SeleniumPlus class as shown below:
	<p><ul>
	public class MyStepDefs <b>extends SeleniumPlus</b><br>
	public class TestCase1 <b>extends SeleniumPlus</b>
	</ul></ul></div>
	<ul>A sample of just such a SeleniumPlus-enabled Java Step Definition file can be <a href="CukesSeSample.java" alt="Cucumber Sample Step Definition file" title="Cucumber Sample Step Definition file">downloaded from here</a>.
    </ul></article>
    <article class=subsection><div class=subsectiontitle>SAFS Scenario Steps Support:</div>
    You can cause Cucumber to invoke SAFS commands or actions directly by using an appropriately generic Step syntax in your Scenario Steps (Given, When, Then, etc..)

        <article class=subsection><div class=subsectiontitle>SAFS Commands (Driver Commands):</div>
		To cause the execution of <b><i>any</i></b> SAFS Driver Command, the following Scenario step syntax could be supported:
		<ul>
		<li>For a Driver Command taking no parameters:
		<p><code>
		<ul>Then do safs command &lt;command></ul>
		</code><p>
		Example:
		<p><code>
			<ul>Then do safs command ClearAppMapCache</ul>
		</code></p>
		<p>
		Until SeleniumPlus provides this built-in Step Definition, your test project can provide it with this simple Step Definition Method:
		<p><code><pre>
    // this will be in a central reusable Se+ cukes support package
    @Then("do safs command ([^\"]*)")
    public TestRecordHelper <b>runSAFSDriverCommand(String command)</b> throws Throwable{
        return <b>Runner</b>.command(command);
    }</pre></code>
		<div class=itemnote>Note: the use of 'Runner' only works if the Step Definition or TestCase is a subclass of the SeleniumPlus class as shown in examples below:
		<p><ul>
		public class MyStepDefs <b>extends SeleniumPlus</b><br>
		public class TestCase1 <b>extends SeleniumPlus</b>
		</ul></div>
		<p>
		<li>For a SAFS Driver Command taking one or more parameters, use a standard syntax that Cucumber will pass to the Step Definition.  Generally, that means one or more values separated by commas with the entire set of values enclosed in double-quotes:
		<p><code>
		<ul>Then do safs command &lt;command> using "param 1, param 2, param 3"</ul>
		</code><p>
		Examples:
		<p><code>
		<ul>
		    Then do safs command <a href="SAFSReference.php?rt=C&lib=DDDriverCommands&cmd=SetApplicationMap" alt="SAFS Reference Doc" title="SAFS Reference Doc" target="_safs_reference">SetApplicationMap</a> using "MyAppMap.map"<br>
		    Then do safs command <a href="SAFSReference.php?rt=C&lib=DDDriverCommands&cmd=GetAppMapValue" alt="SAFS Reference Doc" title="SAFS Reference Doc" target="_safs_reference">GetAppMapValue</a> using " , , theItem, theVar"
		    <p>
			<div class=itemnote>(Note how a Driver Command's unused optional params must still be provided as empty values.)</div>
		</ul></code>
		<p>
		Your test project can provide it with this simple Step Definition Method:
		<p>
		<code><pre>
    // this will be in a central reusable Se+ cukes support package
    @Then("do safs command ([^\"]*) using \"([^\"]*)\"")
    public TestRecordHelper <b>runSAFSDriverCommandUsingParameters(String command, String parameters)</b> throws Throwable{
        String[] items = parameters.split(",");
        return <b>Runner</b>.command(command, items);
    }</pre></code></ul>
        </article>
        <article class=subsection><div class=subsectiontitle>SAFS Actions (Component Functions):</div>
		To cause the execution of a SAFS Action--also known as a Component Function--the following Scenario step syntax is supported:
		<ul>
		<li>For an action on a Window or Component taking no parameters:
		<p><code><ul>
  		    Then do safs action &lt;action> on &lt;windowname><br>
		    Or<br>
		    Then do safs action &lt;action> on &lt;childname> in &lt;windowname>
		</ul></code><p>
		Examples:
		<p><code><ul>
		    Then do safs action <a href="SAFSReference.php?lib=GenericObjectFunctions&cmd=Click" alt="SAFS Reference Doc" title="SAFS Reference Doc" target="_safs_reference">Click</a> on LoginWindow<br>
		    Or<br>
		    Then do safs action <a href="SAFSReference.php?lib=GenericObjectFunctions&cmd=Click" alt="SAFS Reference Doc" title="SAFS Reference Doc" target="_safs_reference">Click</a> on Submit in LoginWindow
		</ul></code></p>
		<p>
		Until SeleniumPlus provides a built-in Step Definition to support these, your test project can provide support with these simple Step Definition methods:
		<p><code><pre>
    // this will be in a central reusable Se+ cukes support package
    @Then("do safs action ([^\"]*) on ([^\"]*)")
    public TestRecordHelper <b>runSAFSComponentFunction(String command, String window)</b> throws Throwable{
        return <b>Runner</b>.action(command, window, window, new String[]{});
    }
		</pre></code>
		<p><code><pre>
    // this will be in a central reusable Se+ cukes support package
    @Then("do safs action ([^\"]*) on ([^\"]*) in ([^\"]*)")
    public TestRecordHelper <b>runSAFSComponentFunction(String command, String component, String window)</b> throws Throwable{
        return <b>Runner</b>.action(command, window, component, new String[]{});
    }</pre></code>
		<li>For an action on a Window or Component taking one or more parameters, use a standard syntax that Cucumber will parse into parameters passed to the Step Definition.  Generally, that means one or more values separated by commas with the entire set of values enclosed in double-quotes:
		<p><code><ul>
		    Then do safs &lt;action> on &lt;windowname> using "param 1, param 2, param 3"<br>
		    Or<br>
		    Then do safs &lt;action> on &lt;childname> in &lt;windowname> using "param 1, param 2, param 3"
		</ul></code><p>
		Examples:
		<p><code><ul>
		    Then do safs action <a href="SAFSReference.php?lib=GenericObjectFunctions&cmd=Click" alt="SAFS Reference Doc" title="SAFS Reference Doc" target="_safs_reference">Click</a> on LoginWindow using "TopLeft"<br>
		    Or<br>
		    Then do safs action <a href="SAFSReference.php?lib=GenericMasterFunctions&cmd=VerifyProperty" alt="SAFS Reference Doc" title="SAFS Reference Doc" target="_safs_reference">VerifyProperty</a> on Submit in LoginWindow using "Enabled, True, CaseInsensitive"<br>
		</ul></code>
		<p>
		Your test project can then provide support with these simple Step Definition methods:
		<p>
		<code><pre>
    // this will be in a central reusable Se+ cukes support package
    @Then("do safs action ([^\"]*) on ([^\"]*) using \"([^\"]*)\"")
    public TestRecordHelper <b>runSAFSComponentFunctionUsingParameters(String command, String window, String parameters)</b> throws Throwable{
        String[] items = parameters.split(",");
        return <b>Runner</b>.action(command, window, window, items);
    }</pre></code>
		<p>
		<code><pre>
    // this will be in a central reusable Se+ cukes support package
    @Then("do safs action ([^\"]*) on ([^\"]*) in ([^\"]*) using \"([^\"]*)\"")
    public TestRecordHelper <b>runSAFSComponentFunctionUsingParameters(String command, String component, String window, String parameters)</b> throws Throwable{
        String[] items = parameters.split(",");
        return <b>Runner</b>.action(command, window, component, items);
    }</pre></code>
		</ul>
    </article>
    </article>
	<article class=subsection><div class=subsectiontitle>SAFS Expressions and Variables:</div>
		If a Cucumber/Gherkin Scenario Step text is going to contain a SAFS expression then it must be entered as a double-quoted value since the Cucumber parser will want to strip the outer quotes off any value it sees:
		<p>
		<code>
		<ul>""The variable value is: "& ^varValue"</ul>
		</code>
		<p>
		This will get stripped of the outer quotes and become:
		<p>
		<code>
		<ul>"The variable value is: "& ^varValue</ul>
		</code>
		<p>
		Example:
		<p>
		<code>
		<ul>Then do safs command <a href="SAFSReference.php?rt=C&lib=DDDriverLogCommands&cmd=LogMessage" alt="SAFS Reference Doc" title="SAFS Reference Doc" target="_safs_reference">LogMessage</a> using ""The stored property value is: "& ^varValue"
		</u></code>
	</article>
</article>
</section>
<footer>
Copyright &copy; <a href="http://www.sas.com" alt="SAS Corporate Homepage" title="SAS Corporate Homepage">SAS Institute Inc.</a> for the Open Source <a href="https://github.com/SAFSDEV" alt="SAFSDEV Project Page" title="SAFSDEV Project Page">SAFSDEV Project</a> on <a href="https://github.com/" alt="GitHub Home Page" title="GitHub Home Page">GitHub</a>.
</footer>
</body></html>
