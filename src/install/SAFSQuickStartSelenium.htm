<html>
<head>
<title>SAFS Selenium Quick Start</title>
<style>
.indicationSE{
	color:gray;
	background:lightgray;
	padding:0px 5px;
	border-radius:8px;
}
.indicationSE2{
	color:sienna;
	background:wheat;
	padding:0px 5px;
	border-radius:8px;
}
.indicationSeleniumEngine{
	color:blue;
	font-style:italic;
	//background:lightblue;
}
.explain{
	font-size:80%;
	font-style:italic;
	background:Silver;
}
.centeredImage{
	border: 0;
	width: 600px;
	height: 400px;
	display: block;
	margin-left: auto;
    margin-right: auto;
}
</style>
</head>
<body><a name="_top"/>
<center><H1>SAFS Selenium Quick Start<br>
for Windows</H1>
<small>Updated: 2015.10.09</small></center>
<hr>
<b>Authors:</b>
<ul>Lei Wang, Carl Nagle
</ul>
<p>
<b>Copyright (C) SAS Institute</b><br>
<a href="http://www.opensource.org/licenses/gpl-license.php" target="reference">General Public License</a>: http://www.opensource.org/licenses/gpl-license.php
<hr>
<p>
Be sure to check the latest <a href="http://safsdev.sourceforge.net/WhatsNewInSAFS.htm" target="_blank" title="Whats New In SAFS Document">Whats New In SAFS</a> doc for the latest updates on SAFS and Selenium Support!
<p>
This tutorial intends to help you run SAFS tests with the <span class="indicationSeleniumEngine"><span class="indicationSeleniumEngine">SAFS Selenium WebDriver Engine</span></span>.
<br>(Use of the deprecated SAFS Engine for Selenium 1.x--before WebDriver--is highly discouraged.)
<p>
The <span class="indicationSeleniumEngine">SAFS Selenium WebDriver Engine</span> is part of:
<p><ul>
    <li><a href="https://github.com/SAFSDEV/Core/releases" title="SAFS Win Release on GitHub">GitHub SAFS Win Release</a>,
</ul>
<p>
This document supposes the installation directory:
<p><ul>
    <li>"<b>C:\SAFS</b>"
</ul><p>
See the online version of this doc <a href="http://safsdev.sourceforge.net/selenium/doc/SAFSQuickStartSelenium.htm">with images</a>.
<p>
<b>Prerequisites:</b></p>
<ol>
	<li>Installation:
	<p><ul>
		<li><b>SAFS for Windows</b>
		<p><ol>
			<li><a href="https://github.com/SAFSDEV/Core/releases" target="_blank"
			    title="SAFS Win Release on GitHub">Latest SAFS <b>Release</b> for Windows</a>
				<ul>
					<li>Windows 7
					<li>FireFox 33, or later
				</ul>
			<p>
			<li><a href="https://github.com/SAFSDEV/UpdateSite/releases/tag/safs"
			    target="_blank" title="SAFS Win Updates on GitHub">Latest SAFS <b>Update</b> for Windows</a>
				<ul>
					<li>Windows 7
					<li>FireFox 33, or later
				</ul>
		</ol>
	</ul>
	<p>
	<li>Check Steps:
	<p>
	Make sure you have the latest SAFS on your machine (see above).
	<p>
	Next, verify that the following 3rd-party jars (among others) are in folder C:\<b>SAFS\lib</b>:
	<ul>
		<li>selenium-server-standalone-2.47.1.jar (or later)
		<li>SeInterpreter.jar
		<li>safsselenium.jar
	</ul>
	<p>
	Finally, make sure that these jars are added to environment variable 'CLASSPATH':<br>
	(Make sure any earlier versions of the selenium-server-standalone JAR(s) are removed from the CLASSPATH:)
	<p><ul>
		<li><b>%STAFDIR%</b>\bin\JSTAF.jar
		<li>%SAFSDIR%\lib\safsselenium.jar
		<li>%SAFSDIR%\lib\selenium-server-standalone-2.47.1.jar (or later)
	</ul>
</ol>

<p><hr>
<small>Go to:
<a href="#_top">Top</a>,
<a href="#step2">Use Process Container</a>,
<a href="#step3">Run SAFS Test with Selenium</a>
</small>
<p>
<b>Start from "SAFS Selenium sample"</b>
<p>
<ul>The test script, "SAFS Selenium sample", intends to:
    <p><ol>
    <li>Open an IE/FireFox browser to Google
    <li>Verify the existence of some components
    <li>Input some characters on a Google search window
    <li>Click the "Search" button to get the results
    <li>Close the browser and exit.
    </ol>
</ul>
<p>
<a name="step1"/>
<p><b>1.&nbsp;&nbsp;&nbsp;The structure of "SAFS Selenium sample" project</b><br>
<ul>
<p>
Goto folder C:\<b>SAFS\samples\Selenium2.0</b>
<p>
This folder is the ProjectRoot defined in the section SAFS_PROJECT of <a href="#configfile">configuration file</a>. The folder will contain files/folders as below.
</p>

<table>
	<tr><td>SafsDevTest.ini							</td> <td>--- Test configuration file</td></tr>
	<tr><td>test.ini  								</td> <td>--- Default configuration file</td></tr>
	<tr><td>testSele.bat     						</td> <td>--- Batch to Run test script</td></tr>
	<tr><td>runSE2ProcessContainer.bat				</td> <td>--- Batch to Run the WebDriver Processor Container</td></tr>
	<tr><td>Datapool\google.map 					</td> <td>--- Application map file</td></tr>
	<tr><td>Datapool\SafsDevTest.CDD 				</td> <td>--- Test Cycle file</td></tr>
	<tr><td>Datapool\KeywordHtmlTest.STD 			</td> <td>--- Test Suite file</td></tr>
	<tr><td>Datapool\SeleniumEditBoxTest.SDD 		</td> <td>--- Test Step file</td></tr>
	<tr><td>Datapool\Bench 							</td> <td>--- Folder containing bench files</td></tr>
	<tr><td>Datapool\Dif 							</td> <td>--- Folder containing diff files</td></tr>
	<tr><td>Datapool\Logs 							</td> <td>--- Folder containing SAFS logs</td></tr>
	<tr><td>Datapool\Runtime 						</td> <td>--- Folder</td></tr>
	<tr><td>Datapool\Test 							</td> <td>--- Folder containing files generated during test.</td></tr>
	<tr><td>doc\ 							        </td> <td>--- Folder of documentation</td></tr>
	<tr><td>extra\ 							        </td> <td>--- Folder of dependencies</td></tr>
</table>
<p>

<a name="configfile"/>
<li><b>SafsDevTest.ini</b>
<p>This is a <a
href="http://safsdev.sourceforge.net/sqabasic2000/JSAFSFrameworkContent.htm#configfile">
configuration file</a> that contains various information, which tells SAFS where and how to
load user's test scripts, what engine to use, and the configuration about the engine etc.</p>
<p>
------------------------------------------------------------------
<pre>
[SAFS_DRIVER]
DriverRoot="C:\SAFS"

[SAFS_PROJECT]
ProjectRoot="C:\safs\samples\Selenium2.0"

[SAFS_TEST]
TestName="SafsDevTest"
TestLevel="Cycle"
CycleSeparator=","
CycleLogName="SafsDevTest.cycle"
CycleLogMode="TEXTLOG|XMLLOG|CONSOLELOG"

[SAFS_SELENIUM]
AUTOLAUNCH=TRUE
GATEWAYHOST=your.gateway
GATEWAYPORT=80
HOOK=org.safs.selenium.webdriver.SeleniumHook
BROWSER="firefox"

[SAFS_ENGINES]
First=org.safs.tools.engines.SAFSSELENIUM
</pre>
------------------------------------------------------------------
<br>
<b>Note:</b>
<ul>
<li>About gateway<br>
	If you need a gateway to access internet, please modify the folloing 2 settings:
	<ul>
	<li>GATEWAYHOST=your.gateway
	<li>GATEWAYPORT=80
	</ul>
	If you do not use a gateway, please add semi-colon ; before these 2 settings to make them comments.
	<ul>
	<li>;GATEWAYHOST=no.gateway
	<li>;GATEWAYPORT=80
	</ul>
</ul>
<li><b>testSele.bat</b>
<p>
After setting the %CLASSPATH%, there is only one command line as shown below. <a
href="http://safsdev.sourceforge.net/sqabasic2000/JSAFSFrameworkContent.htm#driveroptions">SAFSDRIVER
Command Line</a> takes SafsDevTest.ini as its project configuration file, launches the Selenium Engine and runs each step defined .CDD, .STD, .SDD files.
<p>
<ul><b>%SAFSDIR%</b>\jre\bin\java -Dsafs.project.config=SafsDevTest.ini <b>org.safs.tools.drivers.SAFSDRIVER</b></ul>
<p>

<li><b>runSE2ProcessContainer.bat</b>
<p>
After setting the %CLASSPATH%, there is only one command line as sown below. It takes (initially missing) se2processcontainer.ini as its project configuration file and launches
the WebDriver Process Container:
<p>
<ul><b>%SAFSDIR%</b>\jre\bin\java -Dsafs.project.config=se2processcontainer.ini <b>org.safs.selenium.spc.WDSPC</b></ul>
<p>

<li><b>SafsDevTest.CDD, KeywordHtmlTest.STD, SeleniumEditBoxTest.SDD</b>
<p>
They are test tables containing test records, refer to
<a href="http://safsdev.sourceforge.net/DataDrivenTestAutomationFrameworks.htm#AutomationFrameworkWorkflow">Automation Workflow</a> for details.
<p>

<p>
<li><b>google.map </b>
<p>
This is an <a
href="http://safsdev.sourceforge.net/sqabasic2000/CreateAppMap.htm">application
map</a> file.&nbsp; It contains the <a
href="http://safsdev.sourceforge.net/sqabasic2000/SAFSComponentRecognition.htm">Recognition
Strings</a> of the GUI components of Google Search page.
<p>

<p>
<b>How do I get/specify the Recognition Strings for Selenium WebDriver? </b>
		<ol type="I">
			Refer to:
			<ul>
			<li><a href="http://safsdev.sourceforge.net/doc/org/safs/selenium/webdriver/lib/SearchObject.html" target="_blank" title="SAFS Selenium Recognition Strings Info">SAFS Selenium Recognition Strings</a>
			<li><a href="http://docs.seleniumhq.org/docs/appendix_locating_techniques.jsp">Selenium Object Locating Technique</a>
			<li><a href="Xpath_Css_selenium_Locators_table_1_0_2.pdf">XPATH CSS Locators Table</a>
			</ul>
			<p>
			<li>How to specify Recognition String?
			<p>
				<span class="explain">If equal sign (=) exists in the id, name, XPATH, CSS etc. expression, you need to escape it by backslash (<b>\</b>)</span><br>
				<ol type="a">
					<li><b>Use component's attributes to create RS</b>, such as  id, name, class etc.
					    <p>
						<ul>
							<li>Unique attribute: If you use id or name, as they are unqiue for an element on a page,
								you can simply specify RS as "id=xxx", "name=xxx".
							<li>Non-unique attribute: If you use other attributes, to locate an element you may need
							    more than 1 attribute to specify RS, such as "attr1=xxx;attr2=xxx;attr3=xxx",
								attributes are separated by semi-comma(;)
						</ul>
					<p>
					<li><b>Use XPATH or CSS</b> to specify RS as "xpath=xxx" or "css=xxx".
					    <p>
						Take the <a href="https://www.google.com">Google</a> page as example:<br>
						<p>
						<ul>
						<li>To specify the "Body" element
							<ul>
							<li>By XPATH: "xpath=/html/body"
							<li>By CSS:	"css=body"
							</ul>
						<p>
						<li>To specify the "Search Button" element
							<ul>
							<li>By XPATH: "xpath=//input[contains(@jsaction,'sf.c')]", or "xpath=//input[@jsaction\='sf.chk')]"
							<li>By CSS:	"css=input[jsaction*='sf.c']" or "css=input[jsaction\='sf.chk']"
							</ul>
						</ul>
				</ol>
			<BR>
			<li>How to get the element's attributes?
			    <p>
				<ul>
					You can use browser to get them. Here, FireFox will be used to illustrate, it is quite similliar for IE.
					<p><li>Open the FireBug by clicking menu "Tools->Web Developper->Firebug->Open Firebug", or simply press "F12"
						<img class="centeredImage" src="images/openFireBug.png" alt="Open FireBug"/>
					<p><li>Switch to 'HTML' View by clicking the 'HTML' tab in the left side of Firebug.
						<img class="centeredImage" src="images/switchHtmView.png" alt="Switch to HTML View"/>
					<p><li>Search a component. In the right side of Firebug, there is an editbox where a string can be filled to find a compoent.
						For example, we try to find the Google's Input search box, as we know its tag name is 'input', we write 'input' in the
						editbox, a popup menu will be shown, we can click the 'Next' button to locate the html component with tagname as 'input'
						in the 'HTML' view of Firebug.
						<img class="centeredImage" src="images/searchComponent.png" alt="Search Component"/>
					<p><li>Highlight a component. In the 'HTML' view of Firebug, if the mouse hovers on a component, that component will be
						highlighted on the page so that you will know if this is what you want or not.
						<img class="centeredImage" src="images/highlightComponent.png" alt="Highlight Component"/>
					<p><li>Look at the componet in the 'HTML' view, we can see all attributes.
				</ul>
			<p>
			<li>Store the Recognition String into map file.<br>
				If you specify "id=lst-ib" for the search input box of Google page, you can name it as EditBox and store
				<b>EditBox="id=lst-ib"</b> in the map file so that 'EditBox' can represent the Google's Input search
				box in the future test.
			<p>
			<li><b>The quickest way to get the Recognition String.</b><br>
			    If you have the <a href="http://docs.seleniumhq.org/projects/ide/" target="_blank" title="Selenium IDE for Record and Playback">Selenium IDE</a> installed use it to record a script, then in the IDE,
				the recorded steps will be shown under the tab "Table"; In the column "Target" the "Recognition String" will
				be listed there. Normally it can be used by SeleniumPlus directly,
				<span class="explain">But if the string is XPATH, you need to add prefix "XPATH="; If equal sign (=) exists in the id, name, XPATH, CSS etc. expression, you need to escape it by backslash (<b>\</b>)</span><br>
				IDE recorded table, refer to picture <img class="centeredImage" src="images/SeleniumIDERecord.png" alt="Selenium IDE Record Recognition String"/>
		</ol>
</ul>
<p>
<hr
<a name="step2"/>
<small>Go to:
<a href="#_top">Top</a>,
<a href="#step1">The structure of "SAFS Selenium sample" project</a>,
<a href="#step3">Run SAFS Test with Selenium</a>,
</small><br>
<p>
<b>2.&nbsp;&nbsp;&nbsp;Use Process Container</b><br>
<p><ul>
The <a href="http://safsdev.sourceforge.net/selenium/doc/UsingSeleniumProcessContainer.html" target="_blank" title="">Selenium Process Container</a> is a SAFS test tool used to investigate application components and properties and help build the application Map. It can drill down a chosen web page and generate the Recognition Strings for each GUI component on the page.
</ul>
<p>
<hr>
<a name="step3"/>
<small>Go to:
<a href="#_top">Top</a>,
<a href="#step1">The structure of "SAFS Selenium sample" project</a>,
<a href="#step2">Use Process Container</a>,
</small>
<p>
<b>3.&nbsp;&nbsp;&nbsp;Run SAFS Test with Selenium</b><br>
<p><ul>
Double-click <i>testSele.bat</i> to run the SAFS Test.</a>.
<p>
When running testSele.bat:
<p><ol>
    <li>the console below should appear
    <li>SAFS Selenium will open a browser containing the Google home page
    <li>input some characters, and press the Enter key automatically.
</ol>
<p>
The log file <b><i>SafsDevTest.cycle.txt</i></b> should be output into the
<i>C:\SAFS\samples\Selenium2.0\Datapool\Logs</i> directory.<br>
<p>
<img class="centeredImage" src="images/QuickStartSelenium_SAFSConsole.png" alt="SAFS Selenium Console"/>
<p>
</ul>
<hr>
<pre>
Carl Nagle, <a href="http://www.sas.com"  >SAS</a>
Project Lead, <a href="https://github.com/safsdev"  >SAFSDEV</a>
Subscribe to appropriate <a href="http://safsdev.freeforums.net" alt="Go to Support Forums">Support Forums</a> to review support archives and ask questons.
</pre>
<p>
</body></html>
