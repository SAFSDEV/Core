
/******************************************************************************
 * FPSpread.java
 *
 * Copyright (c) by SAS Institute Inc., Cary, NC 27513
 * General Public License: http://www.opensource.org/licenses/gpl-license.php
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   FPSpreadFunctions.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaComponentModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe FPSpreadFunctions.xml XSLJavaComponentModel.xsl -o FPSpread.java
 *
 ******************************************************************************/ 
package org.safs.model.components;

import org.safs.model.commands.FPSpreadFunctions;
import org.safs.model.ComponentFunction;
import org.safs.model.components.UIComponent;
import org.safs.model.StepTestTable;

public class FPSpread extends GenericObject {

    /*****************
    Constructor 

    Create an instance of pseudo-component representing 
    a specific component in a specific window.
    
    @param window  Optional:NO 
           Specifies which Window this component is 'in'.
    @param compname Optional:NO 
           Specifies the AppMap name of the component in the Window.
    ****************/
    public FPSpread(Window window, String compname) {

        super(window, compname);
    }

    /*****************
    Constructor 

    Create an instance of pseudo-component representing 
    a specific component in a specific window.
    
    This convenience routine will create the requisite Window component.
    
    @param winname  Optional:NO 
           Specifies the AppMap name of the window.
    @param compname Optional:NO 
           Specifies the AppMap name of the component in the Window.
    ****************/
    public FPSpread(String winname, String compname) {

        this(new Window(winname), compname);
    }

    protected FPSpread(String compname) {

        super(compname);
    }



    /*********** <pre> 
             Capture the grid data to the specified file.  For now,
	     it can only be used to capture all of the grid data.
              
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param capturedFile  Optional:NO 
             The name of the file used to save the captured data.
              
     **********/
    public ComponentFunction captureRangeToFile(String capturedFile ) {

        if ( capturedFile == null ) throw new IllegalArgumentException ( "captureRangeToFile.capturedFile = null");
        return FPSpreadFunctions.captureRangeToFile(getWindow().getName(), getName(), capturedFile);
    }

    /*********** <pre> 
             Capture the grid data to the specified file.  For now,
	     it can only be used to capture all of the grid data.
              
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param capturedFile  Optional:NO 
             The name of the file used to save the captured data.
              
     **********/
    public void captureRangeToFile(StepTestTable table, String capturedFile ) {

        if ( table == null ) throw new IllegalArgumentException ( "captureRangeToFile.table = null");

        if ( capturedFile == null ) throw new IllegalArgumentException ( "captureRangeToFile.capturedFile = null");
        table.add( FPSpreadFunctions.captureRangeToFile(getWindow().getName(), getName(), capturedFile));
    }

    /*********** <pre> 
                 Attempts to perform a single click on a table cell.
               
                 The cell to click is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1. 
		 The row headers, whether visible or not, are considered
		 column 0.  The column headers, whether visible or not,
		 are considered row 0.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param row  Optional:YES  DefaultVal: 
             The 1-based logical row to click.
              
     @param col  Optional:YES  DefaultVal: 
             The 1-based logical col to click.
              
     **********/
    public ComponentFunction clickCell(String row, String col ) {

        return FPSpreadFunctions.clickCell(getWindow().getName(), getName(), row, col);
    }

    /*********** <pre> 
                 Attempts to perform a single click on a table cell.
               
                 The cell to click is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1. 
		 The row headers, whether visible or not, are considered
		 column 0.  The column headers, whether visible or not,
		 are considered row 0.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param row  Optional:YES  DefaultVal: 
             The 1-based logical row to click.
              
     @param col  Optional:YES  DefaultVal: 
             The 1-based logical col to click.
              
     **********/
    public void clickCell(StepTestTable table, String row, String col ) {

        if ( table == null ) throw new IllegalArgumentException ( "clickCell.table = null");

        table.add( FPSpreadFunctions.clickCell(getWindow().getName(), getName(), row, col));
    }

    /*********** <pre> 
                 Attempts to perform a single click on a table cell.
               
                 The cell to click is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1. 
		 The row headers, whether visible or not, are considered
		 column 0.  The column headers, whether visible or not,
		 are considered row 0.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         row -- Optional:YES  DefaultVal: 
             The 1-based logical row to click.
              <BR/>         col -- Optional:YES  DefaultVal: 
             The 1-based logical col to click.
              
    </UL>

     **********/
    public ComponentFunction clickCell(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "clickCell.parameters = null");
        return FPSpreadFunctions.clickCell(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Attempts to perform a single click on a table cell.
               
                 The cell to click is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1. 
		 The row headers, whether visible or not, are considered
		 column 0.  The column headers, whether visible or not,
		 are considered row 0.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         row -- Optional:YES  DefaultVal: 
             The 1-based logical row to click.
              <BR/>         col -- Optional:YES  DefaultVal: 
             The 1-based logical col to click.
              
    </UL>

     **********/
    public void clickCell(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "clickCell.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "clickCell.parameters = null");
        table.add( FPSpreadFunctions.clickCell(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Attempts to perform a single Ctrl+Click on a table cell.
               
                 The cell to click is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1. 
		 The row headers, whether visible or not, are considered
		 column 0.  The column headers, whether visible or not,
		 are considered row 0.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param row  Optional:YES  DefaultVal: 
             The 1-based logical row to Ctrl+Click.
              
     @param col  Optional:YES  DefaultVal: 
             The 1-based logical col to Ctrl+Click.
              
     **********/
    public ComponentFunction ctrlClickCell(String row, String col ) {

        return FPSpreadFunctions.ctrlClickCell(getWindow().getName(), getName(), row, col);
    }

    /*********** <pre> 
                 Attempts to perform a single Ctrl+Click on a table cell.
               
                 The cell to click is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1. 
		 The row headers, whether visible or not, are considered
		 column 0.  The column headers, whether visible or not,
		 are considered row 0.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param row  Optional:YES  DefaultVal: 
             The 1-based logical row to Ctrl+Click.
              
     @param col  Optional:YES  DefaultVal: 
             The 1-based logical col to Ctrl+Click.
              
     **********/
    public void ctrlClickCell(StepTestTable table, String row, String col ) {

        if ( table == null ) throw new IllegalArgumentException ( "ctrlClickCell.table = null");

        table.add( FPSpreadFunctions.ctrlClickCell(getWindow().getName(), getName(), row, col));
    }

    /*********** <pre> 
                 Attempts to perform a single Ctrl+Click on a table cell.
               
                 The cell to click is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1. 
		 The row headers, whether visible or not, are considered
		 column 0.  The column headers, whether visible or not,
		 are considered row 0.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         row -- Optional:YES  DefaultVal: 
             The 1-based logical row to Ctrl+Click.
              <BR/>         col -- Optional:YES  DefaultVal: 
             The 1-based logical col to Ctrl+Click.
              
    </UL>

     **********/
    public ComponentFunction ctrlClickCell(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "ctrlClickCell.parameters = null");
        return FPSpreadFunctions.ctrlClickCell(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Attempts to perform a single Ctrl+Click on a table cell.
               
                 The cell to click is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1. 
		 The row headers, whether visible or not, are considered
		 column 0.  The column headers, whether visible or not,
		 are considered row 0.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         row -- Optional:YES  DefaultVal: 
             The 1-based logical row to Ctrl+Click.
              <BR/>         col -- Optional:YES  DefaultVal: 
             The 1-based logical col to Ctrl+Click.
              
    </UL>

     **********/
    public void ctrlClickCell(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "ctrlClickCell.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "ctrlClickCell.parameters = null");
        table.add( FPSpreadFunctions.ctrlClickCell(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Attempts to perform a double click on a table cell.
              
                 The cell to double click is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1.
		 The row headers, whether visible or not, are considered
		 column 0.  The column headers, whether visible or not,
		 are considered row 0.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param row  Optional:YES  DefaultVal: 
             The 1-based logical row to double click.
              
     @param col  Optional:YES  DefaultVal: 
             The 1-based logical col to double click.
              
     **********/
    public ComponentFunction doubleClickCell(String row, String col ) {

        return FPSpreadFunctions.doubleClickCell(getWindow().getName(), getName(), row, col);
    }

    /*********** <pre> 
                 Attempts to perform a double click on a table cell.
              
                 The cell to double click is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1.
		 The row headers, whether visible or not, are considered
		 column 0.  The column headers, whether visible or not,
		 are considered row 0.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param row  Optional:YES  DefaultVal: 
             The 1-based logical row to double click.
              
     @param col  Optional:YES  DefaultVal: 
             The 1-based logical col to double click.
              
     **********/
    public void doubleClickCell(StepTestTable table, String row, String col ) {

        if ( table == null ) throw new IllegalArgumentException ( "doubleClickCell.table = null");

        table.add( FPSpreadFunctions.doubleClickCell(getWindow().getName(), getName(), row, col));
    }

    /*********** <pre> 
                 Attempts to perform a double click on a table cell.
              
                 The cell to double click is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1.
		 The row headers, whether visible or not, are considered
		 column 0.  The column headers, whether visible or not,
		 are considered row 0.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         row -- Optional:YES  DefaultVal: 
             The 1-based logical row to double click.
              <BR/>         col -- Optional:YES  DefaultVal: 
             The 1-based logical col to double click.
              
    </UL>

     **********/
    public ComponentFunction doubleClickCell(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "doubleClickCell.parameters = null");
        return FPSpreadFunctions.doubleClickCell(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Attempts to perform a double click on a table cell.
              
                 The cell to double click is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1.
		 The row headers, whether visible or not, are considered
		 column 0.  The column headers, whether visible or not,
		 are considered row 0.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         row -- Optional:YES  DefaultVal: 
             The 1-based logical row to double click.
              <BR/>         col -- Optional:YES  DefaultVal: 
             The 1-based logical col to double click.
              
    </UL>

     **********/
    public void doubleClickCell(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "doubleClickCell.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "doubleClickCell.parameters = null");
        table.add( FPSpreadFunctions.doubleClickCell(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
             Search specified columns for the specified text.  Assign the
	     matching row number to the given variable.
              
	     Multiple (column, search text) pairs can be used as parameters
	     to find the matching row.

             The search column and the search text parameters should have
	     the same number of parameters and are expected to work in
	     parallel (the first search text is looked for in the first
	     column listed).

	     The column name and search text parameters, if more than one,
	     use the delimiter specified to show the separation in the string.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param rowVarName  Optional:NO 
             The name of the variable to store the row number into.
              
     @param startingRow  Optional:NO 
             The row to use to begin the search.  Defaults to row 1.
              
     @param searchColumns  Optional:NO  DefaultVal: 
             The string of column names where you want to search.
              
     @param searchText  Optional:YES  DefaultVal: 
             The string of search strings used to search in each specified
	     column names.
              
     @param dELIMITER  Optional:NO  DefaultVal: 
             Delimiter used by the search columns and search text to separate
	     the different columns/text.
              
     **********/
    public ComponentFunction findRowNumber(String rowVarName, String startingRow, String searchColumns, String searchText, String dELIMITER ) {

        if ( dELIMITER == null ) throw new IllegalArgumentException ( "findRowNumber.dELIMITER = null");
        if ( rowVarName == null ) throw new IllegalArgumentException ( "findRowNumber.rowVarName = null");
        if ( searchColumns == null ) throw new IllegalArgumentException ( "findRowNumber.searchColumns = null");
        if ( startingRow == null ) throw new IllegalArgumentException ( "findRowNumber.startingRow = null");
        return FPSpreadFunctions.findRowNumber(getWindow().getName(), getName(), rowVarName, startingRow, searchColumns, searchText, dELIMITER);
    }

    /*********** <pre> 
             Search specified columns for the specified text.  Assign the
	     matching row number to the given variable.
              
	     Multiple (column, search text) pairs can be used as parameters
	     to find the matching row.

             The search column and the search text parameters should have
	     the same number of parameters and are expected to work in
	     parallel (the first search text is looked for in the first
	     column listed).

	     The column name and search text parameters, if more than one,
	     use the delimiter specified to show the separation in the string.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param rowVarName  Optional:NO 
             The name of the variable to store the row number into.
              
     @param startingRow  Optional:NO 
             The row to use to begin the search.  Defaults to row 1.
              
     @param searchColumns  Optional:NO  DefaultVal: 
             The string of column names where you want to search.
              
     @param searchText  Optional:YES  DefaultVal: 
             The string of search strings used to search in each specified
	     column names.
              
     @param dELIMITER  Optional:NO  DefaultVal: 
             Delimiter used by the search columns and search text to separate
	     the different columns/text.
              
     **********/
    public void findRowNumber(StepTestTable table, String rowVarName, String startingRow, String searchColumns, String searchText, String dELIMITER ) {

        if ( table == null ) throw new IllegalArgumentException ( "findRowNumber.table = null");

        if ( dELIMITER == null ) throw new IllegalArgumentException ( "findRowNumber.dELIMITER = null");
        if ( rowVarName == null ) throw new IllegalArgumentException ( "findRowNumber.rowVarName = null");
        if ( searchColumns == null ) throw new IllegalArgumentException ( "findRowNumber.searchColumns = null");
        if ( startingRow == null ) throw new IllegalArgumentException ( "findRowNumber.startingRow = null");
        table.add( FPSpreadFunctions.findRowNumber(getWindow().getName(), getName(), rowVarName, startingRow, searchColumns, searchText, dELIMITER));
    }

    /*********** <pre> 
             Search specified columns for the specified text.  Assign the
	     matching row number to the given variable.
              
	     Multiple (column, search text) pairs can be used as parameters
	     to find the matching row.

             The search column and the search text parameters should have
	     the same number of parameters and are expected to work in
	     parallel (the first search text is looked for in the first
	     column listed).

	     The column name and search text parameters, if more than one,
	     use the delimiter specified to show the separation in the string.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         rowVarName -- Optional:NO 
             The name of the variable to store the row number into.
              <BR/>         startingRow -- Optional:NO 
             The row to use to begin the search.  Defaults to row 1.
              <BR/>         searchColumns -- Optional:NO  DefaultVal: 
             The string of column names where you want to search.
              <BR/>         searchText -- Optional:YES  DefaultVal: 
             The string of search strings used to search in each specified
	     column names.
              <BR/>         dELIMITER -- Optional:NO  DefaultVal: 
             Delimiter used by the search columns and search text to separate
	     the different columns/text.
              
    </UL>

     **********/
    public ComponentFunction findRowNumber(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "findRowNumber.parameters = null");
        return FPSpreadFunctions.findRowNumber(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
             Search specified columns for the specified text.  Assign the
	     matching row number to the given variable.
              
	     Multiple (column, search text) pairs can be used as parameters
	     to find the matching row.

             The search column and the search text parameters should have
	     the same number of parameters and are expected to work in
	     parallel (the first search text is looked for in the first
	     column listed).

	     The column name and search text parameters, if more than one,
	     use the delimiter specified to show the separation in the string.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         rowVarName -- Optional:NO 
             The name of the variable to store the row number into.
              <BR/>         startingRow -- Optional:NO 
             The row to use to begin the search.  Defaults to row 1.
              <BR/>         searchColumns -- Optional:NO  DefaultVal: 
             The string of column names where you want to search.
              <BR/>         searchText -- Optional:YES  DefaultVal: 
             The string of search strings used to search in each specified
	     column names.
              <BR/>         dELIMITER -- Optional:NO  DefaultVal: 
             Delimiter used by the search columns and search text to separate
	     the different columns/text.
              
    </UL>

     **********/
    public void findRowNumber(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "findRowNumber.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "findRowNumber.parameters = null");
        table.add( FPSpreadFunctions.findRowNumber(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Attempts to perform a single right click on a table cell.
               
                 The cell to click is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1. 
		 The row headers, whether visible or not, are considered
		 column 0.  The column headers, whether visible or not,
		 are considered row 0.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param row  Optional:YES  DefaultVal: 
             The 1-based logical row to right click.
              
     @param col  Optional:YES  DefaultVal: 
             The 1-based logical col to right click.
              
     **********/
    public ComponentFunction rightClickCell(String row, String col ) {

        return FPSpreadFunctions.rightClickCell(getWindow().getName(), getName(), row, col);
    }

    /*********** <pre> 
                 Attempts to perform a single right click on a table cell.
               
                 The cell to click is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1. 
		 The row headers, whether visible or not, are considered
		 column 0.  The column headers, whether visible or not,
		 are considered row 0.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param row  Optional:YES  DefaultVal: 
             The 1-based logical row to right click.
              
     @param col  Optional:YES  DefaultVal: 
             The 1-based logical col to right click.
              
     **********/
    public void rightClickCell(StepTestTable table, String row, String col ) {

        if ( table == null ) throw new IllegalArgumentException ( "rightClickCell.table = null");

        table.add( FPSpreadFunctions.rightClickCell(getWindow().getName(), getName(), row, col));
    }

    /*********** <pre> 
                 Attempts to perform a single right click on a table cell.
               
                 The cell to click is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1. 
		 The row headers, whether visible or not, are considered
		 column 0.  The column headers, whether visible or not,
		 are considered row 0.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         row -- Optional:YES  DefaultVal: 
             The 1-based logical row to right click.
              <BR/>         col -- Optional:YES  DefaultVal: 
             The 1-based logical col to right click.
              
    </UL>

     **********/
    public ComponentFunction rightClickCell(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "rightClickCell.parameters = null");
        return FPSpreadFunctions.rightClickCell(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Attempts to perform a single right click on a table cell.
               
                 The cell to click is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1. 
		 The row headers, whether visible or not, are considered
		 column 0.  The column headers, whether visible or not,
		 are considered row 0.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         row -- Optional:YES  DefaultVal: 
             The 1-based logical row to right click.
              <BR/>         col -- Optional:YES  DefaultVal: 
             The 1-based logical col to right click.
              
    </UL>

     **********/
    public void rightClickCell(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "rightClickCell.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "rightClickCell.parameters = null");
        table.add( FPSpreadFunctions.rightClickCell(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Attempts to perform a single SHIFT+Click on a table cell.
               
                 The cell to click is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1. 
		 The row headers, whether visible or not, are considered
		 column 0.  The column headers, whether visible or not,
		 are considered row 0.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param row  Optional:YES  DefaultVal: 
             The 1-based logical row to SHIFT+Click.
              
     @param col  Optional:YES  DefaultVal: 
             The 1-based logical col to SHIFT+Click.
              
     **********/
    public ComponentFunction shiftClickCell(String row, String col ) {

        return FPSpreadFunctions.shiftClickCell(getWindow().getName(), getName(), row, col);
    }

    /*********** <pre> 
                 Attempts to perform a single SHIFT+Click on a table cell.
               
                 The cell to click is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1. 
		 The row headers, whether visible or not, are considered
		 column 0.  The column headers, whether visible or not,
		 are considered row 0.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param row  Optional:YES  DefaultVal: 
             The 1-based logical row to SHIFT+Click.
              
     @param col  Optional:YES  DefaultVal: 
             The 1-based logical col to SHIFT+Click.
              
     **********/
    public void shiftClickCell(StepTestTable table, String row, String col ) {

        if ( table == null ) throw new IllegalArgumentException ( "shiftClickCell.table = null");

        table.add( FPSpreadFunctions.shiftClickCell(getWindow().getName(), getName(), row, col));
    }

    /*********** <pre> 
                 Attempts to perform a single SHIFT+Click on a table cell.
               
                 The cell to click is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1. 
		 The row headers, whether visible or not, are considered
		 column 0.  The column headers, whether visible or not,
		 are considered row 0.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         row -- Optional:YES  DefaultVal: 
             The 1-based logical row to SHIFT+Click.
              <BR/>         col -- Optional:YES  DefaultVal: 
             The 1-based logical col to SHIFT+Click.
              
    </UL>

     **********/
    public ComponentFunction shiftClickCell(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "shiftClickCell.parameters = null");
        return FPSpreadFunctions.shiftClickCell(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Attempts to perform a single SHIFT+Click on a table cell.
               
                 The cell to click is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1. 
		 The row headers, whether visible or not, are considered
		 column 0.  The column headers, whether visible or not,
		 are considered row 0.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         row -- Optional:YES  DefaultVal: 
             The 1-based logical row to SHIFT+Click.
              <BR/>         col -- Optional:YES  DefaultVal: 
             The 1-based logical col to SHIFT+Click.
              
    </UL>

     **********/
    public void shiftClickCell(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "shiftClickCell.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "shiftClickCell.parameters = null");
        table.add( FPSpreadFunctions.shiftClickCell(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
             Verify a specific cell's text.
              
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param expectedCellText  Optional:NO 
             The expected text value of the specified cell.
              
     @param row  Optional:YES  DefaultVal: 
             The 1-based logical row to verify.
              
     @param col  Optional:YES  DefaultVal: 
             The 1-based logical col to verify.
              
     **********/
    public ComponentFunction verifyCellText(String expectedCellText, String row, String col ) {

        if ( expectedCellText == null ) throw new IllegalArgumentException ( "verifyCellText.expectedCellText = null");
        return FPSpreadFunctions.verifyCellText(getWindow().getName(), getName(), expectedCellText, row, col);
    }

    /*********** <pre> 
             Verify a specific cell's text.
              
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param expectedCellText  Optional:NO 
             The expected text value of the specified cell.
              
     @param row  Optional:YES  DefaultVal: 
             The 1-based logical row to verify.
              
     @param col  Optional:YES  DefaultVal: 
             The 1-based logical col to verify.
              
     **********/
    public void verifyCellText(StepTestTable table, String expectedCellText, String row, String col ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyCellText.table = null");

        if ( expectedCellText == null ) throw new IllegalArgumentException ( "verifyCellText.expectedCellText = null");
        table.add( FPSpreadFunctions.verifyCellText(getWindow().getName(), getName(), expectedCellText, row, col));
    }

    /*********** <pre> 
             Verify a specific cell's text.
              
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         expectedCellText -- Optional:NO 
             The expected text value of the specified cell.
              <BR/>         row -- Optional:YES  DefaultVal: 
             The 1-based logical row to verify.
              <BR/>         col -- Optional:YES  DefaultVal: 
             The 1-based logical col to verify.
              
    </UL>

     **********/
    public ComponentFunction verifyCellText(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyCellText.parameters = null");
        return FPSpreadFunctions.verifyCellText(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
             Verify a specific cell's text.
              
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         expectedCellText -- Optional:NO 
             The expected text value of the specified cell.
              <BR/>         row -- Optional:YES  DefaultVal: 
             The 1-based logical row to verify.
              <BR/>         col -- Optional:YES  DefaultVal: 
             The 1-based logical col to verify.
              
    </UL>

     **********/
    public void verifyCellText(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyCellText.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyCellText.parameters = null");
        table.add( FPSpreadFunctions.verifyCellText(getWindow().getName(), getName(), parameters));
    }

}
