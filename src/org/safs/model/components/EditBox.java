
/******************************************************************************
 * EditBox.java
 *
 * Copyright (c) by SAS Institute Inc., Cary, NC 27513
 * General Public License: http://www.opensource.org/licenses/gpl-license.php
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   EditBoxFunctions.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaComponentModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe EditBoxFunctions.xml XSLJavaComponentModel.xsl -o EditBox.java
 *
 ******************************************************************************/ 
package org.safs.model.components;

import org.safs.model.commands.EditBoxFunctions;
import org.safs.model.ComponentFunction;
import org.safs.model.components.UIComponent;
import org.safs.model.StepTestTable;

public class EditBox extends GenericObject {

    /*****************
    Constructor 

    Create an instance of pseudo-component representing 
    a specific component in a specific window.
    
    @param window  Optional:NO 
           Specifies which Window this component is 'in'.
    @param compname Optional:NO 
           Specifies the AppMap name of the component in the Window.
    ****************/
    public EditBox(Window window, String compname) {

        super(window, compname);
    }

    /*****************
    Constructor 

    Create an instance of pseudo-component representing 
    a specific component in a specific window.
    
    This convenience routine will create the requisite Window component.
    
    @param winname  Optional:NO 
           Specifies the AppMap name of the window.
    @param compname Optional:NO 
           Specifies the AppMap name of the component in the Window.
    ****************/
    public EditBox(String winname, String compname) {

        this(new Window(winname), compname);
    }

    protected EditBox(String compname) {

        super(compname);
    }



    /*********** <pre> 
            Set the text of the editbox
               
                This action sets the text of the editbox.
                It verifies we can read the property, sets the text value and then 
                verifies that the property has been set to that value.
                This routine uses only the literal text provided.  It does not attempt 
                to convert or interpret the text provided as special characters.  To 
                do that, see the SetTextValue command.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Google Android</LI>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:YES  DefaultVal: 
             The text that will be typed into the EditBox.
              
     **********/
    public ComponentFunction setTextCharacters(String textValue ) {

        return EditBoxFunctions.setTextCharacters(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
            Set the text of the editbox
               
                This action sets the text of the editbox.
                It verifies we can read the property, sets the text value and then 
                verifies that the property has been set to that value.
                This routine uses only the literal text provided.  It does not attempt 
                to convert or interpret the text provided as special characters.  To 
                do that, see the SetTextValue command.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Google Android</LI>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:YES  DefaultVal: 
             The text that will be typed into the EditBox.
              
     **********/
    public void setTextCharacters(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "setTextCharacters.table = null");

        table.add( EditBoxFunctions.setTextCharacters(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                Set the text of the editbox
               
                This action sets the text of the editbox.  This version allows the use 
                of special character combinations and substrings to identify specific 
                keyboard keys.  These are the same special characters and interpretation 
                used for Robot's InputKeys command and the Windows Scripting Host.
                
                ~^+%{( are primarily the characters that induce special processing.
                
                The routine verifies we can read the text property, sets the text value 
                and will verify that the property has been set to that value *IF* none 
                of the special characters exist in the provided text value.  If those 
                special characters exist, then no post-set verification will occur.
                
                If you do not want to have any characters converted or interpretted as 
                special characters then you need to use the SetTextCharacters command.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    <LI>OpenQA Selenium</LI>
    <LI>Google Android</LI>
    </UL>

     @param textValue  Optional:YES  DefaultVal: 
                 The text that will be typed into the EditBox and verified.
              
     **********/
    public ComponentFunction setTextValue(String textValue ) {

        return EditBoxFunctions.setTextValue(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                Set the text of the editbox
               
                This action sets the text of the editbox.  This version allows the use 
                of special character combinations and substrings to identify specific 
                keyboard keys.  These are the same special characters and interpretation 
                used for Robot's InputKeys command and the Windows Scripting Host.
                
                ~^+%{( are primarily the characters that induce special processing.
                
                The routine verifies we can read the text property, sets the text value 
                and will verify that the property has been set to that value *IF* none 
                of the special characters exist in the provided text value.  If those 
                special characters exist, then no post-set verification will occur.
                
                If you do not want to have any characters converted or interpretted as 
                special characters then you need to use the SetTextCharacters command.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    <LI>OpenQA Selenium</LI>
    <LI>Google Android</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:YES  DefaultVal: 
                 The text that will be typed into the EditBox and verified.
              
     **********/
    public void setTextValue(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "setTextValue.table = null");

        table.add( EditBoxFunctions.setTextValue(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
            Set the text of the editbox
               
                This action sets the text of the editbox.
                This routine uses only the literal text provided.  It does not attempt 
                to convert or interpret the text provided as special characters.  To 
                do that, see the SetTextValue commands.
                No attempt to verify the EditBox value is performed.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Google Android</LI>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:YES  DefaultVal: 
             The text that will be typed into the EditBox.
              
     **********/
    public ComponentFunction setUnverifiedTextCharacters(String textValue ) {

        return EditBoxFunctions.setUnverifiedTextCharacters(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
            Set the text of the editbox
               
                This action sets the text of the editbox.
                This routine uses only the literal text provided.  It does not attempt 
                to convert or interpret the text provided as special characters.  To 
                do that, see the SetTextValue commands.
                No attempt to verify the EditBox value is performed.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Google Android</LI>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:YES  DefaultVal: 
             The text that will be typed into the EditBox.
              
     **********/
    public void setUnverifiedTextCharacters(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "setUnverifiedTextCharacters.table = null");

        table.add( EditBoxFunctions.setUnverifiedTextCharacters(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                Set the text of the editbox without verification
               
                This action sets the text of the editbox.  This version allows the use 
                of special character combinations and substrings to identify specific 
                keyboard keys.  These are the same special characters and interpretation 
                used for Robot's InputKeys command and the Windows Scripting Host.
                
                The routine does not verify that the property has been set to that 
                value.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    <LI>Google Android</LI>
    </UL>

     @param textValue  Optional:YES  DefaultVal: 
             The text that will be typed into the EditBox.
              
     **********/
    public ComponentFunction setUnverifiedTextValue(String textValue ) {

        return EditBoxFunctions.setUnverifiedTextValue(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                Set the text of the editbox without verification
               
                This action sets the text of the editbox.  This version allows the use 
                of special character combinations and substrings to identify specific 
                keyboard keys.  These are the same special characters and interpretation 
                used for Robot's InputKeys command and the Windows Scripting Host.
                
                The routine does not verify that the property has been set to that 
                value.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    <LI>Google Android</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:YES  DefaultVal: 
             The text that will be typed into the EditBox.
              
     **********/
    public void setUnverifiedTextValue(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "setUnverifiedTextValue.table = null");

        table.add( EditBoxFunctions.setUnverifiedTextValue(getWindow().getName(), getName(), textValue));
    }

}
