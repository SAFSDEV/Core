
/******************************************************************************
 * Database.java
 *
 * Copyright (C) SAS Institute, All rights reserved.
 * General Public License: https://www.gnu.org/licenses/gpl-3.0.en.html
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   DatabaseFunctions.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaComponentModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe DatabaseFunctions.xml XSLJavaComponentModel.xsl -o Database.java
 *
 ******************************************************************************/ 
package org.safs.model.components;

import org.safs.model.commands.DatabaseFunctions;
import org.safs.model.ComponentFunction;
import org.safs.model.components.UIComponent;
import org.safs.model.StepTestTable;

public class Database extends GenericObject {

    /*****************
    Constructor 

    Create an instance of pseudo-component representing 
    a specific component in a specific window.
    
    @param window  Optional:NO 
           Specifies which Window this component is 'in'.
    @param compname Optional:NO 
           Specifies the AppMap name of the component in the Window.
    ****************/
    public Database(Window window, String compname) {

        super(window, compname);
    }

    /*****************
    Constructor 

    Create an instance of pseudo-component representing 
    a specific component in a specific window.
    
    This convenience routine will create the requisite Window component.
    
    @param winname  Optional:NO 
           Specifies the AppMap name of the window.
    @param compname Optional:NO 
           Specifies the AppMap name of the component in the Window.
    ****************/
    public Database(String winname, String compname) {

        this(new Window(winname), compname);
    }

    protected Database(String compname) {

        super(compname);
    }



    /*********** <pre> 
              This routine will copy the contents of one or more DBTable column(s) to a file.
              
                 This routine will export the contents of one or more DBTable column(s) to
                 a delimeted file. If columnDelimiter is omitted, a horizontal tab is used
                 to delimit fields.
                 
                 A data source name [DSN] and Query String is required. You also have to specify
                 a variable to get the status code.  And optionally user id and password (this is
                 because some drivers don't need a user/password).
                 
                 To do: if user id and/or password are not specified, don't include them in the
                 connection string. This would allow the possibility to specify them in the 
                 data source definition.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param fileOut  Optional:NO 
                 Name of the output file. 
              
     @param sQLQuery  Optional:NO 
                 The file will contain the results of the executed Query. The query is NOT validated 
                 by this function.
              
     @param directoryOut  Optional:YES 
                 OPTIONAL parameter. If not specified the file will be stored under the 
                 project "Datapool\Test\" directory.
              
     @param sQLStatus  Optional:NO 
                 A variable which holds the current SQL run status.
              
     @param delimiter  Optional:YES 
                 Optional Delimiter to be used between columns written to file.
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     @param prompt  Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
     **********/
    public ComponentFunction copyDBTableColumnToFile(String dBSourceName, String fileOut, String sQLQuery, String directoryOut, String sQLStatus, String delimiter, String userID, String password, String prompt ) {

        if ( dBSourceName == null ) throw new IllegalArgumentException ( "copyDBTableColumnToFile.dBSourceName = null");
        if ( fileOut == null ) throw new IllegalArgumentException ( "copyDBTableColumnToFile.fileOut = null");
        if ( sQLQuery == null ) throw new IllegalArgumentException ( "copyDBTableColumnToFile.sQLQuery = null");
        if ( sQLStatus == null ) throw new IllegalArgumentException ( "copyDBTableColumnToFile.sQLStatus = null");
        return DatabaseFunctions.copyDBTableColumnToFile(getWindow().getName(), getName(), dBSourceName, fileOut, sQLQuery, directoryOut, sQLStatus, delimiter, userID, password, prompt);
    }

    /*********** <pre> 
              This routine will copy the contents of one or more DBTable column(s) to a file.
              
                 This routine will export the contents of one or more DBTable column(s) to
                 a delimeted file. If columnDelimiter is omitted, a horizontal tab is used
                 to delimit fields.
                 
                 A data source name [DSN] and Query String is required. You also have to specify
                 a variable to get the status code.  And optionally user id and password (this is
                 because some drivers don't need a user/password).
                 
                 To do: if user id and/or password are not specified, don't include them in the
                 connection string. This would allow the possibility to specify them in the 
                 data source definition.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param fileOut  Optional:NO 
                 Name of the output file. 
              
     @param sQLQuery  Optional:NO 
                 The file will contain the results of the executed Query. The query is NOT validated 
                 by this function.
              
     @param directoryOut  Optional:YES 
                 OPTIONAL parameter. If not specified the file will be stored under the 
                 project "Datapool\Test\" directory.
              
     @param sQLStatus  Optional:NO 
                 A variable which holds the current SQL run status.
              
     @param delimiter  Optional:YES 
                 Optional Delimiter to be used between columns written to file.
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     @param prompt  Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
     **********/
    public void copyDBTableColumnToFile(StepTestTable table, String dBSourceName, String fileOut, String sQLQuery, String directoryOut, String sQLStatus, String delimiter, String userID, String password, String prompt ) {

        if ( table == null ) throw new IllegalArgumentException ( "copyDBTableColumnToFile.table = null");

        if ( dBSourceName == null ) throw new IllegalArgumentException ( "copyDBTableColumnToFile.dBSourceName = null");
        if ( fileOut == null ) throw new IllegalArgumentException ( "copyDBTableColumnToFile.fileOut = null");
        if ( sQLQuery == null ) throw new IllegalArgumentException ( "copyDBTableColumnToFile.sQLQuery = null");
        if ( sQLStatus == null ) throw new IllegalArgumentException ( "copyDBTableColumnToFile.sQLStatus = null");
        table.add( DatabaseFunctions.copyDBTableColumnToFile(getWindow().getName(), getName(), dBSourceName, fileOut, sQLQuery, directoryOut, sQLStatus, delimiter, userID, password, prompt));
    }

    /*********** <pre> 
              This routine will copy the contents of one or more DBTable column(s) to a file.
              
                 This routine will export the contents of one or more DBTable column(s) to
                 a delimeted file. If columnDelimiter is omitted, a horizontal tab is used
                 to delimit fields.
                 
                 A data source name [DSN] and Query String is required. You also have to specify
                 a variable to get the status code.  And optionally user id and password (this is
                 because some drivers don't need a user/password).
                 
                 To do: if user id and/or password are not specified, don't include them in the
                 connection string. This would allow the possibility to specify them in the 
                 data source definition.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>         fileOut -- Optional:NO 
                 Name of the output file. 
              <BR/>         sQLQuery -- Optional:NO 
                 The file will contain the results of the executed Query. The query is NOT validated 
                 by this function.
              <BR/>         directoryOut -- Optional:YES 
                 OPTIONAL parameter. If not specified the file will be stored under the 
                 project "Datapool\Test\" directory.
              <BR/>         sQLStatus -- Optional:NO 
                 A variable which holds the current SQL run status.
              <BR/>         delimiter -- Optional:YES 
                 Optional Delimiter to be used between columns written to file.
              <BR/>         userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>         password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              <BR/>         prompt -- Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
    </UL>

     **********/
    public ComponentFunction copyDBTableColumnToFile(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "copyDBTableColumnToFile.parameters = null");
        return DatabaseFunctions.copyDBTableColumnToFile(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
              This routine will copy the contents of one or more DBTable column(s) to a file.
              
                 This routine will export the contents of one or more DBTable column(s) to
                 a delimeted file. If columnDelimiter is omitted, a horizontal tab is used
                 to delimit fields.
                 
                 A data source name [DSN] and Query String is required. You also have to specify
                 a variable to get the status code.  And optionally user id and password (this is
                 because some drivers don't need a user/password).
                 
                 To do: if user id and/or password are not specified, don't include them in the
                 connection string. This would allow the possibility to specify them in the 
                 data source definition.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>         fileOut -- Optional:NO 
                 Name of the output file. 
              <BR/>         sQLQuery -- Optional:NO 
                 The file will contain the results of the executed Query. The query is NOT validated 
                 by this function.
              <BR/>         directoryOut -- Optional:YES 
                 OPTIONAL parameter. If not specified the file will be stored under the 
                 project "Datapool\Test\" directory.
              <BR/>         sQLStatus -- Optional:NO 
                 A variable which holds the current SQL run status.
              <BR/>         delimiter -- Optional:YES 
                 Optional Delimiter to be used between columns written to file.
              <BR/>         userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>         password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              <BR/>         prompt -- Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
    </UL>

     **********/
    public void copyDBTableColumnToFile(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "copyDBTableColumnToFile.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "copyDBTableColumnToFile.parameters = null");
        table.add( DatabaseFunctions.copyDBTableColumnToFile(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
              This routine will copy the contents of a DBTable  to a file.
              
                 This routine will export the contents of a DBTable  to a delimeted file.
                 
                 A data source name [DSN] and Query String is required. You also have to specify
                 a variable to get the status code.  And optionally user id and password (this is
                 because some drivers don't need a user/password).
                 
                 To do: if user id and/or password are not specified, don't include them in the
                 connection string. This would allow the possibility to specify them in the 
                 data source definition.  If no output directory is specified, the result file
		 get saved under "Datapool\Test\".
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param fileOut  Optional:NO 
                 Name of the output file. 
              
     @param dBTableName  Optional:NO 
                 Name of the TABLE to access within the DBSourceName
           
     @param columnCount  Optional:YES 
                 If specified the output file will contain only the number of columns specified.
              
     @param rowCount  Optional:YES 
                 If specified the output file will contain only the number of rows specified. 
              
     @param sQLQuery  Optional:YES 
                 OPTIONAL parameter. If specified, the file will contain the results of the
                 executed Query. The query is NOT validated by this function.
              
     @param delimiter  Optional:YES 
                 OPTIONAL parameter. If not specified the default ',' seperator will be used.
              
     @param directoryOut  Optional:YES 
                 OPTIONAL parameter. If not specified the file will be stored under the 
                 project "Datapool\Test\" directory.
              
     @param sQLStatus  Optional:NO 
                 A variable which holds the current SQL run status.
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     @param prompt  Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
     **********/
    public ComponentFunction copyDBTableToFile(String dBSourceName, String fileOut, String dBTableName, String columnCount, String rowCount, String sQLQuery, String delimiter, String directoryOut, String sQLStatus, String userID, String password, String prompt ) {

        if ( dBSourceName == null ) throw new IllegalArgumentException ( "copyDBTableToFile.dBSourceName = null");
        if ( dBTableName == null ) throw new IllegalArgumentException ( "copyDBTableToFile.dBTableName = null");
        if ( fileOut == null ) throw new IllegalArgumentException ( "copyDBTableToFile.fileOut = null");
        if ( sQLStatus == null ) throw new IllegalArgumentException ( "copyDBTableToFile.sQLStatus = null");
        return DatabaseFunctions.copyDBTableToFile(getWindow().getName(), getName(), dBSourceName, fileOut, dBTableName, columnCount, rowCount, sQLQuery, delimiter, directoryOut, sQLStatus, userID, password, prompt);
    }

    /*********** <pre> 
              This routine will copy the contents of a DBTable  to a file.
              
                 This routine will export the contents of a DBTable  to a delimeted file.
                 
                 A data source name [DSN] and Query String is required. You also have to specify
                 a variable to get the status code.  And optionally user id and password (this is
                 because some drivers don't need a user/password).
                 
                 To do: if user id and/or password are not specified, don't include them in the
                 connection string. This would allow the possibility to specify them in the 
                 data source definition.  If no output directory is specified, the result file
		 get saved under "Datapool\Test\".
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param fileOut  Optional:NO 
                 Name of the output file. 
              
     @param dBTableName  Optional:NO 
                 Name of the TABLE to access within the DBSourceName
           
     @param columnCount  Optional:YES 
                 If specified the output file will contain only the number of columns specified.
              
     @param rowCount  Optional:YES 
                 If specified the output file will contain only the number of rows specified. 
              
     @param sQLQuery  Optional:YES 
                 OPTIONAL parameter. If specified, the file will contain the results of the
                 executed Query. The query is NOT validated by this function.
              
     @param delimiter  Optional:YES 
                 OPTIONAL parameter. If not specified the default ',' seperator will be used.
              
     @param directoryOut  Optional:YES 
                 OPTIONAL parameter. If not specified the file will be stored under the 
                 project "Datapool\Test\" directory.
              
     @param sQLStatus  Optional:NO 
                 A variable which holds the current SQL run status.
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     @param prompt  Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
     **********/
    public void copyDBTableToFile(StepTestTable table, String dBSourceName, String fileOut, String dBTableName, String columnCount, String rowCount, String sQLQuery, String delimiter, String directoryOut, String sQLStatus, String userID, String password, String prompt ) {

        if ( table == null ) throw new IllegalArgumentException ( "copyDBTableToFile.table = null");

        if ( dBSourceName == null ) throw new IllegalArgumentException ( "copyDBTableToFile.dBSourceName = null");
        if ( dBTableName == null ) throw new IllegalArgumentException ( "copyDBTableToFile.dBTableName = null");
        if ( fileOut == null ) throw new IllegalArgumentException ( "copyDBTableToFile.fileOut = null");
        if ( sQLStatus == null ) throw new IllegalArgumentException ( "copyDBTableToFile.sQLStatus = null");
        table.add( DatabaseFunctions.copyDBTableToFile(getWindow().getName(), getName(), dBSourceName, fileOut, dBTableName, columnCount, rowCount, sQLQuery, delimiter, directoryOut, sQLStatus, userID, password, prompt));
    }

    /*********** <pre> 
              This routine will copy the contents of a DBTable  to a file.
              
                 This routine will export the contents of a DBTable  to a delimeted file.
                 
                 A data source name [DSN] and Query String is required. You also have to specify
                 a variable to get the status code.  And optionally user id and password (this is
                 because some drivers don't need a user/password).
                 
                 To do: if user id and/or password are not specified, don't include them in the
                 connection string. This would allow the possibility to specify them in the 
                 data source definition.  If no output directory is specified, the result file
		 get saved under "Datapool\Test\".
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>         fileOut -- Optional:NO 
                 Name of the output file. 
              <BR/>         dBTableName -- Optional:NO 
                 Name of the TABLE to access within the DBSourceName
           <BR/>         columnCount -- Optional:YES 
                 If specified the output file will contain only the number of columns specified.
              <BR/>         rowCount -- Optional:YES 
                 If specified the output file will contain only the number of rows specified. 
              <BR/>         sQLQuery -- Optional:YES 
                 OPTIONAL parameter. If specified, the file will contain the results of the
                 executed Query. The query is NOT validated by this function.
              <BR/>         delimiter -- Optional:YES 
                 OPTIONAL parameter. If not specified the default ',' seperator will be used.
              <BR/>         directoryOut -- Optional:YES 
                 OPTIONAL parameter. If not specified the file will be stored under the 
                 project "Datapool\Test\" directory.
              <BR/>         sQLStatus -- Optional:NO 
                 A variable which holds the current SQL run status.
              <BR/>         userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>         password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              <BR/>         prompt -- Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
    </UL>

     **********/
    public ComponentFunction copyDBTableToFile(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "copyDBTableToFile.parameters = null");
        return DatabaseFunctions.copyDBTableToFile(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
              This routine will copy the contents of a DBTable  to a file.
              
                 This routine will export the contents of a DBTable  to a delimeted file.
                 
                 A data source name [DSN] and Query String is required. You also have to specify
                 a variable to get the status code.  And optionally user id and password (this is
                 because some drivers don't need a user/password).
                 
                 To do: if user id and/or password are not specified, don't include them in the
                 connection string. This would allow the possibility to specify them in the 
                 data source definition.  If no output directory is specified, the result file
		 get saved under "Datapool\Test\".
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>         fileOut -- Optional:NO 
                 Name of the output file. 
              <BR/>         dBTableName -- Optional:NO 
                 Name of the TABLE to access within the DBSourceName
           <BR/>         columnCount -- Optional:YES 
                 If specified the output file will contain only the number of columns specified.
              <BR/>         rowCount -- Optional:YES 
                 If specified the output file will contain only the number of rows specified. 
              <BR/>         sQLQuery -- Optional:YES 
                 OPTIONAL parameter. If specified, the file will contain the results of the
                 executed Query. The query is NOT validated by this function.
              <BR/>         delimiter -- Optional:YES 
                 OPTIONAL parameter. If not specified the default ',' seperator will be used.
              <BR/>         directoryOut -- Optional:YES 
                 OPTIONAL parameter. If not specified the file will be stored under the 
                 project "Datapool\Test\" directory.
              <BR/>         sQLStatus -- Optional:NO 
                 A variable which holds the current SQL run status.
              <BR/>         userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>         password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              <BR/>         prompt -- Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
    </UL>

     **********/
    public void copyDBTableToFile(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "copyDBTableToFile.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "copyDBTableToFile.parameters = null");
        table.add( DatabaseFunctions.copyDBTableToFile(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Deletes records in a database table
              
                 Deletes records in a database table.
                 
                 A table name is required. You also have to specify data source name,
                 and optionally user id and password (this is because some drivers
                 don't need a user/password).
                 
                 To do: if user id and/or password are not specified, don't include
                 them in the connection string. This would allow the possibility
                 to specify them in the data source definition.
                 
                 A query condition can be included, usually it is. It can be any 
                 valid expression allowed by the WHERE clause of the DELETE FROM sentence of the SQL driver
                 you are using. For example: "CliBal > 100000 and CliCat = 'C'". 
                 Including "where" in the expression itself is optional.  It will 
                 be prefixed to the expression if it is not provided.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param dBTableName  Optional:NO 
                 Name of the TABLE to access within the DBSourceName
     @param dBQueryCond  Optional:YES 
                 Expression allowed by the WHERE clause of the DELETE FROM sentence of the SQL driver
              
     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     @param prompt  Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
     **********/
    public ComponentFunction deleteDBTableRecords(String dBTableName, String dBQueryCond, String dBSourceName, String userID, String password, String prompt ) {

        if ( dBSourceName == null ) throw new IllegalArgumentException ( "deleteDBTableRecords.dBSourceName = null");
        if ( dBTableName == null ) throw new IllegalArgumentException ( "deleteDBTableRecords.dBTableName = null");
        return DatabaseFunctions.deleteDBTableRecords(getWindow().getName(), getName(), dBTableName, dBQueryCond, dBSourceName, userID, password, prompt);
    }

    /*********** <pre> 
                 Deletes records in a database table
              
                 Deletes records in a database table.
                 
                 A table name is required. You also have to specify data source name,
                 and optionally user id and password (this is because some drivers
                 don't need a user/password).
                 
                 To do: if user id and/or password are not specified, don't include
                 them in the connection string. This would allow the possibility
                 to specify them in the data source definition.
                 
                 A query condition can be included, usually it is. It can be any 
                 valid expression allowed by the WHERE clause of the DELETE FROM sentence of the SQL driver
                 you are using. For example: "CliBal > 100000 and CliCat = 'C'". 
                 Including "where" in the expression itself is optional.  It will 
                 be prefixed to the expression if it is not provided.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param dBTableName  Optional:NO 
                 Name of the TABLE to access within the DBSourceName
     @param dBQueryCond  Optional:YES 
                 Expression allowed by the WHERE clause of the DELETE FROM sentence of the SQL driver
              
     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     @param prompt  Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
     **********/
    public void deleteDBTableRecords(StepTestTable table, String dBTableName, String dBQueryCond, String dBSourceName, String userID, String password, String prompt ) {

        if ( table == null ) throw new IllegalArgumentException ( "deleteDBTableRecords.table = null");

        if ( dBSourceName == null ) throw new IllegalArgumentException ( "deleteDBTableRecords.dBSourceName = null");
        if ( dBTableName == null ) throw new IllegalArgumentException ( "deleteDBTableRecords.dBTableName = null");
        table.add( DatabaseFunctions.deleteDBTableRecords(getWindow().getName(), getName(), dBTableName, dBQueryCond, dBSourceName, userID, password, prompt));
    }

    /*********** <pre> 
                 Deletes records in a database table
              
                 Deletes records in a database table.
                 
                 A table name is required. You also have to specify data source name,
                 and optionally user id and password (this is because some drivers
                 don't need a user/password).
                 
                 To do: if user id and/or password are not specified, don't include
                 them in the connection string. This would allow the possibility
                 to specify them in the data source definition.
                 
                 A query condition can be included, usually it is. It can be any 
                 valid expression allowed by the WHERE clause of the DELETE FROM sentence of the SQL driver
                 you are using. For example: "CliBal > 100000 and CliCat = 'C'". 
                 Including "where" in the expression itself is optional.  It will 
                 be prefixed to the expression if it is not provided.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         dBTableName -- Optional:NO 
                 Name of the TABLE to access within the DBSourceName<BR/>         dBQueryCond -- Optional:YES 
                 Expression allowed by the WHERE clause of the DELETE FROM sentence of the SQL driver
              <BR/>         dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>         userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>         password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              <BR/>         prompt -- Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
    </UL>

     **********/
    public ComponentFunction deleteDBTableRecords(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "deleteDBTableRecords.parameters = null");
        return DatabaseFunctions.deleteDBTableRecords(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Deletes records in a database table
              
                 Deletes records in a database table.
                 
                 A table name is required. You also have to specify data source name,
                 and optionally user id and password (this is because some drivers
                 don't need a user/password).
                 
                 To do: if user id and/or password are not specified, don't include
                 them in the connection string. This would allow the possibility
                 to specify them in the data source definition.
                 
                 A query condition can be included, usually it is. It can be any 
                 valid expression allowed by the WHERE clause of the DELETE FROM sentence of the SQL driver
                 you are using. For example: "CliBal > 100000 and CliCat = 'C'". 
                 Including "where" in the expression itself is optional.  It will 
                 be prefixed to the expression if it is not provided.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         dBTableName -- Optional:NO 
                 Name of the TABLE to access within the DBSourceName<BR/>         dBQueryCond -- Optional:YES 
                 Expression allowed by the WHERE clause of the DELETE FROM sentence of the SQL driver
              <BR/>         dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>         userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>         password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              <BR/>         prompt -- Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
    </UL>

     **********/
    public void deleteDBTableRecords(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "deleteDBTableRecords.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "deleteDBTableRecords.parameters = null");
        table.add( DatabaseFunctions.deleteDBTableRecords(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
              This routine will commit the pending queries on the database.
              
	         When ExecSQLQuery is used with the autoCommit option turned off, queries will be
		 not be auto-committed as is the default with JDBC.  In this way, you can use
		 multiple ExecSQLQuery statements, but then use ExecSQLCommit to commit all of
		 the queries at once.

		 This can be useful if your program is using a special process that requires
		 committing all queries at one time.
                 
                 A data source name [DSN] and Query String is required. You also have to specify
                 a variable to get the status code.  And optionally user id and password (this is
                 because some drivers don't need a user/password).
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param sQLStatus  Optional:NO 
                 A variable which holds the current SQL run status.
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     **********/
    public ComponentFunction execSQLCommit(String dBSourceName, String sQLStatus, String userID, String password ) {

        if ( dBSourceName == null ) throw new IllegalArgumentException ( "execSQLCommit.dBSourceName = null");
        if ( sQLStatus == null ) throw new IllegalArgumentException ( "execSQLCommit.sQLStatus = null");
        return DatabaseFunctions.execSQLCommit(getWindow().getName(), getName(), dBSourceName, sQLStatus, userID, password);
    }

    /*********** <pre> 
              This routine will commit the pending queries on the database.
              
	         When ExecSQLQuery is used with the autoCommit option turned off, queries will be
		 not be auto-committed as is the default with JDBC.  In this way, you can use
		 multiple ExecSQLQuery statements, but then use ExecSQLCommit to commit all of
		 the queries at once.

		 This can be useful if your program is using a special process that requires
		 committing all queries at one time.
                 
                 A data source name [DSN] and Query String is required. You also have to specify
                 a variable to get the status code.  And optionally user id and password (this is
                 because some drivers don't need a user/password).
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param sQLStatus  Optional:NO 
                 A variable which holds the current SQL run status.
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     **********/
    public void execSQLCommit(StepTestTable table, String dBSourceName, String sQLStatus, String userID, String password ) {

        if ( table == null ) throw new IllegalArgumentException ( "execSQLCommit.table = null");

        if ( dBSourceName == null ) throw new IllegalArgumentException ( "execSQLCommit.dBSourceName = null");
        if ( sQLStatus == null ) throw new IllegalArgumentException ( "execSQLCommit.sQLStatus = null");
        table.add( DatabaseFunctions.execSQLCommit(getWindow().getName(), getName(), dBSourceName, sQLStatus, userID, password));
    }

    /*********** <pre> 
              This routine will commit the pending queries on the database.
              
	         When ExecSQLQuery is used with the autoCommit option turned off, queries will be
		 not be auto-committed as is the default with JDBC.  In this way, you can use
		 multiple ExecSQLQuery statements, but then use ExecSQLCommit to commit all of
		 the queries at once.

		 This can be useful if your program is using a special process that requires
		 committing all queries at one time.
                 
                 A data source name [DSN] and Query String is required. You also have to specify
                 a variable to get the status code.  And optionally user id and password (this is
                 because some drivers don't need a user/password).
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>         sQLStatus -- Optional:NO 
                 A variable which holds the current SQL run status.
              <BR/>         userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>         password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              
    </UL>

     **********/
    public ComponentFunction execSQLCommit(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "execSQLCommit.parameters = null");
        return DatabaseFunctions.execSQLCommit(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
              This routine will commit the pending queries on the database.
              
	         When ExecSQLQuery is used with the autoCommit option turned off, queries will be
		 not be auto-committed as is the default with JDBC.  In this way, you can use
		 multiple ExecSQLQuery statements, but then use ExecSQLCommit to commit all of
		 the queries at once.

		 This can be useful if your program is using a special process that requires
		 committing all queries at one time.
                 
                 A data source name [DSN] and Query String is required. You also have to specify
                 a variable to get the status code.  And optionally user id and password (this is
                 because some drivers don't need a user/password).
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>         sQLStatus -- Optional:NO 
                 A variable which holds the current SQL run status.
              <BR/>         userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>         password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              
    </UL>

     **********/
    public void execSQLCommit(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "execSQLCommit.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "execSQLCommit.parameters = null");
        table.add( DatabaseFunctions.execSQLCommit(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Executes the query provided in a ^queryStr on the database table.
              
                 Executes the query in a database table.
                 
                 A data source name [DSN] and Query String is required. You also have to specify
                 a variable to get the status code.  And optionally user id and password (this is
                 because some drivers don't need a user/password).
                 
                 Use this command with caution.  It doesn't return any value back other than the
                 SQL Status code.  So, remember not to use use Select command inside the queryStr.
                 It cab be use to update Table. or reset some flag.
                 
                 To do: if user id and/or password are not specified, don't include
                 them in the connection string. This would allow the possibility
                 to specify them in the data source definition.
                  
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param queryStr  Optional:NO 
                 Actual query stored in a ^queryStr.
              
     @param sQLStatusCode  Optional:NO 
                 SQL status code as a result of executing the query.
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     @param prompt  Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
     **********/
    public ComponentFunction execSQLQuery(String dBSourceName, String queryStr, String sQLStatusCode, String userID, String password, String prompt ) {

        if ( dBSourceName == null ) throw new IllegalArgumentException ( "execSQLQuery.dBSourceName = null");
        if ( queryStr == null ) throw new IllegalArgumentException ( "execSQLQuery.queryStr = null");
        if ( sQLStatusCode == null ) throw new IllegalArgumentException ( "execSQLQuery.sQLStatusCode = null");
        return DatabaseFunctions.execSQLQuery(getWindow().getName(), getName(), dBSourceName, queryStr, sQLStatusCode, userID, password, prompt);
    }

    /*********** <pre> 
                 Executes the query provided in a ^queryStr on the database table.
              
                 Executes the query in a database table.
                 
                 A data source name [DSN] and Query String is required. You also have to specify
                 a variable to get the status code.  And optionally user id and password (this is
                 because some drivers don't need a user/password).
                 
                 Use this command with caution.  It doesn't return any value back other than the
                 SQL Status code.  So, remember not to use use Select command inside the queryStr.
                 It cab be use to update Table. or reset some flag.
                 
                 To do: if user id and/or password are not specified, don't include
                 them in the connection string. This would allow the possibility
                 to specify them in the data source definition.
                  
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param queryStr  Optional:NO 
                 Actual query stored in a ^queryStr.
              
     @param sQLStatusCode  Optional:NO 
                 SQL status code as a result of executing the query.
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     @param prompt  Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
     **********/
    public void execSQLQuery(StepTestTable table, String dBSourceName, String queryStr, String sQLStatusCode, String userID, String password, String prompt ) {

        if ( table == null ) throw new IllegalArgumentException ( "execSQLQuery.table = null");

        if ( dBSourceName == null ) throw new IllegalArgumentException ( "execSQLQuery.dBSourceName = null");
        if ( queryStr == null ) throw new IllegalArgumentException ( "execSQLQuery.queryStr = null");
        if ( sQLStatusCode == null ) throw new IllegalArgumentException ( "execSQLQuery.sQLStatusCode = null");
        table.add( DatabaseFunctions.execSQLQuery(getWindow().getName(), getName(), dBSourceName, queryStr, sQLStatusCode, userID, password, prompt));
    }

    /*********** <pre> 
                 Executes the query provided in a ^queryStr on the database table.
              
                 Executes the query in a database table.
                 
                 A data source name [DSN] and Query String is required. You also have to specify
                 a variable to get the status code.  And optionally user id and password (this is
                 because some drivers don't need a user/password).
                 
                 Use this command with caution.  It doesn't return any value back other than the
                 SQL Status code.  So, remember not to use use Select command inside the queryStr.
                 It cab be use to update Table. or reset some flag.
                 
                 To do: if user id and/or password are not specified, don't include
                 them in the connection string. This would allow the possibility
                 to specify them in the data source definition.
                  
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>         queryStr -- Optional:NO 
                 Actual query stored in a ^queryStr.
              <BR/>         sQLStatusCode -- Optional:NO 
                 SQL status code as a result of executing the query.
              <BR/>         userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>         password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              <BR/>         prompt -- Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
    </UL>

     **********/
    public ComponentFunction execSQLQuery(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "execSQLQuery.parameters = null");
        return DatabaseFunctions.execSQLQuery(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Executes the query provided in a ^queryStr on the database table.
              
                 Executes the query in a database table.
                 
                 A data source name [DSN] and Query String is required. You also have to specify
                 a variable to get the status code.  And optionally user id and password (this is
                 because some drivers don't need a user/password).
                 
                 Use this command with caution.  It doesn't return any value back other than the
                 SQL Status code.  So, remember not to use use Select command inside the queryStr.
                 It cab be use to update Table. or reset some flag.
                 
                 To do: if user id and/or password are not specified, don't include
                 them in the connection string. This would allow the possibility
                 to specify them in the data source definition.
                  
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>         queryStr -- Optional:NO 
                 Actual query stored in a ^queryStr.
              <BR/>         sQLStatusCode -- Optional:NO 
                 SQL status code as a result of executing the query.
              <BR/>         userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>         password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              <BR/>         prompt -- Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
    </UL>

     **********/
    public void execSQLQuery(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "execSQLQuery.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "execSQLQuery.parameters = null");
        table.add( DatabaseFunctions.execSQLQuery(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Executes the query in a specified database table and returns the total column count.
              
                 Executes the query in a specified database table and returns the total column count.
                 
                 A data source name [DSN] and Table name are required. You also have to specify a 
                 variable to get the result of the SQL and status code.  And optionally user id 
                 and password (this is because some drivers don't need a user/password).
                 
                 To do: if user id and/or password are not specified, don't include them in the 
                 connection string. This would allow the possibility to specify them in the data
                 source definition.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param dBTableName  Optional:NO 
                 Name of the TABLE to access within the DBSourceName
           
     @param columnCount  Optional:NO 
                 SQL result get stored in this return variable.
              
     @param sQLStatusCode  Optional:NO 
                 SQL status code as a result of executing the query.
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     @param prompt  Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
     **********/
    public ComponentFunction getDBTableColumnCount(String dBSourceName, String dBTableName, String columnCount, String sQLStatusCode, String userID, String password, String prompt ) {

        if ( columnCount == null ) throw new IllegalArgumentException ( "getDBTableColumnCount.columnCount = null");
        if ( dBSourceName == null ) throw new IllegalArgumentException ( "getDBTableColumnCount.dBSourceName = null");
        if ( dBTableName == null ) throw new IllegalArgumentException ( "getDBTableColumnCount.dBTableName = null");
        if ( sQLStatusCode == null ) throw new IllegalArgumentException ( "getDBTableColumnCount.sQLStatusCode = null");
        return DatabaseFunctions.getDBTableColumnCount(getWindow().getName(), getName(), dBSourceName, dBTableName, columnCount, sQLStatusCode, userID, password, prompt);
    }

    /*********** <pre> 
                 Executes the query in a specified database table and returns the total column count.
              
                 Executes the query in a specified database table and returns the total column count.
                 
                 A data source name [DSN] and Table name are required. You also have to specify a 
                 variable to get the result of the SQL and status code.  And optionally user id 
                 and password (this is because some drivers don't need a user/password).
                 
                 To do: if user id and/or password are not specified, don't include them in the 
                 connection string. This would allow the possibility to specify them in the data
                 source definition.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param dBTableName  Optional:NO 
                 Name of the TABLE to access within the DBSourceName
           
     @param columnCount  Optional:NO 
                 SQL result get stored in this return variable.
              
     @param sQLStatusCode  Optional:NO 
                 SQL status code as a result of executing the query.
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     @param prompt  Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
     **********/
    public void getDBTableColumnCount(StepTestTable table, String dBSourceName, String dBTableName, String columnCount, String sQLStatusCode, String userID, String password, String prompt ) {

        if ( table == null ) throw new IllegalArgumentException ( "getDBTableColumnCount.table = null");

        if ( columnCount == null ) throw new IllegalArgumentException ( "getDBTableColumnCount.columnCount = null");
        if ( dBSourceName == null ) throw new IllegalArgumentException ( "getDBTableColumnCount.dBSourceName = null");
        if ( dBTableName == null ) throw new IllegalArgumentException ( "getDBTableColumnCount.dBTableName = null");
        if ( sQLStatusCode == null ) throw new IllegalArgumentException ( "getDBTableColumnCount.sQLStatusCode = null");
        table.add( DatabaseFunctions.getDBTableColumnCount(getWindow().getName(), getName(), dBSourceName, dBTableName, columnCount, sQLStatusCode, userID, password, prompt));
    }

    /*********** <pre> 
                 Executes the query in a specified database table and returns the total column count.
              
                 Executes the query in a specified database table and returns the total column count.
                 
                 A data source name [DSN] and Table name are required. You also have to specify a 
                 variable to get the result of the SQL and status code.  And optionally user id 
                 and password (this is because some drivers don't need a user/password).
                 
                 To do: if user id and/or password are not specified, don't include them in the 
                 connection string. This would allow the possibility to specify them in the data
                 source definition.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>         dBTableName -- Optional:NO 
                 Name of the TABLE to access within the DBSourceName
           <BR/>         columnCount -- Optional:NO 
                 SQL result get stored in this return variable.
              <BR/>         sQLStatusCode -- Optional:NO 
                 SQL status code as a result of executing the query.
              <BR/>         userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>         password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              <BR/>         prompt -- Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
    </UL>

     **********/
    public ComponentFunction getDBTableColumnCount(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getDBTableColumnCount.parameters = null");
        return DatabaseFunctions.getDBTableColumnCount(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Executes the query in a specified database table and returns the total column count.
              
                 Executes the query in a specified database table and returns the total column count.
                 
                 A data source name [DSN] and Table name are required. You also have to specify a 
                 variable to get the result of the SQL and status code.  And optionally user id 
                 and password (this is because some drivers don't need a user/password).
                 
                 To do: if user id and/or password are not specified, don't include them in the 
                 connection string. This would allow the possibility to specify them in the data
                 source definition.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>         dBTableName -- Optional:NO 
                 Name of the TABLE to access within the DBSourceName
           <BR/>         columnCount -- Optional:NO 
                 SQL result get stored in this return variable.
              <BR/>         sQLStatusCode -- Optional:NO 
                 SQL status code as a result of executing the query.
              <BR/>         userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>         password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              <BR/>         prompt -- Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
    </UL>

     **********/
    public void getDBTableColumnCount(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "getDBTableColumnCount.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "getDBTableColumnCount.parameters = null");
        table.add( DatabaseFunctions.getDBTableColumnCount(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Executes the query in a database table.
              
                 Executes the query in a database table.
                 
                 A data source name [DSN] and Query String is required. You also have to specify
                 a variable to get the status code.  And optionally user id and password (this is
                 because some drivers don't need a user/password).
                 
                 To do: if user id and/or password are not specified, don't include them in the 
                 connection string. This would allow the possibility to specify them in the data
                 source definition. 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param dBTableName  Optional:NO 
                 Name of the TABLE to access within the DBSourceName
           
     @param rowCount  Optional:NO 
                 SQL result get stored in this return variable.
              
     @param sQLStatusCode  Optional:NO 
                 SQL status code as a result of executing the query.
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     @param prompt  Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
     **********/
    public ComponentFunction getDBTableRowCount(String dBSourceName, String dBTableName, String rowCount, String sQLStatusCode, String userID, String password, String prompt ) {

        if ( dBSourceName == null ) throw new IllegalArgumentException ( "getDBTableRowCount.dBSourceName = null");
        if ( dBTableName == null ) throw new IllegalArgumentException ( "getDBTableRowCount.dBTableName = null");
        if ( rowCount == null ) throw new IllegalArgumentException ( "getDBTableRowCount.rowCount = null");
        if ( sQLStatusCode == null ) throw new IllegalArgumentException ( "getDBTableRowCount.sQLStatusCode = null");
        return DatabaseFunctions.getDBTableRowCount(getWindow().getName(), getName(), dBSourceName, dBTableName, rowCount, sQLStatusCode, userID, password, prompt);
    }

    /*********** <pre> 
                 Executes the query in a database table.
              
                 Executes the query in a database table.
                 
                 A data source name [DSN] and Query String is required. You also have to specify
                 a variable to get the status code.  And optionally user id and password (this is
                 because some drivers don't need a user/password).
                 
                 To do: if user id and/or password are not specified, don't include them in the 
                 connection string. This would allow the possibility to specify them in the data
                 source definition. 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param dBTableName  Optional:NO 
                 Name of the TABLE to access within the DBSourceName
           
     @param rowCount  Optional:NO 
                 SQL result get stored in this return variable.
              
     @param sQLStatusCode  Optional:NO 
                 SQL status code as a result of executing the query.
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     @param prompt  Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
     **********/
    public void getDBTableRowCount(StepTestTable table, String dBSourceName, String dBTableName, String rowCount, String sQLStatusCode, String userID, String password, String prompt ) {

        if ( table == null ) throw new IllegalArgumentException ( "getDBTableRowCount.table = null");

        if ( dBSourceName == null ) throw new IllegalArgumentException ( "getDBTableRowCount.dBSourceName = null");
        if ( dBTableName == null ) throw new IllegalArgumentException ( "getDBTableRowCount.dBTableName = null");
        if ( rowCount == null ) throw new IllegalArgumentException ( "getDBTableRowCount.rowCount = null");
        if ( sQLStatusCode == null ) throw new IllegalArgumentException ( "getDBTableRowCount.sQLStatusCode = null");
        table.add( DatabaseFunctions.getDBTableRowCount(getWindow().getName(), getName(), dBSourceName, dBTableName, rowCount, sQLStatusCode, userID, password, prompt));
    }

    /*********** <pre> 
                 Executes the query in a database table.
              
                 Executes the query in a database table.
                 
                 A data source name [DSN] and Query String is required. You also have to specify
                 a variable to get the status code.  And optionally user id and password (this is
                 because some drivers don't need a user/password).
                 
                 To do: if user id and/or password are not specified, don't include them in the 
                 connection string. This would allow the possibility to specify them in the data
                 source definition. 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>         dBTableName -- Optional:NO 
                 Name of the TABLE to access within the DBSourceName
           <BR/>         rowCount -- Optional:NO 
                 SQL result get stored in this return variable.
              <BR/>         sQLStatusCode -- Optional:NO 
                 SQL status code as a result of executing the query.
              <BR/>         userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>         password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              <BR/>         prompt -- Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
    </UL>

     **********/
    public ComponentFunction getDBTableRowCount(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getDBTableRowCount.parameters = null");
        return DatabaseFunctions.getDBTableRowCount(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Executes the query in a database table.
              
                 Executes the query in a database table.
                 
                 A data source name [DSN] and Query String is required. You also have to specify
                 a variable to get the status code.  And optionally user id and password (this is
                 because some drivers don't need a user/password).
                 
                 To do: if user id and/or password are not specified, don't include them in the 
                 connection string. This would allow the possibility to specify them in the data
                 source definition. 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>         dBTableName -- Optional:NO 
                 Name of the TABLE to access within the DBSourceName
           <BR/>         rowCount -- Optional:NO 
                 SQL result get stored in this return variable.
              <BR/>         sQLStatusCode -- Optional:NO 
                 SQL status code as a result of executing the query.
              <BR/>         userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>         password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              <BR/>         prompt -- Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
    </UL>

     **********/
    public void getDBTableRowCount(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "getDBTableRowCount.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "getDBTableRowCount.parameters = null");
        table.add( DatabaseFunctions.getDBTableRowCount(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Executes the query and returns the case-sensitive value as result of the execution.
              
                 Executes the query specified in the ^queryStr and returns the case-sensitive value
                 as result of the execution.
                 
                 To return the value, it executes a SQL query sentence using an ODBC data source to 
                 connect to the data base.
                 
                 A queryStr and the two return variables to store the query result and SQL Status code
                 are required.  You also have to specify data source name and optionally user id and
                 password (this is because some drivers don't need a user/password).
                 
                 To do: if user id and/or password are not specified, don't include them in the connection
                 string. This would allow the possibility to specify them in the data source definition.
                 
                 If the query returns more than one record, the returned value is the corresponding to the
                 first one, unless the field name be something like COUNT(*) or SUM(InvoiceTot).
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param queryStr  Optional:NO
                 Actual query stored in a ^queryStr.
              
     @param queryResult  Optional:NO 
                 SQL result get stored in this return variable.
              
     @param sQLStatusCode  Optional:NO 
                 SQL status code as a result of executing the query.
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     @param prompt  Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
     **********/
    public ComponentFunction getDBValue(String dBSourceName, String queryStr, String queryResult, String sQLStatusCode, String userID, String password, String prompt ) {

        if ( dBSourceName == null ) throw new IllegalArgumentException ( "getDBValue.dBSourceName = null");
        if ( queryResult == null ) throw new IllegalArgumentException ( "getDBValue.queryResult = null");
        if ( queryStr == null ) throw new IllegalArgumentException ( "getDBValue.queryStr = null");
        if ( sQLStatusCode == null ) throw new IllegalArgumentException ( "getDBValue.sQLStatusCode = null");
        return DatabaseFunctions.getDBValue(getWindow().getName(), getName(), dBSourceName, queryStr, queryResult, sQLStatusCode, userID, password, prompt);
    }

    /*********** <pre> 
                 Executes the query and returns the case-sensitive value as result of the execution.
              
                 Executes the query specified in the ^queryStr and returns the case-sensitive value
                 as result of the execution.
                 
                 To return the value, it executes a SQL query sentence using an ODBC data source to 
                 connect to the data base.
                 
                 A queryStr and the two return variables to store the query result and SQL Status code
                 are required.  You also have to specify data source name and optionally user id and
                 password (this is because some drivers don't need a user/password).
                 
                 To do: if user id and/or password are not specified, don't include them in the connection
                 string. This would allow the possibility to specify them in the data source definition.
                 
                 If the query returns more than one record, the returned value is the corresponding to the
                 first one, unless the field name be something like COUNT(*) or SUM(InvoiceTot).
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param queryStr  Optional:NO
                 Actual query stored in a ^queryStr.
              
     @param queryResult  Optional:NO 
                 SQL result get stored in this return variable.
              
     @param sQLStatusCode  Optional:NO 
                 SQL status code as a result of executing the query.
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     @param prompt  Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
     **********/
    public void getDBValue(StepTestTable table, String dBSourceName, String queryStr, String queryResult, String sQLStatusCode, String userID, String password, String prompt ) {

        if ( table == null ) throw new IllegalArgumentException ( "getDBValue.table = null");

        if ( dBSourceName == null ) throw new IllegalArgumentException ( "getDBValue.dBSourceName = null");
        if ( queryResult == null ) throw new IllegalArgumentException ( "getDBValue.queryResult = null");
        if ( queryStr == null ) throw new IllegalArgumentException ( "getDBValue.queryStr = null");
        if ( sQLStatusCode == null ) throw new IllegalArgumentException ( "getDBValue.sQLStatusCode = null");
        table.add( DatabaseFunctions.getDBValue(getWindow().getName(), getName(), dBSourceName, queryStr, queryResult, sQLStatusCode, userID, password, prompt));
    }

    /*********** <pre> 
                 Executes the query and returns the case-sensitive value as result of the execution.
              
                 Executes the query specified in the ^queryStr and returns the case-sensitive value
                 as result of the execution.
                 
                 To return the value, it executes a SQL query sentence using an ODBC data source to 
                 connect to the data base.
                 
                 A queryStr and the two return variables to store the query result and SQL Status code
                 are required.  You also have to specify data source name and optionally user id and
                 password (this is because some drivers don't need a user/password).
                 
                 To do: if user id and/or password are not specified, don't include them in the connection
                 string. This would allow the possibility to specify them in the data source definition.
                 
                 If the query returns more than one record, the returned value is the corresponding to the
                 first one, unless the field name be something like COUNT(*) or SUM(InvoiceTot).
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>         queryStr -- Optional:NO
                 Actual query stored in a ^queryStr.
              <BR/>         queryResult -- Optional:NO 
                 SQL result get stored in this return variable.
              <BR/>         sQLStatusCode -- Optional:NO 
                 SQL status code as a result of executing the query.
              <BR/>         userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>         password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              <BR/>         prompt -- Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
    </UL>

     **********/
    public ComponentFunction getDBValue(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getDBValue.parameters = null");
        return DatabaseFunctions.getDBValue(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Executes the query and returns the case-sensitive value as result of the execution.
              
                 Executes the query specified in the ^queryStr and returns the case-sensitive value
                 as result of the execution.
                 
                 To return the value, it executes a SQL query sentence using an ODBC data source to 
                 connect to the data base.
                 
                 A queryStr and the two return variables to store the query result and SQL Status code
                 are required.  You also have to specify data source name and optionally user id and
                 password (this is because some drivers don't need a user/password).
                 
                 To do: if user id and/or password are not specified, don't include them in the connection
                 string. This would allow the possibility to specify them in the data source definition.
                 
                 If the query returns more than one record, the returned value is the corresponding to the
                 first one, unless the field name be something like COUNT(*) or SUM(InvoiceTot).
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>         queryStr -- Optional:NO
                 Actual query stored in a ^queryStr.
              <BR/>         queryResult -- Optional:NO 
                 SQL result get stored in this return variable.
              <BR/>         sQLStatusCode -- Optional:NO 
                 SQL status code as a result of executing the query.
              <BR/>         userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>         password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              <BR/>         prompt -- Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
    </UL>

     **********/
    public void getDBValue(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "getDBValue.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "getDBValue.parameters = null");
        table.add( DatabaseFunctions.getDBValue(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Verifies the value of a field in a database table is NULL
              
                 Verifies the value of a field in a database table is NULL.
                 
                 Sometimes you have to check if a field's value is NULL. This
                 NULL value is different from any other (even zero for numerics
                 and null string for characters), so if you try to check it
                 using VerifyDBValue() function, if will fail.
                 
                 A table and field name are required. You also have to specify data source name,
                 and optionally user id and password (this is because some drivers
                 don't need a user/password).
                 
                 To do: if user id and/or password are not specified, don't include
                 them in the connection string. This would allow the possibility
                 to specify them in the data source definition.
                 
                 A query condition can be included, usually it is. It can be any 
                 valid expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
                 you are using. For example: "CliBal > 100000 and CliCat = 'C'". 
                 Including "where" in the expression itself is optional.  It will 
                 be prefixed to the expression if it is not provided.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param dBFieldName  Optional:NO 
                 Name of the FIELD within DBTableName used in the verification
              
     @param dBTableName  Optional:NO 
                 Name of the TABLE to access within the DBSourceName
     @param dBQueryCond  Optional:YES 
                 Expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
              
     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     @param prompt  Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
     **********/
    public ComponentFunction verifyDatabaseNullValue(String dBFieldName, String dBTableName, String dBQueryCond, String dBSourceName, String userID, String password, String prompt ) {

        if ( dBFieldName == null ) throw new IllegalArgumentException ( "verifyDatabaseNullValue.dBFieldName = null");
        if ( dBSourceName == null ) throw new IllegalArgumentException ( "verifyDatabaseNullValue.dBSourceName = null");
        if ( dBTableName == null ) throw new IllegalArgumentException ( "verifyDatabaseNullValue.dBTableName = null");
        return DatabaseFunctions.verifyDatabaseNullValue(getWindow().getName(), getName(), dBFieldName, dBTableName, dBQueryCond, dBSourceName, userID, password, prompt);
    }

    /*********** <pre> 
                 Verifies the value of a field in a database table is NULL
              
                 Verifies the value of a field in a database table is NULL.
                 
                 Sometimes you have to check if a field's value is NULL. This
                 NULL value is different from any other (even zero for numerics
                 and null string for characters), so if you try to check it
                 using VerifyDBValue() function, if will fail.
                 
                 A table and field name are required. You also have to specify data source name,
                 and optionally user id and password (this is because some drivers
                 don't need a user/password).
                 
                 To do: if user id and/or password are not specified, don't include
                 them in the connection string. This would allow the possibility
                 to specify them in the data source definition.
                 
                 A query condition can be included, usually it is. It can be any 
                 valid expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
                 you are using. For example: "CliBal > 100000 and CliCat = 'C'". 
                 Including "where" in the expression itself is optional.  It will 
                 be prefixed to the expression if it is not provided.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param dBFieldName  Optional:NO 
                 Name of the FIELD within DBTableName used in the verification
              
     @param dBTableName  Optional:NO 
                 Name of the TABLE to access within the DBSourceName
     @param dBQueryCond  Optional:YES 
                 Expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
              
     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     @param prompt  Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
     **********/
    public void verifyDatabaseNullValue(StepTestTable table, String dBFieldName, String dBTableName, String dBQueryCond, String dBSourceName, String userID, String password, String prompt ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyDatabaseNullValue.table = null");

        if ( dBFieldName == null ) throw new IllegalArgumentException ( "verifyDatabaseNullValue.dBFieldName = null");
        if ( dBSourceName == null ) throw new IllegalArgumentException ( "verifyDatabaseNullValue.dBSourceName = null");
        if ( dBTableName == null ) throw new IllegalArgumentException ( "verifyDatabaseNullValue.dBTableName = null");
        table.add( DatabaseFunctions.verifyDatabaseNullValue(getWindow().getName(), getName(), dBFieldName, dBTableName, dBQueryCond, dBSourceName, userID, password, prompt));
    }

    /*********** <pre> 
                 Verifies the value of a field in a database table is NULL
              
                 Verifies the value of a field in a database table is NULL.
                 
                 Sometimes you have to check if a field's value is NULL. This
                 NULL value is different from any other (even zero for numerics
                 and null string for characters), so if you try to check it
                 using VerifyDBValue() function, if will fail.
                 
                 A table and field name are required. You also have to specify data source name,
                 and optionally user id and password (this is because some drivers
                 don't need a user/password).
                 
                 To do: if user id and/or password are not specified, don't include
                 them in the connection string. This would allow the possibility
                 to specify them in the data source definition.
                 
                 A query condition can be included, usually it is. It can be any 
                 valid expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
                 you are using. For example: "CliBal > 100000 and CliCat = 'C'". 
                 Including "where" in the expression itself is optional.  It will 
                 be prefixed to the expression if it is not provided.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         dBFieldName -- Optional:NO 
                 Name of the FIELD within DBTableName used in the verification
              <BR/>         dBTableName -- Optional:NO 
                 Name of the TABLE to access within the DBSourceName<BR/>         dBQueryCond -- Optional:YES 
                 Expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
              <BR/>         dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>         userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>         password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              <BR/>         prompt -- Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
    </UL>

     **********/
    public ComponentFunction verifyDatabaseNullValue(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyDatabaseNullValue.parameters = null");
        return DatabaseFunctions.verifyDatabaseNullValue(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Verifies the value of a field in a database table is NULL
              
                 Verifies the value of a field in a database table is NULL.
                 
                 Sometimes you have to check if a field's value is NULL. This
                 NULL value is different from any other (even zero for numerics
                 and null string for characters), so if you try to check it
                 using VerifyDBValue() function, if will fail.
                 
                 A table and field name are required. You also have to specify data source name,
                 and optionally user id and password (this is because some drivers
                 don't need a user/password).
                 
                 To do: if user id and/or password are not specified, don't include
                 them in the connection string. This would allow the possibility
                 to specify them in the data source definition.
                 
                 A query condition can be included, usually it is. It can be any 
                 valid expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
                 you are using. For example: "CliBal > 100000 and CliCat = 'C'". 
                 Including "where" in the expression itself is optional.  It will 
                 be prefixed to the expression if it is not provided.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         dBFieldName -- Optional:NO 
                 Name of the FIELD within DBTableName used in the verification
              <BR/>         dBTableName -- Optional:NO 
                 Name of the TABLE to access within the DBSourceName<BR/>         dBQueryCond -- Optional:YES 
                 Expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
              <BR/>         dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>         userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>         password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              <BR/>         prompt -- Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
    </UL>

     **********/
    public void verifyDatabaseNullValue(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyDatabaseNullValue.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyDatabaseNullValue.parameters = null");
        table.add( DatabaseFunctions.verifyDatabaseNullValue(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Verifies the case-sensitive value of a field in a database table
              
                 Verifies the case-sensitive value of a field in a database table.
                 
                 To return the value, it executes a SQL query sentence using an ODBC 
                 data source to connect to the data base. 
                 
                 A table and field name are required. You also have to specify data source name,
                 and optionally user id and password (this is because some drivers
                 don't need a user/password).
                 
                 To do: if user id and/or password are not specified, don't include
                 them in the connection string. This would allow the possibility
                 to specify them in the data source definition.
                 
                 If the query returns more than one record, the returned value
                 is the corresponding to the first one, unless the field name
                 be something like COUNT(*) or SUM(InvoiceTot).
                 
                 A query condition can be included, usually it is. It can be any 
                 valid expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
                 you are using. For example: "CliBal > 100000 and CliCat = 'C'". 
                 Including "where" in the expression itself is optional.  It will 
                 be prefixed to the expression if it is not provided.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param dBFieldName  Optional:NO 
                 Name of the FIELD within DBTableName used in the verification
              
     @param dBTableName  Optional:NO 
                 Name of the TABLE to access within the DBSourceName
     @param dBQueryCond  Optional:YES 
                 Expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
              
     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     @param expectedValue  Optional:NO 
                 Benchmark value to compare against retrieved DBFieldName value
              
     @param prompt  Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
     **********/
    public ComponentFunction verifyDatabaseValue(String dBFieldName, String dBTableName, String dBQueryCond, String dBSourceName, String userID, String password, String expectedValue, String prompt ) {

        if ( dBFieldName == null ) throw new IllegalArgumentException ( "verifyDatabaseValue.dBFieldName = null");
        if ( dBSourceName == null ) throw new IllegalArgumentException ( "verifyDatabaseValue.dBSourceName = null");
        if ( dBTableName == null ) throw new IllegalArgumentException ( "verifyDatabaseValue.dBTableName = null");
        if ( expectedValue == null ) throw new IllegalArgumentException ( "verifyDatabaseValue.expectedValue = null");
        return DatabaseFunctions.verifyDatabaseValue(getWindow().getName(), getName(), dBFieldName, dBTableName, dBQueryCond, dBSourceName, userID, password, expectedValue, prompt);
    }

    /*********** <pre> 
                 Verifies the case-sensitive value of a field in a database table
              
                 Verifies the case-sensitive value of a field in a database table.
                 
                 To return the value, it executes a SQL query sentence using an ODBC 
                 data source to connect to the data base. 
                 
                 A table and field name are required. You also have to specify data source name,
                 and optionally user id and password (this is because some drivers
                 don't need a user/password).
                 
                 To do: if user id and/or password are not specified, don't include
                 them in the connection string. This would allow the possibility
                 to specify them in the data source definition.
                 
                 If the query returns more than one record, the returned value
                 is the corresponding to the first one, unless the field name
                 be something like COUNT(*) or SUM(InvoiceTot).
                 
                 A query condition can be included, usually it is. It can be any 
                 valid expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
                 you are using. For example: "CliBal > 100000 and CliCat = 'C'". 
                 Including "where" in the expression itself is optional.  It will 
                 be prefixed to the expression if it is not provided.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param dBFieldName  Optional:NO 
                 Name of the FIELD within DBTableName used in the verification
              
     @param dBTableName  Optional:NO 
                 Name of the TABLE to access within the DBSourceName
     @param dBQueryCond  Optional:YES 
                 Expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
              
     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     @param expectedValue  Optional:NO 
                 Benchmark value to compare against retrieved DBFieldName value
              
     @param prompt  Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
     **********/
    public void verifyDatabaseValue(StepTestTable table, String dBFieldName, String dBTableName, String dBQueryCond, String dBSourceName, String userID, String password, String expectedValue, String prompt ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyDatabaseValue.table = null");

        if ( dBFieldName == null ) throw new IllegalArgumentException ( "verifyDatabaseValue.dBFieldName = null");
        if ( dBSourceName == null ) throw new IllegalArgumentException ( "verifyDatabaseValue.dBSourceName = null");
        if ( dBTableName == null ) throw new IllegalArgumentException ( "verifyDatabaseValue.dBTableName = null");
        if ( expectedValue == null ) throw new IllegalArgumentException ( "verifyDatabaseValue.expectedValue = null");
        table.add( DatabaseFunctions.verifyDatabaseValue(getWindow().getName(), getName(), dBFieldName, dBTableName, dBQueryCond, dBSourceName, userID, password, expectedValue, prompt));
    }

    /*********** <pre> 
                 Verifies the case-sensitive value of a field in a database table
              
                 Verifies the case-sensitive value of a field in a database table.
                 
                 To return the value, it executes a SQL query sentence using an ODBC 
                 data source to connect to the data base. 
                 
                 A table and field name are required. You also have to specify data source name,
                 and optionally user id and password (this is because some drivers
                 don't need a user/password).
                 
                 To do: if user id and/or password are not specified, don't include
                 them in the connection string. This would allow the possibility
                 to specify them in the data source definition.
                 
                 If the query returns more than one record, the returned value
                 is the corresponding to the first one, unless the field name
                 be something like COUNT(*) or SUM(InvoiceTot).
                 
                 A query condition can be included, usually it is. It can be any 
                 valid expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
                 you are using. For example: "CliBal > 100000 and CliCat = 'C'". 
                 Including "where" in the expression itself is optional.  It will 
                 be prefixed to the expression if it is not provided.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         dBFieldName -- Optional:NO 
                 Name of the FIELD within DBTableName used in the verification
              <BR/>         dBTableName -- Optional:NO 
                 Name of the TABLE to access within the DBSourceName<BR/>         dBQueryCond -- Optional:YES 
                 Expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
              <BR/>         dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>         userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>         password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              <BR/>         expectedValue -- Optional:NO 
                 Benchmark value to compare against retrieved DBFieldName value
              <BR/>         prompt -- Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
    </UL>

     **********/
    public ComponentFunction verifyDatabaseValue(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyDatabaseValue.parameters = null");
        return DatabaseFunctions.verifyDatabaseValue(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Verifies the case-sensitive value of a field in a database table
              
                 Verifies the case-sensitive value of a field in a database table.
                 
                 To return the value, it executes a SQL query sentence using an ODBC 
                 data source to connect to the data base. 
                 
                 A table and field name are required. You also have to specify data source name,
                 and optionally user id and password (this is because some drivers
                 don't need a user/password).
                 
                 To do: if user id and/or password are not specified, don't include
                 them in the connection string. This would allow the possibility
                 to specify them in the data source definition.
                 
                 If the query returns more than one record, the returned value
                 is the corresponding to the first one, unless the field name
                 be something like COUNT(*) or SUM(InvoiceTot).
                 
                 A query condition can be included, usually it is. It can be any 
                 valid expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
                 you are using. For example: "CliBal > 100000 and CliCat = 'C'". 
                 Including "where" in the expression itself is optional.  It will 
                 be prefixed to the expression if it is not provided.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         dBFieldName -- Optional:NO 
                 Name of the FIELD within DBTableName used in the verification
              <BR/>         dBTableName -- Optional:NO 
                 Name of the TABLE to access within the DBSourceName<BR/>         dBQueryCond -- Optional:YES 
                 Expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
              <BR/>         dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>         userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>         password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              <BR/>         expectedValue -- Optional:NO 
                 Benchmark value to compare against retrieved DBFieldName value
              <BR/>         prompt -- Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
    </UL>

     **********/
    public void verifyDatabaseValue(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyDatabaseValue.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyDatabaseValue.parameters = null");
        table.add( DatabaseFunctions.verifyDatabaseValue(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Verifies the value of a field in a database table is NULL
              
                 Verifies the value of a field in a database table is NULL.
                 
                 Sometimes you have to check if a field's value is NULL. This
                 NULL value is different from any other (even zero for numerics
                 and null string for characters), so if you try to check it
                 using VerifyDBValue() function, if will fail.
                 
                 A table and field name are required. You also have to specify data source name,
                 and optionally user id and password (this is because some drivers
                 don't need a user/password).
                 
                 To do: if user id and/or password are not specified, don't include
                 them in the connection string. This would allow the possibility
                 to specify them in the data source definition.
                 
                 A query condition can be included, usually it is. It can be any 
                 valid expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
                 you are using. For example: "CliBal > 100000 and CliCat = 'C'". 
                 Including "where" in the expression itself is optional.  It will 
                 be prefixed to the expression if it is not provided.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param dBFieldName  Optional:NO 
                 Name of the FIELD within DBTableName used in the verification
              
     @param dBTableName  Optional:NO 
                 Name of the TABLE to access within the DBSourceName
     @param dBQueryCond  Optional:YES 
                 Expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
              
     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     @param prompt  Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
     **********/
    public ComponentFunction verifyDBNullValue(String dBFieldName, String dBTableName, String dBQueryCond, String dBSourceName, String userID, String password, String prompt ) {

        if ( dBFieldName == null ) throw new IllegalArgumentException ( "verifyDBNullValue.dBFieldName = null");
        if ( dBSourceName == null ) throw new IllegalArgumentException ( "verifyDBNullValue.dBSourceName = null");
        if ( dBTableName == null ) throw new IllegalArgumentException ( "verifyDBNullValue.dBTableName = null");
        return DatabaseFunctions.verifyDBNullValue(getWindow().getName(), getName(), dBFieldName, dBTableName, dBQueryCond, dBSourceName, userID, password, prompt);
    }

    /*********** <pre> 
                 Verifies the value of a field in a database table is NULL
              
                 Verifies the value of a field in a database table is NULL.
                 
                 Sometimes you have to check if a field's value is NULL. This
                 NULL value is different from any other (even zero for numerics
                 and null string for characters), so if you try to check it
                 using VerifyDBValue() function, if will fail.
                 
                 A table and field name are required. You also have to specify data source name,
                 and optionally user id and password (this is because some drivers
                 don't need a user/password).
                 
                 To do: if user id and/or password are not specified, don't include
                 them in the connection string. This would allow the possibility
                 to specify them in the data source definition.
                 
                 A query condition can be included, usually it is. It can be any 
                 valid expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
                 you are using. For example: "CliBal > 100000 and CliCat = 'C'". 
                 Including "where" in the expression itself is optional.  It will 
                 be prefixed to the expression if it is not provided.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param dBFieldName  Optional:NO 
                 Name of the FIELD within DBTableName used in the verification
              
     @param dBTableName  Optional:NO 
                 Name of the TABLE to access within the DBSourceName
     @param dBQueryCond  Optional:YES 
                 Expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
              
     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     @param prompt  Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
     **********/
    public void verifyDBNullValue(StepTestTable table, String dBFieldName, String dBTableName, String dBQueryCond, String dBSourceName, String userID, String password, String prompt ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyDBNullValue.table = null");

        if ( dBFieldName == null ) throw new IllegalArgumentException ( "verifyDBNullValue.dBFieldName = null");
        if ( dBSourceName == null ) throw new IllegalArgumentException ( "verifyDBNullValue.dBSourceName = null");
        if ( dBTableName == null ) throw new IllegalArgumentException ( "verifyDBNullValue.dBTableName = null");
        table.add( DatabaseFunctions.verifyDBNullValue(getWindow().getName(), getName(), dBFieldName, dBTableName, dBQueryCond, dBSourceName, userID, password, prompt));
    }

    /*********** <pre> 
                 Verifies the value of a field in a database table is NULL
              
                 Verifies the value of a field in a database table is NULL.
                 
                 Sometimes you have to check if a field's value is NULL. This
                 NULL value is different from any other (even zero for numerics
                 and null string for characters), so if you try to check it
                 using VerifyDBValue() function, if will fail.
                 
                 A table and field name are required. You also have to specify data source name,
                 and optionally user id and password (this is because some drivers
                 don't need a user/password).
                 
                 To do: if user id and/or password are not specified, don't include
                 them in the connection string. This would allow the possibility
                 to specify them in the data source definition.
                 
                 A query condition can be included, usually it is. It can be any 
                 valid expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
                 you are using. For example: "CliBal > 100000 and CliCat = 'C'". 
                 Including "where" in the expression itself is optional.  It will 
                 be prefixed to the expression if it is not provided.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         dBFieldName -- Optional:NO 
                 Name of the FIELD within DBTableName used in the verification
              <BR/>         dBTableName -- Optional:NO 
                 Name of the TABLE to access within the DBSourceName<BR/>         dBQueryCond -- Optional:YES 
                 Expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
              <BR/>         dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>         userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>         password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              <BR/>         prompt -- Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
    </UL>

     **********/
    public ComponentFunction verifyDBNullValue(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyDBNullValue.parameters = null");
        return DatabaseFunctions.verifyDBNullValue(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Verifies the value of a field in a database table is NULL
              
                 Verifies the value of a field in a database table is NULL.
                 
                 Sometimes you have to check if a field's value is NULL. This
                 NULL value is different from any other (even zero for numerics
                 and null string for characters), so if you try to check it
                 using VerifyDBValue() function, if will fail.
                 
                 A table and field name are required. You also have to specify data source name,
                 and optionally user id and password (this is because some drivers
                 don't need a user/password).
                 
                 To do: if user id and/or password are not specified, don't include
                 them in the connection string. This would allow the possibility
                 to specify them in the data source definition.
                 
                 A query condition can be included, usually it is. It can be any 
                 valid expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
                 you are using. For example: "CliBal > 100000 and CliCat = 'C'". 
                 Including "where" in the expression itself is optional.  It will 
                 be prefixed to the expression if it is not provided.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         dBFieldName -- Optional:NO 
                 Name of the FIELD within DBTableName used in the verification
              <BR/>         dBTableName -- Optional:NO 
                 Name of the TABLE to access within the DBSourceName<BR/>         dBQueryCond -- Optional:YES 
                 Expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
              <BR/>         dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>         userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>         password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              <BR/>         prompt -- Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
    </UL>

     **********/
    public void verifyDBNullValue(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyDBNullValue.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyDBNullValue.parameters = null");
        table.add( DatabaseFunctions.verifyDBNullValue(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Verifies the case-sensitive value of a field in a database table
              
                 Verifies the case-sensitive value of a field in a database table.
                 
                 To return the value, it executes a SQL query sentence using an ODBC 
                 data source to connect to the data base. 
                 
                 A table and field name are required. You also have to specify data source name,
                 and optionally user id and password (this is because some drivers
                 don't need a user/password).
                 
                 To do: if user id and/or password are not specified, don't include
                 them in the connection string. This would allow the possibility
                 to specify them in the data source definition.
                 
                 If the query returns more than one record, the returned value
                 is the corresponding to the first one, unless the field name
                 be something like COUNT(*) or SUM(InvoiceTot).
                 
                 A query condition can be included, usually it is. It can be any 
                 valid expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
                 you are using. For example: "CliBal > 100000 and CliCat = 'C'". 
                 Including "where" in the expression itself is optional.  It will 
                 be prefixed to the expression if it is not provided.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param dBFieldName  Optional:NO 
                 Name of the FIELD within DBTableName used in the verification
              
     @param dBTableName  Optional:NO 
                 Name of the TABLE to access within the DBSourceName
     @param dBQueryCond  Optional:YES 
                 Expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
              
     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     @param prompt  Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
     @param expectedValue  Optional:NO 
                 Benchmark value to compare against retrieved DBFieldName value
              
     **********/
    public ComponentFunction verifyDBValue(String dBFieldName, String dBTableName, String dBQueryCond, String dBSourceName, String userID, String password, String prompt, String expectedValue ) {

        if ( dBFieldName == null ) throw new IllegalArgumentException ( "verifyDBValue.dBFieldName = null");
        if ( dBSourceName == null ) throw new IllegalArgumentException ( "verifyDBValue.dBSourceName = null");
        if ( dBTableName == null ) throw new IllegalArgumentException ( "verifyDBValue.dBTableName = null");
        if ( expectedValue == null ) throw new IllegalArgumentException ( "verifyDBValue.expectedValue = null");
        return DatabaseFunctions.verifyDBValue(getWindow().getName(), getName(), dBFieldName, dBTableName, dBQueryCond, dBSourceName, userID, password, prompt, expectedValue);
    }

    /*********** <pre> 
                 Verifies the case-sensitive value of a field in a database table
              
                 Verifies the case-sensitive value of a field in a database table.
                 
                 To return the value, it executes a SQL query sentence using an ODBC 
                 data source to connect to the data base. 
                 
                 A table and field name are required. You also have to specify data source name,
                 and optionally user id and password (this is because some drivers
                 don't need a user/password).
                 
                 To do: if user id and/or password are not specified, don't include
                 them in the connection string. This would allow the possibility
                 to specify them in the data source definition.
                 
                 If the query returns more than one record, the returned value
                 is the corresponding to the first one, unless the field name
                 be something like COUNT(*) or SUM(InvoiceTot).
                 
                 A query condition can be included, usually it is. It can be any 
                 valid expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
                 you are using. For example: "CliBal > 100000 and CliCat = 'C'". 
                 Including "where" in the expression itself is optional.  It will 
                 be prefixed to the expression if it is not provided.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param dBFieldName  Optional:NO 
                 Name of the FIELD within DBTableName used in the verification
              
     @param dBTableName  Optional:NO 
                 Name of the TABLE to access within the DBSourceName
     @param dBQueryCond  Optional:YES 
                 Expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
              
     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     @param prompt  Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              
     @param expectedValue  Optional:NO 
                 Benchmark value to compare against retrieved DBFieldName value
              
     **********/
    public void verifyDBValue(StepTestTable table, String dBFieldName, String dBTableName, String dBQueryCond, String dBSourceName, String userID, String password, String prompt, String expectedValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyDBValue.table = null");

        if ( dBFieldName == null ) throw new IllegalArgumentException ( "verifyDBValue.dBFieldName = null");
        if ( dBSourceName == null ) throw new IllegalArgumentException ( "verifyDBValue.dBSourceName = null");
        if ( dBTableName == null ) throw new IllegalArgumentException ( "verifyDBValue.dBTableName = null");
        if ( expectedValue == null ) throw new IllegalArgumentException ( "verifyDBValue.expectedValue = null");
        table.add( DatabaseFunctions.verifyDBValue(getWindow().getName(), getName(), dBFieldName, dBTableName, dBQueryCond, dBSourceName, userID, password, prompt, expectedValue));
    }

    /*********** <pre> 
                 Verifies the case-sensitive value of a field in a database table
              
                 Verifies the case-sensitive value of a field in a database table.
                 
                 To return the value, it executes a SQL query sentence using an ODBC 
                 data source to connect to the data base. 
                 
                 A table and field name are required. You also have to specify data source name,
                 and optionally user id and password (this is because some drivers
                 don't need a user/password).
                 
                 To do: if user id and/or password are not specified, don't include
                 them in the connection string. This would allow the possibility
                 to specify them in the data source definition.
                 
                 If the query returns more than one record, the returned value
                 is the corresponding to the first one, unless the field name
                 be something like COUNT(*) or SUM(InvoiceTot).
                 
                 A query condition can be included, usually it is. It can be any 
                 valid expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
                 you are using. For example: "CliBal > 100000 and CliCat = 'C'". 
                 Including "where" in the expression itself is optional.  It will 
                 be prefixed to the expression if it is not provided.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         dBFieldName -- Optional:NO 
                 Name of the FIELD within DBTableName used in the verification
              <BR/>         dBTableName -- Optional:NO 
                 Name of the TABLE to access within the DBSourceName<BR/>         dBQueryCond -- Optional:YES 
                 Expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
              <BR/>         dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>         userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>         password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              <BR/>         prompt -- Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              <BR/>         expectedValue -- Optional:NO 
                 Benchmark value to compare against retrieved DBFieldName value
              
    </UL>

     **********/
    public ComponentFunction verifyDBValue(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyDBValue.parameters = null");
        return DatabaseFunctions.verifyDBValue(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Verifies the case-sensitive value of a field in a database table
              
                 Verifies the case-sensitive value of a field in a database table.
                 
                 To return the value, it executes a SQL query sentence using an ODBC 
                 data source to connect to the data base. 
                 
                 A table and field name are required. You also have to specify data source name,
                 and optionally user id and password (this is because some drivers
                 don't need a user/password).
                 
                 To do: if user id and/or password are not specified, don't include
                 them in the connection string. This would allow the possibility
                 to specify them in the data source definition.
                 
                 If the query returns more than one record, the returned value
                 is the corresponding to the first one, unless the field name
                 be something like COUNT(*) or SUM(InvoiceTot).
                 
                 A query condition can be included, usually it is. It can be any 
                 valid expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
                 you are using. For example: "CliBal > 100000 and CliCat = 'C'". 
                 Including "where" in the expression itself is optional.  It will 
                 be prefixed to the expression if it is not provided.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         dBFieldName -- Optional:NO 
                 Name of the FIELD within DBTableName used in the verification
              <BR/>         dBTableName -- Optional:NO 
                 Name of the TABLE to access within the DBSourceName<BR/>         dBQueryCond -- Optional:YES 
                 Expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
              <BR/>         dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>         userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>         password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              <BR/>         prompt -- Optional:YES 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              <BR/>         expectedValue -- Optional:NO 
                 Benchmark value to compare against retrieved DBFieldName value
              
    </UL>

     **********/
    public void verifyDBValue(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyDBValue.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyDBValue.parameters = null");
        table.add( DatabaseFunctions.verifyDBValue(getWindow().getName(), getName(), parameters));
    }

}
