
/******************************************************************************
 * ListBox.java
 *
 * Copyright (C) SAS Institute, All rights reserved.
 * General Public License: https://www.gnu.org/licenses/gpl-3.0.en.html
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   ListBoxFunctions.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaComponentModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe ListBoxFunctions.xml XSLJavaComponentModel.xsl -o ListBox.java
 *
 ******************************************************************************/ 
package org.safs.model.components;

import org.safs.model.commands.ListBoxFunctions;
import org.safs.model.ComponentFunction;
import org.safs.model.components.UIComponent;
import org.safs.model.StepTestTable;

public class ListBox extends GenericObject {

    /*****************
    Constructor 

    Create an instance of pseudo-component representing 
    a specific component in a specific window.
    
    @param window  Optional:NO 
           Specifies which Window this component is 'in'.
    @param compname Optional:NO 
           Specifies the AppMap name of the component in the Window.
    ****************/
    public ListBox(Window window, String compname) {

        super(window, compname);
    }

    /*****************
    Constructor 

    Create an instance of pseudo-component representing 
    a specific component in a specific window.
    
    This convenience routine will create the requisite Window component.
    
    @param winname  Optional:NO 
           Specifies the AppMap name of the window.
    @param compname Optional:NO 
           Specifies the AppMap name of the component in the Window.
    ****************/
    public ListBox(String winname, String compname) {

        this(new Window(winname), compname);
    }

    protected ListBox(String compname) {

        super(compname);
    }



    /*********** <pre> 
                Routine to DblClick and Verify an item according to a partial text match.
               
                Routine to DblClick and Verify an item according to a partial text match.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive substring of node to DblClick and verify.
              
     **********/
    public ComponentFunction activatePartialMatch(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "activatePartialMatch.textValue = null");
        return ListBoxFunctions.activatePartialMatch(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                Routine to DblClick and Verify an item according to a partial text match.
               
                Routine to DblClick and Verify an item according to a partial text match.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive substring of node to DblClick and verify.
              
     **********/
    public void activatePartialMatch(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "activatePartialMatch.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "activatePartialMatch.textValue = null");
        table.add( ListBoxFunctions.activatePartialMatch(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                Routine to DblClick and Verify an item according to its text value.
               
                Routine to DblClick and Verify an item according to its text value.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of node to DblClick and verify.
              
     **********/
    public ComponentFunction activateTextItem(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "activateTextItem.textValue = null");
        return ListBoxFunctions.activateTextItem(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                Routine to DblClick and Verify an item according to its text value.
               
                Routine to DblClick and Verify an item according to its text value.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to DblClick and verify.
              
     **********/
    public void activateTextItem(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "activateTextItem.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "activateTextItem.textValue = null");
        table.add( ListBoxFunctions.activateTextItem(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                DblClicks an item according to a partial text match.
               
                DblClicks an item according to a partial text match.
                The item is activated but no check is performed after
                the selection to verify the selection was successful.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive substring of node to DblClick.
              
     **********/
    public ComponentFunction activateUnverifiedPartialMatch(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "activateUnverifiedPartialMatch.textValue = null");
        return ListBoxFunctions.activateUnverifiedPartialMatch(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                DblClicks an item according to a partial text match.
               
                DblClicks an item according to a partial text match.
                The item is activated but no check is performed after
                the selection to verify the selection was successful.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive substring of node to DblClick.
              
     **********/
    public void activateUnverifiedPartialMatch(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "activateUnverifiedPartialMatch.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "activateUnverifiedPartialMatch.textValue = null");
        table.add( ListBoxFunctions.activateUnverifiedPartialMatch(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                Routine to DblClick an item according to its text value.
               
                Routine to DblClick an item according to its text value.
                 No check is performed after the selection to verify success.  
                 This is typically done for cases when the listbox is only temporary 
                 in nature and disappears immediately upon a selection.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of node to DblClick.
              
     **********/
    public ComponentFunction activateUnverifiedTextItem(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "activateUnverifiedTextItem.textValue = null");
        return ListBoxFunctions.activateUnverifiedTextItem(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                Routine to DblClick an item according to its text value.
               
                Routine to DblClick an item according to its text value.
                 No check is performed after the selection to verify success.  
                 This is typically done for cases when the listbox is only temporary 
                 in nature and disappears immediately upon a selection.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to DblClick.
              
     **********/
    public void activateUnverifiedTextItem(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "activateUnverifiedTextItem.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "activateUnverifiedTextItem.textValue = null");
        table.add( ListBoxFunctions.activateUnverifiedTextItem(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre>
                Capture Items To a File specified (if not abs, then to test dir)
               
                Capture Items To a File specified (if not abs, then to test dir)
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param fileName  Optional:NO 
                 File name (if not absolute, then to test dir)
              
     @param fileEncoding  Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
     **********/
    public ComponentFunction captureItemsToFile(String fileName, String fileEncoding ) {

        if ( fileName == null ) throw new IllegalArgumentException ( "captureItemsToFile.fileName = null");
        return ListBoxFunctions.captureItemsToFile(getWindow().getName(), getName(), fileName, fileEncoding);
    }

    /*********** <pre>
                Capture Items To a File specified (if not abs, then to test dir)
               
                Capture Items To a File specified (if not abs, then to test dir)
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param fileName  Optional:NO 
                 File name (if not absolute, then to test dir)
              
     @param fileEncoding  Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
     **********/
    public void captureItemsToFile(StepTestTable table, String fileName, String fileEncoding ) {

        if ( table == null ) throw new IllegalArgumentException ( "captureItemsToFile.table = null");

        if ( fileName == null ) throw new IllegalArgumentException ( "captureItemsToFile.fileName = null");
        table.add( ListBoxFunctions.captureItemsToFile(getWindow().getName(), getName(), fileName, fileEncoding));
    }

    /*********** <pre>
                Capture Items To a File specified (if not abs, then to test dir)
               
                Capture Items To a File specified (if not abs, then to test dir)
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         fileName -- Optional:NO 
                 File name (if not absolute, then to test dir)
              <BR/>         fileEncoding -- Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
    </UL>

     **********/
    public ComponentFunction captureItemsToFile(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "captureItemsToFile.parameters = null");
        return ListBoxFunctions.captureItemsToFile(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre>
                Capture Items To a File specified (if not abs, then to test dir)
               
                Capture Items To a File specified (if not abs, then to test dir)
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         fileName -- Optional:NO 
                 File name (if not absolute, then to test dir)
              <BR/>         fileEncoding -- Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
    </UL>

     **********/
    public void captureItemsToFile(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "captureItemsToFile.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "captureItemsToFile.parameters = null");
        table.add( ListBoxFunctions.captureItemsToFile(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Click a column header based on it's index of list, starting from 1
               
                Click a column header based on it's index of list, starting from 1
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param index  Optional:NO 
                 Index of the column header to click, starting from 1
              
     **********/
    public ComponentFunction clickColumnIndex(String index ) {

        if ( index == null ) throw new IllegalArgumentException ( "clickColumnIndex.index = null");
        return ListBoxFunctions.clickColumnIndex(getWindow().getName(), getName(), index);
    }

    /*********** <pre> 
                Click a column header based on it's index of list, starting from 1
               
                Click a column header based on it's index of list, starting from 1
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param index  Optional:NO 
                 Index of the column header to click, starting from 1
              
     **********/
    public void clickColumnIndex(StepTestTable table, String index ) {

        if ( table == null ) throw new IllegalArgumentException ( "clickColumnIndex.table = null");

        if ( index == null ) throw new IllegalArgumentException ( "clickColumnIndex.index = null");
        table.add( ListBoxFunctions.clickColumnIndex(getWindow().getName(), getName(), index));
    }

    /*********** <pre> 
                Click a column header based on it's label
               
                Click a column header based on it's label
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param label  Optional:NO 
                 Label of the column header to click
              
     **********/
    public ComponentFunction clickColumnLabel(String label ) {

        if ( label == null ) throw new IllegalArgumentException ( "clickColumnLabel.label = null");
        return ListBoxFunctions.clickColumnLabel(getWindow().getName(), getName(), label);
    }

    /*********** <pre> 
                Click a column header based on it's label
               
                Click a column header based on it's label
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param label  Optional:NO 
                 Label of the column header to click
              
     **********/
    public void clickColumnLabel(StepTestTable table, String label ) {

        if ( table == null ) throw new IllegalArgumentException ( "clickColumnLabel.table = null");

        if ( label == null ) throw new IllegalArgumentException ( "clickColumnLabel.label = null");
        table.add( ListBoxFunctions.clickColumnLabel(getWindow().getName(), getName(), label));
    }

    /*********** <pre> 
                Routine to Click a selection according to its text value.
		Note: This keyword triggers the click event 
               
                Routine to Click a selection according to its text value.
		NOTE: Only ClickTextItem keyword triggers the click event.  SelectTextItem
                         keyword fails to trigger click event on some instances.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of node to select.
              
     **********/
    public ComponentFunction clickTextItem(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "clickTextItem.textValue = null");
        return ListBoxFunctions.clickTextItem(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                Routine to Click a selection according to its text value.
		Note: This keyword triggers the click event 
               
                Routine to Click a selection according to its text value.
		NOTE: Only ClickTextItem keyword triggers the click event.  SelectTextItem
                         keyword fails to trigger click event on some instances.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to select.
              
     **********/
    public void clickTextItem(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "clickTextItem.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "clickTextItem.textValue = null");
        table.add( ListBoxFunctions.clickTextItem(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                Routine to Shift+Click and Verify a selection according to its text value.
               
                This extends the current selection to include the specified
		selection and all other items inbetween.
                NOTE: This may not work in all environments (Java, Web, etc...)
                
                For example, in Java, we can usually verify that an item exists 
                in the list; but we do not seem to be able to verify if a newly 
                added selection to multiple selections is actually selected.
                
                
                So, for Java, we will verify existence in the list, but we cannot 
                verify the selection was successful--we will skip that last check.
                
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of node to select and verify.
              
     **********/
    public ComponentFunction extendSelectionToTextItem(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "extendSelectionToTextItem.textValue = null");
        return ListBoxFunctions.extendSelectionToTextItem(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                Routine to Shift+Click and Verify a selection according to its text value.
               
                This extends the current selection to include the specified
		selection and all other items inbetween.
                NOTE: This may not work in all environments (Java, Web, etc...)
                
                For example, in Java, we can usually verify that an item exists 
                in the list; but we do not seem to be able to verify if a newly 
                added selection to multiple selections is actually selected.
                
                
                So, for Java, we will verify existence in the list, but we cannot 
                verify the selection was successful--we will skip that last check.
                
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to select and verify.
              
     **********/
    public void extendSelectionToTextItem(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "extendSelectionToTextItem.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "extendSelectionToTextItem.textValue = null");
        table.add( ListBoxFunctions.extendSelectionToTextItem(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                Routine to Right-Click a selection according to its text value.
		Note: This keyword triggers the right-click event.
               
                Routine to Right-Click a selection according to its text value.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of node to right-click on.
              
     **********/
    public ComponentFunction rightClickTextItem(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "rightClickTextItem.textValue = null");
        return ListBoxFunctions.rightClickTextItem(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                Routine to Right-Click a selection according to its text value.
		Note: This keyword triggers the right-click event.
               
                Routine to Right-Click a selection according to its text value.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to right-click on.
              
     **********/
    public void rightClickTextItem(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "rightClickTextItem.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "rightClickTextItem.textValue = null");
        table.add( ListBoxFunctions.rightClickTextItem(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                Routine to Control+Click and Verify a selection according to its text value.
               
                This adds selected items to items already selected.
                NOTE: This may not work in all environments (Java, Web, etc...)
                
                For example, in Java, we can usually verify that an item exists 
                in the list; but we do not seem to be able to verify if a newly 
                added selection to multiple selections is actually selected.
                
                
                So, for Java, we will verify existence in the list, but we cannot 
                verify the selection was successful--we will skip that last check.
                
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of node to select and verify.
              
     **********/
    public ComponentFunction selectAnotherTextItem(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "selectAnotherTextItem.textValue = null");
        return ListBoxFunctions.selectAnotherTextItem(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                Routine to Control+Click and Verify a selection according to its text value.
               
                This adds selected items to items already selected.
                NOTE: This may not work in all environments (Java, Web, etc...)
                
                For example, in Java, we can usually verify that an item exists 
                in the list; but we do not seem to be able to verify if a newly 
                added selection to multiple selections is actually selected.
                
                
                So, for Java, we will verify existence in the list, but we cannot 
                verify the selection was successful--we will skip that last check.
                
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to select and verify.
              
     **********/
    public void selectAnotherTextItem(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectAnotherTextItem.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectAnotherTextItem.textValue = null");
        table.add( ListBoxFunctions.selectAnotherTextItem(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                Routine to Control+Click an item according to its text value.
                 No post-select verification of the selection is performed.
               
                Routine to Control+Click an item according to its text value.
                No post-select verification of the selection is performed.  This selection 
                is added to any items already selected.  
                NOTE: This may not work in all environments (Java, Web, etc...)
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of node to select.
              
     **********/
    public ComponentFunction selectAnotherUnverifiedTextItem(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "selectAnotherUnverifiedTextItem.textValue = null");
        return ListBoxFunctions.selectAnotherUnverifiedTextItem(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                Routine to Control+Click an item according to its text value.
                 No post-select verification of the selection is performed.
               
                Routine to Control+Click an item according to its text value.
                No post-select verification of the selection is performed.  This selection 
                is added to any items already selected.  
                NOTE: This may not work in all environments (Java, Web, etc...)
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to select.
              
     **********/
    public void selectAnotherUnverifiedTextItem(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectAnotherUnverifiedTextItem.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectAnotherUnverifiedTextItem.textValue = null");
        table.add( ListBoxFunctions.selectAnotherUnverifiedTextItem(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                Select an item based on it's index in the list, starting from 1
               
                Select an item based on it's index in the list, starting from 1
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param index  Optional:NO 
                 Index of the text item to select, starting from 1
              
     **********/
    public ComponentFunction selectIndex(String index ) {

        if ( index == null ) throw new IllegalArgumentException ( "selectIndex.index = null");
        return ListBoxFunctions.selectIndex(getWindow().getName(), getName(), index);
    }

    /*********** <pre> 
                Select an item based on it's index in the list, starting from 1
               
                Select an item based on it's index in the list, starting from 1
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param index  Optional:NO 
                 Index of the text item to select, starting from 1
              
     **********/
    public void selectIndex(StepTestTable table, String index ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectIndex.table = null");

        if ( index == null ) throw new IllegalArgumentException ( "selectIndex.index = null");
        table.add( ListBoxFunctions.selectIndex(getWindow().getName(), getName(), index));
    }

    /*********** <pre> 
                Routine to Click and Verify an item according to a partial text match.
               
                Routine to Click and Verify an item according to a partial text match.
                Note: for RobotJ, same as SelectUnverifiedPartialMatch
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive substring of node to select and verify.
              
     **********/
    public ComponentFunction selectPartialMatch(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "selectPartialMatch.textValue = null");
        return ListBoxFunctions.selectPartialMatch(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                Routine to Click and Verify an item according to a partial text match.
               
                Routine to Click and Verify an item according to a partial text match.
                Note: for RobotJ, same as SelectUnverifiedPartialMatch
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive substring of node to select and verify.
              
     **********/
    public void selectPartialMatch(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectPartialMatch.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectPartialMatch.textValue = null");
        table.add( ListBoxFunctions.selectPartialMatch(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                Routine to Click and Verify a selection according to its text value.
               
                Routine to Click and Verify a selection according to
                its text value.
                Note: RobotJ also uses the identical keyword 'Select'
                Note: For RobotJ, there is no additional verify step in
                the framework code, in other words, for
                RobotJ, the SelectTextItem and
                SelectUnverifiedTextItem keywords are identical
                because RobotJ does all of the verification internally
                and there is no control over that in it's api.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of node to select and verify.
              
     **********/
    public ComponentFunction selectTextItem(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "selectTextItem.textValue = null");
        return ListBoxFunctions.selectTextItem(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                Routine to Click and Verify a selection according to its text value.
               
                Routine to Click and Verify a selection according to
                its text value.
                Note: RobotJ also uses the identical keyword 'Select'
                Note: For RobotJ, there is no additional verify step in
                the framework code, in other words, for
                RobotJ, the SelectTextItem and
                SelectUnverifiedTextItem keywords are identical
                because RobotJ does all of the verification internally
                and there is no control over that in it's api.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to select and verify.
              
     **********/
    public void selectTextItem(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectTextItem.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectTextItem.textValue = null");
        table.add( ListBoxFunctions.selectTextItem(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                Use the identical "SelectAnotherUnverifiedTextItem" instead.
               
                Routine to Control+Click an item according to its text value.
                No post-select verification of the selection is performed.  This selection 
                is added to any items already selected.  
                NOTE: This may not work in all environments (Java, Web, etc...)
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of node to select.
              
     **********/
    public ComponentFunction selectUnverifiedAnotherTextItem(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "selectUnverifiedAnotherTextItem.textValue = null");
        return ListBoxFunctions.selectUnverifiedAnotherTextItem(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                Use the identical "SelectAnotherUnverifiedTextItem" instead.
               
                Routine to Control+Click an item according to its text value.
                No post-select verification of the selection is performed.  This selection 
                is added to any items already selected.  
                NOTE: This may not work in all environments (Java, Web, etc...)
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to select.
              
     **********/
    public void selectUnverifiedAnotherTextItem(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectUnverifiedAnotherTextItem.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectUnverifiedAnotherTextItem.textValue = null");
        table.add( ListBoxFunctions.selectUnverifiedAnotherTextItem(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                Routine to Click an item according to a partial text match.
               
                Routine to Click an item according to a partial text match.
                 No check is performed after the selection to verify success.  
                 This is typically done for cases when the listbox is only temporary 
                 in nature and disappears immediately upon a selection.
                Note: for RobotJ, same as SelectPartialMatch
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive substring of node to select.
              
     **********/
    public ComponentFunction selectUnverifiedPartialMatch(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "selectUnverifiedPartialMatch.textValue = null");
        return ListBoxFunctions.selectUnverifiedPartialMatch(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                Routine to Click an item according to a partial text match.
               
                Routine to Click an item according to a partial text match.
                 No check is performed after the selection to verify success.  
                 This is typically done for cases when the listbox is only temporary 
                 in nature and disappears immediately upon a selection.
                Note: for RobotJ, same as SelectPartialMatch
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive substring of node to select.
              
     **********/
    public void selectUnverifiedPartialMatch(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectUnverifiedPartialMatch.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectUnverifiedPartialMatch.textValue = null");
        table.add( ListBoxFunctions.selectUnverifiedPartialMatch(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                Routine to Click a selection according to its text value.
               
                Routine to Click a selection according to its text value. 
                 No check is performed after the selection to verify success.  
                 This is typically done for cases when the listbox is only temporary 
                 in nature and disappears immediately upon a
                selection.
                Note: RobotJ also uses the identical keyword 'SelectUnverified'
                Note: This is the default for RobotJ, in other words, for
                RobotJ, the SelectTextItem and
                SelectUnverifiedTextItem keywords are identical
                because RobotJ does all of the verification internally
                and there is no control over that in it's api.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of node to select.
              
     **********/
    public ComponentFunction selectUnverifiedTextItem(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "selectUnverifiedTextItem.textValue = null");
        return ListBoxFunctions.selectUnverifiedTextItem(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                Routine to Click a selection according to its text value.
               
                Routine to Click a selection according to its text value. 
                 No check is performed after the selection to verify success.  
                 This is typically done for cases when the listbox is only temporary 
                 in nature and disappears immediately upon a
                selection.
                Note: RobotJ also uses the identical keyword 'SelectUnverified'
                Note: This is the default for RobotJ, in other words, for
                RobotJ, the SelectTextItem and
                SelectUnverifiedTextItem keywords are identical
                because RobotJ does all of the verification internally
                and there is no control over that in it's api.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to select.
              
     **********/
    public void selectUnverifiedTextItem(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectUnverifiedTextItem.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectUnverifiedTextItem.textValue = null");
        table.add( ListBoxFunctions.selectUnverifiedTextItem(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre>
            	Set a variable with the result of checking that a listview contains the provided item.
			
            	The search of the item is expected to be a case-sensitive exact match of the item.  The
            	   provided variable is set with 'TRUE' if the item is found or 'FALSE' if the item is not found.
                </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param itemText  Optional:NO
						The case-sensitive name of the sought item.
					
     @param resultVar  Optional:NO
						The name of the variable receiving the result.
					
     **********/
    public ComponentFunction setListContains(String itemText, String resultVar ) {

        if ( itemText == null ) throw new IllegalArgumentException ( "setListContains.itemText = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "setListContains.resultVar = null");
        return ListBoxFunctions.setListContains(getWindow().getName(), getName(), itemText, resultVar);
    }

    /*********** <pre>
            	Set a variable with the result of checking that a listview contains the provided item.
			
            	The search of the item is expected to be a case-sensitive exact match of the item.  The
            	   provided variable is set with 'TRUE' if the item is found or 'FALSE' if the item is not found.
                </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param itemText  Optional:NO
						The case-sensitive name of the sought item.
					
     @param resultVar  Optional:NO
						The name of the variable receiving the result.
					
     **********/
    public void setListContains(StepTestTable table, String itemText, String resultVar ) {

        if ( table == null ) throw new IllegalArgumentException ( "setListContains.table = null");

        if ( itemText == null ) throw new IllegalArgumentException ( "setListContains.itemText = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "setListContains.resultVar = null");
        table.add( ListBoxFunctions.setListContains(getWindow().getName(), getName(), itemText, resultVar));
    }

    /*********** <pre>
            	Set a variable with the result of checking that a listview contains the provided item.
			
            	The search of the item is expected to be a case-sensitive exact match of the item.  The
            	   provided variable is set with 'TRUE' if the item is found or 'FALSE' if the item is not found.
                </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         itemText -- Optional:NO
						The case-sensitive name of the sought item.
					<BR/>         resultVar -- Optional:NO
						The name of the variable receiving the result.
					
    </UL>

     **********/
    public ComponentFunction setListContains(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "setListContains.parameters = null");
        return ListBoxFunctions.setListContains(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre>
            	Set a variable with the result of checking that a listview contains the provided item.
			
            	The search of the item is expected to be a case-sensitive exact match of the item.  The
            	   provided variable is set with 'TRUE' if the item is found or 'FALSE' if the item is not found.
                </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         itemText -- Optional:NO
						The case-sensitive name of the sought item.
					<BR/>         resultVar -- Optional:NO
						The name of the variable receiving the result.
					
    </UL>

     **********/
    public void setListContains(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "setListContains.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "setListContains.parameters = null");
        table.add( ListBoxFunctions.setListContains(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Verifies a particular case-sensitive item based on index is equal
                to a particular value.
               
                Verifies a particular case-sensitive item based on index is equal
                to a particular value.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param index  Optional:NO 
                 Index of the item in the list starting from 1
              
     @param textValue  Optional:NO 
                 Case-sensitive string to compare to the text of the node at the index.
              
     **********/
    public ComponentFunction verifyItem(String index, String textValue ) {

        if ( index == null ) throw new IllegalArgumentException ( "verifyItem.index = null");
        if ( textValue == null ) throw new IllegalArgumentException ( "verifyItem.textValue = null");
        return ListBoxFunctions.verifyItem(getWindow().getName(), getName(), index, textValue);
    }

    /*********** <pre> 
                Verifies a particular case-sensitive item based on index is equal
                to a particular value.
               
                Verifies a particular case-sensitive item based on index is equal
                to a particular value.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param index  Optional:NO 
                 Index of the item in the list starting from 1
              
     @param textValue  Optional:NO 
                 Case-sensitive string to compare to the text of the node at the index.
              
     **********/
    public void verifyItem(StepTestTable table, String index, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyItem.table = null");

        if ( index == null ) throw new IllegalArgumentException ( "verifyItem.index = null");
        if ( textValue == null ) throw new IllegalArgumentException ( "verifyItem.textValue = null");
        table.add( ListBoxFunctions.verifyItem(getWindow().getName(), getName(), index, textValue));
    }

    /*********** <pre> 
                Verifies a particular case-sensitive item based on index is equal
                to a particular value.
               
                Verifies a particular case-sensitive item based on index is equal
                to a particular value.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         index -- Optional:NO 
                 Index of the item in the list starting from 1
              <BR/>         textValue -- Optional:NO 
                 Case-sensitive string to compare to the text of the node at the index.
              
    </UL>

     **********/
    public ComponentFunction verifyItem(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyItem.parameters = null");
        return ListBoxFunctions.verifyItem(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                Verifies a particular case-sensitive item based on index is equal
                to a particular value.
               
                Verifies a particular case-sensitive item based on index is equal
                to a particular value.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         index -- Optional:NO 
                 Index of the item in the list starting from 1
              <BR/>         textValue -- Optional:NO 
                 Case-sensitive string to compare to the text of the node at the index.
              
    </UL>

     **********/
    public void verifyItem(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyItem.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyItem.parameters = null");
        table.add( ListBoxFunctions.verifyItem(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Verifies a particular case-sensitive text item is NOT selected.
               
                Verifies a particular case-sensitive text item is NOT selected.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of node that will be verified as unselected
              
     **********/
    public ComponentFunction verifyItemUnselected(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "verifyItemUnselected.textValue = null");
        return ListBoxFunctions.verifyItemUnselected(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                Verifies a particular case-sensitive text item is NOT selected.
               
                Verifies a particular case-sensitive text item is NOT selected.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of node that will be verified as unselected
              
     **********/
    public void verifyItemUnselected(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyItemUnselected.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "verifyItemUnselected.textValue = null");
        table.add( ListBoxFunctions.verifyItemUnselected(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                Verifies a particular list-item exists in the list (somewhere)
               
                Verifies a particular list-item exists in the list (somewhere).  The comparison 
                can be case-sensitive.  By default, it is not.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 String to look for in the list.
              
     @param caseSensitive  Optional:YES 
	                 Optional "True" for case-sensitive search
	              
     **********/
    public ComponentFunction verifyListContains(String textValue, String caseSensitive ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "verifyListContains.textValue = null");
        return ListBoxFunctions.verifyListContains(getWindow().getName(), getName(), textValue, caseSensitive);
    }

    /*********** <pre> 
                Verifies a particular list-item exists in the list (somewhere)
               
                Verifies a particular list-item exists in the list (somewhere).  The comparison 
                can be case-sensitive.  By default, it is not.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 String to look for in the list.
              
     @param caseSensitive  Optional:YES 
	                 Optional "True" for case-sensitive search
	              
     **********/
    public void verifyListContains(StepTestTable table, String textValue, String caseSensitive ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyListContains.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "verifyListContains.textValue = null");
        table.add( ListBoxFunctions.verifyListContains(getWindow().getName(), getName(), textValue, caseSensitive));
    }

    /*********** <pre> 
                Verifies a particular list-item exists in the list (somewhere)
               
                Verifies a particular list-item exists in the list (somewhere).  The comparison 
                can be case-sensitive.  By default, it is not.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 String to look for in the list.
              <BR/>         caseSensitive -- Optional:YES 
	                 Optional "True" for case-sensitive search
	              
    </UL>

     **********/
    public ComponentFunction verifyListContains(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyListContains.parameters = null");
        return ListBoxFunctions.verifyListContains(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                Verifies a particular list-item exists in the list (somewhere)
               
                Verifies a particular list-item exists in the list (somewhere).  The comparison 
                can be case-sensitive.  By default, it is not.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 String to look for in the list.
              <BR/>         caseSensitive -- Optional:YES 
	                 Optional "True" for case-sensitive search
	              
    </UL>

     **********/
    public void verifyListContains(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyListContains.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyListContains.parameters = null");
        table.add( ListBoxFunctions.verifyListContains(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Verifies a particular list-item substring exists in the list (somewhere)
               
                Verifies a particular list-item substring exists in the list (somewhere).  The comparison 
                can be case-sensitive.  By default, it is not.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 SubString to look for in the list.
              
     @param caseSensitive  Optional:YES 
	                 Optional "True" for case-sensitive search
	              
     **********/
    public ComponentFunction verifyListContainsPartialMatch(String textValue, String caseSensitive ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "verifyListContainsPartialMatch.textValue = null");
        return ListBoxFunctions.verifyListContainsPartialMatch(getWindow().getName(), getName(), textValue, caseSensitive);
    }

    /*********** <pre> 
                Verifies a particular list-item substring exists in the list (somewhere)
               
                Verifies a particular list-item substring exists in the list (somewhere).  The comparison 
                can be case-sensitive.  By default, it is not.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 SubString to look for in the list.
              
     @param caseSensitive  Optional:YES 
	                 Optional "True" for case-sensitive search
	              
     **********/
    public void verifyListContainsPartialMatch(StepTestTable table, String textValue, String caseSensitive ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyListContainsPartialMatch.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "verifyListContainsPartialMatch.textValue = null");
        table.add( ListBoxFunctions.verifyListContainsPartialMatch(getWindow().getName(), getName(), textValue, caseSensitive));
    }

    /*********** <pre> 
                Verifies a particular list-item substring exists in the list (somewhere)
               
                Verifies a particular list-item substring exists in the list (somewhere).  The comparison 
                can be case-sensitive.  By default, it is not.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 SubString to look for in the list.
              <BR/>         caseSensitive -- Optional:YES 
	                 Optional "True" for case-sensitive search
	              
    </UL>

     **********/
    public ComponentFunction verifyListContainsPartialMatch(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyListContainsPartialMatch.parameters = null");
        return ListBoxFunctions.verifyListContainsPartialMatch(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                Verifies a particular list-item substring exists in the list (somewhere)
               
                Verifies a particular list-item substring exists in the list (somewhere).  The comparison 
                can be case-sensitive.  By default, it is not.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 SubString to look for in the list.
              <BR/>         caseSensitive -- Optional:YES 
	                 Optional "True" for case-sensitive search
	              
    </UL>

     **********/
    public void verifyListContainsPartialMatch(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyListContainsPartialMatch.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyListContainsPartialMatch.parameters = null");
        table.add( ListBoxFunctions.verifyListContainsPartialMatch(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                     Verifies a particular list-item does NOT exists in the list (somewhere)
                    
                     Verifies a particular list-item does NOT exists in the list (somewhere).  
                     The comparison can be case-sensitive.  It is NOT case-sensitive by default.
                       </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                      String to look for in the list.
                   
     @param caseSensitive  Optional:YES 
     	                 Optional "True" for case-sensitive search
     	              
     **********/
    public ComponentFunction verifyListDoesNotContain(String textValue, String caseSensitive ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "verifyListDoesNotContain.textValue = null");
        return ListBoxFunctions.verifyListDoesNotContain(getWindow().getName(), getName(), textValue, caseSensitive);
    }

    /*********** <pre> 
                     Verifies a particular list-item does NOT exists in the list (somewhere)
                    
                     Verifies a particular list-item does NOT exists in the list (somewhere).  
                     The comparison can be case-sensitive.  It is NOT case-sensitive by default.
                       </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                      String to look for in the list.
                   
     @param caseSensitive  Optional:YES 
     	                 Optional "True" for case-sensitive search
     	              
     **********/
    public void verifyListDoesNotContain(StepTestTable table, String textValue, String caseSensitive ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyListDoesNotContain.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "verifyListDoesNotContain.textValue = null");
        table.add( ListBoxFunctions.verifyListDoesNotContain(getWindow().getName(), getName(), textValue, caseSensitive));
    }

    /*********** <pre> 
                     Verifies a particular list-item does NOT exists in the list (somewhere)
                    
                     Verifies a particular list-item does NOT exists in the list (somewhere).  
                     The comparison can be case-sensitive.  It is NOT case-sensitive by default.
                       </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                      String to look for in the list.
                   <BR/>         caseSensitive -- Optional:YES 
     	                 Optional "True" for case-sensitive search
     	              
    </UL>

     **********/
    public ComponentFunction verifyListDoesNotContain(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyListDoesNotContain.parameters = null");
        return ListBoxFunctions.verifyListDoesNotContain(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                     Verifies a particular list-item does NOT exists in the list (somewhere)
                    
                     Verifies a particular list-item does NOT exists in the list (somewhere).  
                     The comparison can be case-sensitive.  It is NOT case-sensitive by default.
                       </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                      String to look for in the list.
                   <BR/>         caseSensitive -- Optional:YES 
     	                 Optional "True" for case-sensitive search
     	              
    </UL>

     **********/
    public void verifyListDoesNotContain(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyListDoesNotContain.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyListDoesNotContain.parameters = null");
        table.add( ListBoxFunctions.verifyListDoesNotContain(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                     Verifies a particular list-item substring does NOT exists in the list (somewhere)
                    
                     Verifies a particular list-item substring does NOT exists in the list (somewhere).  
                     The comparison can be case-sensitive.  It is NOT case-sensitive by default.
                       </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                      SubString to look for in the list.
                   
     @param caseSensitive  Optional:YES 
     	                 Optional "True" for case-sensitive search
     	              
     **********/
    public ComponentFunction verifyListDoesNotContainPartialMatch(String textValue, String caseSensitive ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "verifyListDoesNotContainPartialMatch.textValue = null");
        return ListBoxFunctions.verifyListDoesNotContainPartialMatch(getWindow().getName(), getName(), textValue, caseSensitive);
    }

    /*********** <pre> 
                     Verifies a particular list-item substring does NOT exists in the list (somewhere)
                    
                     Verifies a particular list-item substring does NOT exists in the list (somewhere).  
                     The comparison can be case-sensitive.  It is NOT case-sensitive by default.
                       </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                      SubString to look for in the list.
                   
     @param caseSensitive  Optional:YES 
     	                 Optional "True" for case-sensitive search
     	              
     **********/
    public void verifyListDoesNotContainPartialMatch(StepTestTable table, String textValue, String caseSensitive ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyListDoesNotContainPartialMatch.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "verifyListDoesNotContainPartialMatch.textValue = null");
        table.add( ListBoxFunctions.verifyListDoesNotContainPartialMatch(getWindow().getName(), getName(), textValue, caseSensitive));
    }

    /*********** <pre> 
                     Verifies a particular list-item substring does NOT exists in the list (somewhere)
                    
                     Verifies a particular list-item substring does NOT exists in the list (somewhere).  
                     The comparison can be case-sensitive.  It is NOT case-sensitive by default.
                       </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                      SubString to look for in the list.
                   <BR/>         caseSensitive -- Optional:YES 
     	                 Optional "True" for case-sensitive search
     	              
    </UL>

     **********/
    public ComponentFunction verifyListDoesNotContainPartialMatch(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyListDoesNotContainPartialMatch.parameters = null");
        return ListBoxFunctions.verifyListDoesNotContainPartialMatch(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                     Verifies a particular list-item substring does NOT exists in the list (somewhere)
                    
                     Verifies a particular list-item substring does NOT exists in the list (somewhere).  
                     The comparison can be case-sensitive.  It is NOT case-sensitive by default.
                       </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                      SubString to look for in the list.
                   <BR/>         caseSensitive -- Optional:YES 
     	                 Optional "True" for case-sensitive search
     	              
    </UL>

     **********/
    public void verifyListDoesNotContainPartialMatch(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyListDoesNotContainPartialMatch.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyListDoesNotContainPartialMatch.parameters = null");
        table.add( ListBoxFunctions.verifyListDoesNotContainPartialMatch(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Verifies a particular case-sensitive menu-item exists
                in the list (somewhere)
               
                Verifies a particular case-sensitive menu-item exists
                in the list (somewhere)
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive string to compare to the text of any node in the list.
              
     **********/
    public ComponentFunction verifyMenuItem(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "verifyMenuItem.textValue = null");
        return ListBoxFunctions.verifyMenuItem(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                Verifies a particular case-sensitive menu-item exists
                in the list (somewhere)
               
                Verifies a particular case-sensitive menu-item exists
                in the list (somewhere)
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive string to compare to the text of any node in the list.
              
     **********/
    public void verifyMenuItem(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyMenuItem.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "verifyMenuItem.textValue = null");
        table.add( ListBoxFunctions.verifyMenuItem(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                Verifies a particular case-insensitive menu-item
                substring exists in the list (somewhere)
               
                Verifies a particular case-insensitive menu-item
                substring exists in the list (somewhere)
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-insensitive substring to compare to the text of any node in the list.
              
     **********/
    public ComponentFunction verifyMenuPartialMatch(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "verifyMenuPartialMatch.textValue = null");
        return ListBoxFunctions.verifyMenuPartialMatch(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                Verifies a particular case-insensitive menu-item
                substring exists in the list (somewhere)
               
                Verifies a particular case-insensitive menu-item
                substring exists in the list (somewhere)
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-insensitive substring to compare to the text of any node in the list.
              
     **********/
    public void verifyMenuPartialMatch(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyMenuPartialMatch.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "verifyMenuPartialMatch.textValue = null");
        table.add( ListBoxFunctions.verifyMenuPartialMatch(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                Verifies a particular case-insensitive item based on
                index is has as substring a particular value.
               
                Verifies a particular case-insensitive item based on
                index is has as substring a particular value.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param index  Optional:NO 
                 Index of the item in the list starting from 1
              
     @param textValue  Optional:NO 
                 Case-insensitive substring to compare to the text of the node at the index.
              
     **********/
    public ComponentFunction verifyPartialMatch(String index, String textValue ) {

        if ( index == null ) throw new IllegalArgumentException ( "verifyPartialMatch.index = null");
        if ( textValue == null ) throw new IllegalArgumentException ( "verifyPartialMatch.textValue = null");
        return ListBoxFunctions.verifyPartialMatch(getWindow().getName(), getName(), index, textValue);
    }

    /*********** <pre> 
                Verifies a particular case-insensitive item based on
                index is has as substring a particular value.
               
                Verifies a particular case-insensitive item based on
                index is has as substring a particular value.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param index  Optional:NO 
                 Index of the item in the list starting from 1
              
     @param textValue  Optional:NO 
                 Case-insensitive substring to compare to the text of the node at the index.
              
     **********/
    public void verifyPartialMatch(StepTestTable table, String index, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyPartialMatch.table = null");

        if ( index == null ) throw new IllegalArgumentException ( "verifyPartialMatch.index = null");
        if ( textValue == null ) throw new IllegalArgumentException ( "verifyPartialMatch.textValue = null");
        table.add( ListBoxFunctions.verifyPartialMatch(getWindow().getName(), getName(), index, textValue));
    }

    /*********** <pre> 
                Verifies a particular case-insensitive item based on
                index is has as substring a particular value.
               
                Verifies a particular case-insensitive item based on
                index is has as substring a particular value.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         index -- Optional:NO 
                 Index of the item in the list starting from 1
              <BR/>         textValue -- Optional:NO 
                 Case-insensitive substring to compare to the text of the node at the index.
              
    </UL>

     **********/
    public ComponentFunction verifyPartialMatch(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyPartialMatch.parameters = null");
        return ListBoxFunctions.verifyPartialMatch(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                Verifies a particular case-insensitive item based on
                index is has as substring a particular value.
               
                Verifies a particular case-insensitive item based on
                index is has as substring a particular value.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         index -- Optional:NO 
                 Index of the item in the list starting from 1
              <BR/>         textValue -- Optional:NO 
                 Case-insensitive substring to compare to the text of the node at the index.
              
    </UL>

     **********/
    public void verifyPartialMatch(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyPartialMatch.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyPartialMatch.parameters = null");
        table.add( ListBoxFunctions.verifyPartialMatch(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Verifies a particular case-sensitive text item is selected
               
                Verifies a particular case-sensitive text item is selected
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of node that will be verified as selected
              
     **********/
    public ComponentFunction verifySelectedItem(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "verifySelectedItem.textValue = null");
        return ListBoxFunctions.verifySelectedItem(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                Verifies a particular case-sensitive text item is selected
               
                Verifies a particular case-sensitive text item is selected
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of node that will be verified as selected
              
     **********/
    public void verifySelectedItem(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifySelectedItem.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "verifySelectedItem.textValue = null");
        table.add( ListBoxFunctions.verifySelectedItem(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                Verifies a particular case-sensitive item is selected 
                based on a substring match.
               
                Verifies a particular case-sensitive item is selected
                based on a substring match.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive substring of node that will be verified selected
              
     **********/
    public ComponentFunction verifySelectedPartialMatch(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "verifySelectedPartialMatch.textValue = null");
        return ListBoxFunctions.verifySelectedPartialMatch(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                Verifies a particular case-sensitive item is selected 
                based on a substring match.
               
                Verifies a particular case-sensitive item is selected
                based on a substring match.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive substring of node that will be verified selected
              
     **********/
    public void verifySelectedPartialMatch(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifySelectedPartialMatch.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "verifySelectedPartialMatch.textValue = null");
        table.add( ListBoxFunctions.verifySelectedPartialMatch(getWindow().getName(), getName(), textValue));
    }

}
