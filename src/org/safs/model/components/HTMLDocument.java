
/******************************************************************************
 * HTMLDocument.java
 *
 * Copyright (c) by SAS Institute Inc., Cary, NC 27513
 * General Public License: http://www.opensource.org/licenses/gpl-license.php
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   HTMLDocumentFunctions.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaComponentModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe HTMLDocumentFunctions.xml XSLJavaComponentModel.xsl -o HTMLDocument.java
 *
 ******************************************************************************/ 
package org.safs.model.components;

import org.safs.model.commands.HTMLDocumentFunctions;
import org.safs.model.ComponentFunction;
import org.safs.model.components.UIComponent;
import org.safs.model.StepTestTable;

public class HTMLDocument extends HTML {

    /*****************
    Constructor 

    Create an instance of pseudo-component representing 
    a specific component in a specific window.
    
    @param window  Optional:NO 
           Specifies which Window this component is 'in'.
    @param compname Optional:NO 
           Specifies the AppMap name of the component in the Window.
    ****************/
    public HTMLDocument(Window window, String compname) {

        super(window, compname);
    }

    /*****************
    Constructor 

    Create an instance of pseudo-component representing 
    a specific component in a specific window.
    
    This convenience routine will create the requisite Window component.
    
    @param winname  Optional:NO 
           Specifies the AppMap name of the window.
    @param compname Optional:NO 
           Specifies the AppMap name of the component in the Window.
    ****************/
    public HTMLDocument(String winname, String compname) {

        this(new Window(winname), compname);
    }

    protected HTMLDocument(String compname) {

        super(compname);
    }



    /*********** <pre> 
                 Captures the HTML source of the BODY tag into a file.
               
                Captures the HTML source of the BODY tag into a file.
                This includes the BODY tag itself, everything inside it, and the closing 
                /Body tag as well.
                RobotJ (RJ) Specific Notes:
                	1) If your HTML document or browser does not support the 'outerHTML' property 
                	then you may have to resort to providing internet connection info in the properties 
                	file mentioned in #2.
                	
               		2) If you use proxy to connect to internet, proxy.server and proxy.server.port
               		in the file org.safs.rational.proxyParameter.properties must be set to ensure
               		the execution of this command.
                
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param filename  Optional:NO 
                Name of the output file to create in the active "Test" directory.
              
     @param fileEncoding  Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
     **********/
    public ComponentFunction captureBodySourceToFile(String filename, String fileEncoding ) {

        if ( filename == null ) throw new IllegalArgumentException ( "captureBodySourceToFile.filename = null");
        return HTMLDocumentFunctions.captureBodySourceToFile(getWindow().getName(), getName(), filename, fileEncoding);
    }

    /*********** <pre> 
                 Captures the HTML source of the BODY tag into a file.
               
                Captures the HTML source of the BODY tag into a file.
                This includes the BODY tag itself, everything inside it, and the closing 
                /Body tag as well.
                RobotJ (RJ) Specific Notes:
                	1) If your HTML document or browser does not support the 'outerHTML' property 
                	then you may have to resort to providing internet connection info in the properties 
                	file mentioned in #2.
                	
               		2) If you use proxy to connect to internet, proxy.server and proxy.server.port
               		in the file org.safs.rational.proxyParameter.properties must be set to ensure
               		the execution of this command.
                
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param filename  Optional:NO 
                Name of the output file to create in the active "Test" directory.
              
     @param fileEncoding  Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
     **********/
    public void captureBodySourceToFile(StepTestTable table, String filename, String fileEncoding ) {

        if ( table == null ) throw new IllegalArgumentException ( "captureBodySourceToFile.table = null");

        if ( filename == null ) throw new IllegalArgumentException ( "captureBodySourceToFile.filename = null");
        table.add( HTMLDocumentFunctions.captureBodySourceToFile(getWindow().getName(), getName(), filename, fileEncoding));
    }

    /*********** <pre> 
                 Captures the HTML source of the BODY tag into a file.
               
                Captures the HTML source of the BODY tag into a file.
                This includes the BODY tag itself, everything inside it, and the closing 
                /Body tag as well.
                RobotJ (RJ) Specific Notes:
                	1) If your HTML document or browser does not support the 'outerHTML' property 
                	then you may have to resort to providing internet connection info in the properties 
                	file mentioned in #2.
                	
               		2) If you use proxy to connect to internet, proxy.server and proxy.server.port
               		in the file org.safs.rational.proxyParameter.properties must be set to ensure
               		the execution of this command.
                
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         filename -- Optional:NO 
                Name of the output file to create in the active "Test" directory.
              <BR/>         fileEncoding -- Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
    </UL>

     **********/
    public ComponentFunction captureBodySourceToFile(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "captureBodySourceToFile.parameters = null");
        return HTMLDocumentFunctions.captureBodySourceToFile(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Captures the HTML source of the BODY tag into a file.
               
                Captures the HTML source of the BODY tag into a file.
                This includes the BODY tag itself, everything inside it, and the closing 
                /Body tag as well.
                RobotJ (RJ) Specific Notes:
                	1) If your HTML document or browser does not support the 'outerHTML' property 
                	then you may have to resort to providing internet connection info in the properties 
                	file mentioned in #2.
                	
               		2) If you use proxy to connect to internet, proxy.server and proxy.server.port
               		in the file org.safs.rational.proxyParameter.properties must be set to ensure
               		the execution of this command.
                
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         filename -- Optional:NO 
                Name of the output file to create in the active "Test" directory.
              <BR/>         fileEncoding -- Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
    </UL>

     **********/
    public void captureBodySourceToFile(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "captureBodySourceToFile.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "captureBodySourceToFile.parameters = null");
        table.add( HTMLDocumentFunctions.captureBodySourceToFile(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Captures the visible document text into a file.
               
                Captures the visible document text into a file.
                That is, generally, the text you see with no HTML tags.
                /Body tag as well.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param filename  Optional:NO 
                Name of the output file to create in the active "Test" directory.
              
     @param fileEncoding  Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
     **********/
    public ComponentFunction captureBodyTextToFile(String filename, String fileEncoding ) {

        if ( filename == null ) throw new IllegalArgumentException ( "captureBodyTextToFile.filename = null");
        return HTMLDocumentFunctions.captureBodyTextToFile(getWindow().getName(), getName(), filename, fileEncoding);
    }

    /*********** <pre> 
                 Captures the visible document text into a file.
               
                Captures the visible document text into a file.
                That is, generally, the text you see with no HTML tags.
                /Body tag as well.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param filename  Optional:NO 
                Name of the output file to create in the active "Test" directory.
              
     @param fileEncoding  Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
     **********/
    public void captureBodyTextToFile(StepTestTable table, String filename, String fileEncoding ) {

        if ( table == null ) throw new IllegalArgumentException ( "captureBodyTextToFile.table = null");

        if ( filename == null ) throw new IllegalArgumentException ( "captureBodyTextToFile.filename = null");
        table.add( HTMLDocumentFunctions.captureBodyTextToFile(getWindow().getName(), getName(), filename, fileEncoding));
    }

    /*********** <pre> 
                 Captures the visible document text into a file.
               
                Captures the visible document text into a file.
                That is, generally, the text you see with no HTML tags.
                /Body tag as well.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         filename -- Optional:NO 
                Name of the output file to create in the active "Test" directory.
              <BR/>         fileEncoding -- Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
    </UL>

     **********/
    public ComponentFunction captureBodyTextToFile(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "captureBodyTextToFile.parameters = null");
        return HTMLDocumentFunctions.captureBodyTextToFile(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Captures the visible document text into a file.
               
                Captures the visible document text into a file.
                That is, generally, the text you see with no HTML tags.
                /Body tag as well.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         filename -- Optional:NO 
                Name of the output file to create in the active "Test" directory.
              <BR/>         fileEncoding -- Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
    </UL>

     **********/
    public void captureBodyTextToFile(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "captureBodyTextToFile.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "captureBodyTextToFile.parameters = null");
        table.add( HTMLDocumentFunctions.captureBodyTextToFile(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Performs an HTMLLink Click based on a complete match of text found on 
                 Links within this HTMLDOCUMENT object.
               
                Performs an HTMLLink Click based on a complete match of text found on 
                Links within this HTMLDOCUMENT object.
                
                Optionally, the user can also specify a match index to indicate that 
                the desired Link is the "nth" Link that matches the text criteria.
                
                The text comparison for the Link is NOT case-sensitive by default.
                
                Leading and trailing whitespace will be removed from the links as they 
                are compared unless the link in the HTML itself is quoted.
                In addition, any Line Feeds and Carriage Returns will be removed.
                For the link, we use the outerText property to locate the text.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param compareTextValue  Optional:NO 
                The text to compare with each Link.
              
     @param matchIndex  Optional:YES
                Optional match index indicating the desired link is not the first
                link that matches, but the "nth" link that matches.
              
     @param caseSensitive  Optional:YES
                "Case-Sensitive", "CaseSensitive", or "True" will make search case-sensitive.
              
     **********/
    public ComponentFunction clickLink(String compareTextValue, String matchIndex, String caseSensitive ) {

        if ( compareTextValue == null ) throw new IllegalArgumentException ( "clickLink.compareTextValue = null");
        return HTMLDocumentFunctions.clickLink(getWindow().getName(), getName(), compareTextValue, matchIndex, caseSensitive);
    }

    /*********** <pre> 
                 Performs an HTMLLink Click based on a complete match of text found on 
                 Links within this HTMLDOCUMENT object.
               
                Performs an HTMLLink Click based on a complete match of text found on 
                Links within this HTMLDOCUMENT object.
                
                Optionally, the user can also specify a match index to indicate that 
                the desired Link is the "nth" Link that matches the text criteria.
                
                The text comparison for the Link is NOT case-sensitive by default.
                
                Leading and trailing whitespace will be removed from the links as they 
                are compared unless the link in the HTML itself is quoted.
                In addition, any Line Feeds and Carriage Returns will be removed.
                For the link, we use the outerText property to locate the text.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param compareTextValue  Optional:NO 
                The text to compare with each Link.
              
     @param matchIndex  Optional:YES
                Optional match index indicating the desired link is not the first
                link that matches, but the "nth" link that matches.
              
     @param caseSensitive  Optional:YES
                "Case-Sensitive", "CaseSensitive", or "True" will make search case-sensitive.
              
     **********/
    public void clickLink(StepTestTable table, String compareTextValue, String matchIndex, String caseSensitive ) {

        if ( table == null ) throw new IllegalArgumentException ( "clickLink.table = null");

        if ( compareTextValue == null ) throw new IllegalArgumentException ( "clickLink.compareTextValue = null");
        table.add( HTMLDocumentFunctions.clickLink(getWindow().getName(), getName(), compareTextValue, matchIndex, caseSensitive));
    }

    /*********** <pre> 
                 Performs an HTMLLink Click based on a complete match of text found on 
                 Links within this HTMLDOCUMENT object.
               
                Performs an HTMLLink Click based on a complete match of text found on 
                Links within this HTMLDOCUMENT object.
                
                Optionally, the user can also specify a match index to indicate that 
                the desired Link is the "nth" Link that matches the text criteria.
                
                The text comparison for the Link is NOT case-sensitive by default.
                
                Leading and trailing whitespace will be removed from the links as they 
                are compared unless the link in the HTML itself is quoted.
                In addition, any Line Feeds and Carriage Returns will be removed.
                For the link, we use the outerText property to locate the text.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         compareTextValue -- Optional:NO 
                The text to compare with each Link.
              <BR/>         matchIndex -- Optional:YES
                Optional match index indicating the desired link is not the first
                link that matches, but the "nth" link that matches.
              <BR/>         caseSensitive -- Optional:YES
                "Case-Sensitive", "CaseSensitive", or "True" will make search case-sensitive.
              
    </UL>

     **********/
    public ComponentFunction clickLink(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "clickLink.parameters = null");
        return HTMLDocumentFunctions.clickLink(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Performs an HTMLLink Click based on a complete match of text found on 
                 Links within this HTMLDOCUMENT object.
               
                Performs an HTMLLink Click based on a complete match of text found on 
                Links within this HTMLDOCUMENT object.
                
                Optionally, the user can also specify a match index to indicate that 
                the desired Link is the "nth" Link that matches the text criteria.
                
                The text comparison for the Link is NOT case-sensitive by default.
                
                Leading and trailing whitespace will be removed from the links as they 
                are compared unless the link in the HTML itself is quoted.
                In addition, any Line Feeds and Carriage Returns will be removed.
                For the link, we use the outerText property to locate the text.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         compareTextValue -- Optional:NO 
                The text to compare with each Link.
              <BR/>         matchIndex -- Optional:YES
                Optional match index indicating the desired link is not the first
                link that matches, but the "nth" link that matches.
              <BR/>         caseSensitive -- Optional:YES
                "Case-Sensitive", "CaseSensitive", or "True" will make search case-sensitive.
              
    </UL>

     **********/
    public void clickLink(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "clickLink.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "clickLink.parameters = null");
        table.add( HTMLDocumentFunctions.clickLink(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Performs an HTMLLink Click based on a partial match of text found on 
                 Links within this HTMLDOCUMENT object.
               
                Performs an HTMLLink Click based on a partial match of text found on 
                Links within this HTMLDOCUMENT object.  The text of the Link is 
                expected to BEGIN with the text provided by the user.  Optionally, 
                the user can also specify a match index to indicate that the desired 
                Link is the "nth" Link that matches the text criteria.
                
                The text comparison for the Link is NOT case-sensitive by default.  The 
                user can specify a case-senstive comparison via CaseSensitive Field #7. 
                
                Leading and trailing whitespace will be removed from the links as they 
                are compared unless the link in the HTML itself is quoted.
                In addition, any Line Feeds and Carriage Returns will be removed.
                For the link, we use the outerText property to locate the text.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param beginningTextValue  Optional:NO 
                The text (NOT case-sensitive) to compare with the beginning of each Link.
              
     @param matchIndex  Optional:YES 
                Optional match index indicating the desired link is not the first
                link that matches, but the "nth" link that matches.
              
     @param caseSensitive  Optional:YES
                "Case-Sensitive", "CaseSensitive", or "True" will make search case-sensitive.
              
     **********/
    public ComponentFunction clickLinkBeginning(String beginningTextValue, String matchIndex, String caseSensitive ) {

        if ( beginningTextValue == null ) throw new IllegalArgumentException ( "clickLinkBeginning.beginningTextValue = null");
        return HTMLDocumentFunctions.clickLinkBeginning(getWindow().getName(), getName(), beginningTextValue, matchIndex, caseSensitive);
    }

    /*********** <pre> 
                 Performs an HTMLLink Click based on a partial match of text found on 
                 Links within this HTMLDOCUMENT object.
               
                Performs an HTMLLink Click based on a partial match of text found on 
                Links within this HTMLDOCUMENT object.  The text of the Link is 
                expected to BEGIN with the text provided by the user.  Optionally, 
                the user can also specify a match index to indicate that the desired 
                Link is the "nth" Link that matches the text criteria.
                
                The text comparison for the Link is NOT case-sensitive by default.  The 
                user can specify a case-senstive comparison via CaseSensitive Field #7. 
                
                Leading and trailing whitespace will be removed from the links as they 
                are compared unless the link in the HTML itself is quoted.
                In addition, any Line Feeds and Carriage Returns will be removed.
                For the link, we use the outerText property to locate the text.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param beginningTextValue  Optional:NO 
                The text (NOT case-sensitive) to compare with the beginning of each Link.
              
     @param matchIndex  Optional:YES 
                Optional match index indicating the desired link is not the first
                link that matches, but the "nth" link that matches.
              
     @param caseSensitive  Optional:YES
                "Case-Sensitive", "CaseSensitive", or "True" will make search case-sensitive.
              
     **********/
    public void clickLinkBeginning(StepTestTable table, String beginningTextValue, String matchIndex, String caseSensitive ) {

        if ( table == null ) throw new IllegalArgumentException ( "clickLinkBeginning.table = null");

        if ( beginningTextValue == null ) throw new IllegalArgumentException ( "clickLinkBeginning.beginningTextValue = null");
        table.add( HTMLDocumentFunctions.clickLinkBeginning(getWindow().getName(), getName(), beginningTextValue, matchIndex, caseSensitive));
    }

    /*********** <pre> 
                 Performs an HTMLLink Click based on a partial match of text found on 
                 Links within this HTMLDOCUMENT object.
               
                Performs an HTMLLink Click based on a partial match of text found on 
                Links within this HTMLDOCUMENT object.  The text of the Link is 
                expected to BEGIN with the text provided by the user.  Optionally, 
                the user can also specify a match index to indicate that the desired 
                Link is the "nth" Link that matches the text criteria.
                
                The text comparison for the Link is NOT case-sensitive by default.  The 
                user can specify a case-senstive comparison via CaseSensitive Field #7. 
                
                Leading and trailing whitespace will be removed from the links as they 
                are compared unless the link in the HTML itself is quoted.
                In addition, any Line Feeds and Carriage Returns will be removed.
                For the link, we use the outerText property to locate the text.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         beginningTextValue -- Optional:NO 
                The text (NOT case-sensitive) to compare with the beginning of each Link.
              <BR/>         matchIndex -- Optional:YES 
                Optional match index indicating the desired link is not the first
                link that matches, but the "nth" link that matches.
              <BR/>         caseSensitive -- Optional:YES
                "Case-Sensitive", "CaseSensitive", or "True" will make search case-sensitive.
              
    </UL>

     **********/
    public ComponentFunction clickLinkBeginning(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "clickLinkBeginning.parameters = null");
        return HTMLDocumentFunctions.clickLinkBeginning(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Performs an HTMLLink Click based on a partial match of text found on 
                 Links within this HTMLDOCUMENT object.
               
                Performs an HTMLLink Click based on a partial match of text found on 
                Links within this HTMLDOCUMENT object.  The text of the Link is 
                expected to BEGIN with the text provided by the user.  Optionally, 
                the user can also specify a match index to indicate that the desired 
                Link is the "nth" Link that matches the text criteria.
                
                The text comparison for the Link is NOT case-sensitive by default.  The 
                user can specify a case-senstive comparison via CaseSensitive Field #7. 
                
                Leading and trailing whitespace will be removed from the links as they 
                are compared unless the link in the HTML itself is quoted.
                In addition, any Line Feeds and Carriage Returns will be removed.
                For the link, we use the outerText property to locate the text.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         beginningTextValue -- Optional:NO 
                The text (NOT case-sensitive) to compare with the beginning of each Link.
              <BR/>         matchIndex -- Optional:YES 
                Optional match index indicating the desired link is not the first
                link that matches, but the "nth" link that matches.
              <BR/>         caseSensitive -- Optional:YES
                "Case-Sensitive", "CaseSensitive", or "True" will make search case-sensitive.
              
    </UL>

     **********/
    public void clickLinkBeginning(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "clickLinkBeginning.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "clickLinkBeginning.parameters = null");
        table.add( HTMLDocumentFunctions.clickLinkBeginning(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Performs an HTMLLink Click based on a partial match of text found on 
                 Links within this HTMLDOCUMENT object.
               
                Performs an HTMLLink Click based on a partial match of text found on 
                Links within this HTMLDOCUMENT object.  The text of the Link is 
                expected to CONTAIN the text provided by the user at any position in 
                the Link text--not strictly the beginning as in ClickLinkBeginning.
                
                Optionally, the user can also specify a match index to indicate that 
                the desired Link is the "nth" Link that matches the text criteria.
                
                The text comparison for the Link is NOT case-sensitive by default.
                
                Leading and trailing whitespace will be removed from the links as they 
                are compared unless the link in the HTML itself is quoted.
                In addition, any Line Feeds and Carriage Returns will be removed.
                For the link, we use the outerText property to locate the text.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param compareTextValue  Optional:NO 
                The text to compare with each Link.
              
     @param matchIndex  Optional:YES
                Optional match index indicating the desired link is not the first
                link that matches, but the "nth" link that matches.
              
     @param caseSensitive  Optional:YES
                "Case-Sensitive", "CaseSensitive", or "True" will make search case-sensitive.
              
     **********/
    public ComponentFunction clickLinkContaining(String compareTextValue, String matchIndex, String caseSensitive ) {

        if ( compareTextValue == null ) throw new IllegalArgumentException ( "clickLinkContaining.compareTextValue = null");
        return HTMLDocumentFunctions.clickLinkContaining(getWindow().getName(), getName(), compareTextValue, matchIndex, caseSensitive);
    }

    /*********** <pre> 
                 Performs an HTMLLink Click based on a partial match of text found on 
                 Links within this HTMLDOCUMENT object.
               
                Performs an HTMLLink Click based on a partial match of text found on 
                Links within this HTMLDOCUMENT object.  The text of the Link is 
                expected to CONTAIN the text provided by the user at any position in 
                the Link text--not strictly the beginning as in ClickLinkBeginning.
                
                Optionally, the user can also specify a match index to indicate that 
                the desired Link is the "nth" Link that matches the text criteria.
                
                The text comparison for the Link is NOT case-sensitive by default.
                
                Leading and trailing whitespace will be removed from the links as they 
                are compared unless the link in the HTML itself is quoted.
                In addition, any Line Feeds and Carriage Returns will be removed.
                For the link, we use the outerText property to locate the text.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param compareTextValue  Optional:NO 
                The text to compare with each Link.
              
     @param matchIndex  Optional:YES
                Optional match index indicating the desired link is not the first
                link that matches, but the "nth" link that matches.
              
     @param caseSensitive  Optional:YES
                "Case-Sensitive", "CaseSensitive", or "True" will make search case-sensitive.
              
     **********/
    public void clickLinkContaining(StepTestTable table, String compareTextValue, String matchIndex, String caseSensitive ) {

        if ( table == null ) throw new IllegalArgumentException ( "clickLinkContaining.table = null");

        if ( compareTextValue == null ) throw new IllegalArgumentException ( "clickLinkContaining.compareTextValue = null");
        table.add( HTMLDocumentFunctions.clickLinkContaining(getWindow().getName(), getName(), compareTextValue, matchIndex, caseSensitive));
    }

    /*********** <pre> 
                 Performs an HTMLLink Click based on a partial match of text found on 
                 Links within this HTMLDOCUMENT object.
               
                Performs an HTMLLink Click based on a partial match of text found on 
                Links within this HTMLDOCUMENT object.  The text of the Link is 
                expected to CONTAIN the text provided by the user at any position in 
                the Link text--not strictly the beginning as in ClickLinkBeginning.
                
                Optionally, the user can also specify a match index to indicate that 
                the desired Link is the "nth" Link that matches the text criteria.
                
                The text comparison for the Link is NOT case-sensitive by default.
                
                Leading and trailing whitespace will be removed from the links as they 
                are compared unless the link in the HTML itself is quoted.
                In addition, any Line Feeds and Carriage Returns will be removed.
                For the link, we use the outerText property to locate the text.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         compareTextValue -- Optional:NO 
                The text to compare with each Link.
              <BR/>         matchIndex -- Optional:YES
                Optional match index indicating the desired link is not the first
                link that matches, but the "nth" link that matches.
              <BR/>         caseSensitive -- Optional:YES
                "Case-Sensitive", "CaseSensitive", or "True" will make search case-sensitive.
              
    </UL>

     **********/
    public ComponentFunction clickLinkContaining(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "clickLinkContaining.parameters = null");
        return HTMLDocumentFunctions.clickLinkContaining(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Performs an HTMLLink Click based on a partial match of text found on 
                 Links within this HTMLDOCUMENT object.
               
                Performs an HTMLLink Click based on a partial match of text found on 
                Links within this HTMLDOCUMENT object.  The text of the Link is 
                expected to CONTAIN the text provided by the user at any position in 
                the Link text--not strictly the beginning as in ClickLinkBeginning.
                
                Optionally, the user can also specify a match index to indicate that 
                the desired Link is the "nth" Link that matches the text criteria.
                
                The text comparison for the Link is NOT case-sensitive by default.
                
                Leading and trailing whitespace will be removed from the links as they 
                are compared unless the link in the HTML itself is quoted.
                In addition, any Line Feeds and Carriage Returns will be removed.
                For the link, we use the outerText property to locate the text.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         compareTextValue -- Optional:NO 
                The text to compare with each Link.
              <BR/>         matchIndex -- Optional:YES
                Optional match index indicating the desired link is not the first
                link that matches, but the "nth" link that matches.
              <BR/>         caseSensitive -- Optional:YES
                "Case-Sensitive", "CaseSensitive", or "True" will make search case-sensitive.
              
    </UL>

     **********/
    public void clickLinkContaining(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "clickLinkContaining.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "clickLinkContaining.parameters = null");
        table.add( HTMLDocumentFunctions.clickLinkContaining(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 DEPARECATED.  This command is identical to ClickLink.
               
                 DEPARECATED.  This command is identical to ClickLink.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param compareTextValue  Optional:NO 
                The text to compare with each Link.
              
     @param matchIndex  Optional:YES
                Optional match index indicating the desired link is not the first
                link that matches, but the "nth" link that matches.
              
     @param caseSensitive  Optional:YES
                "Case-Sensitive", "CaseSensitive", or "True" will make search case-sensitive.
              
     **********/
    public ComponentFunction clickLinkMatching(String compareTextValue, String matchIndex, String caseSensitive ) {

        if ( compareTextValue == null ) throw new IllegalArgumentException ( "clickLinkMatching.compareTextValue = null");
        return HTMLDocumentFunctions.clickLinkMatching(getWindow().getName(), getName(), compareTextValue, matchIndex, caseSensitive);
    }

    /*********** <pre> 
                 DEPARECATED.  This command is identical to ClickLink.
               
                 DEPARECATED.  This command is identical to ClickLink.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param compareTextValue  Optional:NO 
                The text to compare with each Link.
              
     @param matchIndex  Optional:YES
                Optional match index indicating the desired link is not the first
                link that matches, but the "nth" link that matches.
              
     @param caseSensitive  Optional:YES
                "Case-Sensitive", "CaseSensitive", or "True" will make search case-sensitive.
              
     **********/
    public void clickLinkMatching(StepTestTable table, String compareTextValue, String matchIndex, String caseSensitive ) {

        if ( table == null ) throw new IllegalArgumentException ( "clickLinkMatching.table = null");

        if ( compareTextValue == null ) throw new IllegalArgumentException ( "clickLinkMatching.compareTextValue = null");
        table.add( HTMLDocumentFunctions.clickLinkMatching(getWindow().getName(), getName(), compareTextValue, matchIndex, caseSensitive));
    }

    /*********** <pre> 
                 DEPARECATED.  This command is identical to ClickLink.
               
                 DEPARECATED.  This command is identical to ClickLink.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         compareTextValue -- Optional:NO 
                The text to compare with each Link.
              <BR/>         matchIndex -- Optional:YES
                Optional match index indicating the desired link is not the first
                link that matches, but the "nth" link that matches.
              <BR/>         caseSensitive -- Optional:YES
                "Case-Sensitive", "CaseSensitive", or "True" will make search case-sensitive.
              
    </UL>

     **********/
    public ComponentFunction clickLinkMatching(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "clickLinkMatching.parameters = null");
        return HTMLDocumentFunctions.clickLinkMatching(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 DEPARECATED.  This command is identical to ClickLink.
               
                 DEPARECATED.  This command is identical to ClickLink.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         compareTextValue -- Optional:NO 
                The text to compare with each Link.
              <BR/>         matchIndex -- Optional:YES
                Optional match index indicating the desired link is not the first
                link that matches, but the "nth" link that matches.
              <BR/>         caseSensitive -- Optional:YES
                "Case-Sensitive", "CaseSensitive", or "True" will make search case-sensitive.
              
    </UL>

     **********/
    public void clickLinkMatching(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "clickLinkMatching.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "clickLinkMatching.parameters = null");
        table.add( HTMLDocumentFunctions.clickLinkMatching(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Compares the HTML source of the BODY tag with that of a benchmark file.
               
                This includes the BODY tag itself, everything inside it, and the closing 
                /Body tag as well.
                
                RRAFS:
                The routine will automatically create a temporary ObjectData VP with a 
                dummy baseline, capture the actual file, transfer it to active "Test" 
                directory, and compare it with the benchmark.  The routine will then 
                delete all significant remnants of the temporary ObjectData VP.
                 
                RRAFS:
                This routine requires that the following two files exist in the 
                DDE_RUNTIME directory:
                 
                HTMLDocumentHTML.grd
                HTMLDocumentHTML.vpm
                
             The command may produce a WARNING if a diff tool for which we 
             have no means to verify the results is configured for use.  
             Consequently, if these warnings are expected, the user can use the 
             "TW" test record type to avoid issuing these warnings.
			   RobotJ (RJ) Specific Notes:
               		1) If you use proxy to connect to internet, proxy.server and proxy.server.port
               		in the file org.safs.rational.proxyParameter.properties must be set to ensure
               		the execution of this command.
                
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param benchmark  Optional:NO 
                Name of the benchmark file in the active "Bench" directory to 
                use for the actual test file comparison.
              
     @param fileEncoding  Optional:YES  DefaultVal:
             Specify a character encoding to be used when opening a bench file.
             If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
     **********/
    public ComponentFunction verifyBodySource(String benchmark, String fileEncoding ) {

        if ( benchmark == null ) throw new IllegalArgumentException ( "verifyBodySource.benchmark = null");
        return HTMLDocumentFunctions.verifyBodySource(getWindow().getName(), getName(), benchmark, fileEncoding);
    }

    /*********** <pre> 
                 Compares the HTML source of the BODY tag with that of a benchmark file.
               
                This includes the BODY tag itself, everything inside it, and the closing 
                /Body tag as well.
                
                RRAFS:
                The routine will automatically create a temporary ObjectData VP with a 
                dummy baseline, capture the actual file, transfer it to active "Test" 
                directory, and compare it with the benchmark.  The routine will then 
                delete all significant remnants of the temporary ObjectData VP.
                 
                RRAFS:
                This routine requires that the following two files exist in the 
                DDE_RUNTIME directory:
                 
                HTMLDocumentHTML.grd
                HTMLDocumentHTML.vpm
                
             The command may produce a WARNING if a diff tool for which we 
             have no means to verify the results is configured for use.  
             Consequently, if these warnings are expected, the user can use the 
             "TW" test record type to avoid issuing these warnings.
			   RobotJ (RJ) Specific Notes:
               		1) If you use proxy to connect to internet, proxy.server and proxy.server.port
               		in the file org.safs.rational.proxyParameter.properties must be set to ensure
               		the execution of this command.
                
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param benchmark  Optional:NO 
                Name of the benchmark file in the active "Bench" directory to 
                use for the actual test file comparison.
              
     @param fileEncoding  Optional:YES  DefaultVal:
             Specify a character encoding to be used when opening a bench file.
             If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
     **********/
    public void verifyBodySource(StepTestTable table, String benchmark, String fileEncoding ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyBodySource.table = null");

        if ( benchmark == null ) throw new IllegalArgumentException ( "verifyBodySource.benchmark = null");
        table.add( HTMLDocumentFunctions.verifyBodySource(getWindow().getName(), getName(), benchmark, fileEncoding));
    }

    /*********** <pre> 
                 Compares the HTML source of the BODY tag with that of a benchmark file.
               
                This includes the BODY tag itself, everything inside it, and the closing 
                /Body tag as well.
                
                RRAFS:
                The routine will automatically create a temporary ObjectData VP with a 
                dummy baseline, capture the actual file, transfer it to active "Test" 
                directory, and compare it with the benchmark.  The routine will then 
                delete all significant remnants of the temporary ObjectData VP.
                 
                RRAFS:
                This routine requires that the following two files exist in the 
                DDE_RUNTIME directory:
                 
                HTMLDocumentHTML.grd
                HTMLDocumentHTML.vpm
                
             The command may produce a WARNING if a diff tool for which we 
             have no means to verify the results is configured for use.  
             Consequently, if these warnings are expected, the user can use the 
             "TW" test record type to avoid issuing these warnings.
			   RobotJ (RJ) Specific Notes:
               		1) If you use proxy to connect to internet, proxy.server and proxy.server.port
               		in the file org.safs.rational.proxyParameter.properties must be set to ensure
               		the execution of this command.
                
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         benchmark -- Optional:NO 
                Name of the benchmark file in the active "Bench" directory to 
                use for the actual test file comparison.
              <BR/>         fileEncoding -- Optional:YES  DefaultVal:
             Specify a character encoding to be used when opening a bench file.
             If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
    </UL>

     **********/
    public ComponentFunction verifyBodySource(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyBodySource.parameters = null");
        return HTMLDocumentFunctions.verifyBodySource(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Compares the HTML source of the BODY tag with that of a benchmark file.
               
                This includes the BODY tag itself, everything inside it, and the closing 
                /Body tag as well.
                
                RRAFS:
                The routine will automatically create a temporary ObjectData VP with a 
                dummy baseline, capture the actual file, transfer it to active "Test" 
                directory, and compare it with the benchmark.  The routine will then 
                delete all significant remnants of the temporary ObjectData VP.
                 
                RRAFS:
                This routine requires that the following two files exist in the 
                DDE_RUNTIME directory:
                 
                HTMLDocumentHTML.grd
                HTMLDocumentHTML.vpm
                
             The command may produce a WARNING if a diff tool for which we 
             have no means to verify the results is configured for use.  
             Consequently, if these warnings are expected, the user can use the 
             "TW" test record type to avoid issuing these warnings.
			   RobotJ (RJ) Specific Notes:
               		1) If you use proxy to connect to internet, proxy.server and proxy.server.port
               		in the file org.safs.rational.proxyParameter.properties must be set to ensure
               		the execution of this command.
                
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         benchmark -- Optional:NO 
                Name of the benchmark file in the active "Bench" directory to 
                use for the actual test file comparison.
              <BR/>         fileEncoding -- Optional:YES  DefaultVal:
             Specify a character encoding to be used when opening a bench file.
             If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
    </UL>

     **********/
    public void verifyBodySource(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyBodySource.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyBodySource.parameters = null");
        table.add( HTMLDocumentFunctions.verifyBodySource(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Compares the visible doc text with that of a benchmark file.
               
                The routine will automatically create a temporary ObjectData VP with a 
                dummy baseline, capture the actual file, transfer it to active "Test" 
                directory, and compare it with the benchmark.  The routine will then 
                delete all significant remnants of the temporary ObjectData VP.
                 
                This routine requires that the following two files exist in the 
                DDE_RUNTIME directory:
                 
                HTMLDocumentText.grd
                HTMLDocumentText.vpm
                
             The command may produce a WARNING if a diff tool for which we 
             have no means to verify the results is configured for use.  
             Consequently, if these warnings are expected, the user can use the 
             "TW" test record type to avoid issuing these warnings.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param benchmark  Optional:NO 
                Name of the benchmark file in the active "Bench" directory to 
                use for the actual test file comparison.
              
     @param fileEncoding  Optional:YES  DefaultVal:
             Specify a character encoding to be used when opening a bench file.
             If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
     **********/
    public ComponentFunction verifyBodyText(String benchmark, String fileEncoding ) {

        if ( benchmark == null ) throw new IllegalArgumentException ( "verifyBodyText.benchmark = null");
        return HTMLDocumentFunctions.verifyBodyText(getWindow().getName(), getName(), benchmark, fileEncoding);
    }

    /*********** <pre> 
                 Compares the visible doc text with that of a benchmark file.
               
                The routine will automatically create a temporary ObjectData VP with a 
                dummy baseline, capture the actual file, transfer it to active "Test" 
                directory, and compare it with the benchmark.  The routine will then 
                delete all significant remnants of the temporary ObjectData VP.
                 
                This routine requires that the following two files exist in the 
                DDE_RUNTIME directory:
                 
                HTMLDocumentText.grd
                HTMLDocumentText.vpm
                
             The command may produce a WARNING if a diff tool for which we 
             have no means to verify the results is configured for use.  
             Consequently, if these warnings are expected, the user can use the 
             "TW" test record type to avoid issuing these warnings.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param benchmark  Optional:NO 
                Name of the benchmark file in the active "Bench" directory to 
                use for the actual test file comparison.
              
     @param fileEncoding  Optional:YES  DefaultVal:
             Specify a character encoding to be used when opening a bench file.
             If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
     **********/
    public void verifyBodyText(StepTestTable table, String benchmark, String fileEncoding ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyBodyText.table = null");

        if ( benchmark == null ) throw new IllegalArgumentException ( "verifyBodyText.benchmark = null");
        table.add( HTMLDocumentFunctions.verifyBodyText(getWindow().getName(), getName(), benchmark, fileEncoding));
    }

    /*********** <pre> 
                 Compares the visible doc text with that of a benchmark file.
               
                The routine will automatically create a temporary ObjectData VP with a 
                dummy baseline, capture the actual file, transfer it to active "Test" 
                directory, and compare it with the benchmark.  The routine will then 
                delete all significant remnants of the temporary ObjectData VP.
                 
                This routine requires that the following two files exist in the 
                DDE_RUNTIME directory:
                 
                HTMLDocumentText.grd
                HTMLDocumentText.vpm
                
             The command may produce a WARNING if a diff tool for which we 
             have no means to verify the results is configured for use.  
             Consequently, if these warnings are expected, the user can use the 
             "TW" test record type to avoid issuing these warnings.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         benchmark -- Optional:NO 
                Name of the benchmark file in the active "Bench" directory to 
                use for the actual test file comparison.
              <BR/>         fileEncoding -- Optional:YES  DefaultVal:
             Specify a character encoding to be used when opening a bench file.
             If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
    </UL>

     **********/
    public ComponentFunction verifyBodyText(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyBodyText.parameters = null");
        return HTMLDocumentFunctions.verifyBodyText(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Compares the visible doc text with that of a benchmark file.
               
                The routine will automatically create a temporary ObjectData VP with a 
                dummy baseline, capture the actual file, transfer it to active "Test" 
                directory, and compare it with the benchmark.  The routine will then 
                delete all significant remnants of the temporary ObjectData VP.
                 
                This routine requires that the following two files exist in the 
                DDE_RUNTIME directory:
                 
                HTMLDocumentText.grd
                HTMLDocumentText.vpm
                
             The command may produce a WARNING if a diff tool for which we 
             have no means to verify the results is configured for use.  
             Consequently, if these warnings are expected, the user can use the 
             "TW" test record type to avoid issuing these warnings.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         benchmark -- Optional:NO 
                Name of the benchmark file in the active "Bench" directory to 
                use for the actual test file comparison.
              <BR/>         fileEncoding -- Optional:YES  DefaultVal:
             Specify a character encoding to be used when opening a bench file.
             If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
    </UL>

     **********/
    public void verifyBodyText(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyBodyText.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyBodyText.parameters = null");
        table.add( HTMLDocumentFunctions.verifyBodyText(getWindow().getName(), getName(), parameters));
    }

}
