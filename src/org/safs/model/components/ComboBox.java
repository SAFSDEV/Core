
/******************************************************************************
 * ComboBox.java
 *
 * Copyright (C) SAS Institute, All rights reserved.
 * General Public License: https://www.gnu.org/licenses/gpl-3.0.en.html
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   ComboBoxFunctions.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaComponentModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe ComboBoxFunctions.xml XSLJavaComponentModel.xsl -o ComboBox.java
 *
 ******************************************************************************/ 
package org.safs.model.components;

import org.safs.model.commands.ComboBoxFunctions;
import org.safs.model.ComponentFunction;
import org.safs.model.components.UIComponent;
import org.safs.model.StepTestTable;

public class ComboBox extends GenericObject {

    /*****************
    Constructor 

    Create an instance of pseudo-component representing 
    a specific component in a specific window.
    
    @param window  Optional:NO 
           Specifies which Window this component is 'in'.
    @param compname Optional:NO 
           Specifies the AppMap name of the component in the Window.
    ****************/
    public ComboBox(Window window, String compname) {

        super(window, compname);
    }

    /*****************
    Constructor 

    Create an instance of pseudo-component representing 
    a specific component in a specific window.
    
    This convenience routine will create the requisite Window component.
    
    @param winname  Optional:NO 
           Specifies the AppMap name of the window.
    @param compname Optional:NO 
           Specifies the AppMap name of the component in the Window.
    ****************/
    public ComboBox(String winname, String compname) {

        this(new Window(winname), compname);
    }

    protected ComboBox(String compname) {

        super(compname);
    }



    /*********** <pre>
					Capture Items To a File specified (if not abs, then to test dir)
				
					Capture Items To a File specified (if not abs, then to test dir)
				    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>Google Android</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param fileName  Optional:NO
							File name (if not absolute, then to test dir)
						
     @param fileEncoding  Optional:YES  DefaultVal:
							Specify a character encoding to be used when saving data to a file.
							If it is not specified, the system default file encoding will be used.
							The encoding should be a valid string supported by Java; if it is
							not valid, the system default file encoding will be used instead.
						
     **********/
    public ComponentFunction captureItemsToFile(String fileName, String fileEncoding ) {

        if ( fileName == null ) throw new IllegalArgumentException ( "captureItemsToFile.fileName = null");
        return ComboBoxFunctions.captureItemsToFile(getWindow().getName(), getName(), fileName, fileEncoding);
    }

    /*********** <pre>
					Capture Items To a File specified (if not abs, then to test dir)
				
					Capture Items To a File specified (if not abs, then to test dir)
				    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>Google Android</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param fileName  Optional:NO
							File name (if not absolute, then to test dir)
						
     @param fileEncoding  Optional:YES  DefaultVal:
							Specify a character encoding to be used when saving data to a file.
							If it is not specified, the system default file encoding will be used.
							The encoding should be a valid string supported by Java; if it is
							not valid, the system default file encoding will be used instead.
						
     **********/
    public void captureItemsToFile(StepTestTable table, String fileName, String fileEncoding ) {

        if ( table == null ) throw new IllegalArgumentException ( "captureItemsToFile.table = null");

        if ( fileName == null ) throw new IllegalArgumentException ( "captureItemsToFile.fileName = null");
        table.add( ComboBoxFunctions.captureItemsToFile(getWindow().getName(), getName(), fileName, fileEncoding));
    }

    /*********** <pre>
					Capture Items To a File specified (if not abs, then to test dir)
				
					Capture Items To a File specified (if not abs, then to test dir)
				    </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>Google Android</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         fileName -- Optional:NO
							File name (if not absolute, then to test dir)
						<BR/>         fileEncoding -- Optional:YES  DefaultVal:
							Specify a character encoding to be used when saving data to a file.
							If it is not specified, the system default file encoding will be used.
							The encoding should be a valid string supported by Java; if it is
							not valid, the system default file encoding will be used instead.
						
    </UL>

     **********/
    public ComponentFunction captureItemsToFile(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "captureItemsToFile.parameters = null");
        return ComboBoxFunctions.captureItemsToFile(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre>
					Capture Items To a File specified (if not abs, then to test dir)
				
					Capture Items To a File specified (if not abs, then to test dir)
				    </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>Google Android</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         fileName -- Optional:NO
							File name (if not absolute, then to test dir)
						<BR/>         fileEncoding -- Optional:YES  DefaultVal:
							Specify a character encoding to be used when saving data to a file.
							If it is not specified, the system default file encoding will be used.
							The encoding should be a valid string supported by Java; if it is
							not valid, the system default file encoding will be used instead.
						
    </UL>

     **********/
    public void captureItemsToFile(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "captureItemsToFile.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "captureItemsToFile.parameters = null");
        table.add( ComboBoxFunctions.captureItemsToFile(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre>
					Attempts to perform a standard Click on the ComboBox
				
					Attempts to perform a standard Click on the ComboBox. If
						the combobox list is not exposed then this will expose the list of items. 
						If the list is already exposed, then this will close the list.
					
					
						It must be noted that when you expose the list in a ComboBox, it is
						no longer a ComboBox. It typically converts to a ComboListBox. This may
						not be an issue on controls that Robot can recognize with a NAME=method.
					
					
						However, if the control is recognized by ObjectIndex or some other means
						then the original ComboBox may no longer be found on the screen.
						With this scenario, you need to reference the ComboBox and the
						ComboListBox in the application map (and associated data files) as two separate
						items.
					
					
						To avoid these potential problems, use the COMBOBOX 'SELECT' command
						to actually open the list and select the item all with a single command.
					
				    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>AutomatedQA TestComplete</LI>
    </UL>

     **********/
    public ComponentFunction click( ) {

        return ComboBoxFunctions.click(getWindow().getName(), getName());
    }

    /*********** <pre>
					Attempts to perform a standard Click on the ComboBox
				
					Attempts to perform a standard Click on the ComboBox. If
						the combobox list is not exposed then this will expose the list of items. 
						If the list is already exposed, then this will close the list.
					
					
						It must be noted that when you expose the list in a ComboBox, it is
						no longer a ComboBox. It typically converts to a ComboListBox. This may
						not be an issue on controls that Robot can recognize with a NAME=method.
					
					
						However, if the control is recognized by ObjectIndex or some other means
						then the original ComboBox may no longer be found on the screen.
						With this scenario, you need to reference the ComboBox and the
						ComboListBox in the application map (and associated data files) as two separate
						items.
					
					
						To avoid these potential problems, use the COMBOBOX 'SELECT' command
						to actually open the list and select the item all with a single command.
					
				    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     **********/
    public void click(StepTestTable table ) {

        if ( table == null ) throw new IllegalArgumentException ( "click.table = null");

        table.add( ComboBoxFunctions.click(getWindow().getName(), getName()));
    }

    /*********** <pre>
					Hide the combo box list (equivalent to an ESC or two ESCs).
				
					hide the list. This would only be necessary in cases
						where the state of the combo box is not known ahead of time.
					
				    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     **********/
    public ComponentFunction hideList( ) {

        return ComboBoxFunctions.hideList(getWindow().getName(), getName());
    }

    /*********** <pre>
					Hide the combo box list (equivalent to an ESC or two ESCs).
				
					hide the list. This would only be necessary in cases
						where the state of the combo box is not known ahead of time.
					
				    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     **********/
    public void hideList(StepTestTable table ) {

        if ( table == null ) throw new IllegalArgumentException ( "hideList.table = null");

        table.add( ComboBoxFunctions.hideList(getWindow().getName(), getName()));
    }

    /*********** <pre>
					Select an item by its text value from a combobox.
				
					Select an item by its text value from a combobox.
						This method combines the initial Click required to expose the list
						of items and then the subsequent selection of a text item from the list.
					
					
						The routine will first attempt to see if the item exists in the list
						and should provide a warning if it cannot find the item or cannot
						read the list of items. The routine will then attempt the selection.
					
					
						After the selection is attempted, the routine tries to verify that the
						list has the specified item as the selected item. A warning will be
						issued if the routine cannot read the list. A failure will be issued
						if the routine CAN read the list and determines that the specified
						item is NOT the currently selected item.
					
					Note: RobotJ also uses identical keyword SelectTextItem
				    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO
							The case-sensitive item in the drop down list to select.
						
     @param forceRefresh  Optional:Yes
							Force refreshing to update stale element after selection.
						
     **********/
    public ComponentFunction select(String textValue, String forceRefresh ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "select.textValue = null");
        return ComboBoxFunctions.select(getWindow().getName(), getName(), textValue, forceRefresh);
    }

    /*********** <pre>
					Select an item by its text value from a combobox.
				
					Select an item by its text value from a combobox.
						This method combines the initial Click required to expose the list
						of items and then the subsequent selection of a text item from the list.
					
					
						The routine will first attempt to see if the item exists in the list
						and should provide a warning if it cannot find the item or cannot
						read the list of items. The routine will then attempt the selection.
					
					
						After the selection is attempted, the routine tries to verify that the
						list has the specified item as the selected item. A warning will be
						issued if the routine cannot read the list. A failure will be issued
						if the routine CAN read the list and determines that the specified
						item is NOT the currently selected item.
					
					Note: RobotJ also uses identical keyword SelectTextItem
				    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO
							The case-sensitive item in the drop down list to select.
						
     @param forceRefresh  Optional:Yes
							Force refreshing to update stale element after selection.
						
     **********/
    public void select(StepTestTable table, String textValue, String forceRefresh ) {

        if ( table == null ) throw new IllegalArgumentException ( "select.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "select.textValue = null");
        table.add( ComboBoxFunctions.select(getWindow().getName(), getName(), textValue, forceRefresh));
    }

    /*********** <pre>
					Select an item by its text value from a combobox.
				
					Select an item by its text value from a combobox.
						This method combines the initial Click required to expose the list
						of items and then the subsequent selection of a text item from the list.
					
					
						The routine will first attempt to see if the item exists in the list
						and should provide a warning if it cannot find the item or cannot
						read the list of items. The routine will then attempt the selection.
					
					
						After the selection is attempted, the routine tries to verify that the
						list has the specified item as the selected item. A warning will be
						issued if the routine cannot read the list. A failure will be issued
						if the routine CAN read the list and determines that the specified
						item is NOT the currently selected item.
					
					Note: RobotJ also uses identical keyword SelectTextItem
				    </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO
							The case-sensitive item in the drop down list to select.
						<BR/>         forceRefresh -- Optional:Yes
							Force refreshing to update stale element after selection.
						
    </UL>

     **********/
    public ComponentFunction select(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "select.parameters = null");
        return ComboBoxFunctions.select(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre>
					Select an item by its text value from a combobox.
				
					Select an item by its text value from a combobox.
						This method combines the initial Click required to expose the list
						of items and then the subsequent selection of a text item from the list.
					
					
						The routine will first attempt to see if the item exists in the list
						and should provide a warning if it cannot find the item or cannot
						read the list of items. The routine will then attempt the selection.
					
					
						After the selection is attempted, the routine tries to verify that the
						list has the specified item as the selected item. A warning will be
						issued if the routine cannot read the list. A failure will be issued
						if the routine CAN read the list and determines that the specified
						item is NOT the currently selected item.
					
					Note: RobotJ also uses identical keyword SelectTextItem
				    </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO
							The case-sensitive item in the drop down list to select.
						<BR/>         forceRefresh -- Optional:Yes
							Force refreshing to update stale element after selection.
						
    </UL>

     **********/
    public void select(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "select.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "select.parameters = null");
        table.add( ComboBoxFunctions.select(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre>
					Select an item by its index from a combobox.
				
					Select an item by its index from a combobox.
					This method combines the initial Click required to expose the list
					of items and then the subsequent selection of the item from the list.
					
					The routine will first attempt to see if the index exists in the list
					and should provide a warning if it cannot find the item or cannot
					read the list of items. The routine will then attempt the selection.
					
				    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param indexValue  Optional:NO
							The item index in the drop down list to select.
						
     @param forceRefresh  Optional:Yes
							Force refreshing to update stale element after selection.
						
     **********/
    public ComponentFunction selectIndex(String indexValue, String forceRefresh ) {

        if ( indexValue == null ) throw new IllegalArgumentException ( "selectIndex.indexValue = null");
        return ComboBoxFunctions.selectIndex(getWindow().getName(), getName(), indexValue, forceRefresh);
    }

    /*********** <pre>
					Select an item by its index from a combobox.
				
					Select an item by its index from a combobox.
					This method combines the initial Click required to expose the list
					of items and then the subsequent selection of the item from the list.
					
					The routine will first attempt to see if the index exists in the list
					and should provide a warning if it cannot find the item or cannot
					read the list of items. The routine will then attempt the selection.
					
				    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param indexValue  Optional:NO
							The item index in the drop down list to select.
						
     @param forceRefresh  Optional:Yes
							Force refreshing to update stale element after selection.
						
     **********/
    public void selectIndex(StepTestTable table, String indexValue, String forceRefresh ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectIndex.table = null");

        if ( indexValue == null ) throw new IllegalArgumentException ( "selectIndex.indexValue = null");
        table.add( ComboBoxFunctions.selectIndex(getWindow().getName(), getName(), indexValue, forceRefresh));
    }

    /*********** <pre>
					Select an item by its index from a combobox.
				
					Select an item by its index from a combobox.
					This method combines the initial Click required to expose the list
					of items and then the subsequent selection of the item from the list.
					
					The routine will first attempt to see if the index exists in the list
					and should provide a warning if it cannot find the item or cannot
					read the list of items. The routine will then attempt the selection.
					
				    </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         indexValue -- Optional:NO
							The item index in the drop down list to select.
						<BR/>         forceRefresh -- Optional:Yes
							Force refreshing to update stale element after selection.
						
    </UL>

     **********/
    public ComponentFunction selectIndex(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "selectIndex.parameters = null");
        return ComboBoxFunctions.selectIndex(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre>
					Select an item by its index from a combobox.
				
					Select an item by its index from a combobox.
					This method combines the initial Click required to expose the list
					of items and then the subsequent selection of the item from the list.
					
					The routine will first attempt to see if the index exists in the list
					and should provide a warning if it cannot find the item or cannot
					read the list of items. The routine will then attempt the selection.
					
				    </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         indexValue -- Optional:NO
							The item index in the drop down list to select.
						<BR/>         forceRefresh -- Optional:Yes
							Force refreshing to update stale element after selection.
						
    </UL>

     **********/
    public void selectIndex(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectIndex.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectIndex.parameters = null");
        table.add( ComboBoxFunctions.selectIndex(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre>
					Select an item via a partial text match in a combobox.
				
					Select an item via a partial text match in a combobox.
						This method combines the initial Click required to expose the list
						of items and then the subsequent selection of a text item from the
						list.
					
					
						The routine will first attempt to see if the item exists in the list
						and should provide a warning if it cannot find the item or cannot
						read the list of items. The routine will then attempt the selection.
					
					
						After the selection is attempted, the routine tries to verify that the
						list has the specified item as the selected item. A warning will be
						issued if the routine cannot read the list. A failure will be issued
						if the routine CAN read the list and determines that the specified
						item is NOT the currently selected item.
					
				    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO
							The case-sensitive substring of an item in the drop down list to select.
						
     @param forceRefresh  Optional:Yes
							Force refreshing to update stale element after selection.
						
     **********/
    public ComponentFunction selectPartialMatch(String textValue, String forceRefresh ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "selectPartialMatch.textValue = null");
        return ComboBoxFunctions.selectPartialMatch(getWindow().getName(), getName(), textValue, forceRefresh);
    }

    /*********** <pre>
					Select an item via a partial text match in a combobox.
				
					Select an item via a partial text match in a combobox.
						This method combines the initial Click required to expose the list
						of items and then the subsequent selection of a text item from the
						list.
					
					
						The routine will first attempt to see if the item exists in the list
						and should provide a warning if it cannot find the item or cannot
						read the list of items. The routine will then attempt the selection.
					
					
						After the selection is attempted, the routine tries to verify that the
						list has the specified item as the selected item. A warning will be
						issued if the routine cannot read the list. A failure will be issued
						if the routine CAN read the list and determines that the specified
						item is NOT the currently selected item.
					
				    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO
							The case-sensitive substring of an item in the drop down list to select.
						
     @param forceRefresh  Optional:Yes
							Force refreshing to update stale element after selection.
						
     **********/
    public void selectPartialMatch(StepTestTable table, String textValue, String forceRefresh ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectPartialMatch.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectPartialMatch.textValue = null");
        table.add( ComboBoxFunctions.selectPartialMatch(getWindow().getName(), getName(), textValue, forceRefresh));
    }

    /*********** <pre>
					Select an item via a partial text match in a combobox.
				
					Select an item via a partial text match in a combobox.
						This method combines the initial Click required to expose the list
						of items and then the subsequent selection of a text item from the
						list.
					
					
						The routine will first attempt to see if the item exists in the list
						and should provide a warning if it cannot find the item or cannot
						read the list of items. The routine will then attempt the selection.
					
					
						After the selection is attempted, the routine tries to verify that the
						list has the specified item as the selected item. A warning will be
						issued if the routine cannot read the list. A failure will be issued
						if the routine CAN read the list and determines that the specified
						item is NOT the currently selected item.
					
				    </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO
							The case-sensitive substring of an item in the drop down list to select.
						<BR/>         forceRefresh -- Optional:Yes
							Force refreshing to update stale element after selection.
						
    </UL>

     **********/
    public ComponentFunction selectPartialMatch(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "selectPartialMatch.parameters = null");
        return ComboBoxFunctions.selectPartialMatch(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre>
					Select an item via a partial text match in a combobox.
				
					Select an item via a partial text match in a combobox.
						This method combines the initial Click required to expose the list
						of items and then the subsequent selection of a text item from the
						list.
					
					
						The routine will first attempt to see if the item exists in the list
						and should provide a warning if it cannot find the item or cannot
						read the list of items. The routine will then attempt the selection.
					
					
						After the selection is attempted, the routine tries to verify that the
						list has the specified item as the selected item. A warning will be
						issued if the routine cannot read the list. A failure will be issued
						if the routine CAN read the list and determines that the specified
						item is NOT the currently selected item.
					
				    </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO
							The case-sensitive substring of an item in the drop down list to select.
						<BR/>         forceRefresh -- Optional:Yes
							Force refreshing to update stale element after selection.
						
    </UL>

     **********/
    public void selectPartialMatch(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectPartialMatch.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectPartialMatch.parameters = null");
        table.add( ComboBoxFunctions.selectPartialMatch(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre>
					Select an item by its text value from a combobox without verifying the
					selection.
				
					Select an item by its text value from a combobox without
						verifying the selection.
						This method combines the initial Click required to expose the list
						of items and then the subsequent selection of a text item from the list.
					
					
						The routine will simply take the specified text and attempt the
						selection.
						it will not verify the existence of the item before the attempt, nor
						will it verify the item is actually selected after the
						attempt.
					
					Note: RobotJ also uses identical keyword SelectUnverifiedTextItem
					
				    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO
							The case-sensitive item in the drop down list to select.
						
     @param forceRefresh  Optional:Yes
							Force refreshing to update stale element after selection.
						
     **********/
    public ComponentFunction selectUnverified(String textValue, String forceRefresh ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "selectUnverified.textValue = null");
        return ComboBoxFunctions.selectUnverified(getWindow().getName(), getName(), textValue, forceRefresh);
    }

    /*********** <pre>
					Select an item by its text value from a combobox without verifying the
					selection.
				
					Select an item by its text value from a combobox without
						verifying the selection.
						This method combines the initial Click required to expose the list
						of items and then the subsequent selection of a text item from the list.
					
					
						The routine will simply take the specified text and attempt the
						selection.
						it will not verify the existence of the item before the attempt, nor
						will it verify the item is actually selected after the
						attempt.
					
					Note: RobotJ also uses identical keyword SelectUnverifiedTextItem
					
				    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO
							The case-sensitive item in the drop down list to select.
						
     @param forceRefresh  Optional:Yes
							Force refreshing to update stale element after selection.
						
     **********/
    public void selectUnverified(StepTestTable table, String textValue, String forceRefresh ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectUnverified.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectUnverified.textValue = null");
        table.add( ComboBoxFunctions.selectUnverified(getWindow().getName(), getName(), textValue, forceRefresh));
    }

    /*********** <pre>
					Select an item by its text value from a combobox without verifying the
					selection.
				
					Select an item by its text value from a combobox without
						verifying the selection.
						This method combines the initial Click required to expose the list
						of items and then the subsequent selection of a text item from the list.
					
					
						The routine will simply take the specified text and attempt the
						selection.
						it will not verify the existence of the item before the attempt, nor
						will it verify the item is actually selected after the
						attempt.
					
					Note: RobotJ also uses identical keyword SelectUnverifiedTextItem
					
				    </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO
							The case-sensitive item in the drop down list to select.
						<BR/>         forceRefresh -- Optional:Yes
							Force refreshing to update stale element after selection.
						
    </UL>

     **********/
    public ComponentFunction selectUnverified(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "selectUnverified.parameters = null");
        return ComboBoxFunctions.selectUnverified(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre>
					Select an item by its text value from a combobox without verifying the
					selection.
				
					Select an item by its text value from a combobox without
						verifying the selection.
						This method combines the initial Click required to expose the list
						of items and then the subsequent selection of a text item from the list.
					
					
						The routine will simply take the specified text and attempt the
						selection.
						it will not verify the existence of the item before the attempt, nor
						will it verify the item is actually selected after the
						attempt.
					
					Note: RobotJ also uses identical keyword SelectUnverifiedTextItem
					
				    </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO
							The case-sensitive item in the drop down list to select.
						<BR/>         forceRefresh -- Optional:Yes
							Force refreshing to update stale element after selection.
						
    </UL>

     **********/
    public void selectUnverified(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectUnverified.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectUnverified.parameters = null");
        table.add( ComboBoxFunctions.selectUnverified(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre>
					Select an item via a partial text match in a combobox without verification.
				
					Select an item via a partial text match in a combobox without verification.
						This method combines the initial Click required to expose the list
						of items and then the subsequent selection of a text item from the list.
					
					
						The routine will first attempt to see if the item exists in the list
						and should provide a warning if it cannot find the item or
						cannot read the list of items. The routine will then attempt the selection.
					
					
						The routine will not verify the selected-item matches the parameter partial-text.
					
				    </pre>    Supporting Engines:
    <P/><UL>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO
							The case-sensitive substring of an item in the drop down list to select.
						
     @param forceRefresh  Optional:Yes
							Force refreshing to update stale element after selection.
						
     **********/
    public ComponentFunction selectUnverifiedPartialMatch(String textValue, String forceRefresh ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "selectUnverifiedPartialMatch.textValue = null");
        return ComboBoxFunctions.selectUnverifiedPartialMatch(getWindow().getName(), getName(), textValue, forceRefresh);
    }

    /*********** <pre>
					Select an item via a partial text match in a combobox without verification.
				
					Select an item via a partial text match in a combobox without verification.
						This method combines the initial Click required to expose the list
						of items and then the subsequent selection of a text item from the list.
					
					
						The routine will first attempt to see if the item exists in the list
						and should provide a warning if it cannot find the item or
						cannot read the list of items. The routine will then attempt the selection.
					
					
						The routine will not verify the selected-item matches the parameter partial-text.
					
				    </pre>    Supporting Engines:
    <P/><UL>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO
							The case-sensitive substring of an item in the drop down list to select.
						
     @param forceRefresh  Optional:Yes
							Force refreshing to update stale element after selection.
						
     **********/
    public void selectUnverifiedPartialMatch(StepTestTable table, String textValue, String forceRefresh ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectUnverifiedPartialMatch.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectUnverifiedPartialMatch.textValue = null");
        table.add( ComboBoxFunctions.selectUnverifiedPartialMatch(getWindow().getName(), getName(), textValue, forceRefresh));
    }

    /*********** <pre>
					Select an item via a partial text match in a combobox without verification.
				
					Select an item via a partial text match in a combobox without verification.
						This method combines the initial Click required to expose the list
						of items and then the subsequent selection of a text item from the list.
					
					
						The routine will first attempt to see if the item exists in the list
						and should provide a warning if it cannot find the item or
						cannot read the list of items. The routine will then attempt the selection.
					
					
						The routine will not verify the selected-item matches the parameter partial-text.
					
				    </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO
							The case-sensitive substring of an item in the drop down list to select.
						<BR/>         forceRefresh -- Optional:Yes
							Force refreshing to update stale element after selection.
						
    </UL>

     **********/
    public ComponentFunction selectUnverifiedPartialMatch(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "selectUnverifiedPartialMatch.parameters = null");
        return ComboBoxFunctions.selectUnverifiedPartialMatch(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre>
					Select an item via a partial text match in a combobox without verification.
				
					Select an item via a partial text match in a combobox without verification.
						This method combines the initial Click required to expose the list
						of items and then the subsequent selection of a text item from the list.
					
					
						The routine will first attempt to see if the item exists in the list
						and should provide a warning if it cannot find the item or
						cannot read the list of items. The routine will then attempt the selection.
					
					
						The routine will not verify the selected-item matches the parameter partial-text.
					
				    </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO
							The case-sensitive substring of an item in the drop down list to select.
						<BR/>         forceRefresh -- Optional:Yes
							Force refreshing to update stale element after selection.
						
    </UL>

     **********/
    public void selectUnverifiedPartialMatch(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectUnverifiedPartialMatch.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectUnverifiedPartialMatch.parameters = null");
        table.add( ComboBoxFunctions.selectUnverifiedPartialMatch(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre>
					Set the text of the combobox
				
					This action sets the text of the combobox. This version allows
						the use of special character combinations and substrings to identify
						specific keyboard keys. These are the same special characters and interpretation
						used for Robot's InputKeys command and the Windows Scripting Host.
					
					
						~^+%{( are primarily the characters that induce special processing.
					
						The routine verifies we can read the text property, sets the text value
						and will verify that the property has been set to that value *IF* none
						of the special characters exist in the provided text value. If those
						special characters exist, then no post-set verification will occur.
					
				    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:YES  DefaultVal:
							The text that will be typed into the ComboBox.
						
     **********/
    public ComponentFunction setTextValue(String textValue ) {

        return ComboBoxFunctions.setTextValue(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre>
					Set the text of the combobox
				
					This action sets the text of the combobox. This version allows
						the use of special character combinations and substrings to identify
						specific keyboard keys. These are the same special characters and interpretation
						used for Robot's InputKeys command and the Windows Scripting Host.
					
					
						~^+%{( are primarily the characters that induce special processing.
					
						The routine verifies we can read the text property, sets the text value
						and will verify that the property has been set to that value *IF* none
						of the special characters exist in the provided text value. If those
						special characters exist, then no post-set verification will occur.
					
				    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:YES  DefaultVal:
							The text that will be typed into the ComboBox.
						
     **********/
    public void setTextValue(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "setTextValue.table = null");

        table.add( ComboBoxFunctions.setTextValue(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre>
					Set the text of the combobox without verification
				
					This action sets the text of the combobox. This version allows
						the use of special character combinations and substrings to identify
						specific keyboard keys. These are the same special characters and interpretation
						used for Robot's InputKeys command and the Windows Scripting Host.
					
					
						~^+%{( are primarily the characters that induce special processing.
					
						The routine verifies we can read the text property, sets the text value
						but does not verify that the property has been set to that value
						whether or not any of the special characters exist in the provided text value.
					
				    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param textValue  Optional:YES  DefaultVal:
							The text that will be typed into the ComboBox.
						
     **********/
    public ComponentFunction setUnverifiedTextValue(String textValue ) {

        return ComboBoxFunctions.setUnverifiedTextValue(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre>
					Set the text of the combobox without verification
				
					This action sets the text of the combobox. This version allows
						the use of special character combinations and substrings to identify
						specific keyboard keys. These are the same special characters and interpretation
						used for Robot's InputKeys command and the Windows Scripting Host.
					
					
						~^+%{( are primarily the characters that induce special processing.
					
						The routine verifies we can read the text property, sets the text value
						but does not verify that the property has been set to that value
						whether or not any of the special characters exist in the provided text value.
					
				    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:YES  DefaultVal:
							The text that will be typed into the ComboBox.
						
     **********/
    public void setUnverifiedTextValue(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "setUnverifiedTextValue.table = null");

        table.add( ComboBoxFunctions.setUnverifiedTextValue(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre>
					Show the combo box list (expose it).
				
					show the list so that the next step can be a click
						on an item. This would only be necessary in cases
						where the state of the combo box is not known ahead
						of time.
					
				    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     **********/
    public ComponentFunction showList( ) {

        return ComboBoxFunctions.showList(getWindow().getName(), getName());
    }

    /*********** <pre>
					Show the combo box list (expose it).
				
					show the list so that the next step can be a click
						on an item. This would only be necessary in cases
						where the state of the combo box is not known ahead
						of time.
					
				    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     **********/
    public void showList(StepTestTable table ) {

        if ( table == null ) throw new IllegalArgumentException ( "showList.table = null");

        table.add( ComboBoxFunctions.showList(getWindow().getName(), getName()));
    }

    /*********** <pre>
					Verify Selected item is equal to specified parameter
				
					Verify Selected item is equal to specified parameter
				    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO
							The case-sensitive substring to compare.
						
     **********/
    public ComponentFunction verifySelected(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "verifySelected.textValue = null");
        return ComboBoxFunctions.verifySelected(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre>
					Verify Selected item is equal to specified parameter
				
					Verify Selected item is equal to specified parameter
				    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO
							The case-sensitive substring to compare.
						
     **********/
    public void verifySelected(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifySelected.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "verifySelected.textValue = null");
        table.add( ComboBoxFunctions.verifySelected(getWindow().getName(), getName(), textValue));
    }

}
