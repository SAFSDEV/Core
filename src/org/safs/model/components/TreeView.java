
/******************************************************************************
 * TreeView.java
 *
 * Copyright (C) SAS Institute, All rights reserved.
 * General Public License: https://www.gnu.org/licenses/gpl-3.0.en.html
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   TreeViewFunctions.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaComponentModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe TreeViewFunctions.xml XSLJavaComponentModel.xsl -o TreeView.java
 *
 ******************************************************************************/ 
package org.safs.model.components;

import org.safs.model.commands.TreeViewFunctions;
import org.safs.model.ComponentFunction;
import org.safs.model.components.UIComponent;
import org.safs.model.StepTestTable;

public class TreeView extends GenericObject {

    /*****************
    Constructor 

    Create an instance of pseudo-component representing 
    a specific component in a specific window.
    
    @param window  Optional:NO 
           Specifies which Window this component is 'in'.
    @param compname Optional:NO 
           Specifies the AppMap name of the component in the Window.
    ****************/
    public TreeView(Window window, String compname) {

        super(window, compname);
    }

    /*****************
    Constructor 

    Create an instance of pseudo-component representing 
    a specific component in a specific window.
    
    This convenience routine will create the requisite Window component.
    
    @param winname  Optional:NO 
           Specifies the AppMap name of the window.
    @param compname Optional:NO 
           Specifies the AppMap name of the component in the Window.
    ****************/
    public TreeView(String winname, String compname) {

        this(new Window(winname), compname);
    }

    protected TreeView(String compname) {

        super(compname);
    }



    /*********** <pre> 
                 Action to (almost) blindly activate (double-click) a text node.
              
                 No attempt is made to verify that the node exists 
                 prior to the selection.  No attempt to verify the node 
                 has been properly selected after the selection.
                 
                 It should be noted that a click requires the full 
                 hierarchical path to the node to be selected.  Parent 
                 child branches are delimited with '->' as in:
                    Parent->branch->leaf 
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of the node to be clicked
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public ComponentFunction activateUnverifiedTextNode(String textValue, String matchIndex ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "activateUnverifiedTextNode.textValue = null");
        return TreeViewFunctions.activateUnverifiedTextNode(getWindow().getName(), getName(), textValue, matchIndex);
    }

    /*********** <pre> 
                 Action to (almost) blindly activate (double-click) a text node.
              
                 No attempt is made to verify that the node exists 
                 prior to the selection.  No attempt to verify the node 
                 has been properly selected after the selection.
                 
                 It should be noted that a click requires the full 
                 hierarchical path to the node to be selected.  Parent 
                 child branches are delimited with '->' as in:
                    Parent->branch->leaf 
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of the node to be clicked
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public void activateUnverifiedTextNode(StepTestTable table, String textValue, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "activateUnverifiedTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "activateUnverifiedTextNode.textValue = null");
        table.add( TreeViewFunctions.activateUnverifiedTextNode(getWindow().getName(), getName(), textValue, matchIndex));
    }

    /*********** <pre> 
                 Action to (almost) blindly activate (double-click) a text node.
              
                 No attempt is made to verify that the node exists 
                 prior to the selection.  No attempt to verify the node 
                 has been properly selected after the selection.
                 
                 It should be noted that a click requires the full 
                 hierarchical path to the node to be selected.  Parent 
                 child branches are delimited with '->' as in:
                    Parent->branch->leaf 
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of the node to be clicked
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public ComponentFunction activateUnverifiedTextNode(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "activateUnverifiedTextNode.parameters = null");
        return TreeViewFunctions.activateUnverifiedTextNode(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Action to (almost) blindly activate (double-click) a text node.
              
                 No attempt is made to verify that the node exists 
                 prior to the selection.  No attempt to verify the node 
                 has been properly selected after the selection.
                 
                 It should be noted that a click requires the full 
                 hierarchical path to the node to be selected.  Parent 
                 child branches are delimited with '->' as in:
                    Parent->branch->leaf 
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of the node to be clicked
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public void activateUnverifiedTextNode(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "activateUnverifiedTextNode.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "activateUnverifiedTextNode.parameters = null");
        table.add( TreeViewFunctions.activateUnverifiedTextNode(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre>
             Copy the current contents of a tree[branch] to a file.
             
             The search of the path to the node is expected to be a case-sensitive 
             exact match of each node.  Use 'PartialMatchTreeDataToFile' if you 
             wish to specify case-insensitive substring matches for tree nodes.             
             
             By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param file  Optional:NO
             The name of the file used to store the tree data.
              
     @param branch  Optional:YES
	                	The full name of the tree branch to capture.
	                
     @param indentMark  Optional:YES
		        	The character(s) to use in the output file to indent the tree nodes from the 
		        	parent tree branches.
		        
     @param fileEncoding  Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
     @param filterMode  Optional:YES  DefaultVal:
             (Future) Specify a file filter to use to process the text before comparison.
              
     @param filterOptions  Optional:YES  DefaultVal:
             (Future) Specify filter options to use with the file filter.
              
     **********/
    public ComponentFunction captureTreeDataToFile(String file, String branch, String indentMark, String fileEncoding, String filterMode, String filterOptions ) {

        if ( file == null ) throw new IllegalArgumentException ( "captureTreeDataToFile.file = null");
        return TreeViewFunctions.captureTreeDataToFile(getWindow().getName(), getName(), file, branch, indentMark, fileEncoding, filterMode, filterOptions);
    }

    /*********** <pre>
             Copy the current contents of a tree[branch] to a file.
             
             The search of the path to the node is expected to be a case-sensitive 
             exact match of each node.  Use 'PartialMatchTreeDataToFile' if you 
             wish to specify case-insensitive substring matches for tree nodes.             
             
             By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param file  Optional:NO
             The name of the file used to store the tree data.
              
     @param branch  Optional:YES
	                	The full name of the tree branch to capture.
	                
     @param indentMark  Optional:YES
		        	The character(s) to use in the output file to indent the tree nodes from the 
		        	parent tree branches.
		        
     @param fileEncoding  Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
     @param filterMode  Optional:YES  DefaultVal:
             (Future) Specify a file filter to use to process the text before comparison.
              
     @param filterOptions  Optional:YES  DefaultVal:
             (Future) Specify filter options to use with the file filter.
              
     **********/
    public void captureTreeDataToFile(StepTestTable table, String file, String branch, String indentMark, String fileEncoding, String filterMode, String filterOptions ) {

        if ( table == null ) throw new IllegalArgumentException ( "captureTreeDataToFile.table = null");

        if ( file == null ) throw new IllegalArgumentException ( "captureTreeDataToFile.file = null");
        table.add( TreeViewFunctions.captureTreeDataToFile(getWindow().getName(), getName(), file, branch, indentMark, fileEncoding, filterMode, filterOptions));
    }

    /*********** <pre>
             Copy the current contents of a tree[branch] to a file.
             
             The search of the path to the node is expected to be a case-sensitive 
             exact match of each node.  Use 'PartialMatchTreeDataToFile' if you 
             wish to specify case-insensitive substring matches for tree nodes.             
             
             By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         file -- Optional:NO
             The name of the file used to store the tree data.
              <BR/>         branch -- Optional:YES
	                	The full name of the tree branch to capture.
	                <BR/>         indentMark -- Optional:YES
		        	The character(s) to use in the output file to indent the tree nodes from the 
		        	parent tree branches.
		        <BR/>         fileEncoding -- Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            <BR/>         filterMode -- Optional:YES  DefaultVal:
             (Future) Specify a file filter to use to process the text before comparison.
              <BR/>         filterOptions -- Optional:YES  DefaultVal:
             (Future) Specify filter options to use with the file filter.
              
    </UL>

     **********/
    public ComponentFunction captureTreeDataToFile(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "captureTreeDataToFile.parameters = null");
        return TreeViewFunctions.captureTreeDataToFile(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre>
             Copy the current contents of a tree[branch] to a file.
             
             The search of the path to the node is expected to be a case-sensitive 
             exact match of each node.  Use 'PartialMatchTreeDataToFile' if you 
             wish to specify case-insensitive substring matches for tree nodes.             
             
             By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         file -- Optional:NO
             The name of the file used to store the tree data.
              <BR/>         branch -- Optional:YES
	                	The full name of the tree branch to capture.
	                <BR/>         indentMark -- Optional:YES
		        	The character(s) to use in the output file to indent the tree nodes from the 
		        	parent tree branches.
		        <BR/>         fileEncoding -- Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            <BR/>         filterMode -- Optional:YES  DefaultVal:
             (Future) Specify a file filter to use to process the text before comparison.
              <BR/>         filterOptions -- Optional:YES  DefaultVal:
             (Future) Specify filter options to use with the file filter.
              
    </UL>

     **********/
    public void captureTreeDataToFile(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "captureTreeDataToFile.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "captureTreeDataToFile.parameters = null");
        table.add( TreeViewFunctions.captureTreeDataToFile(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Checks a node's state icon (checkbox) according to its associated text value. 
               
                 Initially released with .NET support only.
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of the node to be checked.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public ComponentFunction checkTextNode(String textValue, String matchIndex ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "checkTextNode.textValue = null");
        return TreeViewFunctions.checkTextNode(getWindow().getName(), getName(), textValue, matchIndex);
    }

    /*********** <pre> 
                 Checks a node's state icon (checkbox) according to its associated text value. 
               
                 Initially released with .NET support only.
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of the node to be checked.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public void checkTextNode(StepTestTable table, String textValue, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "checkTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "checkTextNode.textValue = null");
        table.add( TreeViewFunctions.checkTextNode(getWindow().getName(), getName(), textValue, matchIndex));
    }

    /*********** <pre> 
                 Checks a node's state icon (checkbox) according to its associated text value. 
               
                 Initially released with .NET support only.
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of the node to be checked.
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public ComponentFunction checkTextNode(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "checkTextNode.parameters = null");
        return TreeViewFunctions.checkTextNode(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Checks a node's state icon (checkbox) according to its associated text value. 
               
                 Initially released with .NET support only.
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of the node to be checked.
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public void checkTextNode(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "checkTextNode.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "checkTextNode.parameters = null");
        table.add( TreeViewFunctions.checkTextNode(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Action to click a node according to a partial match of its text value.
               
                 Partial matching is accomplished through case-insensitive substring 
                 matching.  Each delimited node of the provided TextValue 
                 is compared against the object data using this partial match comparison.
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.  Only the final node provided in the TextValue 
                 hierarchy is evaluated for duplicity.  Intermediate nodes are always found 
                 on a "first match" basis.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-Insensitive text of node to click.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public ComponentFunction clickPartial(String textValue, String matchIndex ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "clickPartial.textValue = null");
        return TreeViewFunctions.clickPartial(getWindow().getName(), getName(), textValue, matchIndex);
    }

    /*********** <pre> 
                 Action to click a node according to a partial match of its text value.
               
                 Partial matching is accomplished through case-insensitive substring 
                 matching.  Each delimited node of the provided TextValue 
                 is compared against the object data using this partial match comparison.
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.  Only the final node provided in the TextValue 
                 hierarchy is evaluated for duplicity.  Intermediate nodes are always found 
                 on a "first match" basis.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-Insensitive text of node to click.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public void clickPartial(StepTestTable table, String textValue, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "clickPartial.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "clickPartial.textValue = null");
        table.add( TreeViewFunctions.clickPartial(getWindow().getName(), getName(), textValue, matchIndex));
    }

    /*********** <pre> 
                 Action to click a node according to a partial match of its text value.
               
                 Partial matching is accomplished through case-insensitive substring 
                 matching.  Each delimited node of the provided TextValue 
                 is compared against the object data using this partial match comparison.
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.  Only the final node provided in the TextValue 
                 hierarchy is evaluated for duplicity.  Intermediate nodes are always found 
                 on a "first match" basis.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-Insensitive text of node to click.
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public ComponentFunction clickPartial(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "clickPartial.parameters = null");
        return TreeViewFunctions.clickPartial(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Action to click a node according to a partial match of its text value.
               
                 Partial matching is accomplished through case-insensitive substring 
                 matching.  Each delimited node of the provided TextValue 
                 is compared against the object data using this partial match comparison.
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.  Only the final node provided in the TextValue 
                 hierarchy is evaluated for duplicity.  Intermediate nodes are always found 
                 on a "first match" basis.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-Insensitive text of node to click.
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public void clickPartial(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "clickPartial.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "clickPartial.parameters = null");
        table.add( TreeViewFunctions.clickPartial(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Action to click a node according to its text value.
               
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of node to click.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public ComponentFunction clickTextNode(String textValue, String matchIndex ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "clickTextNode.textValue = null");
        return TreeViewFunctions.clickTextNode(getWindow().getName(), getName(), textValue, matchIndex);
    }

    /*********** <pre> 
                 Action to click a node according to its text value.
               
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to click.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public void clickTextNode(StepTestTable table, String textValue, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "clickTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "clickTextNode.textValue = null");
        table.add( TreeViewFunctions.clickTextNode(getWindow().getName(), getName(), textValue, matchIndex));
    }

    /*********** <pre> 
                 Action to click a node according to its text value.
               
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of node to click.
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public ComponentFunction clickTextNode(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "clickTextNode.parameters = null");
        return TreeViewFunctions.clickTextNode(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Action to click a node according to its text value.
               
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of node to click.
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public void clickTextNode(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "clickTextNode.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "clickTextNode.parameters = null");
        table.add( TreeViewFunctions.clickTextNode(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Action to (almost) blindly click a text node.
              
                 No attempt is made to verify that the node exists 
                 prior to the selection.  No attempt to verify the node 
                 has been properly selected after the selection.
                 
                 It should be noted that a click requires the full 
                 hierarchical path to the node to be selected.  Parent 
                 child branches are delimited with '->' as in:
                    Parent->branch->leaf 
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of the node to be clicked
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public ComponentFunction clickUnverifiedTextNode(String textValue, String matchIndex ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "clickUnverifiedTextNode.textValue = null");
        return TreeViewFunctions.clickUnverifiedTextNode(getWindow().getName(), getName(), textValue, matchIndex);
    }

    /*********** <pre> 
                 Action to (almost) blindly click a text node.
              
                 No attempt is made to verify that the node exists 
                 prior to the selection.  No attempt to verify the node 
                 has been properly selected after the selection.
                 
                 It should be noted that a click requires the full 
                 hierarchical path to the node to be selected.  Parent 
                 child branches are delimited with '->' as in:
                    Parent->branch->leaf 
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of the node to be clicked
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public void clickUnverifiedTextNode(StepTestTable table, String textValue, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "clickUnverifiedTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "clickUnverifiedTextNode.textValue = null");
        table.add( TreeViewFunctions.clickUnverifiedTextNode(getWindow().getName(), getName(), textValue, matchIndex));
    }

    /*********** <pre> 
                 Action to (almost) blindly click a text node.
              
                 No attempt is made to verify that the node exists 
                 prior to the selection.  No attempt to verify the node 
                 has been properly selected after the selection.
                 
                 It should be noted that a click requires the full 
                 hierarchical path to the node to be selected.  Parent 
                 child branches are delimited with '->' as in:
                    Parent->branch->leaf 
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of the node to be clicked
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public ComponentFunction clickUnverifiedTextNode(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "clickUnverifiedTextNode.parameters = null");
        return TreeViewFunctions.clickUnverifiedTextNode(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Action to (almost) blindly click a text node.
              
                 No attempt is made to verify that the node exists 
                 prior to the selection.  No attempt to verify the node 
                 has been properly selected after the selection.
                 
                 It should be noted that a click requires the full 
                 hierarchical path to the node to be selected.  Parent 
                 child branches are delimited with '->' as in:
                    Parent->branch->leaf 
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of the node to be clicked
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public void clickUnverifiedTextNode(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "clickUnverifiedTextNode.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "clickUnverifiedTextNode.parameters = null");
        table.add( TreeViewFunctions.clickUnverifiedTextNode(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Action to collapse a node according to its text value.
               
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of node to collapse
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public ComponentFunction collapse(String textValue, String matchIndex ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "collapse.textValue = null");
        return TreeViewFunctions.collapse(getWindow().getName(), getName(), textValue, matchIndex);
    }

    /*********** <pre> 
                 Action to collapse a node according to its text value.
               
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to collapse
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public void collapse(StepTestTable table, String textValue, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "collapse.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "collapse.textValue = null");
        table.add( TreeViewFunctions.collapse(getWindow().getName(), getName(), textValue, matchIndex));
    }

    /*********** <pre> 
                 Action to collapse a node according to its text value.
               
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of node to collapse
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public ComponentFunction collapse(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "collapse.parameters = null");
        return TreeViewFunctions.collapse(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Action to collapse a node according to its text value.
               
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of node to collapse
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public void collapse(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "collapse.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "collapse.parameters = null");
        table.add( TreeViewFunctions.collapse(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Action to collapse a node according to a partial match of its text value.
               
                 Partial matching is accomplished through case-insensitive substring 
                 matching.  Each delimited node of the provided TextValue 
                 is compared against the object data using this partial match comparison.
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.  Only the final node provided in the TextValue 
                 hierarchy is evaluated for duplicity.  Intermediate nodes are always found 
                 on a "first match" basis.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-Insensitive text of node to collapse
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public ComponentFunction collapsePartial(String textValue, String matchIndex ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "collapsePartial.textValue = null");
        return TreeViewFunctions.collapsePartial(getWindow().getName(), getName(), textValue, matchIndex);
    }

    /*********** <pre> 
                 Action to collapse a node according to a partial match of its text value.
               
                 Partial matching is accomplished through case-insensitive substring 
                 matching.  Each delimited node of the provided TextValue 
                 is compared against the object data using this partial match comparison.
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.  Only the final node provided in the TextValue 
                 hierarchy is evaluated for duplicity.  Intermediate nodes are always found 
                 on a "first match" basis.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-Insensitive text of node to collapse
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public void collapsePartial(StepTestTable table, String textValue, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "collapsePartial.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "collapsePartial.textValue = null");
        table.add( TreeViewFunctions.collapsePartial(getWindow().getName(), getName(), textValue, matchIndex));
    }

    /*********** <pre> 
                 Action to collapse a node according to a partial match of its text value.
               
                 Partial matching is accomplished through case-insensitive substring 
                 matching.  Each delimited node of the provided TextValue 
                 is compared against the object data using this partial match comparison.
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.  Only the final node provided in the TextValue 
                 hierarchy is evaluated for duplicity.  Intermediate nodes are always found 
                 on a "first match" basis.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-Insensitive text of node to collapse
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public ComponentFunction collapsePartial(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "collapsePartial.parameters = null");
        return TreeViewFunctions.collapsePartial(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Action to collapse a node according to a partial match of its text value.
               
                 Partial matching is accomplished through case-insensitive substring 
                 matching.  Each delimited node of the provided TextValue 
                 is compared against the object data using this partial match comparison.
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.  Only the final node provided in the TextValue 
                 hierarchy is evaluated for duplicity.  Intermediate nodes are always found 
                 on a "first match" basis.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-Insensitive text of node to collapse
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public void collapsePartial(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "collapsePartial.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "collapsePartial.parameters = null");
        table.add( TreeViewFunctions.collapsePartial(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Action to collapse a node according to a partial match of its text value.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-Insensitive text of node to collapse
              
     **********/
    public ComponentFunction collapsePartialTextNode(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "collapsePartialTextNode.textValue = null");
        return TreeViewFunctions.collapsePartialTextNode(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Action to collapse a node according to a partial match of its text value.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-Insensitive text of node to collapse
              
     **********/
    public void collapsePartialTextNode(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "collapsePartialTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "collapsePartialTextNode.textValue = null");
        table.add( TreeViewFunctions.collapsePartialTextNode(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                 Action to collapse a node according to its text value. Use Collapse instead.
               
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
				 RJ Implementation: Works the same as command Collapse.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of node to collapse
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public ComponentFunction collapseTextNode(String textValue, String matchIndex ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "collapseTextNode.textValue = null");
        return TreeViewFunctions.collapseTextNode(getWindow().getName(), getName(), textValue, matchIndex);
    }

    /*********** <pre> 
                 Action to collapse a node according to its text value. Use Collapse instead.
               
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
				 RJ Implementation: Works the same as command Collapse.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to collapse
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public void collapseTextNode(StepTestTable table, String textValue, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "collapseTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "collapseTextNode.textValue = null");
        table.add( TreeViewFunctions.collapseTextNode(getWindow().getName(), getName(), textValue, matchIndex));
    }

    /*********** <pre> 
                 Action to collapse a node according to its text value. Use Collapse instead.
               
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
				 RJ Implementation: Works the same as command Collapse.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of node to collapse
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public ComponentFunction collapseTextNode(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "collapseTextNode.parameters = null");
        return TreeViewFunctions.collapseTextNode(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Action to collapse a node according to its text value. Use Collapse instead.
               
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
				 RJ Implementation: Works the same as command Collapse.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of node to collapse
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public void collapseTextNode(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "collapseTextNode.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "collapseTextNode.parameters = null");
        table.add( TreeViewFunctions.collapseTextNode(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Action to blindly collapse a node according to its text value.
              
                 Generally, no pre- or post- node checks are done. If the tree contains 
                 hidden root nodes the user must provide these.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive full path text of node to collapse
              
     **********/
    public ComponentFunction collapseUnverifiedTextNode(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "collapseUnverifiedTextNode.textValue = null");
        return TreeViewFunctions.collapseUnverifiedTextNode(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Action to blindly collapse a node according to its text value.
              
                 Generally, no pre- or post- node checks are done. If the tree contains 
                 hidden root nodes the user must provide these.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive full path text of node to collapse
              
     **********/
    public void collapseUnverifiedTextNode(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "collapseUnverifiedTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "collapseUnverifiedTextNode.textValue = null");
        table.add( TreeViewFunctions.collapseUnverifiedTextNode(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                 Action to blindly CTRL-click a node according to its text value.  Currently, this component function is for JavaTrees only.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of node to CTRL-click.
              
     **********/
    public ComponentFunction ctrlClickUnverifiedTextNode(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "ctrlClickUnverifiedTextNode.textValue = null");
        return TreeViewFunctions.ctrlClickUnverifiedTextNode(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Action to blindly CTRL-click a node according to its text value.  Currently, this component function is for JavaTrees only.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to CTRL-click.
              
     **********/
    public void ctrlClickUnverifiedTextNode(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "ctrlClickUnverifiedTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "ctrlClickUnverifiedTextNode.textValue = null");
        table.add( TreeViewFunctions.ctrlClickUnverifiedTextNode(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                 Action to double click a node according to a partial match of its text value.
               
                 Partial matching is accomplished through case-insensitive substring 
                 matching.  Each delimited node of the provided TextValue 
                 is compared against the object data using this partial match comparison.
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.  Only the final node provided in the TextValue 
                 hierarchy is evaluated for duplicity.  Intermediate nodes are always found 
                 on a "first match" basis.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-Insensitive text of node to double click.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public ComponentFunction doubleClickPartial(String textValue, String matchIndex ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "doubleClickPartial.textValue = null");
        return TreeViewFunctions.doubleClickPartial(getWindow().getName(), getName(), textValue, matchIndex);
    }

    /*********** <pre> 
                 Action to double click a node according to a partial match of its text value.
               
                 Partial matching is accomplished through case-insensitive substring 
                 matching.  Each delimited node of the provided TextValue 
                 is compared against the object data using this partial match comparison.
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.  Only the final node provided in the TextValue 
                 hierarchy is evaluated for duplicity.  Intermediate nodes are always found 
                 on a "first match" basis.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-Insensitive text of node to double click.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public void doubleClickPartial(StepTestTable table, String textValue, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "doubleClickPartial.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "doubleClickPartial.textValue = null");
        table.add( TreeViewFunctions.doubleClickPartial(getWindow().getName(), getName(), textValue, matchIndex));
    }

    /*********** <pre> 
                 Action to double click a node according to a partial match of its text value.
               
                 Partial matching is accomplished through case-insensitive substring 
                 matching.  Each delimited node of the provided TextValue 
                 is compared against the object data using this partial match comparison.
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.  Only the final node provided in the TextValue 
                 hierarchy is evaluated for duplicity.  Intermediate nodes are always found 
                 on a "first match" basis.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-Insensitive text of node to double click.
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public ComponentFunction doubleClickPartial(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "doubleClickPartial.parameters = null");
        return TreeViewFunctions.doubleClickPartial(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Action to double click a node according to a partial match of its text value.
               
                 Partial matching is accomplished through case-insensitive substring 
                 matching.  Each delimited node of the provided TextValue 
                 is compared against the object data using this partial match comparison.
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.  Only the final node provided in the TextValue 
                 hierarchy is evaluated for duplicity.  Intermediate nodes are always found 
                 on a "first match" basis.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-Insensitive text of node to double click.
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public void doubleClickPartial(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "doubleClickPartial.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "doubleClickPartial.parameters = null");
        table.add( TreeViewFunctions.doubleClickPartial(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Action to double click a node according to its text value.
               
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of node to double click.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public ComponentFunction doubleClickTextNode(String textValue, String matchIndex ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "doubleClickTextNode.textValue = null");
        return TreeViewFunctions.doubleClickTextNode(getWindow().getName(), getName(), textValue, matchIndex);
    }

    /*********** <pre> 
                 Action to double click a node according to its text value.
               
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to double click.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public void doubleClickTextNode(StepTestTable table, String textValue, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "doubleClickTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "doubleClickTextNode.textValue = null");
        table.add( TreeViewFunctions.doubleClickTextNode(getWindow().getName(), getName(), textValue, matchIndex));
    }

    /*********** <pre> 
                 Action to double click a node according to its text value.
               
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of node to double click.
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public ComponentFunction doubleClickTextNode(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "doubleClickTextNode.parameters = null");
        return TreeViewFunctions.doubleClickTextNode(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Action to double click a node according to its text value.
               
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of node to double click.
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public void doubleClickTextNode(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "doubleClickTextNode.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "doubleClickTextNode.parameters = null");
        table.add( TreeViewFunctions.doubleClickTextNode(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Action to (almost) blindly activate (double-click) a text node.
              
                 No attempt is made to verify that the node exists 
                 prior to the selection.  No attempt to verify the node 
                 has been properly selected after the selection.
                 
                 It should be noted that a click requires the full 
                 hierarchical path to the node to be selected.  Parent 
                 child branches are delimited with '->' as in:
                    Parent->branch->leaf 
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of the node to be clicked
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public ComponentFunction doubleClickUnverifiedTextNode(String textValue, String matchIndex ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "doubleClickUnverifiedTextNode.textValue = null");
        return TreeViewFunctions.doubleClickUnverifiedTextNode(getWindow().getName(), getName(), textValue, matchIndex);
    }

    /*********** <pre> 
                 Action to (almost) blindly activate (double-click) a text node.
              
                 No attempt is made to verify that the node exists 
                 prior to the selection.  No attempt to verify the node 
                 has been properly selected after the selection.
                 
                 It should be noted that a click requires the full 
                 hierarchical path to the node to be selected.  Parent 
                 child branches are delimited with '->' as in:
                    Parent->branch->leaf 
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of the node to be clicked
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public void doubleClickUnverifiedTextNode(StepTestTable table, String textValue, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "doubleClickUnverifiedTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "doubleClickUnverifiedTextNode.textValue = null");
        table.add( TreeViewFunctions.doubleClickUnverifiedTextNode(getWindow().getName(), getName(), textValue, matchIndex));
    }

    /*********** <pre> 
                 Action to (almost) blindly activate (double-click) a text node.
              
                 No attempt is made to verify that the node exists 
                 prior to the selection.  No attempt to verify the node 
                 has been properly selected after the selection.
                 
                 It should be noted that a click requires the full 
                 hierarchical path to the node to be selected.  Parent 
                 child branches are delimited with '->' as in:
                    Parent->branch->leaf 
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of the node to be clicked
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public ComponentFunction doubleClickUnverifiedTextNode(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "doubleClickUnverifiedTextNode.parameters = null");
        return TreeViewFunctions.doubleClickUnverifiedTextNode(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Action to (almost) blindly activate (double-click) a text node.
              
                 No attempt is made to verify that the node exists 
                 prior to the selection.  No attempt to verify the node 
                 has been properly selected after the selection.
                 
                 It should be noted that a click requires the full 
                 hierarchical path to the node to be selected.  Parent 
                 child branches are delimited with '->' as in:
                    Parent->branch->leaf 
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of the node to be clicked
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public void doubleClickUnverifiedTextNode(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "doubleClickUnverifiedTextNode.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "doubleClickUnverifiedTextNode.parameters = null");
        table.add( TreeViewFunctions.doubleClickUnverifiedTextNode(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Action to expand a node according to its text value.
               
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of node to expand
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public ComponentFunction expand(String textValue, String matchIndex ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "expand.textValue = null");
        return TreeViewFunctions.expand(getWindow().getName(), getName(), textValue, matchIndex);
    }

    /*********** <pre> 
                 Action to expand a node according to its text value.
               
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to expand
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public void expand(StepTestTable table, String textValue, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "expand.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "expand.textValue = null");
        table.add( TreeViewFunctions.expand(getWindow().getName(), getName(), textValue, matchIndex));
    }

    /*********** <pre> 
                 Action to expand a node according to its text value.
               
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of node to expand
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public ComponentFunction expand(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "expand.parameters = null");
        return TreeViewFunctions.expand(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Action to expand a node according to its text value.
               
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of node to expand
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public void expand(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "expand.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "expand.parameters = null");
        table.add( TreeViewFunctions.expand(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Action to expand a node according to a partial match of text value.
               
                 Partial matching is accomplished through case-insensitive substring 
                 matching.  Each delimited node of the provided TextValue 
                 is compared against the object data using this partial match comparison.
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.  Only the final node provided in the TextValue is 
                 evaluated for duplicity.  Intermediate nodes are always found on a 
                 "first match" basis.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-Insensitive text of node to match.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public ComponentFunction expandPartial(String textValue, String matchIndex ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "expandPartial.textValue = null");
        return TreeViewFunctions.expandPartial(getWindow().getName(), getName(), textValue, matchIndex);
    }

    /*********** <pre> 
                 Action to expand a node according to a partial match of text value.
               
                 Partial matching is accomplished through case-insensitive substring 
                 matching.  Each delimited node of the provided TextValue 
                 is compared against the object data using this partial match comparison.
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.  Only the final node provided in the TextValue is 
                 evaluated for duplicity.  Intermediate nodes are always found on a 
                 "first match" basis.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-Insensitive text of node to match.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public void expandPartial(StepTestTable table, String textValue, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "expandPartial.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "expandPartial.textValue = null");
        table.add( TreeViewFunctions.expandPartial(getWindow().getName(), getName(), textValue, matchIndex));
    }

    /*********** <pre> 
                 Action to expand a node according to a partial match of text value.
               
                 Partial matching is accomplished through case-insensitive substring 
                 matching.  Each delimited node of the provided TextValue 
                 is compared against the object data using this partial match comparison.
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.  Only the final node provided in the TextValue is 
                 evaluated for duplicity.  Intermediate nodes are always found on a 
                 "first match" basis.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-Insensitive text of node to match.
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public ComponentFunction expandPartial(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "expandPartial.parameters = null");
        return TreeViewFunctions.expandPartial(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Action to expand a node according to a partial match of text value.
               
                 Partial matching is accomplished through case-insensitive substring 
                 matching.  Each delimited node of the provided TextValue 
                 is compared against the object data using this partial match comparison.
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.  Only the final node provided in the TextValue is 
                 evaluated for duplicity.  Intermediate nodes are always found on a 
                 "first match" basis.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-Insensitive text of node to match.
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public void expandPartial(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "expandPartial.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "expandPartial.parameters = null");
        table.add( TreeViewFunctions.expandPartial(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Action to expand a node according to a partial match of text value.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-Insensitive text of node to match.
              
     **********/
    public ComponentFunction expandPartialTextNode(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "expandPartialTextNode.textValue = null");
        return TreeViewFunctions.expandPartialTextNode(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Action to expand a node according to a partial match of text value.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-Insensitive text of node to match.
              
     **********/
    public void expandPartialTextNode(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "expandPartialTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "expandPartialTextNode.textValue = null");
        table.add( TreeViewFunctions.expandPartialTextNode(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                 Action to expand a node according to its text value. Use Expand instead.
               
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
				 RJ Implementation: Works the same as command Expand.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of node to expand
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public ComponentFunction expandTextNode(String textValue, String matchIndex ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "expandTextNode.textValue = null");
        return TreeViewFunctions.expandTextNode(getWindow().getName(), getName(), textValue, matchIndex);
    }

    /*********** <pre> 
                 Action to expand a node according to its text value. Use Expand instead.
               
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
				 RJ Implementation: Works the same as command Expand.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to expand
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public void expandTextNode(StepTestTable table, String textValue, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "expandTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "expandTextNode.textValue = null");
        table.add( TreeViewFunctions.expandTextNode(getWindow().getName(), getName(), textValue, matchIndex));
    }

    /*********** <pre> 
                 Action to expand a node according to its text value. Use Expand instead.
               
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
				 RJ Implementation: Works the same as command Expand.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of node to expand
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public ComponentFunction expandTextNode(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "expandTextNode.parameters = null");
        return TreeViewFunctions.expandTextNode(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Action to expand a node according to its text value. Use Expand instead.
               
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
				 RJ Implementation: Works the same as command Expand.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of node to expand
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public void expandTextNode(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "expandTextNode.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "expandTextNode.parameters = null");
        table.add( TreeViewFunctions.expandTextNode(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Action to blindly expand a node according to its text value.
              
                 Generally, no pre- or post- node checks are done. If the tree contains 
                 hidden root nodes the user must provide these.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive full path text of node to expand
              
     **********/
    public ComponentFunction expandUnverifiedTextNode(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "expandUnverifiedTextNode.textValue = null");
        return TreeViewFunctions.expandUnverifiedTextNode(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Action to blindly expand a node according to its text value.
              
                 Generally, no pre- or post- node checks are done. If the tree contains 
                 hidden root nodes the user must provide these.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive full path text of node to expand
              
     **********/
    public void expandUnverifiedTextNode(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "expandUnverifiedTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "expandUnverifiedTextNode.textValue = null");
        table.add( TreeViewFunctions.expandUnverifiedTextNode(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre>
             Copy the current contents of a tree[branch] to a file according to a partial match of itss text value.
             
             The search of the path to the node is a case-insensitive 
             substring match of each node.  Use 'CaptureTreeDataToFile' if you 
             wish to specify case-sensitive exact matches for tree nodes.             
             
             By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param file  Optional:NO
             The name of the file used to store the tree data.
              
     @param branch  Optional:YES
	             The full name of the tree branch to capture.
	              
     @param indentMark  Optional:YES
			        	The character(s) to use in the output file to indent the tree nodes from the 
			        	parent tree branches.
			        
     @param filterMode  Optional:YES  DefaultVal:
             (Future) Specify a file filter to use to process the text before comparison.
              
     @param filterOptions  Optional:YES  DefaultVal:
             (Future) Specify filter options to use with the file filter.
              
     **********/
    public ComponentFunction partialMatchTreeDataToFile(String file, String branch, String indentMark, String filterMode, String filterOptions ) {

        if ( file == null ) throw new IllegalArgumentException ( "partialMatchTreeDataToFile.file = null");
        return TreeViewFunctions.partialMatchTreeDataToFile(getWindow().getName(), getName(), file, branch, indentMark, filterMode, filterOptions);
    }

    /*********** <pre>
             Copy the current contents of a tree[branch] to a file according to a partial match of itss text value.
             
             The search of the path to the node is a case-insensitive 
             substring match of each node.  Use 'CaptureTreeDataToFile' if you 
             wish to specify case-sensitive exact matches for tree nodes.             
             
             By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param file  Optional:NO
             The name of the file used to store the tree data.
              
     @param branch  Optional:YES
	             The full name of the tree branch to capture.
	              
     @param indentMark  Optional:YES
			        	The character(s) to use in the output file to indent the tree nodes from the 
			        	parent tree branches.
			        
     @param filterMode  Optional:YES  DefaultVal:
             (Future) Specify a file filter to use to process the text before comparison.
              
     @param filterOptions  Optional:YES  DefaultVal:
             (Future) Specify filter options to use with the file filter.
              
     **********/
    public void partialMatchTreeDataToFile(StepTestTable table, String file, String branch, String indentMark, String filterMode, String filterOptions ) {

        if ( table == null ) throw new IllegalArgumentException ( "partialMatchTreeDataToFile.table = null");

        if ( file == null ) throw new IllegalArgumentException ( "partialMatchTreeDataToFile.file = null");
        table.add( TreeViewFunctions.partialMatchTreeDataToFile(getWindow().getName(), getName(), file, branch, indentMark, filterMode, filterOptions));
    }

    /*********** <pre>
             Copy the current contents of a tree[branch] to a file according to a partial match of itss text value.
             
             The search of the path to the node is a case-insensitive 
             substring match of each node.  Use 'CaptureTreeDataToFile' if you 
             wish to specify case-sensitive exact matches for tree nodes.             
             
             By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         file -- Optional:NO
             The name of the file used to store the tree data.
              <BR/>         branch -- Optional:YES
	             The full name of the tree branch to capture.
	              <BR/>         indentMark -- Optional:YES
			        	The character(s) to use in the output file to indent the tree nodes from the 
			        	parent tree branches.
			        <BR/>         filterMode -- Optional:YES  DefaultVal:
             (Future) Specify a file filter to use to process the text before comparison.
              <BR/>         filterOptions -- Optional:YES  DefaultVal:
             (Future) Specify filter options to use with the file filter.
              
    </UL>

     **********/
    public ComponentFunction partialMatchTreeDataToFile(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "partialMatchTreeDataToFile.parameters = null");
        return TreeViewFunctions.partialMatchTreeDataToFile(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre>
             Copy the current contents of a tree[branch] to a file according to a partial match of itss text value.
             
             The search of the path to the node is a case-insensitive 
             substring match of each node.  Use 'CaptureTreeDataToFile' if you 
             wish to specify case-sensitive exact matches for tree nodes.             
             
             By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         file -- Optional:NO
             The name of the file used to store the tree data.
              <BR/>         branch -- Optional:YES
	             The full name of the tree branch to capture.
	              <BR/>         indentMark -- Optional:YES
			        	The character(s) to use in the output file to indent the tree nodes from the 
			        	parent tree branches.
			        <BR/>         filterMode -- Optional:YES  DefaultVal:
             (Future) Specify a file filter to use to process the text before comparison.
              <BR/>         filterOptions -- Optional:YES  DefaultVal:
             (Future) Specify filter options to use with the file filter.
              
    </UL>

     **********/
    public void partialMatchTreeDataToFile(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "partialMatchTreeDataToFile.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "partialMatchTreeDataToFile.parameters = null");
        table.add( TreeViewFunctions.partialMatchTreeDataToFile(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Action to right click a node according to a partial match of its text value.
               
                 Partial matching is accomplished through case-insensitive substring 
                 matching.  Each delimited node of the provided TextValue 
                 is compared against the object data using this partial match comparison.
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.  Only the final node provided in the TextValue 
                 hierarchy is evaluated for duplicity.  Intermediate nodes are always found 
                 on a "first match" basis.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-Insensitive text of node to right click.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public ComponentFunction rightClickPartial(String textValue, String matchIndex ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "rightClickPartial.textValue = null");
        return TreeViewFunctions.rightClickPartial(getWindow().getName(), getName(), textValue, matchIndex);
    }

    /*********** <pre> 
                 Action to right click a node according to a partial match of its text value.
               
                 Partial matching is accomplished through case-insensitive substring 
                 matching.  Each delimited node of the provided TextValue 
                 is compared against the object data using this partial match comparison.
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.  Only the final node provided in the TextValue 
                 hierarchy is evaluated for duplicity.  Intermediate nodes are always found 
                 on a "first match" basis.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-Insensitive text of node to right click.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public void rightClickPartial(StepTestTable table, String textValue, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "rightClickPartial.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "rightClickPartial.textValue = null");
        table.add( TreeViewFunctions.rightClickPartial(getWindow().getName(), getName(), textValue, matchIndex));
    }

    /*********** <pre> 
                 Action to right click a node according to a partial match of its text value.
               
                 Partial matching is accomplished through case-insensitive substring 
                 matching.  Each delimited node of the provided TextValue 
                 is compared against the object data using this partial match comparison.
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.  Only the final node provided in the TextValue 
                 hierarchy is evaluated for duplicity.  Intermediate nodes are always found 
                 on a "first match" basis.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-Insensitive text of node to right click.
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public ComponentFunction rightClickPartial(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "rightClickPartial.parameters = null");
        return TreeViewFunctions.rightClickPartial(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Action to right click a node according to a partial match of its text value.
               
                 Partial matching is accomplished through case-insensitive substring 
                 matching.  Each delimited node of the provided TextValue 
                 is compared against the object data using this partial match comparison.
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.  Only the final node provided in the TextValue 
                 hierarchy is evaluated for duplicity.  Intermediate nodes are always found 
                 on a "first match" basis.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-Insensitive text of node to right click.
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public void rightClickPartial(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "rightClickPartial.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "rightClickPartial.parameters = null");
        table.add( TreeViewFunctions.rightClickPartial(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Action to right click a node according to its text value.
              
                 It should be noted that a right click requires the full 
                 hierarchical path to the node to be selected.  Parent 
                 child branches are delimited with '->' as in:
                    Parent->branch->leaf
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of the node to be clicked
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public ComponentFunction rightClickTextNode(String textValue, String matchIndex ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "rightClickTextNode.textValue = null");
        return TreeViewFunctions.rightClickTextNode(getWindow().getName(), getName(), textValue, matchIndex);
    }

    /*********** <pre> 
                 Action to right click a node according to its text value.
              
                 It should be noted that a right click requires the full 
                 hierarchical path to the node to be selected.  Parent 
                 child branches are delimited with '->' as in:
                    Parent->branch->leaf
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of the node to be clicked
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public void rightClickTextNode(StepTestTable table, String textValue, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "rightClickTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "rightClickTextNode.textValue = null");
        table.add( TreeViewFunctions.rightClickTextNode(getWindow().getName(), getName(), textValue, matchIndex));
    }

    /*********** <pre> 
                 Action to right click a node according to its text value.
              
                 It should be noted that a right click requires the full 
                 hierarchical path to the node to be selected.  Parent 
                 child branches are delimited with '->' as in:
                    Parent->branch->leaf
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of the node to be clicked
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public ComponentFunction rightClickTextNode(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "rightClickTextNode.parameters = null");
        return TreeViewFunctions.rightClickTextNode(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Action to right click a node according to its text value.
              
                 It should be noted that a right click requires the full 
                 hierarchical path to the node to be selected.  Parent 
                 child branches are delimited with '->' as in:
                    Parent->branch->leaf
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of the node to be clicked
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public void rightClickTextNode(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "rightClickTextNode.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "rightClickTextNode.parameters = null");
        table.add( TreeViewFunctions.rightClickTextNode(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Action to (almost) blindly right-click a text node.
              
                 No attempt is made to verify that the node exists 
                 prior to the selection.  No attempt to verify the node 
                 has been properly selected after the selection.
                 
                 It should be noted that a click requires the full 
                 hierarchical path to the node to be selected.  Parent 
                 child branches are delimited with '->' as in:
                    Parent->branch->leaf 
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of the node to be clicked
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public ComponentFunction rightClickUnverifiedTextNode(String textValue, String matchIndex ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextNode.textValue = null");
        return TreeViewFunctions.rightClickUnverifiedTextNode(getWindow().getName(), getName(), textValue, matchIndex);
    }

    /*********** <pre> 
                 Action to (almost) blindly right-click a text node.
              
                 No attempt is made to verify that the node exists 
                 prior to the selection.  No attempt to verify the node 
                 has been properly selected after the selection.
                 
                 It should be noted that a click requires the full 
                 hierarchical path to the node to be selected.  Parent 
                 child branches are delimited with '->' as in:
                    Parent->branch->leaf 
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of the node to be clicked
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public void rightClickUnverifiedTextNode(StepTestTable table, String textValue, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextNode.textValue = null");
        table.add( TreeViewFunctions.rightClickUnverifiedTextNode(getWindow().getName(), getName(), textValue, matchIndex));
    }

    /*********** <pre> 
                 Action to (almost) blindly right-click a text node.
              
                 No attempt is made to verify that the node exists 
                 prior to the selection.  No attempt to verify the node 
                 has been properly selected after the selection.
                 
                 It should be noted that a click requires the full 
                 hierarchical path to the node to be selected.  Parent 
                 child branches are delimited with '->' as in:
                    Parent->branch->leaf 
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of the node to be clicked
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public ComponentFunction rightClickUnverifiedTextNode(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextNode.parameters = null");
        return TreeViewFunctions.rightClickUnverifiedTextNode(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Action to (almost) blindly right-click a text node.
              
                 No attempt is made to verify that the node exists 
                 prior to the selection.  No attempt to verify the node 
                 has been properly selected after the selection.
                 
                 It should be noted that a click requires the full 
                 hierarchical path to the node to be selected.  Parent 
                 child branches are delimited with '->' as in:
                    Parent->branch->leaf 
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of the node to be clicked
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public void rightClickUnverifiedTextNode(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextNode.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextNode.parameters = null");
        table.add( TreeViewFunctions.rightClickUnverifiedTextNode(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Action to select a node according to its text value.
               
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
				 RJ Implementation: Works the same as command Click.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of node to select.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public ComponentFunction select(String textValue, String matchIndex ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "select.textValue = null");
        return TreeViewFunctions.select(getWindow().getName(), getName(), textValue, matchIndex);
    }

    /*********** <pre> 
                 Action to select a node according to its text value.
               
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
				 RJ Implementation: Works the same as command Click.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to select.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public void select(StepTestTable table, String textValue, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "select.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "select.textValue = null");
        table.add( TreeViewFunctions.select(getWindow().getName(), getName(), textValue, matchIndex));
    }

    /*********** <pre> 
                 Action to select a node according to its text value.
               
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
				 RJ Implementation: Works the same as command Click.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of node to select.
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public ComponentFunction select(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "select.parameters = null");
        return TreeViewFunctions.select(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Action to select a node according to its text value.
               
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
				 RJ Implementation: Works the same as command Click.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of node to select.
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public void select(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "select.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "select.parameters = null");
        table.add( TreeViewFunctions.select(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Action to select a node according to a partial match of its text value, in addition to any nodes already selected.
                 Performs selection as if CTRL key were held down during selection.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-Insensitive text of node to select.
              
     **********/
    public ComponentFunction selectAnotherPartialTextNode(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "selectAnotherPartialTextNode.textValue = null");
        return TreeViewFunctions.selectAnotherPartialTextNode(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Action to select a node according to a partial match of its text value, in addition to any nodes already selected.
                 Performs selection as if CTRL key were held down during selection.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-Insensitive text of node to select.
              
     **********/
    public void selectAnotherPartialTextNode(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectAnotherPartialTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectAnotherPartialTextNode.textValue = null");
        table.add( TreeViewFunctions.selectAnotherPartialTextNode(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                 Action to select a node according to its text value, in addition to any nodes already selected.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of node to select.
              
     **********/
    public ComponentFunction selectAnotherTextNode(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "selectAnotherTextNode.textValue = null");
        return TreeViewFunctions.selectAnotherTextNode(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Action to select a node according to its text value, in addition to any nodes already selected.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to select.
              
     **********/
    public void selectAnotherTextNode(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectAnotherTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectAnotherTextNode.textValue = null");
        table.add( TreeViewFunctions.selectAnotherTextNode(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                 Action to blindly select a node according to its text value, in addition to any nodes already selected.
              
                 Generally, no pre- or post- node checks are done. If the tree contains 
                 hidden root nodes the user must provide these.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive full path text of node to select.
              
     **********/
    public ComponentFunction selectAnotherUnverifiedTextNode(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "selectAnotherUnverifiedTextNode.textValue = null");
        return TreeViewFunctions.selectAnotherUnverifiedTextNode(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Action to blindly select a node according to its text value, in addition to any nodes already selected.
              
                 Generally, no pre- or post- node checks are done. If the tree contains 
                 hidden root nodes the user must provide these.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive full path text of node to select.
              
     **********/
    public void selectAnotherUnverifiedTextNode(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectAnotherUnverifiedTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectAnotherUnverifiedTextNode.textValue = null");
        table.add( TreeViewFunctions.selectAnotherUnverifiedTextNode(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                 Action to select a node according to a partial match of its text value.
               
                 Partial matching is accomplished through case-insensitive substring 
                 matching.  Each delimited node of the provided TextValue 
                 is compared against the object data using this partial match comparison.
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.  Only the final node provided in the TextValue 
                 hierarchy is evaluated for duplicity.  Intermediate nodes are always found 
                 on a "first match" basis.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-Insensitive text of node to select.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public ComponentFunction selectPartial(String textValue, String matchIndex ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "selectPartial.textValue = null");
        return TreeViewFunctions.selectPartial(getWindow().getName(), getName(), textValue, matchIndex);
    }

    /*********** <pre> 
                 Action to select a node according to a partial match of its text value.
               
                 Partial matching is accomplished through case-insensitive substring 
                 matching.  Each delimited node of the provided TextValue 
                 is compared against the object data using this partial match comparison.
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.  Only the final node provided in the TextValue 
                 hierarchy is evaluated for duplicity.  Intermediate nodes are always found 
                 on a "first match" basis.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-Insensitive text of node to select.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public void selectPartial(StepTestTable table, String textValue, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectPartial.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectPartial.textValue = null");
        table.add( TreeViewFunctions.selectPartial(getWindow().getName(), getName(), textValue, matchIndex));
    }

    /*********** <pre> 
                 Action to select a node according to a partial match of its text value.
               
                 Partial matching is accomplished through case-insensitive substring 
                 matching.  Each delimited node of the provided TextValue 
                 is compared against the object data using this partial match comparison.
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.  Only the final node provided in the TextValue 
                 hierarchy is evaluated for duplicity.  Intermediate nodes are always found 
                 on a "first match" basis.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-Insensitive text of node to select.
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public ComponentFunction selectPartial(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "selectPartial.parameters = null");
        return TreeViewFunctions.selectPartial(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Action to select a node according to a partial match of its text value.
               
                 Partial matching is accomplished through case-insensitive substring 
                 matching.  Each delimited node of the provided TextValue 
                 is compared against the object data using this partial match comparison.
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.  Only the final node provided in the TextValue 
                 hierarchy is evaluated for duplicity.  Intermediate nodes are always found 
                 on a "first match" basis.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-Insensitive text of node to select.
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public void selectPartial(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectPartial.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectPartial.parameters = null");
        table.add( TreeViewFunctions.selectPartial(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Action to select a node according to a partial match of its text value.
                 Performs selection as if CTRL key were held down during selection.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-Insensitive text of node to select.
              
     **********/
    public ComponentFunction selectPartialTextNode(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "selectPartialTextNode.textValue = null");
        return TreeViewFunctions.selectPartialTextNode(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Action to select a node according to a partial match of its text value.
                 Performs selection as if CTRL key were held down during selection.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-Insensitive text of node to select.
              
     **********/
    public void selectPartialTextNode(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectPartialTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectPartialTextNode.textValue = null");
        table.add( TreeViewFunctions.selectPartialTextNode(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre>
               Holds down either Ctrl or Shift while making an item selection with emulating either a Left or Right mouse click.
               The Selection is made according to a partial match of its text value.
            
             		This keyword can be used to select multiple items.
              	    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Automated QA TestComplete</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-Insensitive text (can be a part of whole text) of node to select.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     @param specialKey  Optional:NO
               The special key command used in the row selection.
	           For now, only Control and Shift are supported.
             
     @param mouseClick  Optional:NO 
	           The type of mouse click needed.
		       For now, only Left and Right are supported.
             
     **********/
    public ComponentFunction selectPartialTextNodeSpecial(String textValue, String matchIndex, String specialKey, String mouseClick ) {

        if ( mouseClick == null ) throw new IllegalArgumentException ( "selectPartialTextNodeSpecial.mouseClick = null");
        if ( specialKey == null ) throw new IllegalArgumentException ( "selectPartialTextNodeSpecial.specialKey = null");
        if ( textValue == null ) throw new IllegalArgumentException ( "selectPartialTextNodeSpecial.textValue = null");
        return TreeViewFunctions.selectPartialTextNodeSpecial(getWindow().getName(), getName(), textValue, matchIndex, specialKey, mouseClick);
    }

    /*********** <pre>
               Holds down either Ctrl or Shift while making an item selection with emulating either a Left or Right mouse click.
               The Selection is made according to a partial match of its text value.
            
             		This keyword can be used to select multiple items.
              	    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Automated QA TestComplete</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-Insensitive text (can be a part of whole text) of node to select.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     @param specialKey  Optional:NO
               The special key command used in the row selection.
	           For now, only Control and Shift are supported.
             
     @param mouseClick  Optional:NO 
	           The type of mouse click needed.
		       For now, only Left and Right are supported.
             
     **********/
    public void selectPartialTextNodeSpecial(StepTestTable table, String textValue, String matchIndex, String specialKey, String mouseClick ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectPartialTextNodeSpecial.table = null");

        if ( mouseClick == null ) throw new IllegalArgumentException ( "selectPartialTextNodeSpecial.mouseClick = null");
        if ( specialKey == null ) throw new IllegalArgumentException ( "selectPartialTextNodeSpecial.specialKey = null");
        if ( textValue == null ) throw new IllegalArgumentException ( "selectPartialTextNodeSpecial.textValue = null");
        table.add( TreeViewFunctions.selectPartialTextNodeSpecial(getWindow().getName(), getName(), textValue, matchIndex, specialKey, mouseClick));
    }

    /*********** <pre>
               Holds down either Ctrl or Shift while making an item selection with emulating either a Left or Right mouse click.
               The Selection is made according to a partial match of its text value.
            
             		This keyword can be used to select multiple items.
              	    </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Automated QA TestComplete</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-Insensitive text (can be a part of whole text) of node to select.
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              <BR/>         specialKey -- Optional:NO
               The special key command used in the row selection.
	           For now, only Control and Shift are supported.
             <BR/>         mouseClick -- Optional:NO 
	           The type of mouse click needed.
		       For now, only Left and Right are supported.
             
    </UL>

     **********/
    public ComponentFunction selectPartialTextNodeSpecial(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "selectPartialTextNodeSpecial.parameters = null");
        return TreeViewFunctions.selectPartialTextNodeSpecial(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre>
               Holds down either Ctrl or Shift while making an item selection with emulating either a Left or Right mouse click.
               The Selection is made according to a partial match of its text value.
            
             		This keyword can be used to select multiple items.
              	    </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Automated QA TestComplete</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-Insensitive text (can be a part of whole text) of node to select.
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              <BR/>         specialKey -- Optional:NO
               The special key command used in the row selection.
	           For now, only Control and Shift are supported.
             <BR/>         mouseClick -- Optional:NO 
	           The type of mouse click needed.
		       For now, only Left and Right are supported.
             
    </UL>

     **********/
    public void selectPartialTextNodeSpecial(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectPartialTextNodeSpecial.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectPartialTextNodeSpecial.parameters = null");
        table.add( TreeViewFunctions.selectPartialTextNodeSpecial(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Select/check a node's state icon (checkbox) according to its associated text value. 
               
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of the node to be selected/checked.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public ComponentFunction selectStateIcon(String textValue, String matchIndex ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "selectStateIcon.textValue = null");
        return TreeViewFunctions.selectStateIcon(getWindow().getName(), getName(), textValue, matchIndex);
    }

    /*********** <pre> 
                 Select/check a node's state icon (checkbox) according to its associated text value. 
               
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of the node to be selected/checked.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public void selectStateIcon(StepTestTable table, String textValue, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectStateIcon.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectStateIcon.textValue = null");
        table.add( TreeViewFunctions.selectStateIcon(getWindow().getName(), getName(), textValue, matchIndex));
    }

    /*********** <pre> 
                 Select/check a node's state icon (checkbox) according to its associated text value. 
               
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of the node to be selected/checked.
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public ComponentFunction selectStateIcon(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "selectStateIcon.parameters = null");
        return TreeViewFunctions.selectStateIcon(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Select/check a node's state icon (checkbox) according to its associated text value. 
               
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of the node to be selected/checked.
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public void selectStateIcon(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectStateIcon.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectStateIcon.parameters = null");
        table.add( TreeViewFunctions.selectStateIcon(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Action to select a node according to its text value. 
               
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
				 RJ Implementation: Works the same as command Select.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of the node to be selected.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public ComponentFunction selectTextNode(String textValue, String matchIndex ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "selectTextNode.textValue = null");
        return TreeViewFunctions.selectTextNode(getWindow().getName(), getName(), textValue, matchIndex);
    }

    /*********** <pre> 
                 Action to select a node according to its text value. 
               
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
				 RJ Implementation: Works the same as command Select.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of the node to be selected.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public void selectTextNode(StepTestTable table, String textValue, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectTextNode.textValue = null");
        table.add( TreeViewFunctions.selectTextNode(getWindow().getName(), getName(), textValue, matchIndex));
    }

    /*********** <pre> 
                 Action to select a node according to its text value. 
               
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
				 RJ Implementation: Works the same as command Select.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of the node to be selected.
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public ComponentFunction selectTextNode(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "selectTextNode.parameters = null");
        return TreeViewFunctions.selectTextNode(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Action to select a node according to its text value. 
               
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
				 RJ Implementation: Works the same as command Select.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of the node to be selected.
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public void selectTextNode(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectTextNode.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectTextNode.parameters = null");
        table.add( TreeViewFunctions.selectTextNode(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre>
               Holds down either Ctrl or Shift while making an item selection with emulating either a Left or Right mouse click.
            
             		This keyword can be used to select multiple items.
              	    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Automated QA TestComplete</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of node to select.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     @param specialKey  Optional:NO
               The special key command used in the row selection.
	           For now, only Control and Shift are supported.
             
     @param mouseClick  Optional:NO 
	           The type of mouse click needed.
		       For now, only Left and Right are supported.
             
     **********/
    public ComponentFunction selectTextNodeSpecial(String textValue, String matchIndex, String specialKey, String mouseClick ) {

        if ( mouseClick == null ) throw new IllegalArgumentException ( "selectTextNodeSpecial.mouseClick = null");
        if ( specialKey == null ) throw new IllegalArgumentException ( "selectTextNodeSpecial.specialKey = null");
        if ( textValue == null ) throw new IllegalArgumentException ( "selectTextNodeSpecial.textValue = null");
        return TreeViewFunctions.selectTextNodeSpecial(getWindow().getName(), getName(), textValue, matchIndex, specialKey, mouseClick);
    }

    /*********** <pre>
               Holds down either Ctrl or Shift while making an item selection with emulating either a Left or Right mouse click.
            
             		This keyword can be used to select multiple items.
              	    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Automated QA TestComplete</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to select.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     @param specialKey  Optional:NO
               The special key command used in the row selection.
	           For now, only Control and Shift are supported.
             
     @param mouseClick  Optional:NO 
	           The type of mouse click needed.
		       For now, only Left and Right are supported.
             
     **********/
    public void selectTextNodeSpecial(StepTestTable table, String textValue, String matchIndex, String specialKey, String mouseClick ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectTextNodeSpecial.table = null");

        if ( mouseClick == null ) throw new IllegalArgumentException ( "selectTextNodeSpecial.mouseClick = null");
        if ( specialKey == null ) throw new IllegalArgumentException ( "selectTextNodeSpecial.specialKey = null");
        if ( textValue == null ) throw new IllegalArgumentException ( "selectTextNodeSpecial.textValue = null");
        table.add( TreeViewFunctions.selectTextNodeSpecial(getWindow().getName(), getName(), textValue, matchIndex, specialKey, mouseClick));
    }

    /*********** <pre>
               Holds down either Ctrl or Shift while making an item selection with emulating either a Left or Right mouse click.
            
             		This keyword can be used to select multiple items.
              	    </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Automated QA TestComplete</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of node to select.
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              <BR/>         specialKey -- Optional:NO
               The special key command used in the row selection.
	           For now, only Control and Shift are supported.
             <BR/>         mouseClick -- Optional:NO 
	           The type of mouse click needed.
		       For now, only Left and Right are supported.
             
    </UL>

     **********/
    public ComponentFunction selectTextNodeSpecial(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "selectTextNodeSpecial.parameters = null");
        return TreeViewFunctions.selectTextNodeSpecial(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre>
               Holds down either Ctrl or Shift while making an item selection with emulating either a Left or Right mouse click.
            
             		This keyword can be used to select multiple items.
              	    </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Automated QA TestComplete</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of node to select.
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              <BR/>         specialKey -- Optional:NO
               The special key command used in the row selection.
	           For now, only Control and Shift are supported.
             <BR/>         mouseClick -- Optional:NO 
	           The type of mouse click needed.
		       For now, only Left and Right are supported.
             
    </UL>

     **********/
    public void selectTextNodeSpecial(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectTextNodeSpecial.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectTextNodeSpecial.parameters = null");
        table.add( TreeViewFunctions.selectTextNodeSpecial(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Action to (almost) blindly click a text node.
              
                 No attempt is made to verify that the node exists 
                 prior to the selection.  No attempt to verify the node 
                 has been properly selected after the selection.
                 
                 It should be noted that a click requires the full 
                 hierarchical path to the node to be selected.  Parent 
                 child branches are delimited with '->' as in:
                    Parent->branch->leaf 
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of the node to be clicked
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public ComponentFunction selectUnverifiedTextNode(String textValue, String matchIndex ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "selectUnverifiedTextNode.textValue = null");
        return TreeViewFunctions.selectUnverifiedTextNode(getWindow().getName(), getName(), textValue, matchIndex);
    }

    /*********** <pre> 
                 Action to (almost) blindly click a text node.
              
                 No attempt is made to verify that the node exists 
                 prior to the selection.  No attempt to verify the node 
                 has been properly selected after the selection.
                 
                 It should be noted that a click requires the full 
                 hierarchical path to the node to be selected.  Parent 
                 child branches are delimited with '->' as in:
                    Parent->branch->leaf 
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of the node to be clicked
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public void selectUnverifiedTextNode(StepTestTable table, String textValue, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectUnverifiedTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectUnverifiedTextNode.textValue = null");
        table.add( TreeViewFunctions.selectUnverifiedTextNode(getWindow().getName(), getName(), textValue, matchIndex));
    }

    /*********** <pre> 
                 Action to (almost) blindly click a text node.
              
                 No attempt is made to verify that the node exists 
                 prior to the selection.  No attempt to verify the node 
                 has been properly selected after the selection.
                 
                 It should be noted that a click requires the full 
                 hierarchical path to the node to be selected.  Parent 
                 child branches are delimited with '->' as in:
                    Parent->branch->leaf 
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of the node to be clicked
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public ComponentFunction selectUnverifiedTextNode(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "selectUnverifiedTextNode.parameters = null");
        return TreeViewFunctions.selectUnverifiedTextNode(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Action to (almost) blindly click a text node.
              
                 No attempt is made to verify that the node exists 
                 prior to the selection.  No attempt to verify the node 
                 has been properly selected after the selection.
                 
                 It should be noted that a click requires the full 
                 hierarchical path to the node to be selected.  Parent 
                 child branches are delimited with '->' as in:
                    Parent->branch->leaf 
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of the node to be clicked
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public void selectUnverifiedTextNode(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectUnverifiedTextNode.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectUnverifiedTextNode.parameters = null");
        table.add( TreeViewFunctions.selectUnverifiedTextNode(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Skips many pre- and post-verification checks for right-clicks.
                 Deprecated. Use RightClick instead.
               
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Automated QA TestComplete</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of the node to be clicked
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public ComponentFunction selectUnverifiedTextNodeRightClick(String textValue, String matchIndex ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "selectUnverifiedTextNodeRightClick.textValue = null");
        return TreeViewFunctions.selectUnverifiedTextNodeRightClick(getWindow().getName(), getName(), textValue, matchIndex);
    }

    /*********** <pre> 
                 Skips many pre- and post-verification checks for right-clicks.
                 Deprecated. Use RightClick instead.
               
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Automated QA TestComplete</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of the node to be clicked
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public void selectUnverifiedTextNodeRightClick(StepTestTable table, String textValue, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectUnverifiedTextNodeRightClick.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectUnverifiedTextNodeRightClick.textValue = null");
        table.add( TreeViewFunctions.selectUnverifiedTextNodeRightClick(getWindow().getName(), getName(), textValue, matchIndex));
    }

    /*********** <pre> 
                 Skips many pre- and post-verification checks for right-clicks.
                 Deprecated. Use RightClick instead.
               
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Automated QA TestComplete</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of the node to be clicked
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public ComponentFunction selectUnverifiedTextNodeRightClick(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "selectUnverifiedTextNodeRightClick.parameters = null");
        return TreeViewFunctions.selectUnverifiedTextNodeRightClick(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Skips many pre- and post-verification checks for right-clicks.
                 Deprecated. Use RightClick instead.
               
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Automated QA TestComplete</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of the node to be clicked
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public void selectUnverifiedTextNodeRightClick(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectUnverifiedTextNodeRightClick.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectUnverifiedTextNodeRightClick.parameters = null");
        table.add( TreeViewFunctions.selectUnverifiedTextNodeRightClick(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre>
             		Sets a user-defined variable with the result of whether a tree contains the provided node.
             	
             		The search of the path to the node is expected to be a case-sensitive 
             		exact match of each node.  Use 'SetTreeContainsPartialMatch' if you 
             		wish to specify case-insensitive substring matches for tree nodes.
              	    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param node  Optional:NO
             				The name of the node to verify.
              			
     @param resultVar  Optional:NO
	             			The name of the variable which gets assigned the result.
	              		
     **********/
    public ComponentFunction setTreeContainsNode(String node, String resultVar ) {

        if ( node == null ) throw new IllegalArgumentException ( "setTreeContainsNode.node = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "setTreeContainsNode.resultVar = null");
        return TreeViewFunctions.setTreeContainsNode(getWindow().getName(), getName(), node, resultVar);
    }

    /*********** <pre>
             		Sets a user-defined variable with the result of whether a tree contains the provided node.
             	
             		The search of the path to the node is expected to be a case-sensitive 
             		exact match of each node.  Use 'SetTreeContainsPartialMatch' if you 
             		wish to specify case-insensitive substring matches for tree nodes.
              	    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param node  Optional:NO
             				The name of the node to verify.
              			
     @param resultVar  Optional:NO
	             			The name of the variable which gets assigned the result.
	              		
     **********/
    public void setTreeContainsNode(StepTestTable table, String node, String resultVar ) {

        if ( table == null ) throw new IllegalArgumentException ( "setTreeContainsNode.table = null");

        if ( node == null ) throw new IllegalArgumentException ( "setTreeContainsNode.node = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "setTreeContainsNode.resultVar = null");
        table.add( TreeViewFunctions.setTreeContainsNode(getWindow().getName(), getName(), node, resultVar));
    }

    /*********** <pre>
             		Sets a user-defined variable with the result of whether a tree contains the provided node.
             	
             		The search of the path to the node is expected to be a case-sensitive 
             		exact match of each node.  Use 'SetTreeContainsPartialMatch' if you 
             		wish to specify case-insensitive substring matches for tree nodes.
              	    </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         node -- Optional:NO
             				The name of the node to verify.
              			<BR/>         resultVar -- Optional:NO
	             			The name of the variable which gets assigned the result.
	              		
    </UL>

     **********/
    public ComponentFunction setTreeContainsNode(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "setTreeContainsNode.parameters = null");
        return TreeViewFunctions.setTreeContainsNode(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre>
             		Sets a user-defined variable with the result of whether a tree contains the provided node.
             	
             		The search of the path to the node is expected to be a case-sensitive 
             		exact match of each node.  Use 'SetTreeContainsPartialMatch' if you 
             		wish to specify case-insensitive substring matches for tree nodes.
              	    </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         node -- Optional:NO
             				The name of the node to verify.
              			<BR/>         resultVar -- Optional:NO
	             			The name of the variable which gets assigned the result.
	              		
    </UL>

     **********/
    public void setTreeContainsNode(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "setTreeContainsNode.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "setTreeContainsNode.parameters = null");
        table.add( TreeViewFunctions.setTreeContainsNode(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre>
             		Sets a user-defined variable with the result of whether a tree contains the provided node
             		according to a partial match of the node's text value.
             	
             		The search of the path to the node is expected to be a case-insensitive 
			substring match of each node.  Use 'SetTreeContainsNode' if you 
             		wish to specify case-sensitive substring matches for tree nodes.
              	    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param node  Optional:NO
             				The name of the node to verify.
              			
     @param resultVar  Optional:NO
	             			The name of the variable which gets assigned the result.
	              		
     **********/
    public ComponentFunction setTreeContainsPartialMatch(String node, String resultVar ) {

        if ( node == null ) throw new IllegalArgumentException ( "setTreeContainsPartialMatch.node = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "setTreeContainsPartialMatch.resultVar = null");
        return TreeViewFunctions.setTreeContainsPartialMatch(getWindow().getName(), getName(), node, resultVar);
    }

    /*********** <pre>
             		Sets a user-defined variable with the result of whether a tree contains the provided node
             		according to a partial match of the node's text value.
             	
             		The search of the path to the node is expected to be a case-insensitive 
			substring match of each node.  Use 'SetTreeContainsNode' if you 
             		wish to specify case-sensitive substring matches for tree nodes.
              	    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param node  Optional:NO
             				The name of the node to verify.
              			
     @param resultVar  Optional:NO
	             			The name of the variable which gets assigned the result.
	              		
     **********/
    public void setTreeContainsPartialMatch(StepTestTable table, String node, String resultVar ) {

        if ( table == null ) throw new IllegalArgumentException ( "setTreeContainsPartialMatch.table = null");

        if ( node == null ) throw new IllegalArgumentException ( "setTreeContainsPartialMatch.node = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "setTreeContainsPartialMatch.resultVar = null");
        table.add( TreeViewFunctions.setTreeContainsPartialMatch(getWindow().getName(), getName(), node, resultVar));
    }

    /*********** <pre>
             		Sets a user-defined variable with the result of whether a tree contains the provided node
             		according to a partial match of the node's text value.
             	
             		The search of the path to the node is expected to be a case-insensitive 
			substring match of each node.  Use 'SetTreeContainsNode' if you 
             		wish to specify case-sensitive substring matches for tree nodes.
              	    </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         node -- Optional:NO
             				The name of the node to verify.
              			<BR/>         resultVar -- Optional:NO
	             			The name of the variable which gets assigned the result.
	              		
    </UL>

     **********/
    public ComponentFunction setTreeContainsPartialMatch(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "setTreeContainsPartialMatch.parameters = null");
        return TreeViewFunctions.setTreeContainsPartialMatch(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre>
             		Sets a user-defined variable with the result of whether a tree contains the provided node
             		according to a partial match of the node's text value.
             	
             		The search of the path to the node is expected to be a case-insensitive 
			substring match of each node.  Use 'SetTreeContainsNode' if you 
             		wish to specify case-sensitive substring matches for tree nodes.
              	    </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         node -- Optional:NO
             				The name of the node to verify.
              			<BR/>         resultVar -- Optional:NO
	             			The name of the variable which gets assigned the result.
	              		
    </UL>

     **********/
    public void setTreeContainsPartialMatch(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "setTreeContainsPartialMatch.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "setTreeContainsPartialMatch.parameters = null");
        table.add( TreeViewFunctions.setTreeContainsPartialMatch(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Action to blindly SHIFT-click a node according to its text value. Currently, this component function is for JavaTrees only.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of node to SHIFT-click.
              
     **********/
    public ComponentFunction shiftClickUnverifiedTextNode(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "shiftClickUnverifiedTextNode.textValue = null");
        return TreeViewFunctions.shiftClickUnverifiedTextNode(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Action to blindly SHIFT-click a node according to its text value. Currently, this component function is for JavaTrees only.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to SHIFT-click.
              
     **********/
    public void shiftClickUnverifiedTextNode(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "shiftClickUnverifiedTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "shiftClickUnverifiedTextNode.textValue = null");
        table.add( TreeViewFunctions.shiftClickUnverifiedTextNode(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                 UnChecks a node's state icon (checkbox) according to its associated text value. 
               
                 Initially released with .NET support only.
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of the node to be unchecked.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public ComponentFunction unCheckTextNode(String textValue, String matchIndex ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "unCheckTextNode.textValue = null");
        return TreeViewFunctions.unCheckTextNode(getWindow().getName(), getName(), textValue, matchIndex);
    }

    /*********** <pre> 
                 UnChecks a node's state icon (checkbox) according to its associated text value. 
               
                 Initially released with .NET support only.
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of the node to be unchecked.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public void unCheckTextNode(StepTestTable table, String textValue, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "unCheckTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "unCheckTextNode.textValue = null");
        table.add( TreeViewFunctions.unCheckTextNode(getWindow().getName(), getName(), textValue, matchIndex));
    }

    /*********** <pre> 
                 UnChecks a node's state icon (checkbox) according to its associated text value. 
               
                 Initially released with .NET support only.
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of the node to be unchecked.
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public ComponentFunction unCheckTextNode(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "unCheckTextNode.parameters = null");
        return TreeViewFunctions.unCheckTextNode(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 UnChecks a node's state icon (checkbox) according to its associated text value. 
               
                 Initially released with .NET support only.
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of the node to be unchecked.
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public void unCheckTextNode(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "unCheckTextNode.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "unCheckTextNode.parameters = null");
        table.add( TreeViewFunctions.unCheckTextNode(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Action to verify a particular text node is NOT selected.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of node to be verified NOT selected
              
     **********/
    public ComponentFunction verifyNodeUnselected(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "verifyNodeUnselected.textValue = null");
        return TreeViewFunctions.verifyNodeUnselected(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Action to verify a particular text node is NOT selected.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to be verified NOT selected
              
     **********/
    public void verifyNodeUnselected(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyNodeUnselected.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "verifyNodeUnselected.textValue = null");
        table.add( TreeViewFunctions.verifyNodeUnselected(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                 Action to verify a particular text node is selected.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of node to be verified selected
              
     **********/
    public ComponentFunction verifySelectedNode(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "verifySelectedNode.textValue = null");
        return TreeViewFunctions.verifySelectedNode(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Action to verify a particular text node is selected.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to be verified selected
              
     **********/
    public void verifySelectedNode(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifySelectedNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "verifySelectedNode.textValue = null");
        table.add( TreeViewFunctions.verifySelectedNode(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                 Action to verify a particular state icon is selected/Checked.
              
                 Use VerifyTextNodeChecked instead (if supported).
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of state icon to be verified selected
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public ComponentFunction verifyStateIcon(String textValue, String matchIndex ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "verifyStateIcon.textValue = null");
        return TreeViewFunctions.verifyStateIcon(getWindow().getName(), getName(), textValue, matchIndex);
    }

    /*********** <pre> 
                 Action to verify a particular state icon is selected/Checked.
              
                 Use VerifyTextNodeChecked instead (if supported).
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of state icon to be verified selected
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public void verifyStateIcon(StepTestTable table, String textValue, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyStateIcon.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "verifyStateIcon.textValue = null");
        table.add( TreeViewFunctions.verifyStateIcon(getWindow().getName(), getName(), textValue, matchIndex));
    }

    /*********** <pre> 
                 Action to verify a particular state icon is selected/Checked.
              
                 Use VerifyTextNodeChecked instead (if supported).
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of state icon to be verified selected
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public ComponentFunction verifyStateIcon(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyStateIcon.parameters = null");
        return TreeViewFunctions.verifyStateIcon(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Action to verify a particular state icon is selected/Checked.
              
                 Use VerifyTextNodeChecked instead (if supported).
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of state icon to be verified selected
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public void verifyStateIcon(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyStateIcon.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyStateIcon.parameters = null");
        table.add( TreeViewFunctions.verifyStateIcon(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Action to verify a particular state icon is NOT selected.
              
                 Use VerifyTextNodeUnChecked instead (if supported).
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of state icon to be verified NOT selected/checked
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public ComponentFunction verifyStateIconUnselected(String textValue, String matchIndex ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "verifyStateIconUnselected.textValue = null");
        return TreeViewFunctions.verifyStateIconUnselected(getWindow().getName(), getName(), textValue, matchIndex);
    }

    /*********** <pre> 
                 Action to verify a particular state icon is NOT selected.
              
                 Use VerifyTextNodeUnChecked instead (if supported).
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of state icon to be verified NOT selected/checked
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public void verifyStateIconUnselected(StepTestTable table, String textValue, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyStateIconUnselected.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "verifyStateIconUnselected.textValue = null");
        table.add( TreeViewFunctions.verifyStateIconUnselected(getWindow().getName(), getName(), textValue, matchIndex));
    }

    /*********** <pre> 
                 Action to verify a particular state icon is NOT selected.
              
                 Use VerifyTextNodeUnChecked instead (if supported).
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of state icon to be verified NOT selected/checked
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public ComponentFunction verifyStateIconUnselected(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyStateIconUnselected.parameters = null");
        return TreeViewFunctions.verifyStateIconUnselected(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Action to verify a particular state icon is NOT selected.
              
                 Use VerifyTextNodeUnChecked instead (if supported).
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of state icon to be verified NOT selected/checked
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public void verifyStateIconUnselected(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyStateIconUnselected.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyStateIconUnselected.parameters = null");
        table.add( TreeViewFunctions.verifyStateIconUnselected(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Action to verify a particular state icon is selected.
               
                 Initially released with .NET support only.
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of state icon to be verified selected/checked
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public ComponentFunction verifyTextNodeChecked(String textValue, String matchIndex ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "verifyTextNodeChecked.textValue = null");
        return TreeViewFunctions.verifyTextNodeChecked(getWindow().getName(), getName(), textValue, matchIndex);
    }

    /*********** <pre> 
                 Action to verify a particular state icon is selected.
               
                 Initially released with .NET support only.
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of state icon to be verified selected/checked
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public void verifyTextNodeChecked(StepTestTable table, String textValue, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyTextNodeChecked.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "verifyTextNodeChecked.textValue = null");
        table.add( TreeViewFunctions.verifyTextNodeChecked(getWindow().getName(), getName(), textValue, matchIndex));
    }

    /*********** <pre> 
                 Action to verify a particular state icon is selected.
               
                 Initially released with .NET support only.
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of state icon to be verified selected/checked
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public ComponentFunction verifyTextNodeChecked(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyTextNodeChecked.parameters = null");
        return TreeViewFunctions.verifyTextNodeChecked(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Action to verify a particular state icon is selected.
               
                 Initially released with .NET support only.
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of state icon to be verified selected/checked
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public void verifyTextNodeChecked(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyTextNodeChecked.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyTextNodeChecked.parameters = null");
        table.add( TreeViewFunctions.verifyTextNodeChecked(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Action to verify a particular state icon is NOT checked.
               
                 Initially released with .NET support only.
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of state icon to be verified NOT checked
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public ComponentFunction verifyTextNodeUnChecked(String textValue, String matchIndex ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "verifyTextNodeUnChecked.textValue = null");
        return TreeViewFunctions.verifyTextNodeUnChecked(getWindow().getName(), getName(), textValue, matchIndex);
    }

    /*********** <pre> 
                 Action to verify a particular state icon is NOT checked.
               
                 Initially released with .NET support only.
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of state icon to be verified NOT checked
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public void verifyTextNodeUnChecked(StepTestTable table, String textValue, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyTextNodeUnChecked.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "verifyTextNodeUnChecked.textValue = null");
        table.add( TreeViewFunctions.verifyTextNodeUnChecked(getWindow().getName(), getName(), textValue, matchIndex));
    }

    /*********** <pre> 
                 Action to verify a particular state icon is NOT checked.
               
                 Initially released with .NET support only.
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of state icon to be verified NOT checked
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public ComponentFunction verifyTextNodeUnChecked(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyTextNodeUnChecked.parameters = null");
        return TreeViewFunctions.verifyTextNodeUnChecked(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Action to verify a particular state icon is NOT checked.
               
                 Initially released with .NET support only.
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of state icon to be verified NOT checked
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public void verifyTextNodeUnChecked(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyTextNodeUnChecked.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyTextNodeUnChecked.parameters = null");
        table.add( TreeViewFunctions.verifyTextNodeUnChecked(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre>
             		Verify that a tree contains the provided node.
             	
             		The search of the path to the node is expected to be a case-sensitive 
             		exact match of each node.  Use 'VerifyTreeContainsPartialMatch' if you 
             		wish to specify case-insensitive substring matches for tree nodes.
              	    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param node  Optional:NO
             		The name of the node to verify.
              	
     **********/
    public ComponentFunction verifyTreeContainsNode(String node ) {

        if ( node == null ) throw new IllegalArgumentException ( "verifyTreeContainsNode.node = null");
        return TreeViewFunctions.verifyTreeContainsNode(getWindow().getName(), getName(), node);
    }

    /*********** <pre>
             		Verify that a tree contains the provided node.
             	
             		The search of the path to the node is expected to be a case-sensitive 
             		exact match of each node.  Use 'VerifyTreeContainsPartialMatch' if you 
             		wish to specify case-insensitive substring matches for tree nodes.
              	    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param node  Optional:NO
             		The name of the node to verify.
              	
     **********/
    public void verifyTreeContainsNode(StepTestTable table, String node ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyTreeContainsNode.table = null");

        if ( node == null ) throw new IllegalArgumentException ( "verifyTreeContainsNode.node = null");
        table.add( TreeViewFunctions.verifyTreeContainsNode(getWindow().getName(), getName(), node));
    }

    /*********** <pre>
             	Verify that a tree contains the provided node according to a partial match of the node's text value.
             	
             		The search of the path to the node is expected to be a case-insensitive 
             		substring match of each node.  Use 'VerifyTreeContainsNode' if you 
             		wish to specify case-sensitive substring matches for tree nodes.
              	    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param node  Optional:NO
             		The name of the node to verify.
              	
     **********/
    public ComponentFunction verifyTreeContainsPartialMatch(String node ) {

        if ( node == null ) throw new IllegalArgumentException ( "verifyTreeContainsPartialMatch.node = null");
        return TreeViewFunctions.verifyTreeContainsPartialMatch(getWindow().getName(), getName(), node);
    }

    /*********** <pre>
             	Verify that a tree contains the provided node according to a partial match of the node's text value.
             	
             		The search of the path to the node is expected to be a case-insensitive 
             		substring match of each node.  Use 'VerifyTreeContainsNode' if you 
             		wish to specify case-sensitive substring matches for tree nodes.
              	    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param node  Optional:NO
             		The name of the node to verify.
              	
     **********/
    public void verifyTreeContainsPartialMatch(StepTestTable table, String node ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyTreeContainsPartialMatch.table = null");

        if ( node == null ) throw new IllegalArgumentException ( "verifyTreeContainsPartialMatch.node = null");
        table.add( TreeViewFunctions.verifyTreeContainsPartialMatch(getWindow().getName(), getName(), node));
    }

}
