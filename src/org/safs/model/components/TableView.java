
/******************************************************************************
 * TableView.java
 *
 * Copyright (C) SAS Institute, All rights reserved.
 * General Public License: https://www.gnu.org/licenses/gpl-3.0.en.html
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   TableViewFunctions.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaComponentModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe TableViewFunctions.xml XSLJavaComponentModel.xsl -o TableView.java
 *
 ******************************************************************************/ 
package org.safs.model.components;

import org.safs.model.commands.TableViewFunctions;
import org.safs.model.ComponentFunction;
import org.safs.model.components.UIComponent;
import org.safs.model.StepTestTable;

public class TableView extends GenericObject {

    /*****************
    Constructor 

    Create an instance of pseudo-component representing 
    a specific component in a specific window.
    
    @param window  Optional:NO 
           Specifies which Window this component is 'in'.
    @param compname Optional:NO 
           Specifies the AppMap name of the component in the Window.
    ****************/
    public TableView(Window window, String compname) {

        super(window, compname);
    }

    /*****************
    Constructor 

    Create an instance of pseudo-component representing 
    a specific component in a specific window.
    
    This convenience routine will create the requisite Window component.
    
    @param winname  Optional:NO 
           Specifies the AppMap name of the window.
    @param compname Optional:NO 
           Specifies the AppMap name of the component in the Window.
    ****************/
    public TableView(String winname, String compname) {

        this(new Window(winname), compname);
    }

    protected TableView(String compname) {

        super(compname);
    }



    /*********** <pre> 
     		    Activate the specified row in the table.
     		  
     		    Activate the specified row in the table.
     		     </pre>    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param row  Optional:NO 
     	                 The row number to activate.
     	              
     **********/
    public ComponentFunction activateTableRow(String row ) {

        if ( row == null ) throw new IllegalArgumentException ( "activateTableRow.row = null");
        return TableViewFunctions.activateTableRow(getWindow().getName(), getName(), row);
    }

    /*********** <pre> 
     		    Activate the specified row in the table.
     		  
     		    Activate the specified row in the table.
     		     </pre>    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param row  Optional:NO 
     	                 The row number to activate.
     	              
     **********/
    public void activateTableRow(StepTestTable table, String row ) {

        if ( table == null ) throw new IllegalArgumentException ( "activateTableRow.table = null");

        if ( row == null ) throw new IllegalArgumentException ( "activateTableRow.row = null");
        table.add( TableViewFunctions.activateTableRow(getWindow().getName(), getName(), row));
    }

    /*********** <pre> 
          		    Get the value of a cell at a certain row and column
          		  
          		    The variable in the parameter will be set to the value of the specified
          		    row and column.
          		     </pre>    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param variableName  Optional:NO 
				 The variable that the data will be stored in.
			      
     @param row  Optional:NO 
				 The row that the data will be extracted from
			      
     @param column  Optional:NO 
          	                 The column that the data will be extracted from.
          	              
     **********/
    public ComponentFunction getCellValue(String variableName, String row, String column ) {

        if ( column == null ) throw new IllegalArgumentException ( "getCellValue.column = null");
        if ( row == null ) throw new IllegalArgumentException ( "getCellValue.row = null");
        if ( variableName == null ) throw new IllegalArgumentException ( "getCellValue.variableName = null");
        return TableViewFunctions.getCellValue(getWindow().getName(), getName(), variableName, row, column);
    }

    /*********** <pre> 
          		    Get the value of a cell at a certain row and column
          		  
          		    The variable in the parameter will be set to the value of the specified
          		    row and column.
          		     </pre>    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param variableName  Optional:NO 
				 The variable that the data will be stored in.
			      
     @param row  Optional:NO 
				 The row that the data will be extracted from
			      
     @param column  Optional:NO 
          	                 The column that the data will be extracted from.
          	              
     **********/
    public void getCellValue(StepTestTable table, String variableName, String row, String column ) {

        if ( table == null ) throw new IllegalArgumentException ( "getCellValue.table = null");

        if ( column == null ) throw new IllegalArgumentException ( "getCellValue.column = null");
        if ( row == null ) throw new IllegalArgumentException ( "getCellValue.row = null");
        if ( variableName == null ) throw new IllegalArgumentException ( "getCellValue.variableName = null");
        table.add( TableViewFunctions.getCellValue(getWindow().getName(), getName(), variableName, row, column));
    }

    /*********** <pre> 
          		    Get the value of a cell at a certain row and column
          		  
          		    The variable in the parameter will be set to the value of the specified
          		    row and column.
          		     </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         variableName -- Optional:NO 
				 The variable that the data will be stored in.
			      <BR/>         row -- Optional:NO 
				 The row that the data will be extracted from
			      <BR/>         column -- Optional:NO 
          	                 The column that the data will be extracted from.
          	              
    </UL>

     **********/
    public ComponentFunction getCellValue(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getCellValue.parameters = null");
        return TableViewFunctions.getCellValue(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
          		    Get the value of a cell at a certain row and column
          		  
          		    The variable in the parameter will be set to the value of the specified
          		    row and column.
          		     </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         variableName -- Optional:NO 
				 The variable that the data will be stored in.
			      <BR/>         row -- Optional:NO 
				 The row that the data will be extracted from
			      <BR/>         column -- Optional:NO 
          	                 The column that the data will be extracted from.
          	              
    </UL>

     **********/
    public void getCellValue(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "getCellValue.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "getCellValue.parameters = null");
        table.add( TableViewFunctions.getCellValue(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
               		    Get a count of how many rows are in the table
               		  
               		    The variable in the parameter will be set to the number of rows
               		    in the table.
               		     </pre>    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param rowCount  Optional:NO 
				 The variable that the number of rows will be stored in.
			      
     **********/
    public ComponentFunction getRowCount(String rowCount ) {

        if ( rowCount == null ) throw new IllegalArgumentException ( "getRowCount.rowCount = null");
        return TableViewFunctions.getRowCount(getWindow().getName(), getName(), rowCount);
    }

    /*********** <pre> 
               		    Get a count of how many rows are in the table
               		  
               		    The variable in the parameter will be set to the number of rows
               		    in the table.
               		     </pre>    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param rowCount  Optional:NO 
				 The variable that the number of rows will be stored in.
			      
     **********/
    public void getRowCount(StepTestTable table, String rowCount ) {

        if ( table == null ) throw new IllegalArgumentException ( "getRowCount.table = null");

        if ( rowCount == null ) throw new IllegalArgumentException ( "getRowCount.rowCount = null");
        table.add( TableViewFunctions.getRowCount(getWindow().getName(), getName(), rowCount));
    }

    /*********** <pre> 
     		    Set the current column of to the one specified.
     		  
     		    In the tableview the current column will be set to the one specified
     		    in the command parameter.
     		     </pre>    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param column  Optional:NO 
     	                 The column number that the TableView should be set to.
     	              
     **********/
    public ComponentFunction setSelectedColumn(String column ) {

        if ( column == null ) throw new IllegalArgumentException ( "setSelectedColumn.column = null");
        return TableViewFunctions.setSelectedColumn(getWindow().getName(), getName(), column);
    }

    /*********** <pre> 
     		    Set the current column of to the one specified.
     		  
     		    In the tableview the current column will be set to the one specified
     		    in the command parameter.
     		     </pre>    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param column  Optional:NO 
     	                 The column number that the TableView should be set to.
     	              
     **********/
    public void setSelectedColumn(StepTestTable table, String column ) {

        if ( table == null ) throw new IllegalArgumentException ( "setSelectedColumn.table = null");

        if ( column == null ) throw new IllegalArgumentException ( "setSelectedColumn.column = null");
        table.add( TableViewFunctions.setSelectedColumn(getWindow().getName(), getName(), column));
    }

    /*********** <pre> 
		    Set the current row of to the one specified.
		  
		    In the tableview the current row will be set to the one specified
		    in the command parameter.
		     </pre>    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param row  Optional:NO 
	                 The row number that the TableView should be set to.
	              
     **********/
    public ComponentFunction setSelectedRow(String row ) {

        if ( row == null ) throw new IllegalArgumentException ( "setSelectedRow.row = null");
        return TableViewFunctions.setSelectedRow(getWindow().getName(), getName(), row);
    }

    /*********** <pre> 
		    Set the current row of to the one specified.
		  
		    In the tableview the current row will be set to the one specified
		    in the command parameter.
		     </pre>    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param row  Optional:NO 
	                 The row number that the TableView should be set to.
	              
     **********/
    public void setSelectedRow(StepTestTable table, String row ) {

        if ( table == null ) throw new IllegalArgumentException ( "setSelectedRow.table = null");

        if ( row == null ) throw new IllegalArgumentException ( "setSelectedRow.row = null");
        table.add( TableViewFunctions.setSelectedRow(getWindow().getName(), getName(), row));
    }

    /*********** <pre> 
          		    Set a specific cell to the specified value.
          		  
          		    Set the cell at the specified position in the table to a specific value.
          		    The user must make sure that the values indicated in the command are 
          		    valid as far as the row and column specification of the table.
          		     </pre>    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param row  Optional:NO 
          	                 The row that the cell you want to set is in.
          	              
     @param column  Optional:NO 
				 The column that the cell you want to set is in.
			      
     @param textValue  Optional:NO 
				 The text value to set the cell value to.
			      
     **********/
    public ComponentFunction setTableCellData(String row, String column, String textValue ) {

        if ( column == null ) throw new IllegalArgumentException ( "setTableCellData.column = null");
        if ( row == null ) throw new IllegalArgumentException ( "setTableCellData.row = null");
        if ( textValue == null ) throw new IllegalArgumentException ( "setTableCellData.textValue = null");
        return TableViewFunctions.setTableCellData(getWindow().getName(), getName(), row, column, textValue);
    }

    /*********** <pre> 
          		    Set a specific cell to the specified value.
          		  
          		    Set the cell at the specified position in the table to a specific value.
          		    The user must make sure that the values indicated in the command are 
          		    valid as far as the row and column specification of the table.
          		     </pre>    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param row  Optional:NO 
          	                 The row that the cell you want to set is in.
          	              
     @param column  Optional:NO 
				 The column that the cell you want to set is in.
			      
     @param textValue  Optional:NO 
				 The text value to set the cell value to.
			      
     **********/
    public void setTableCellData(StepTestTable table, String row, String column, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "setTableCellData.table = null");

        if ( column == null ) throw new IllegalArgumentException ( "setTableCellData.column = null");
        if ( row == null ) throw new IllegalArgumentException ( "setTableCellData.row = null");
        if ( textValue == null ) throw new IllegalArgumentException ( "setTableCellData.textValue = null");
        table.add( TableViewFunctions.setTableCellData(getWindow().getName(), getName(), row, column, textValue));
    }

    /*********** <pre> 
          		    Set a specific cell to the specified value.
          		  
          		    Set the cell at the specified position in the table to a specific value.
          		    The user must make sure that the values indicated in the command are 
          		    valid as far as the row and column specification of the table.
          		     </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         row -- Optional:NO 
          	                 The row that the cell you want to set is in.
          	              <BR/>         column -- Optional:NO 
				 The column that the cell you want to set is in.
			      <BR/>         textValue -- Optional:NO 
				 The text value to set the cell value to.
			      
    </UL>

     **********/
    public ComponentFunction setTableCellData(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "setTableCellData.parameters = null");
        return TableViewFunctions.setTableCellData(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
          		    Set a specific cell to the specified value.
          		  
          		    Set the cell at the specified position in the table to a specific value.
          		    The user must make sure that the values indicated in the command are 
          		    valid as far as the row and column specification of the table.
          		     </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         row -- Optional:NO 
          	                 The row that the cell you want to set is in.
          	              <BR/>         column -- Optional:NO 
				 The column that the cell you want to set is in.
			      <BR/>         textValue -- Optional:NO 
				 The text value to set the cell value to.
			      
    </UL>

     **********/
    public void setTableCellData(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "setTableCellData.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "setTableCellData.parameters = null");
        table.add( TableViewFunctions.setTableCellData(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                    		    Verify the contents of a particular cell at position
                    		    row, column.
                    		  
                    		    The data is verified to equal the value of EXPECTED value
                    		    at the specified row and column.
                    		     </pre>    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param expectedText  Optional:NO 
     				 The value that the data in the cell is expected to equal.
     			      
     @param row  Optional:NO 
				 The row number of the cell to be verified.
			      
     @param column  Optional:NO 
				 The column number of the cell to be verified.
			      
     **********/
    public ComponentFunction verifyCellValue(String expectedText, String row, String column ) {

        if ( column == null ) throw new IllegalArgumentException ( "verifyCellValue.column = null");
        if ( expectedText == null ) throw new IllegalArgumentException ( "verifyCellValue.expectedText = null");
        if ( row == null ) throw new IllegalArgumentException ( "verifyCellValue.row = null");
        return TableViewFunctions.verifyCellValue(getWindow().getName(), getName(), expectedText, row, column);
    }

    /*********** <pre> 
                    		    Verify the contents of a particular cell at position
                    		    row, column.
                    		  
                    		    The data is verified to equal the value of EXPECTED value
                    		    at the specified row and column.
                    		     </pre>    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param expectedText  Optional:NO 
     				 The value that the data in the cell is expected to equal.
     			      
     @param row  Optional:NO 
				 The row number of the cell to be verified.
			      
     @param column  Optional:NO 
				 The column number of the cell to be verified.
			      
     **********/
    public void verifyCellValue(StepTestTable table, String expectedText, String row, String column ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyCellValue.table = null");

        if ( column == null ) throw new IllegalArgumentException ( "verifyCellValue.column = null");
        if ( expectedText == null ) throw new IllegalArgumentException ( "verifyCellValue.expectedText = null");
        if ( row == null ) throw new IllegalArgumentException ( "verifyCellValue.row = null");
        table.add( TableViewFunctions.verifyCellValue(getWindow().getName(), getName(), expectedText, row, column));
    }

    /*********** <pre> 
                    		    Verify the contents of a particular cell at position
                    		    row, column.
                    		  
                    		    The data is verified to equal the value of EXPECTED value
                    		    at the specified row and column.
                    		     </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         expectedText -- Optional:NO 
     				 The value that the data in the cell is expected to equal.
     			      <BR/>         row -- Optional:NO 
				 The row number of the cell to be verified.
			      <BR/>         column -- Optional:NO 
				 The column number of the cell to be verified.
			      
    </UL>

     **********/
    public ComponentFunction verifyCellValue(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyCellValue.parameters = null");
        return TableViewFunctions.verifyCellValue(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                    		    Verify the contents of a particular cell at position
                    		    row, column.
                    		  
                    		    The data is verified to equal the value of EXPECTED value
                    		    at the specified row and column.
                    		     </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         expectedText -- Optional:NO 
     				 The value that the data in the cell is expected to equal.
     			      <BR/>         row -- Optional:NO 
				 The row number of the cell to be verified.
			      <BR/>         column -- Optional:NO 
				 The column number of the cell to be verified.
			      
    </UL>

     **********/
    public void verifyCellValue(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyCellValue.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyCellValue.parameters = null");
        table.add( TableViewFunctions.verifyCellValue(getWindow().getName(), getName(), parameters));
    }

}
