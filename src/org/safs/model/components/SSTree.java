
/******************************************************************************
 * SSTree.java
 *
 * Copyright (C) SAS Institute, All rights reserved.
 * General Public License: https://www.gnu.org/licenses/gpl-3.0.en.html
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   SSTreeFunctions.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaComponentModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe SSTreeFunctions.xml XSLJavaComponentModel.xsl -o SSTree.java
 *
 ******************************************************************************/ 
package org.safs.model.components;

import org.safs.model.commands.SSTreeFunctions;
import org.safs.model.ComponentFunction;
import org.safs.model.components.UIComponent;
import org.safs.model.StepTestTable;

public class SSTree extends GenericObject {

    /*****************
    Constructor 

    Create an instance of pseudo-component representing 
    a specific component in a specific window.
    
    @param window  Optional:NO 
           Specifies which Window this component is 'in'.
    @param compname Optional:NO 
           Specifies the AppMap name of the component in the Window.
    ****************/
    public SSTree(Window window, String compname) {

        super(window, compname);
    }

    /*****************
    Constructor 

    Create an instance of pseudo-component representing 
    a specific component in a specific window.
    
    This convenience routine will create the requisite Window component.
    
    @param winname  Optional:NO 
           Specifies the AppMap name of the window.
    @param compname Optional:NO 
           Specifies the AppMap name of the component in the Window.
    ****************/
    public SSTree(String winname, String compname) {

        this(new Window(winname), compname);
    }

    protected SSTree(String compname) {

        super(compname);
    }



    /*********** <pre> 
                Routine to DblClick a node according to its AppMap reference.
               
                Routine to DblClick a node according to its AppMap reference.  Because 
                the SSTree is unsupported, this reference is the x,y coordinate of a 
                GenericObject DblClick command in the form x,y (i.e. "25,10").
                Because of the nature of the reference, we cannot check whether or 
                not the node is collapsed/expanded before or after this routine or 
                even if we clicked on the right node.  Verify the selection and 
                expanded state of the node before and/or after to check.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param appMapSubkey  Optional:NO 
                The named reference of the coordinates to expand/collapse
              
     **********/
    public ComponentFunction collapseNode(String appMapSubkey ) {

        if ( appMapSubkey == null ) throw new IllegalArgumentException ( "collapseNode.appMapSubkey = null");
        return SSTreeFunctions.collapseNode(getWindow().getName(), getName(), appMapSubkey);
    }

    /*********** <pre> 
                Routine to DblClick a node according to its AppMap reference.
               
                Routine to DblClick a node according to its AppMap reference.  Because 
                the SSTree is unsupported, this reference is the x,y coordinate of a 
                GenericObject DblClick command in the form x,y (i.e. "25,10").
                Because of the nature of the reference, we cannot check whether or 
                not the node is collapsed/expanded before or after this routine or 
                even if we clicked on the right node.  Verify the selection and 
                expanded state of the node before and/or after to check.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param appMapSubkey  Optional:NO 
                The named reference of the coordinates to expand/collapse
              
     **********/
    public void collapseNode(StepTestTable table, String appMapSubkey ) {

        if ( table == null ) throw new IllegalArgumentException ( "collapseNode.table = null");

        if ( appMapSubkey == null ) throw new IllegalArgumentException ( "collapseNode.appMapSubkey = null");
        table.add( SSTreeFunctions.collapseNode(getWindow().getName(), getName(), appMapSubkey));
    }

    /*********** <pre> 
                Routine to DblClick a node according to its AppMap reference.
               
                Routine to DblClick a node according to its AppMap reference.  Because 
                the SSTree is unsupported, this reference is the x,y coordinate of a 
                GenericObject DblClick command in the form x,y (i.e. "25,10").
                Because of the nature of the reference, we cannot check whether or 
                not the node is collapsed/expanded before or after this routine or 
                even if we clicked on the right node.  Verify the selection and 
                expanded state of the node before and/or after to check.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param appMapSubkey  Optional:NO 
                The named reference of the coordinates to expand/collapse
              
     **********/
    public ComponentFunction expandNode(String appMapSubkey ) {

        if ( appMapSubkey == null ) throw new IllegalArgumentException ( "expandNode.appMapSubkey = null");
        return SSTreeFunctions.expandNode(getWindow().getName(), getName(), appMapSubkey);
    }

    /*********** <pre> 
                Routine to DblClick a node according to its AppMap reference.
               
                Routine to DblClick a node according to its AppMap reference.  Because 
                the SSTree is unsupported, this reference is the x,y coordinate of a 
                GenericObject DblClick command in the form x,y (i.e. "25,10").
                Because of the nature of the reference, we cannot check whether or 
                not the node is collapsed/expanded before or after this routine or 
                even if we clicked on the right node.  Verify the selection and 
                expanded state of the node before and/or after to check.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param appMapSubkey  Optional:NO 
                The named reference of the coordinates to expand/collapse
              
     **********/
    public void expandNode(StepTestTable table, String appMapSubkey ) {

        if ( table == null ) throw new IllegalArgumentException ( "expandNode.table = null");

        if ( appMapSubkey == null ) throw new IllegalArgumentException ( "expandNode.appMapSubkey = null");
        table.add( SSTreeFunctions.expandNode(getWindow().getName(), getName(), appMapSubkey));
    }

    /*********** <pre> 
                Routine to select a node according to its AppMap reference.
               
                Routine to select a node according to its AppMap reference.  Because 
                the SSTree is unsupported this reference is the x,y coordinate of a 
                GenericObject Click command in the form x,y (i.e. "25,10").
                Because of the nature of the reference, we cannot check whether or 
                not the node is collapsed/expanded before or after this routine or 
                even if we clicked on the right node.  Verify the selection and 
                expanded state of the node before and/or after to check.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param appMapSubkey  Optional:NO 
                The named reference of the coordinates to click
              
     **********/
    public ComponentFunction selectNode(String appMapSubkey ) {

        if ( appMapSubkey == null ) throw new IllegalArgumentException ( "selectNode.appMapSubkey = null");
        return SSTreeFunctions.selectNode(getWindow().getName(), getName(), appMapSubkey);
    }

    /*********** <pre> 
                Routine to select a node according to its AppMap reference.
               
                Routine to select a node according to its AppMap reference.  Because 
                the SSTree is unsupported this reference is the x,y coordinate of a 
                GenericObject Click command in the form x,y (i.e. "25,10").
                Because of the nature of the reference, we cannot check whether or 
                not the node is collapsed/expanded before or after this routine or 
                even if we clicked on the right node.  Verify the selection and 
                expanded state of the node before and/or after to check.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param appMapSubkey  Optional:NO 
                The named reference of the coordinates to click
              
     **********/
    public void selectNode(StepTestTable table, String appMapSubkey ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectNode.table = null");

        if ( appMapSubkey == null ) throw new IllegalArgumentException ( "selectNode.appMapSubkey = null");
        table.add( SSTreeFunctions.selectNode(getWindow().getName(), getName(), appMapSubkey));
    }

    /*********** <pre> 
                Routine to verify the state of the Expanded property--True or False--
                for the node with the provided text.
               
                Routine to verify the state of the Expanded property--True or False--
                for the node with the provided text.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param textValue  Optional:NO 
                Case-sensitive text of the node to check.
              
     @param expectedState  Optional:NO 
                Expected State: "True" or "False" (not case-sensitive)
              
     **********/
    public ComponentFunction verifyExpandedState(String textValue, String expectedState ) {

        if ( expectedState == null ) throw new IllegalArgumentException ( "verifyExpandedState.expectedState = null");
        if ( textValue == null ) throw new IllegalArgumentException ( "verifyExpandedState.textValue = null");
        return SSTreeFunctions.verifyExpandedState(getWindow().getName(), getName(), textValue, expectedState);
    }

    /*********** <pre> 
                Routine to verify the state of the Expanded property--True or False--
                for the node with the provided text.
               
                Routine to verify the state of the Expanded property--True or False--
                for the node with the provided text.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                Case-sensitive text of the node to check.
              
     @param expectedState  Optional:NO 
                Expected State: "True" or "False" (not case-sensitive)
              
     **********/
    public void verifyExpandedState(StepTestTable table, String textValue, String expectedState ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyExpandedState.table = null");

        if ( expectedState == null ) throw new IllegalArgumentException ( "verifyExpandedState.expectedState = null");
        if ( textValue == null ) throw new IllegalArgumentException ( "verifyExpandedState.textValue = null");
        table.add( SSTreeFunctions.verifyExpandedState(getWindow().getName(), getName(), textValue, expectedState));
    }

    /*********** <pre> 
                Routine to verify the state of the Expanded property--True or False--
                for the node with the provided text.
               
                Routine to verify the state of the Expanded property--True or False--
                for the node with the provided text.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                Case-sensitive text of the node to check.
              <BR/>         expectedState -- Optional:NO 
                Expected State: "True" or "False" (not case-sensitive)
              
    </UL>

     **********/
    public ComponentFunction verifyExpandedState(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyExpandedState.parameters = null");
        return SSTreeFunctions.verifyExpandedState(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                Routine to verify the state of the Expanded property--True or False--
                for the node with the provided text.
               
                Routine to verify the state of the Expanded property--True or False--
                for the node with the provided text.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                Case-sensitive text of the node to check.
              <BR/>         expectedState -- Optional:NO 
                Expected State: "True" or "False" (not case-sensitive)
              
    </UL>

     **********/
    public void verifyExpandedState(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyExpandedState.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyExpandedState.parameters = null");
        table.add( SSTreeFunctions.verifyExpandedState(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Routine to verify the text of the currently selected node.
               
                Routine to verify the text of the currently selected node.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param textValue  Optional:NO 
                Case-sensitive text expected in the selected node.
              
     **********/
    public ComponentFunction verifySelectedText(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "verifySelectedText.textValue = null");
        return SSTreeFunctions.verifySelectedText(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                Routine to verify the text of the currently selected node.
               
                Routine to verify the text of the currently selected node.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                Case-sensitive text expected in the selected node.
              
     **********/
    public void verifySelectedText(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifySelectedText.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "verifySelectedText.textValue = null");
        table.add( SSTreeFunctions.verifySelectedText(getWindow().getName(), getName(), textValue));
    }

}
