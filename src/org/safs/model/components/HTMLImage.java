
/******************************************************************************
 * HTMLImage.java
 *
 * Copyright (c) by SAS Institute Inc., Cary, NC 27513
 * General Public License: http://www.opensource.org/licenses/gpl-license.php
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   HTMLImageFunctions.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaComponentModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe HTMLImageFunctions.xml XSLJavaComponentModel.xsl -o HTMLImage.java
 *
 ******************************************************************************/ 
package org.safs.model.components;

import org.safs.model.commands.HTMLImageFunctions;
import org.safs.model.ComponentFunction;
import org.safs.model.components.UIComponent;
import org.safs.model.StepTestTable;

public class HTMLImage extends HTML {

    /*****************
    Constructor 

    Create an instance of pseudo-component representing 
    a specific component in a specific window.
    
    @param window  Optional:NO 
           Specifies which Window this component is 'in'.
    @param compname Optional:NO 
           Specifies the AppMap name of the component in the Window.
    ****************/
    public HTMLImage(Window window, String compname) {

        super(window, compname);
    }

    /*****************
    Constructor 

    Create an instance of pseudo-component representing 
    a specific component in a specific window.
    
    This convenience routine will create the requisite Window component.
    
    @param winname  Optional:NO 
           Specifies the AppMap name of the window.
    @param compname Optional:NO 
           Specifies the AppMap name of the component in the Window.
    ****************/
    public HTMLImage(String winname, String compname) {

        this(new Window(winname), compname);
    }

    protected HTMLImage(String compname) {

        super(compname);
    }



    /*********** <pre> 
                 Command deprecated in favor of ClickArea.
               
                Attempts to perform a standard Click on an HTMLImage on a webpage. This 
                functionality is already provided by GenericObject CLICK.
                
                We can optionally click on a particular area of a client-side or 
                server-side image rather than a generic click (Coords=1,1).  This part 
                of the functionality should be implemented in ClickArea instead.
                
                The image area lookup is done with the component name AND an additional
                app map reference provided in Field #5.
                
                Typical Data Table records:
                
                (1) t BrowserWin AnImage Click
                (2) t BrowserWin AnImage Click AMappedRegion
                
                #1 above should merely click in the top-left corner of the image.
                
                #2 above will contain a AnImage entry in the MainWindow section with 
                normal recognition information for it.  AnImage will also have it's
                own section in the Application Map in which there will be entries
                defining specific indexed or named regions for the image.
                
                Examples:
                
                [BrowserWin]
                BrowserWin=WindowTag=WEBBrowser
                AnImage=Type=HTMLFrame;HTMLID=top;Type=HTMLImage;Index=1
                ...
                [AnImage]
                AMappdedRegion=Coords=10,10
                ANamedRegion=AreaName=TechSupport
                AnIndexedRegion=AreaIndex=2
                AnotherRegion=AreaID=Contact
                
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param appMapSubkey  Optional:YES 
                Name of the AppMap subkey to lookup and use for the click.
              
     **********/
    public ComponentFunction click(String appMapSubkey ) {

        return HTMLImageFunctions.click(getWindow().getName(), getName(), appMapSubkey);
    }

    /*********** <pre> 
                 Command deprecated in favor of ClickArea.
               
                Attempts to perform a standard Click on an HTMLImage on a webpage. This 
                functionality is already provided by GenericObject CLICK.
                
                We can optionally click on a particular area of a client-side or 
                server-side image rather than a generic click (Coords=1,1).  This part 
                of the functionality should be implemented in ClickArea instead.
                
                The image area lookup is done with the component name AND an additional
                app map reference provided in Field #5.
                
                Typical Data Table records:
                
                (1) t BrowserWin AnImage Click
                (2) t BrowserWin AnImage Click AMappedRegion
                
                #1 above should merely click in the top-left corner of the image.
                
                #2 above will contain a AnImage entry in the MainWindow section with 
                normal recognition information for it.  AnImage will also have it's
                own section in the Application Map in which there will be entries
                defining specific indexed or named regions for the image.
                
                Examples:
                
                [BrowserWin]
                BrowserWin=WindowTag=WEBBrowser
                AnImage=Type=HTMLFrame;HTMLID=top;Type=HTMLImage;Index=1
                ...
                [AnImage]
                AMappdedRegion=Coords=10,10
                ANamedRegion=AreaName=TechSupport
                AnIndexedRegion=AreaIndex=2
                AnotherRegion=AreaID=Contact
                
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param appMapSubkey  Optional:YES 
                Name of the AppMap subkey to lookup and use for the click.
              
     **********/
    public void click(StepTestTable table, String appMapSubkey ) {

        if ( table == null ) throw new IllegalArgumentException ( "click.table = null");

        table.add( HTMLImageFunctions.click(getWindow().getName(), getName(), appMapSubkey));
    }

    /*********** <pre> 
                 Attempts to perform a Click on a mapped region of an Image (on a webpage).
               
                RobotJ: The initial implementation actually does this in reverse.  It 
                expects that the specified object resolves to the HTML.AREA object defined 
                in the HTML.MAP instead of simply specifying the Image and then an area.  
                The RobotJ implementation then attempts to locate the Doc and Image that 
                use the defined area and click on it.
                No Field #5 parameter is used or needed in this implementation.
                
                Future implementations should also\instead support the HTML.IMAGE object 
                as the target and the area to click as a Field #5 parameter.
                The parameter would optionally define an App Map reference or could be used 
                as a literal value.  App Map references might appear as below:
		
                
                Examples:

                [BrowserWin]
                AnImage=Type=HTMLFrame;HTMLID=top;Type=HTMLImage;Index=1
                ...                 
                [AnImage]
                ANamedRegion=AreaName=TechSupport
                AnIndexedRegion=AreaIndex=2
                AnotherRegion=AreaID=Contact
                
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param appMapSubkey  Optional:YES 
                (FUTURE) Name of the AppMap subkey to lookup and use for the image area click.
              
     **********/
    public ComponentFunction clickArea(String appMapSubkey ) {

        return HTMLImageFunctions.clickArea(getWindow().getName(), getName(), appMapSubkey);
    }

    /*********** <pre> 
                 Attempts to perform a Click on a mapped region of an Image (on a webpage).
               
                RobotJ: The initial implementation actually does this in reverse.  It 
                expects that the specified object resolves to the HTML.AREA object defined 
                in the HTML.MAP instead of simply specifying the Image and then an area.  
                The RobotJ implementation then attempts to locate the Doc and Image that 
                use the defined area and click on it.
                No Field #5 parameter is used or needed in this implementation.
                
                Future implementations should also\instead support the HTML.IMAGE object 
                as the target and the area to click as a Field #5 parameter.
                The parameter would optionally define an App Map reference or could be used 
                as a literal value.  App Map references might appear as below:
		
                
                Examples:

                [BrowserWin]
                AnImage=Type=HTMLFrame;HTMLID=top;Type=HTMLImage;Index=1
                ...                 
                [AnImage]
                ANamedRegion=AreaName=TechSupport
                AnIndexedRegion=AreaIndex=2
                AnotherRegion=AreaID=Contact
                
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param appMapSubkey  Optional:YES 
                (FUTURE) Name of the AppMap subkey to lookup and use for the image area click.
              
     **********/
    public void clickArea(StepTestTable table, String appMapSubkey ) {

        if ( table == null ) throw new IllegalArgumentException ( "clickArea.table = null");

        table.add( HTMLImageFunctions.clickArea(getWindow().getName(), getName(), appMapSubkey));
    }

    /*********** <pre> 
                Performs a HTMLImageVP CompareData on an HTMLImage object.
               
                Performs a HTMLImageVP CompareData on an HTMLImage object.
                
                THE BENCHMARK VP MUST ALREADY EXIST AND BE AN ASSET OF THE CURRENTLY
                RUNNING SCRIPT.
                
                Modified VP parameter information can be added to the standard
                VP=VPName by including the VPName reference in the application map
                in a section defined for the HTMLImage.  If this is done, the value 
                retrieved from the application map will be appended to VP=VPName.
                The required semicolon for this append will be provided by this routine.
                
                Example 1: Perform a standard HTMLImage CompareData.  To perform
                a basic CompareData the name "StoredVP" will not exist in the app map:
                
                The Step File call:
                 
                BrowserWindow AnHTMLImage CompareStoredData StoredVP
                 
                This will produce a CompareData VP with "VP=StoredVP;Wait=2,10".
                
                The StoredVP baseline MUST already exist as an asset of the
                currently running script.
                
                Example 2: Perform a HTMLImage CompareData providing addition 
                parameter information (such as ExpectedResult=FAIL).  To do this the
                HTMLImage object must have its own section in the app map and an item
                with the same name as the StoredVP.  The value of that item will be
                appended to the standard VP argument with a semicolon.
                
                Part of App Map:
                
                [BrowserWindow]
                BrowserWindow=WindowTag=WEBBrowser
                AnHTMLImage=<snipped for brevity>;\;Type=HTMLImage;Index=1
                ...
                [AnHTMLImage]
                StoredVP=ExpectedResult=FAIL;Wait=3,30
                
                The Step File call:
                
                BrowserWindow AnHTMLImage CompareStoredData StoredVP
                
                This will produce a CompareData VP with all the parameters appended
                like this: "VP=StoredVP;ExpectedResult=FAIL;Wait=3,30".
                NOTE:When stored parameters are found in the app map then the default Wait= 
                parameter used in the standard compare is no longer provided.  If you still 
                need a Wait= parameter, then it must be included in the stored parameters.
                
                The StoredVP baseline MUST already exist as an asset of the
                currently running script.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param vPAsset  Optional:NO 
                Name of the pre-existing VP asset stored in the currently running script.
              
     **********/
    public ComponentFunction compareStoredData(String vPAsset ) {

        if ( vPAsset == null ) throw new IllegalArgumentException ( "compareStoredData.vPAsset = null");
        return HTMLImageFunctions.compareStoredData(getWindow().getName(), getName(), vPAsset);
    }

    /*********** <pre> 
                Performs a HTMLImageVP CompareData on an HTMLImage object.
               
                Performs a HTMLImageVP CompareData on an HTMLImage object.
                
                THE BENCHMARK VP MUST ALREADY EXIST AND BE AN ASSET OF THE CURRENTLY
                RUNNING SCRIPT.
                
                Modified VP parameter information can be added to the standard
                VP=VPName by including the VPName reference in the application map
                in a section defined for the HTMLImage.  If this is done, the value 
                retrieved from the application map will be appended to VP=VPName.
                The required semicolon for this append will be provided by this routine.
                
                Example 1: Perform a standard HTMLImage CompareData.  To perform
                a basic CompareData the name "StoredVP" will not exist in the app map:
                
                The Step File call:
                 
                BrowserWindow AnHTMLImage CompareStoredData StoredVP
                 
                This will produce a CompareData VP with "VP=StoredVP;Wait=2,10".
                
                The StoredVP baseline MUST already exist as an asset of the
                currently running script.
                
                Example 2: Perform a HTMLImage CompareData providing addition 
                parameter information (such as ExpectedResult=FAIL).  To do this the
                HTMLImage object must have its own section in the app map and an item
                with the same name as the StoredVP.  The value of that item will be
                appended to the standard VP argument with a semicolon.
                
                Part of App Map:
                
                [BrowserWindow]
                BrowserWindow=WindowTag=WEBBrowser
                AnHTMLImage=<snipped for brevity>;\;Type=HTMLImage;Index=1
                ...
                [AnHTMLImage]
                StoredVP=ExpectedResult=FAIL;Wait=3,30
                
                The Step File call:
                
                BrowserWindow AnHTMLImage CompareStoredData StoredVP
                
                This will produce a CompareData VP with all the parameters appended
                like this: "VP=StoredVP;ExpectedResult=FAIL;Wait=3,30".
                NOTE:When stored parameters are found in the app map then the default Wait= 
                parameter used in the standard compare is no longer provided.  If you still 
                need a Wait= parameter, then it must be included in the stored parameters.
                
                The StoredVP baseline MUST already exist as an asset of the
                currently running script.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param vPAsset  Optional:NO 
                Name of the pre-existing VP asset stored in the currently running script.
              
     **********/
    public void compareStoredData(StepTestTable table, String vPAsset ) {

        if ( table == null ) throw new IllegalArgumentException ( "compareStoredData.table = null");

        if ( vPAsset == null ) throw new IllegalArgumentException ( "compareStoredData.vPAsset = null");
        table.add( HTMLImageFunctions.compareStoredData(getWindow().getName(), getName(), vPAsset));
    }

    /*********** <pre> 
                 Performs a HTMLImageVP CompareProperties on an HTMLImage object.
               
                Performs a HTMLImageVP CompareProperties on an HTMLImage object.
                
                THE BENCHMARK VP MUST ALREADY EXIST AND BE AN ASSET OF THE CURRENTLY
                RUNNING SCRIPT.
                
                Modified VP parameter information can be added to the standard
                VP=VPName by including the VPName reference in the application map
                in a section defined for the HTMLImage.  If this is done, the value 
                retrieved from the application map will be appended to VP=VPName.
                The required semicolon for this append will be provided by this routine.
                
                Example 1: Perform a standard HTMLImage CompareProperties.  To perform
                a basic CompareProperties the name "StoredVP" will not exist in the app map:
                
                The Step File call:
                
                BrowserWindow AnHTMLImage CompareStoredProperties StoredVP
                
                This will produce a CompareProperties VP with "VP=StoredVP;Wait=2,10".
                
                The StoredVP baseline MUST already exist as an asset of the
                currently running script.
                  
                Example 2: Perform a HTMLImage CompareProperties providing addition 
                parameter information (such as ExpectedResult=FAIL).  To do this the
                HTMLImage object must have its own section in the app map and an item
                with the same name as the StoredVP.  The value of that item will be
                appended to the standard VP argument with a semicolon.
                
                Part of App Map:
                 
                [BrowserWindow]
                BrowserWindow=WindowTag=WEBBrowser
                AnHTMLImage=<snipped for brevity>;\;Type=HTMLImage;Index=1
                ...
                [AnHTMLImage]
                StoredVP=ExpectedResult=FAIL;Wait=3,30
                
                The Step File call:
                
                BrowserWindow AnHTMLImage CompareStoredProperties StoredVP
                 
                This will produce a CompareProperties VP with all the parameters appended
                like this: "VP=StoredVP;ExpectedResult=FAIL;Wait=3,30".
                NOTE:When stored parameters are found in the app map then the default Wait= 
                parameter used in the standard compare is no longer provided.  If you still 
                need a Wait= parameter, then it must be included in the stored parameters.
                
                The StoredVP baseline MUST already exist as an asset of the
                currently running script.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param vPAsset  Optional:NO 
                Name of the pre-existing VP asset stored in the currently running script.
              
     **********/
    public ComponentFunction compareStoredProperties(String vPAsset ) {

        if ( vPAsset == null ) throw new IllegalArgumentException ( "compareStoredProperties.vPAsset = null");
        return HTMLImageFunctions.compareStoredProperties(getWindow().getName(), getName(), vPAsset);
    }

    /*********** <pre> 
                 Performs a HTMLImageVP CompareProperties on an HTMLImage object.
               
                Performs a HTMLImageVP CompareProperties on an HTMLImage object.
                
                THE BENCHMARK VP MUST ALREADY EXIST AND BE AN ASSET OF THE CURRENTLY
                RUNNING SCRIPT.
                
                Modified VP parameter information can be added to the standard
                VP=VPName by including the VPName reference in the application map
                in a section defined for the HTMLImage.  If this is done, the value 
                retrieved from the application map will be appended to VP=VPName.
                The required semicolon for this append will be provided by this routine.
                
                Example 1: Perform a standard HTMLImage CompareProperties.  To perform
                a basic CompareProperties the name "StoredVP" will not exist in the app map:
                
                The Step File call:
                
                BrowserWindow AnHTMLImage CompareStoredProperties StoredVP
                
                This will produce a CompareProperties VP with "VP=StoredVP;Wait=2,10".
                
                The StoredVP baseline MUST already exist as an asset of the
                currently running script.
                  
                Example 2: Perform a HTMLImage CompareProperties providing addition 
                parameter information (such as ExpectedResult=FAIL).  To do this the
                HTMLImage object must have its own section in the app map and an item
                with the same name as the StoredVP.  The value of that item will be
                appended to the standard VP argument with a semicolon.
                
                Part of App Map:
                 
                [BrowserWindow]
                BrowserWindow=WindowTag=WEBBrowser
                AnHTMLImage=<snipped for brevity>;\;Type=HTMLImage;Index=1
                ...
                [AnHTMLImage]
                StoredVP=ExpectedResult=FAIL;Wait=3,30
                
                The Step File call:
                
                BrowserWindow AnHTMLImage CompareStoredProperties StoredVP
                 
                This will produce a CompareProperties VP with all the parameters appended
                like this: "VP=StoredVP;ExpectedResult=FAIL;Wait=3,30".
                NOTE:When stored parameters are found in the app map then the default Wait= 
                parameter used in the standard compare is no longer provided.  If you still 
                need a Wait= parameter, then it must be included in the stored parameters.
                
                The StoredVP baseline MUST already exist as an asset of the
                currently running script.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param vPAsset  Optional:NO 
                Name of the pre-existing VP asset stored in the currently running script.
              
     **********/
    public void compareStoredProperties(StepTestTable table, String vPAsset ) {

        if ( table == null ) throw new IllegalArgumentException ( "compareStoredProperties.table = null");

        if ( vPAsset == null ) throw new IllegalArgumentException ( "compareStoredProperties.vPAsset = null");
        table.add( HTMLImageFunctions.compareStoredProperties(getWindow().getName(), getName(), vPAsset));
    }

    /*********** <pre> 
                 Attempts to Save an HTMLImage on a webpage.
               
                Attempts to perform a right click - save image/picture as command 
                on the specified image.
                You can also optionally specify an x,y offset into 
                the image for the right click to occur.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param fileName  Optional:NO 
                Name of the image file.
              
     @param coords  Optional:YES  DefaultVal:3,3 
                The explicit coordinates ("x,y"), or an App Map reference to 
                pre-defined coordinates.
              
     **********/
    public ComponentFunction saveHTMLImage(String fileName, String coords ) {

        if ( fileName == null ) throw new IllegalArgumentException ( "saveHTMLImage.fileName = null");
        return HTMLImageFunctions.saveHTMLImage(getWindow().getName(), getName(), fileName, coords);
    }

    /*********** <pre> 
                 Attempts to Save an HTMLImage on a webpage.
               
                Attempts to perform a right click - save image/picture as command 
                on the specified image.
                You can also optionally specify an x,y offset into 
                the image for the right click to occur.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param fileName  Optional:NO 
                Name of the image file.
              
     @param coords  Optional:YES  DefaultVal:3,3 
                The explicit coordinates ("x,y"), or an App Map reference to 
                pre-defined coordinates.
              
     **********/
    public void saveHTMLImage(StepTestTable table, String fileName, String coords ) {

        if ( table == null ) throw new IllegalArgumentException ( "saveHTMLImage.table = null");

        if ( fileName == null ) throw new IllegalArgumentException ( "saveHTMLImage.fileName = null");
        table.add( HTMLImageFunctions.saveHTMLImage(getWindow().getName(), getName(), fileName, coords));
    }

    /*********** <pre> 
                 Attempts to Save an HTMLImage on a webpage.
               
                Attempts to perform a right click - save image/picture as command 
                on the specified image.
                You can also optionally specify an x,y offset into 
                the image for the right click to occur.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         fileName -- Optional:NO 
                Name of the image file.
              <BR/>         coords -- Optional:YES  DefaultVal:3,3 
                The explicit coordinates ("x,y"), or an App Map reference to 
                pre-defined coordinates.
              
    </UL>

     **********/
    public ComponentFunction saveHTMLImage(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "saveHTMLImage.parameters = null");
        return HTMLImageFunctions.saveHTMLImage(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Attempts to Save an HTMLImage on a webpage.
               
                Attempts to perform a right click - save image/picture as command 
                on the specified image.
                You can also optionally specify an x,y offset into 
                the image for the right click to occur.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         fileName -- Optional:NO 
                Name of the image file.
              <BR/>         coords -- Optional:YES  DefaultVal:3,3 
                The explicit coordinates ("x,y"), or an App Map reference to 
                pre-defined coordinates.
              
    </UL>

     **********/
    public void saveHTMLImage(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "saveHTMLImage.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "saveHTMLImage.parameters = null");
        table.add( HTMLImageFunctions.saveHTMLImage(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Attempts to verify an HTMLImage on a webpage to a benchmark file.
               
                Attempts to perform a right click - save image/picture as command 
                on the specified image and then run a binary file compare of the
                file to a benchmark file.
                You can also optionally specify an x,y offset into 
                the image for the right click to occur.
                
             The command may produce a WARNING if a diff tool for which we 
             have no means to verify the results is configured for use.  
             Consequently, if these warnings are expected, the user can use the 
             "TW" test record type to avoid issuing these warnings.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param benchmarkFile  Optional:NO 
                Name of the Benchmark image file.
              
     @param coords  Optional:YES  DefaultVal:3,3 
                The explicit coordinates ("x,y") or an App Map reference to 
                pre-defined coordinates.
              
     **********/
    public ComponentFunction verifyHTMLImage(String benchmarkFile, String coords ) {

        if ( benchmarkFile == null ) throw new IllegalArgumentException ( "verifyHTMLImage.benchmarkFile = null");
        return HTMLImageFunctions.verifyHTMLImage(getWindow().getName(), getName(), benchmarkFile, coords);
    }

    /*********** <pre> 
                 Attempts to verify an HTMLImage on a webpage to a benchmark file.
               
                Attempts to perform a right click - save image/picture as command 
                on the specified image and then run a binary file compare of the
                file to a benchmark file.
                You can also optionally specify an x,y offset into 
                the image for the right click to occur.
                
             The command may produce a WARNING if a diff tool for which we 
             have no means to verify the results is configured for use.  
             Consequently, if these warnings are expected, the user can use the 
             "TW" test record type to avoid issuing these warnings.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param benchmarkFile  Optional:NO 
                Name of the Benchmark image file.
              
     @param coords  Optional:YES  DefaultVal:3,3 
                The explicit coordinates ("x,y") or an App Map reference to 
                pre-defined coordinates.
              
     **********/
    public void verifyHTMLImage(StepTestTable table, String benchmarkFile, String coords ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyHTMLImage.table = null");

        if ( benchmarkFile == null ) throw new IllegalArgumentException ( "verifyHTMLImage.benchmarkFile = null");
        table.add( HTMLImageFunctions.verifyHTMLImage(getWindow().getName(), getName(), benchmarkFile, coords));
    }

    /*********** <pre> 
                 Attempts to verify an HTMLImage on a webpage to a benchmark file.
               
                Attempts to perform a right click - save image/picture as command 
                on the specified image and then run a binary file compare of the
                file to a benchmark file.
                You can also optionally specify an x,y offset into 
                the image for the right click to occur.
                
             The command may produce a WARNING if a diff tool for which we 
             have no means to verify the results is configured for use.  
             Consequently, if these warnings are expected, the user can use the 
             "TW" test record type to avoid issuing these warnings.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         benchmarkFile -- Optional:NO 
                Name of the Benchmark image file.
              <BR/>         coords -- Optional:YES  DefaultVal:3,3 
                The explicit coordinates ("x,y") or an App Map reference to 
                pre-defined coordinates.
              
    </UL>

     **********/
    public ComponentFunction verifyHTMLImage(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyHTMLImage.parameters = null");
        return HTMLImageFunctions.verifyHTMLImage(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Attempts to verify an HTMLImage on a webpage to a benchmark file.
               
                Attempts to perform a right click - save image/picture as command 
                on the specified image and then run a binary file compare of the
                file to a benchmark file.
                You can also optionally specify an x,y offset into 
                the image for the right click to occur.
                
             The command may produce a WARNING if a diff tool for which we 
             have no means to verify the results is configured for use.  
             Consequently, if these warnings are expected, the user can use the 
             "TW" test record type to avoid issuing these warnings.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         benchmarkFile -- Optional:NO 
                Name of the Benchmark image file.
              <BR/>         coords -- Optional:YES  DefaultVal:3,3 
                The explicit coordinates ("x,y") or an App Map reference to 
                pre-defined coordinates.
              
    </UL>

     **********/
    public void verifyHTMLImage(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyHTMLImage.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyHTMLImage.parameters = null");
        table.add( HTMLImageFunctions.verifyHTMLImage(getWindow().getName(), getName(), parameters));
    }

}
