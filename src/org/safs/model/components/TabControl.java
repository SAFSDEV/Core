
/******************************************************************************
 * TabControl.java
 *
 * Copyright (C) SAS Institute, All rights reserved.
 * General Public License: https://www.gnu.org/licenses/gpl-3.0.en.html
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   TabControlFunctions.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaComponentModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe TabControlFunctions.xml XSLJavaComponentModel.xsl -o TabControl.java
 *
 ******************************************************************************/ 
package org.safs.model.components;

import org.safs.model.commands.TabControlFunctions;
import org.safs.model.ComponentFunction;
import org.safs.model.components.UIComponent;
import org.safs.model.StepTestTable;

public class TabControl extends GenericObject {

    /*****************
    Constructor 

    Create an instance of pseudo-component representing 
    a specific component in a specific window.
    
    @param window  Optional:NO 
           Specifies which Window this component is 'in'.
    @param compname Optional:NO 
           Specifies the AppMap name of the component in the Window.
    ****************/
    public TabControl(Window window, String compname) {

        super(window, compname);
    }

    /*****************
    Constructor 

    Create an instance of pseudo-component representing 
    a specific component in a specific window.
    
    This convenience routine will create the requisite Window component.
    
    @param winname  Optional:NO 
           Specifies the AppMap name of the window.
    @param compname Optional:NO 
           Specifies the AppMap name of the component in the Window.
    ****************/
    public TabControl(String winname, String compname) {

        this(new Window(winname), compname);
    }

    protected TabControl(String compname) {

        super(compname);
    }



    /*********** <pre> 
                 Use ClickTab instead (where available).
               
                Attempts to perform a standard Click on a particular Tab on the TabControl.
                The routine will set the StepDriverTestInfo.statuscode and
                log any pass/warning/fail info using the StepDriverTestInfo.fac LogFacility.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text* on the tab to identify which tab to click.
              
     @param process  Optional:YES 
                 Indicator for unverified click.
              
     **********/
    public ComponentFunction click(String textValue, String process ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "click.textValue = null");
        return TabControlFunctions.click(getWindow().getName(), getName(), textValue, process);
    }

    /*********** <pre> 
                 Use ClickTab instead (where available).
               
                Attempts to perform a standard Click on a particular Tab on the TabControl.
                The routine will set the StepDriverTestInfo.statuscode and
                log any pass/warning/fail info using the StepDriverTestInfo.fac LogFacility.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text* on the tab to identify which tab to click.
              
     @param process  Optional:YES 
                 Indicator for unverified click.
              
     **********/
    public void click(StepTestTable table, String textValue, String process ) {

        if ( table == null ) throw new IllegalArgumentException ( "click.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "click.textValue = null");
        table.add( TabControlFunctions.click(getWindow().getName(), getName(), textValue, process));
    }

    /*********** <pre> 
                 Use ClickTab instead (where available).
               
                Attempts to perform a standard Click on a particular Tab on the TabControl.
                The routine will set the StepDriverTestInfo.statuscode and
                log any pass/warning/fail info using the StepDriverTestInfo.fac LogFacility.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text* on the tab to identify which tab to click.
              <BR/>         process -- Optional:YES 
                 Indicator for unverified click.
              
    </UL>

     **********/
    public ComponentFunction click(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "click.parameters = null");
        return TabControlFunctions.click(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Use ClickTab instead (where available).
               
                Attempts to perform a standard Click on a particular Tab on the TabControl.
                The routine will set the StepDriverTestInfo.statuscode and
                log any pass/warning/fail info using the StepDriverTestInfo.fac LogFacility.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text* on the tab to identify which tab to click.
              <BR/>         process -- Optional:YES 
                 Indicator for unverified click.
              
    </UL>

     **********/
    public void click(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "click.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "click.parameters = null");
        table.add( TabControlFunctions.click(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Attempts to perform a standard Click on a particular Tab on the TabControl
               
                Attempts to perform a standard Click on a particular Tab on the TabControl.
                The routine will set the StepDriverTestInfo.statuscode and
                log any pass/warning/fail info using the StepDriverTestInfo.fac LogFacility.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text on the tab to identify which tab to click.
              
     **********/
    public ComponentFunction clickTab(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "clickTab.textValue = null");
        return TabControlFunctions.clickTab(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Attempts to perform a standard Click on a particular Tab on the TabControl
               
                Attempts to perform a standard Click on a particular Tab on the TabControl.
                The routine will set the StepDriverTestInfo.statuscode and
                log any pass/warning/fail info using the StepDriverTestInfo.fac LogFacility.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text on the tab to identify which tab to click.
              
     **********/
    public void clickTab(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "clickTab.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "clickTab.textValue = null");
        table.add( TabControlFunctions.clickTab(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                Attempts to perform a Click on a Tab according to a partial match of its text value.
               
                Attempts to perform a Click on a Tab according to a partial match of its text value.
                The routine will set the StepDriverTestInfo.statuscode and
                log any pass/warning/fail info using the StepDriverTestInfo.fac LogFacility.
                Note: this keyword used to be UnverifiedClickTabContains, and it was renamed on 01/26/2011 due to conflict.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Partial case-sensitive text on the tab to identify which tab to click.
              
     **********/
    public ComponentFunction clickTabContains(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "clickTabContains.textValue = null");
        return TabControlFunctions.clickTabContains(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                Attempts to perform a Click on a Tab according to a partial match of its text value.
               
                Attempts to perform a Click on a Tab according to a partial match of its text value.
                The routine will set the StepDriverTestInfo.statuscode and
                log any pass/warning/fail info using the StepDriverTestInfo.fac LogFacility.
                Note: this keyword used to be UnverifiedClickTabContains, and it was renamed on 01/26/2011 due to conflict.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Partial case-sensitive text on the tab to identify which tab to click.
              
     **********/
    public void clickTabContains(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "clickTabContains.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "clickTabContains.textValue = null");
        table.add( TabControlFunctions.clickTabContains(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                 Attempts to perform a standard Click on a particular Tab on the TabControl
               
                Attempts to perform a standard Click on a particular Tab on the TabControl.
                The routine will set the StepDriverTestInfo.statuscode and
                log any pass/warning/fail info using the StepDriverTestInfo.fac LogFacility.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text on the tab to identify which tab to click.
              
     **********/
    public ComponentFunction makeSelection(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "makeSelection.textValue = null");
        return TabControlFunctions.makeSelection(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Attempts to perform a standard Click on a particular Tab on the TabControl
               
                Attempts to perform a standard Click on a particular Tab on the TabControl.
                The routine will set the StepDriverTestInfo.statuscode and
                log any pass/warning/fail info using the StepDriverTestInfo.fac LogFacility.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text on the tab to identify which tab to click.
              
     **********/
    public void makeSelection(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "makeSelection.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "makeSelection.textValue = null");
        table.add( TabControlFunctions.makeSelection(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                 Attempts to perform a standard SelectTab on a particular Tab on the TabControl
               
                Attempts to perform a standard Selection on a particular Tab on the TabControl.
                The routine will set the StepDriverTestInfo.statuscode and
                log any pass/warning/fail info using the StepDriverTestInfo.fac LogFacility.
                Note, this routine will call the CLICK function to try 
                default CLICK processing if it is not able to locate all 
                the component properties it needs for success.
                This command has been provided for times when it might 
                work and the other TabControl CLICK alternatives do not.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text on the tab to identify which tab to click.
              
     **********/
    public ComponentFunction selectTab(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "selectTab.textValue = null");
        return TabControlFunctions.selectTab(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Attempts to perform a standard SelectTab on a particular Tab on the TabControl
               
                Attempts to perform a standard Selection on a particular Tab on the TabControl.
                The routine will set the StepDriverTestInfo.statuscode and
                log any pass/warning/fail info using the StepDriverTestInfo.fac LogFacility.
                Note, this routine will call the CLICK function to try 
                default CLICK processing if it is not able to locate all 
                the component properties it needs for success.
                This command has been provided for times when it might 
                work and the other TabControl CLICK alternatives do not.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text on the tab to identify which tab to click.
              
     **********/
    public void selectTab(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectTab.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectTab.textValue = null");
        table.add( TabControlFunctions.selectTab(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                 Attempts to select a particular Tab by Index.
              
                Attempts to select a particular Tab by Index.
                The routine will set the StepDriverTestInfo.statuscode and
                log any pass/warning/fail info using the StepDriverTestInfo.fac LogFacility.
                
                For some engines, like Rational Robot, the user must know whether the indices of 
                the TabControl are 0-based or 1-based and use the raw index number.  
                
                
                For Rational Functional Tester we attempt to enforce that all indices are 
                1-based whenever possible.  Thus, the first tab would be specified as TabIndex=1 
                even if the control itself uses 0-based tab indices.
                
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param tabIndex  Optional:NO 
                 Index of the tab to click.
              
     **********/
    public ComponentFunction selectTabIndex(String tabIndex ) {

        if ( tabIndex == null ) throw new IllegalArgumentException ( "selectTabIndex.tabIndex = null");
        return TabControlFunctions.selectTabIndex(getWindow().getName(), getName(), tabIndex);
    }

    /*********** <pre> 
                 Attempts to select a particular Tab by Index.
              
                Attempts to select a particular Tab by Index.
                The routine will set the StepDriverTestInfo.statuscode and
                log any pass/warning/fail info using the StepDriverTestInfo.fac LogFacility.
                
                For some engines, like Rational Robot, the user must know whether the indices of 
                the TabControl are 0-based or 1-based and use the raw index number.  
                
                
                For Rational Functional Tester we attempt to enforce that all indices are 
                1-based whenever possible.  Thus, the first tab would be specified as TabIndex=1 
                even if the control itself uses 0-based tab indices.
                
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param tabIndex  Optional:NO 
                 Index of the tab to click.
              
     **********/
    public void selectTabIndex(StepTestTable table, String tabIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectTabIndex.table = null");

        if ( tabIndex == null ) throw new IllegalArgumentException ( "selectTabIndex.tabIndex = null");
        table.add( TabControlFunctions.selectTabIndex(getWindow().getName(), getName(), tabIndex));
    }

    /*********** <pre> 
                 Use UnverifiedClickTab instead (where available).
               
                Attempts to perform an unverified Click on a particular Tab on the TabControl.
                The routine will set the StepDriverTestInfo.statuscode and
                log any pass/warning/fail info using the StepDriverTestInfo.fac LogFacility.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text* on the tab to identify which tab to click.
              
     **********/
    public ComponentFunction unverifiedClick(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "unverifiedClick.textValue = null");
        return TabControlFunctions.unverifiedClick(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Use UnverifiedClickTab instead (where available).
               
                Attempts to perform an unverified Click on a particular Tab on the TabControl.
                The routine will set the StepDriverTestInfo.statuscode and
                log any pass/warning/fail info using the StepDriverTestInfo.fac LogFacility.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text* on the tab to identify which tab to click.
              
     **********/
    public void unverifiedClick(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "unverifiedClick.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "unverifiedClick.textValue = null");
        table.add( TabControlFunctions.unverifiedClick(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                 Attempts to perform an unverified Click on a particular Tab on the TabControl
               
                Attempts to perform an unverified Click on a particular Tab on the TabControl.
                The routine will set the StepDriverTestInfo.statuscode and
                log any pass/warning/fail info using the StepDriverTestInfo.fac LogFacility.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text* on the tab to identify which tab to click.
              
     **********/
    public ComponentFunction unverifiedClickTab(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "unverifiedClickTab.textValue = null");
        return TabControlFunctions.unverifiedClickTab(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Attempts to perform an unverified Click on a particular Tab on the TabControl
               
                Attempts to perform an unverified Click on a particular Tab on the TabControl.
                The routine will set the StepDriverTestInfo.statuscode and
                log any pass/warning/fail info using the StepDriverTestInfo.fac LogFacility.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text* on the tab to identify which tab to click.
              
     **********/
    public void unverifiedClickTab(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "unverifiedClickTab.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "unverifiedClickTab.textValue = null");
        table.add( TabControlFunctions.unverifiedClickTab(getWindow().getName(), getName(), textValue));
    }

}
