
/******************************************************************************
 * PopupMenu.java
 *
 * Copyright (C) SAS Institute, All rights reserved.
 * General Public License: https://www.gnu.org/licenses/gpl-3.0.en.html
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   PopupMenuFunctions.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaComponentModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe PopupMenuFunctions.xml XSLJavaComponentModel.xsl -o PopupMenu.java
 *
 ******************************************************************************/ 
package org.safs.model.components;

import org.safs.model.commands.PopupMenuFunctions;
import org.safs.model.ComponentFunction;
import org.safs.model.components.UIComponent;
import org.safs.model.StepTestTable;

public class PopupMenu extends GenericObject {

    /*****************
    Constructor 

    Create an instance of pseudo-component representing 
    a specific component in a specific window.
    
    @param window  Optional:NO 
           Specifies which Window this component is 'in'.
    @param compname Optional:NO 
           Specifies the AppMap name of the component in the Window.
    ****************/
    public PopupMenu(Window window, String compname) {

        super(window, compname);
    }

    /*****************
    Constructor 

    Create an instance of pseudo-component representing 
    a specific component in a specific window.
    
    This convenience routine will create the requisite Window component.
    
    @param winname  Optional:NO 
           Specifies the AppMap name of the window.
    @param compname Optional:NO 
           Specifies the AppMap name of the component in the Window.
    ****************/
    public PopupMenu(String winname, String compname) {

        this(new Window(winname), compname);
    }

    protected PopupMenu(String compname) {

        super(compname);
    }



    /*********** <pre> 
                Select a menuItem via its menuID in the currently active popup menu.
               
                Attempts to select a particular menuID in the currently 
                active popup menu.  This is generally used when the menuitem is a bitmap 
                or other item that does not have text.  This value can be retrieved from 
                the the menu by index or by manual lookup from a menu structure output 
                from MenuUtilities.
                
                The routine first verifies that the specified menuitem exists
                and exits with error if it does not.
                If it does exist then the selection proceeds.
                
                For RC and Win32 popups: The Window and Component references are not 
                used and can be anything.  They just cannot be blank.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param menuItemID  Optional:NO 
                The Windows menuID of the menuItem to select.
              
     **********/
    public ComponentFunction selectPopupMenuID(String menuItemID ) {

        if ( menuItemID == null ) throw new IllegalArgumentException ( "selectPopupMenuID.menuItemID = null");
        return PopupMenuFunctions.selectPopupMenuID(getWindow().getName(), getName(), menuItemID);
    }

    /*********** <pre> 
                Select a menuItem via its menuID in the currently active popup menu.
               
                Attempts to select a particular menuID in the currently 
                active popup menu.  This is generally used when the menuitem is a bitmap 
                or other item that does not have text.  This value can be retrieved from 
                the the menu by index or by manual lookup from a menu structure output 
                from MenuUtilities.
                
                The routine first verifies that the specified menuitem exists
                and exits with error if it does not.
                If it does exist then the selection proceeds.
                
                For RC and Win32 popups: The Window and Component references are not 
                used and can be anything.  They just cannot be blank.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param menuItemID  Optional:NO 
                The Windows menuID of the menuItem to select.
              
     **********/
    public void selectPopupMenuID(StepTestTable table, String menuItemID ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectPopupMenuID.table = null");

        if ( menuItemID == null ) throw new IllegalArgumentException ( "selectPopupMenuID.menuItemID = null");
        table.add( PopupMenuFunctions.selectPopupMenuID(getWindow().getName(), getName(), menuItemID));
    }

    /*********** <pre> 
                Select a menuItem via its text in the currently active popup menu.
               
                Attempts to select a particular text string menuitem in the currently 
                active popup menu.  The menuitem should be specified in the form 
                "Menu->Menu->MenuItem   CTRL+V" with the full text, spaces(if any), and 
                keyboard shortcut text (if any).  
                
                Ampersands preceding underlined characters are optional.
                The routine first verifies that the specified menuitem exists
                and exits with error if it does not.
                If it does exist then the selection proceeds using the MenuID retrieved
                from the found menuitem.
                
                For RC and Win32 popups: The Window and Component references are not 
                used and can be anything.  They just cannot be blank.
                
                For Java popups: Valid recognition information for the Java window and 
                "child" popup menu must be provided.
                
                Also refer to JavaMenuFunctions for support specific to Java menus and 
                popup menus.
                
                TC Note:Component can be the object who contains 'popup menu', or it
                can be the 'context menu' object.                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param menuItemText  Optional:NO 
                Menu->MenuItem hierarchy to the menuItem to select.
              
     **********/
    public ComponentFunction selectPopupMenuItem(String menuItemText ) {

        if ( menuItemText == null ) throw new IllegalArgumentException ( "selectPopupMenuItem.menuItemText = null");
        return PopupMenuFunctions.selectPopupMenuItem(getWindow().getName(), getName(), menuItemText);
    }

    /*********** <pre> 
                Select a menuItem via its text in the currently active popup menu.
               
                Attempts to select a particular text string menuitem in the currently 
                active popup menu.  The menuitem should be specified in the form 
                "Menu->Menu->MenuItem   CTRL+V" with the full text, spaces(if any), and 
                keyboard shortcut text (if any).  
                
                Ampersands preceding underlined characters are optional.
                The routine first verifies that the specified menuitem exists
                and exits with error if it does not.
                If it does exist then the selection proceeds using the MenuID retrieved
                from the found menuitem.
                
                For RC and Win32 popups: The Window and Component references are not 
                used and can be anything.  They just cannot be blank.
                
                For Java popups: Valid recognition information for the Java window and 
                "child" popup menu must be provided.
                
                Also refer to JavaMenuFunctions for support specific to Java menus and 
                popup menus.
                
                TC Note:Component can be the object who contains 'popup menu', or it
                can be the 'context menu' object.                 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param menuItemText  Optional:NO 
                Menu->MenuItem hierarchy to the menuItem to select.
              
     **********/
    public void selectPopupMenuItem(StepTestTable table, String menuItemText ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectPopupMenuItem.table = null");

        if ( menuItemText == null ) throw new IllegalArgumentException ( "selectPopupMenuItem.menuItemText = null");
        table.add( PopupMenuFunctions.selectPopupMenuItem(getWindow().getName(), getName(), menuItemText));
    }

    /*********** <pre> 
                Select a menuItem via its text in the currently active popup menu without verification.
               
                Attempts to select a particular text string menuitem in the currently 
                active popup menu. This routine performs no verification prior to or
                following the selection.  This may cause a Rational error if the Popup
                Menu or selected menu item is not available. 
                The menuitem should be specified in the form 
                "Menu->Menu->MenuItem   CTRL+V" with the full text, spaces(if any), and 
                keyboard shortcut text (if any).
                
                Ampersands preceding underlined characters are optional.
                
                
                For RC and Win32 popups: The Window and Component references are not 
                used and can be anything.  They just cannot be blank.
                
                TC Note:Component can be the object who contains 'popup menu', or it
                can be the 'context menu' object. 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param menuItemText  Optional:NO 
                Menu->MenuItem hierarchy to the menuItem to select.
              
     **********/
    public ComponentFunction selectUnverifiedPopupMenuItem(String menuItemText ) {

        if ( menuItemText == null ) throw new IllegalArgumentException ( "selectUnverifiedPopupMenuItem.menuItemText = null");
        return PopupMenuFunctions.selectUnverifiedPopupMenuItem(getWindow().getName(), getName(), menuItemText);
    }

    /*********** <pre> 
                Select a menuItem via its text in the currently active popup menu without verification.
               
                Attempts to select a particular text string menuitem in the currently 
                active popup menu. This routine performs no verification prior to or
                following the selection.  This may cause a Rational error if the Popup
                Menu or selected menu item is not available. 
                The menuitem should be specified in the form 
                "Menu->Menu->MenuItem   CTRL+V" with the full text, spaces(if any), and 
                keyboard shortcut text (if any).
                
                Ampersands preceding underlined characters are optional.
                
                
                For RC and Win32 popups: The Window and Component references are not 
                used and can be anything.  They just cannot be blank.
                
                TC Note:Component can be the object who contains 'popup menu', or it
                can be the 'context menu' object. 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param menuItemText  Optional:NO 
                Menu->MenuItem hierarchy to the menuItem to select.
              
     **********/
    public void selectUnverifiedPopupMenuItem(StepTestTable table, String menuItemText ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectUnverifiedPopupMenuItem.table = null");

        if ( menuItemText == null ) throw new IllegalArgumentException ( "selectUnverifiedPopupMenuItem.menuItemText = null");
        table.add( PopupMenuFunctions.selectUnverifiedPopupMenuItem(getWindow().getName(), getName(), menuItemText));
    }

    /*********** <pre> 
                Verify the complete status of the current popup menu with a benchmark file.
              
                Verify the complete status of the current popup menu with a benchmark file.
                Typically, benchmarks are stored in the Datapool\Bench directory.  
                In that event, only the filename.ext is needed.  There is currently 
                a limit of 32K allowed for this type of comparison.  
                The Window and Component objects are not validated and have no role.
                The Window and Component strings can be any text, but they cannot be blank.
                
                Due to the nature of the verification using a DOS file comparison, the popup 
                menu will no longer be present after the verification and must be reactivated 
                if additional popup menu activity is to occur.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param benchmarkFile  Optional:NO 
             The name.ext of the file used as the comparison benchmark.
              
     @param headerText  Optional:YES  DefaultVal: 
                Optional descriptive header line of text to match with the benchmark.
              
     @param actualFile  Optional:YES  DefaultVal: 
                The optional name.ext of the file used for the captured menu status.
              
     @param diffFile  Optional:YES  DefaultVal: 
                The optional name.ext of the file used to contain the differences found.
              
     **********/
    public ComponentFunction verifyPopupMenu(String benchmarkFile, String headerText, String actualFile, String diffFile ) {

        if ( benchmarkFile == null ) throw new IllegalArgumentException ( "verifyPopupMenu.benchmarkFile = null");
        return PopupMenuFunctions.verifyPopupMenu(getWindow().getName(), getName(), benchmarkFile, headerText, actualFile, diffFile);
    }

    /*********** <pre> 
                Verify the complete status of the current popup menu with a benchmark file.
              
                Verify the complete status of the current popup menu with a benchmark file.
                Typically, benchmarks are stored in the Datapool\Bench directory.  
                In that event, only the filename.ext is needed.  There is currently 
                a limit of 32K allowed for this type of comparison.  
                The Window and Component objects are not validated and have no role.
                The Window and Component strings can be any text, but they cannot be blank.
                
                Due to the nature of the verification using a DOS file comparison, the popup 
                menu will no longer be present after the verification and must be reactivated 
                if additional popup menu activity is to occur.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param benchmarkFile  Optional:NO 
             The name.ext of the file used as the comparison benchmark.
              
     @param headerText  Optional:YES  DefaultVal: 
                Optional descriptive header line of text to match with the benchmark.
              
     @param actualFile  Optional:YES  DefaultVal: 
                The optional name.ext of the file used for the captured menu status.
              
     @param diffFile  Optional:YES  DefaultVal: 
                The optional name.ext of the file used to contain the differences found.
              
     **********/
    public void verifyPopupMenu(StepTestTable table, String benchmarkFile, String headerText, String actualFile, String diffFile ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyPopupMenu.table = null");

        if ( benchmarkFile == null ) throw new IllegalArgumentException ( "verifyPopupMenu.benchmarkFile = null");
        table.add( PopupMenuFunctions.verifyPopupMenu(getWindow().getName(), getName(), benchmarkFile, headerText, actualFile, diffFile));
    }

    /*********** <pre> 
                Verify the complete status of the current popup menu with a benchmark file.
              
                Verify the complete status of the current popup menu with a benchmark file.
                Typically, benchmarks are stored in the Datapool\Bench directory.  
                In that event, only the filename.ext is needed.  There is currently 
                a limit of 32K allowed for this type of comparison.  
                The Window and Component objects are not validated and have no role.
                The Window and Component strings can be any text, but they cannot be blank.
                
                Due to the nature of the verification using a DOS file comparison, the popup 
                menu will no longer be present after the verification and must be reactivated 
                if additional popup menu activity is to occur.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         benchmarkFile -- Optional:NO 
             The name.ext of the file used as the comparison benchmark.
              <BR/>         headerText -- Optional:YES  DefaultVal: 
                Optional descriptive header line of text to match with the benchmark.
              <BR/>         actualFile -- Optional:YES  DefaultVal: 
                The optional name.ext of the file used for the captured menu status.
              <BR/>         diffFile -- Optional:YES  DefaultVal: 
                The optional name.ext of the file used to contain the differences found.
              
    </UL>

     **********/
    public ComponentFunction verifyPopupMenu(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyPopupMenu.parameters = null");
        return PopupMenuFunctions.verifyPopupMenu(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                Verify the complete status of the current popup menu with a benchmark file.
              
                Verify the complete status of the current popup menu with a benchmark file.
                Typically, benchmarks are stored in the Datapool\Bench directory.  
                In that event, only the filename.ext is needed.  There is currently 
                a limit of 32K allowed for this type of comparison.  
                The Window and Component objects are not validated and have no role.
                The Window and Component strings can be any text, but they cannot be blank.
                
                Due to the nature of the verification using a DOS file comparison, the popup 
                menu will no longer be present after the verification and must be reactivated 
                if additional popup menu activity is to occur.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         benchmarkFile -- Optional:NO 
             The name.ext of the file used as the comparison benchmark.
              <BR/>         headerText -- Optional:YES  DefaultVal: 
                Optional descriptive header line of text to match with the benchmark.
              <BR/>         actualFile -- Optional:YES  DefaultVal: 
                The optional name.ext of the file used for the captured menu status.
              <BR/>         diffFile -- Optional:YES  DefaultVal: 
                The optional name.ext of the file used to contain the differences found.
              
    </UL>

     **********/
    public void verifyPopupMenu(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyPopupMenu.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyPopupMenu.parameters = null");
        table.add( PopupMenuFunctions.verifyPopupMenu(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Verify the state of a menuItem via its menuID in the currently active popup menu.
               
                Verify the state of a particular menuID in the currently 
                active popup menu.  This is generally used when the menuitem is a bitmap 
                or other item that does not have text.  This menuID can be retrieved from 
                the the menu by index or by manual lookup from a menu structure output 
                from MenuUtilities.
                
                The routine first verifies that the specified menuitem exists
                and exits with error if it does not.
                
                For RC and Win32 popups: The Window and Component references are not 
                used and can be anything.  They just cannot be blank.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param menuItemID  Optional:NO 
                The Windows menuID of the menuItem to verify.
              
     @param stateInfo  Optional:NO 
                Expected status string (or part thereof) to verify.  
              
     **********/
    public ComponentFunction verifyPopupMenuID(String menuItemID, String stateInfo ) {

        if ( menuItemID == null ) throw new IllegalArgumentException ( "verifyPopupMenuID.menuItemID = null");
        if ( stateInfo == null ) throw new IllegalArgumentException ( "verifyPopupMenuID.stateInfo = null");
        return PopupMenuFunctions.verifyPopupMenuID(getWindow().getName(), getName(), menuItemID, stateInfo);
    }

    /*********** <pre> 
                Verify the state of a menuItem via its menuID in the currently active popup menu.
               
                Verify the state of a particular menuID in the currently 
                active popup menu.  This is generally used when the menuitem is a bitmap 
                or other item that does not have text.  This menuID can be retrieved from 
                the the menu by index or by manual lookup from a menu structure output 
                from MenuUtilities.
                
                The routine first verifies that the specified menuitem exists
                and exits with error if it does not.
                
                For RC and Win32 popups: The Window and Component references are not 
                used and can be anything.  They just cannot be blank.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param menuItemID  Optional:NO 
                The Windows menuID of the menuItem to verify.
              
     @param stateInfo  Optional:NO 
                Expected status string (or part thereof) to verify.  
              
     **********/
    public void verifyPopupMenuID(StepTestTable table, String menuItemID, String stateInfo ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyPopupMenuID.table = null");

        if ( menuItemID == null ) throw new IllegalArgumentException ( "verifyPopupMenuID.menuItemID = null");
        if ( stateInfo == null ) throw new IllegalArgumentException ( "verifyPopupMenuID.stateInfo = null");
        table.add( PopupMenuFunctions.verifyPopupMenuID(getWindow().getName(), getName(), menuItemID, stateInfo));
    }

    /*********** <pre> 
                Verify the state of a menuItem via its menuID in the currently active popup menu.
               
                Verify the state of a particular menuID in the currently 
                active popup menu.  This is generally used when the menuitem is a bitmap 
                or other item that does not have text.  This menuID can be retrieved from 
                the the menu by index or by manual lookup from a menu structure output 
                from MenuUtilities.
                
                The routine first verifies that the specified menuitem exists
                and exits with error if it does not.
                
                For RC and Win32 popups: The Window and Component references are not 
                used and can be anything.  They just cannot be blank.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         menuItemID -- Optional:NO 
                The Windows menuID of the menuItem to verify.
              <BR/>         stateInfo -- Optional:NO 
                Expected status string (or part thereof) to verify.  
              
    </UL>

     **********/
    public ComponentFunction verifyPopupMenuID(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyPopupMenuID.parameters = null");
        return PopupMenuFunctions.verifyPopupMenuID(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                Verify the state of a menuItem via its menuID in the currently active popup menu.
               
                Verify the state of a particular menuID in the currently 
                active popup menu.  This is generally used when the menuitem is a bitmap 
                or other item that does not have text.  This menuID can be retrieved from 
                the the menu by index or by manual lookup from a menu structure output 
                from MenuUtilities.
                
                The routine first verifies that the specified menuitem exists
                and exits with error if it does not.
                
                For RC and Win32 popups: The Window and Component references are not 
                used and can be anything.  They just cannot be blank.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         menuItemID -- Optional:NO 
                The Windows menuID of the menuItem to verify.
              <BR/>         stateInfo -- Optional:NO 
                Expected status string (or part thereof) to verify.  
              
    </UL>

     **********/
    public void verifyPopupMenuID(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyPopupMenuID.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyPopupMenuID.parameters = null");
        table.add( PopupMenuFunctions.verifyPopupMenuID(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Verify the state of a menuItem found via its text in the currently active popup menu.
               
                The menuitem should be specified in the form 
                "Menu->Menu->MenuItem   CTRL+V" with the full text, spaces(if any), and 
                keyboard shortcut text (if any).  
                
                Ampersands preceding underlined characters are optional.
                The routine first verifies that the specified menuitem exists
                and exits with error if it does not.
                
                For RC and Win32 popups: The Window and Component references are not 
                used and can be anything.  They just cannot be blank.
                
                For Java popups: Valid recognition information for the Java window and 
                "child" popup menu must be provided.
                
                Also refer to JavaMenuFunctions for support specific to Java menus and 
                popup menus.                
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param menuItemText  Optional:NO 
                Menu->MenuItem hierarchy to the menuItem to verify.
              
     @param stateInfo  Optional:NO 
                Expected status string (or part thereof) to verify.  
              
     **********/
    public ComponentFunction verifyPopupMenuItem(String menuItemText, String stateInfo ) {

        if ( menuItemText == null ) throw new IllegalArgumentException ( "verifyPopupMenuItem.menuItemText = null");
        if ( stateInfo == null ) throw new IllegalArgumentException ( "verifyPopupMenuItem.stateInfo = null");
        return PopupMenuFunctions.verifyPopupMenuItem(getWindow().getName(), getName(), menuItemText, stateInfo);
    }

    /*********** <pre> 
                Verify the state of a menuItem found via its text in the currently active popup menu.
               
                The menuitem should be specified in the form 
                "Menu->Menu->MenuItem   CTRL+V" with the full text, spaces(if any), and 
                keyboard shortcut text (if any).  
                
                Ampersands preceding underlined characters are optional.
                The routine first verifies that the specified menuitem exists
                and exits with error if it does not.
                
                For RC and Win32 popups: The Window and Component references are not 
                used and can be anything.  They just cannot be blank.
                
                For Java popups: Valid recognition information for the Java window and 
                "child" popup menu must be provided.
                
                Also refer to JavaMenuFunctions for support specific to Java menus and 
                popup menus.                
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param menuItemText  Optional:NO 
                Menu->MenuItem hierarchy to the menuItem to verify.
              
     @param stateInfo  Optional:NO 
                Expected status string (or part thereof) to verify.  
              
     **********/
    public void verifyPopupMenuItem(StepTestTable table, String menuItemText, String stateInfo ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyPopupMenuItem.table = null");

        if ( menuItemText == null ) throw new IllegalArgumentException ( "verifyPopupMenuItem.menuItemText = null");
        if ( stateInfo == null ) throw new IllegalArgumentException ( "verifyPopupMenuItem.stateInfo = null");
        table.add( PopupMenuFunctions.verifyPopupMenuItem(getWindow().getName(), getName(), menuItemText, stateInfo));
    }

    /*********** <pre> 
                Verify the state of a menuItem found via its text in the currently active popup menu.
               
                The menuitem should be specified in the form 
                "Menu->Menu->MenuItem   CTRL+V" with the full text, spaces(if any), and 
                keyboard shortcut text (if any).  
                
                Ampersands preceding underlined characters are optional.
                The routine first verifies that the specified menuitem exists
                and exits with error if it does not.
                
                For RC and Win32 popups: The Window and Component references are not 
                used and can be anything.  They just cannot be blank.
                
                For Java popups: Valid recognition information for the Java window and 
                "child" popup menu must be provided.
                
                Also refer to JavaMenuFunctions for support specific to Java menus and 
                popup menus.                
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         menuItemText -- Optional:NO 
                Menu->MenuItem hierarchy to the menuItem to verify.
              <BR/>         stateInfo -- Optional:NO 
                Expected status string (or part thereof) to verify.  
              
    </UL>

     **********/
    public ComponentFunction verifyPopupMenuItem(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyPopupMenuItem.parameters = null");
        return PopupMenuFunctions.verifyPopupMenuItem(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                Verify the state of a menuItem found via its text in the currently active popup menu.
               
                The menuitem should be specified in the form 
                "Menu->Menu->MenuItem   CTRL+V" with the full text, spaces(if any), and 
                keyboard shortcut text (if any).  
                
                Ampersands preceding underlined characters are optional.
                The routine first verifies that the specified menuitem exists
                and exits with error if it does not.
                
                For RC and Win32 popups: The Window and Component references are not 
                used and can be anything.  They just cannot be blank.
                
                For Java popups: Valid recognition information for the Java window and 
                "child" popup menu must be provided.
                
                Also refer to JavaMenuFunctions for support specific to Java menus and 
                popup menus.                
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         menuItemText -- Optional:NO 
                Menu->MenuItem hierarchy to the menuItem to verify.
              <BR/>         stateInfo -- Optional:NO 
                Expected status string (or part thereof) to verify.  
              
    </UL>

     **********/
    public void verifyPopupMenuItem(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyPopupMenuItem.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyPopupMenuItem.parameters = null");
        table.add( PopupMenuFunctions.verifyPopupMenuItem(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Verify if a menuItem contains a substring
               
                Verify if a menuItem contains a substring
                
                For Java popups: Valid recognition information for the Java window and 
                "child" popup menu must be provided.
                
                Also refer to JavaMenuFunctions for support specific to Java menus and 
                popup menus.                
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param menuItemText  Optional:NO 
                Menu->MenuItem hierarchy substring to the menuItem
                to search for.
              
     **********/
    public ComponentFunction verifyPopupMenuPartialMatch(String menuItemText ) {

        if ( menuItemText == null ) throw new IllegalArgumentException ( "verifyPopupMenuPartialMatch.menuItemText = null");
        return PopupMenuFunctions.verifyPopupMenuPartialMatch(getWindow().getName(), getName(), menuItemText);
    }

    /*********** <pre> 
                Verify if a menuItem contains a substring
               
                Verify if a menuItem contains a substring
                
                For Java popups: Valid recognition information for the Java window and 
                "child" popup menu must be provided.
                
                Also refer to JavaMenuFunctions for support specific to Java menus and 
                popup menus.                
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param menuItemText  Optional:NO 
                Menu->MenuItem hierarchy substring to the menuItem
                to search for.
              
     **********/
    public void verifyPopupMenuPartialMatch(StepTestTable table, String menuItemText ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyPopupMenuPartialMatch.table = null");

        if ( menuItemText == null ) throw new IllegalArgumentException ( "verifyPopupMenuPartialMatch.menuItemText = null");
        table.add( PopupMenuFunctions.verifyPopupMenuPartialMatch(getWindow().getName(), getName(), menuItemText));
    }

}
