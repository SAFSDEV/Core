
/******************************************************************************
 * ListView.java
 *
 * Copyright (c) by SAS Institute Inc., Cary, NC 27513
 * General Public License: http://www.opensource.org/licenses/gpl-license.php
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   ListViewFunctions.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaComponentModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe ListViewFunctions.xml XSLJavaComponentModel.xsl -o ListView.java
 *
 ******************************************************************************/ 
package org.safs.model.components;

import org.safs.model.commands.ListViewFunctions;
import org.safs.model.ComponentFunction;
import org.safs.model.components.UIComponent;
import org.safs.model.StepTestTable;

public class ListView extends GenericObject {

    /*****************
    Constructor 

    Create an instance of pseudo-component representing 
    a specific component in a specific window.
    
    @param window  Optional:NO 
           Specifies which Window this component is 'in'.
    @param compname Optional:NO 
           Specifies the AppMap name of the component in the Window.
    ****************/
    public ListView(Window window, String compname) {

        super(window, compname);
    }

    /*****************
    Constructor 

    Create an instance of pseudo-component representing 
    a specific component in a specific window.
    
    This convenience routine will create the requisite Window component.
    
    @param winname  Optional:NO 
           Specifies the AppMap name of the window.
    @param compname Optional:NO 
           Specifies the AppMap name of the component in the Window.
    ****************/
    public ListView(String winname, String compname) {

        this(new Window(winname), compname);
    }

    protected ListView(String compname) {

        super(compname);
    }



    /*********** <pre> 
                Activate (double-click) an item based on it's index in the list
               
                It is important to note that some ListViews index their values
                differently.  For example, you may need to select an item by 
                text by using a property whose starting index is 1.  Yet, 
                if you request to seek an item strictly by index, the starting 
                index is 0.  So, the test developer may need to evaluate their 
                ListView object for these differences.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param index  Optional:NO 
                 Index of the text item to select
              
     **********/
    public ComponentFunction activateIndex(String index ) {

        if ( index == null ) throw new IllegalArgumentException ( "activateIndex.index = null");
        return ListViewFunctions.activateIndex(getWindow().getName(), getName(), index);
    }

    /*********** <pre> 
                Activate (double-click) an item based on it's index in the list
               
                It is important to note that some ListViews index their values
                differently.  For example, you may need to select an item by 
                text by using a property whose starting index is 1.  Yet, 
                if you request to seek an item strictly by index, the starting 
                index is 0.  So, the test developer may need to evaluate their 
                ListView object for these differences.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param index  Optional:NO 
                 Index of the text item to select
              
     **********/
    public void activateIndex(StepTestTable table, String index ) {

        if ( table == null ) throw new IllegalArgumentException ( "activateIndex.table = null");

        if ( index == null ) throw new IllegalArgumentException ( "activateIndex.index = null");
        table.add( ListViewFunctions.activateIndex(getWindow().getName(), getName(), index));
    }

    /*********** <pre> 
                Routine to double click an item according to its index in the list.
               
                It is important to note that some ListViews index their values
                differently.  For example, you may need to select an item by 
                text by using a property whose starting index is 1.  Yet, 
                if you request to seek an item strictly by index, the starting 
                index is 0.  So, the test developer may need to evaluate their 
                ListView object for these differences.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param indexValue  Optional:NO 
                 Index of item to activate.
              
     **********/
    public ComponentFunction activateIndexItem(String indexValue ) {

        if ( indexValue == null ) throw new IllegalArgumentException ( "activateIndexItem.indexValue = null");
        return ListViewFunctions.activateIndexItem(getWindow().getName(), getName(), indexValue);
    }

    /*********** <pre> 
                Routine to double click an item according to its index in the list.
               
                It is important to note that some ListViews index their values
                differently.  For example, you may need to select an item by 
                text by using a property whose starting index is 1.  Yet, 
                if you request to seek an item strictly by index, the starting 
                index is 0.  So, the test developer may need to evaluate their 
                ListView object for these differences.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param indexValue  Optional:NO 
                 Index of item to activate.
              
     **********/
    public void activateIndexItem(StepTestTable table, String indexValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "activateIndexItem.table = null");

        if ( indexValue == null ) throw new IllegalArgumentException ( "activateIndexItem.indexValue = null");
        table.add( ListViewFunctions.activateIndexItem(getWindow().getName(), getName(), indexValue));
    }

    /*********** <pre> 
                Routine to double click an item according to a partial text match.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param partialTextValue  Optional:NO 
                 Case-sensitive substring of text item to select
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public ComponentFunction activatePartialMatch(String partialTextValue, String matchIndex ) {

        if ( partialTextValue == null ) throw new IllegalArgumentException ( "activatePartialMatch.partialTextValue = null");
        return ListViewFunctions.activatePartialMatch(getWindow().getName(), getName(), partialTextValue, matchIndex);
    }

    /*********** <pre> 
                Routine to double click an item according to a partial text match.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param partialTextValue  Optional:NO 
                 Case-sensitive substring of text item to select
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public void activatePartialMatch(StepTestTable table, String partialTextValue, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "activatePartialMatch.table = null");

        if ( partialTextValue == null ) throw new IllegalArgumentException ( "activatePartialMatch.partialTextValue = null");
        table.add( ListViewFunctions.activatePartialMatch(getWindow().getName(), getName(), partialTextValue, matchIndex));
    }

    /*********** <pre> 
                Routine to double click an item according to a partial text match.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         partialTextValue -- Optional:NO 
                 Case-sensitive substring of text item to select
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public ComponentFunction activatePartialMatch(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "activatePartialMatch.parameters = null");
        return ListViewFunctions.activatePartialMatch(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                Routine to double click an item according to a partial text match.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         partialTextValue -- Optional:NO 
                 Case-sensitive substring of text item to select
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public void activatePartialMatch(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "activatePartialMatch.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "activatePartialMatch.parameters = null");
        table.add( ListViewFunctions.activatePartialMatch(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Routine to double click an item according to its text value.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param selectTextValue  Optional:NO 
                 Case-sensitive text of node to select
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public ComponentFunction activateTextItem(String selectTextValue, String matchIndex ) {

        if ( selectTextValue == null ) throw new IllegalArgumentException ( "activateTextItem.selectTextValue = null");
        return ListViewFunctions.activateTextItem(getWindow().getName(), getName(), selectTextValue, matchIndex);
    }

    /*********** <pre> 
                Routine to double click an item according to its text value.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param selectTextValue  Optional:NO 
                 Case-sensitive text of node to select
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public void activateTextItem(StepTestTable table, String selectTextValue, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "activateTextItem.table = null");

        if ( selectTextValue == null ) throw new IllegalArgumentException ( "activateTextItem.selectTextValue = null");
        table.add( ListViewFunctions.activateTextItem(getWindow().getName(), getName(), selectTextValue, matchIndex));
    }

    /*********** <pre> 
                Routine to double click an item according to its text value.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         selectTextValue -- Optional:NO 
                 Case-sensitive text of node to select
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public ComponentFunction activateTextItem(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "activateTextItem.parameters = null");
        return ListViewFunctions.activateTextItem(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                Routine to double click an item according to its text value.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         selectTextValue -- Optional:NO 
                 Case-sensitive text of node to select
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public void activateTextItem(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "activateTextItem.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "activateTextItem.parameters = null");
        table.add( ListViewFunctions.activateTextItem(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Double click a text item at specific Coords.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param selectTextValue  Optional:NO 
                 Case-sensitive text of node to select
              
     @param coords  Optional:NO 
                The explicit coordinates ("x,y") or an App Map reference to 
                pre-defined coordinates.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public ComponentFunction activateTextItemCoords(String selectTextValue, String coords, String matchIndex ) {

        if ( coords == null ) throw new IllegalArgumentException ( "activateTextItemCoords.coords = null");
        if ( selectTextValue == null ) throw new IllegalArgumentException ( "activateTextItemCoords.selectTextValue = null");
        return ListViewFunctions.activateTextItemCoords(getWindow().getName(), getName(), selectTextValue, coords, matchIndex);
    }

    /*********** <pre> 
                Double click a text item at specific Coords.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param selectTextValue  Optional:NO 
                 Case-sensitive text of node to select
              
     @param coords  Optional:NO 
                The explicit coordinates ("x,y") or an App Map reference to 
                pre-defined coordinates.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public void activateTextItemCoords(StepTestTable table, String selectTextValue, String coords, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "activateTextItemCoords.table = null");

        if ( coords == null ) throw new IllegalArgumentException ( "activateTextItemCoords.coords = null");
        if ( selectTextValue == null ) throw new IllegalArgumentException ( "activateTextItemCoords.selectTextValue = null");
        table.add( ListViewFunctions.activateTextItemCoords(getWindow().getName(), getName(), selectTextValue, coords, matchIndex));
    }

    /*********** <pre> 
                Double click a text item at specific Coords.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         selectTextValue -- Optional:NO 
                 Case-sensitive text of node to select
              <BR/>         coords -- Optional:NO 
                The explicit coordinates ("x,y") or an App Map reference to 
                pre-defined coordinates.
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public ComponentFunction activateTextItemCoords(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "activateTextItemCoords.parameters = null");
        return ListViewFunctions.activateTextItemCoords(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                Double click a text item at specific Coords.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         selectTextValue -- Optional:NO 
                 Case-sensitive text of node to select
              <BR/>         coords -- Optional:NO 
                The explicit coordinates ("x,y") or an App Map reference to 
                pre-defined coordinates.
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public void activateTextItemCoords(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "activateTextItemCoords.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "activateTextItemCoords.parameters = null");
        table.add( ListViewFunctions.activateTextItemCoords(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Routine to double click an unverifiable item according to its text value.
              
                An unverifiable item is one whose READ value is not the same as its SET value.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param selectTextValue  Optional:NO 
                 Case-sensitive text of node to select
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public ComponentFunction activateUnverifiedTextItem(String selectTextValue, String matchIndex ) {

        if ( selectTextValue == null ) throw new IllegalArgumentException ( "activateUnverifiedTextItem.selectTextValue = null");
        return ListViewFunctions.activateUnverifiedTextItem(getWindow().getName(), getName(), selectTextValue, matchIndex);
    }

    /*********** <pre> 
                Routine to double click an unverifiable item according to its text value.
              
                An unverifiable item is one whose READ value is not the same as its SET value.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param selectTextValue  Optional:NO 
                 Case-sensitive text of node to select
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public void activateUnverifiedTextItem(StepTestTable table, String selectTextValue, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "activateUnverifiedTextItem.table = null");

        if ( selectTextValue == null ) throw new IllegalArgumentException ( "activateUnverifiedTextItem.selectTextValue = null");
        table.add( ListViewFunctions.activateUnverifiedTextItem(getWindow().getName(), getName(), selectTextValue, matchIndex));
    }

    /*********** <pre> 
                Routine to double click an unverifiable item according to its text value.
              
                An unverifiable item is one whose READ value is not the same as its SET value.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         selectTextValue -- Optional:NO 
                 Case-sensitive text of node to select
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public ComponentFunction activateUnverifiedTextItem(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "activateUnverifiedTextItem.parameters = null");
        return ListViewFunctions.activateUnverifiedTextItem(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                Routine to double click an unverifiable item according to its text value.
              
                An unverifiable item is one whose READ value is not the same as its SET value.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         selectTextValue -- Optional:NO 
                 Case-sensitive text of node to select
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public void activateUnverifiedTextItem(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "activateUnverifiedTextItem.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "activateUnverifiedTextItem.parameters = null");
        table.add( ListViewFunctions.activateUnverifiedTextItem(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Double click an unverifiable text item at specific Coords.
              
                An unverifiable item is one whose READ value is not the same as its SET value.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param selectTextValue  Optional:NO 
                 Case-sensitive text of node to select
              
     @param coords  Optional:NO 
                The explicit coordinates ("x,y") or an App Map reference to 
                pre-defined coordinates.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public ComponentFunction activateUnverifiedTextItemCoords(String selectTextValue, String coords, String matchIndex ) {

        if ( coords == null ) throw new IllegalArgumentException ( "activateUnverifiedTextItemCoords.coords = null");
        if ( selectTextValue == null ) throw new IllegalArgumentException ( "activateUnverifiedTextItemCoords.selectTextValue = null");
        return ListViewFunctions.activateUnverifiedTextItemCoords(getWindow().getName(), getName(), selectTextValue, coords, matchIndex);
    }

    /*********** <pre> 
                Double click an unverifiable text item at specific Coords.
              
                An unverifiable item is one whose READ value is not the same as its SET value.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param selectTextValue  Optional:NO 
                 Case-sensitive text of node to select
              
     @param coords  Optional:NO 
                The explicit coordinates ("x,y") or an App Map reference to 
                pre-defined coordinates.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public void activateUnverifiedTextItemCoords(StepTestTable table, String selectTextValue, String coords, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "activateUnverifiedTextItemCoords.table = null");

        if ( coords == null ) throw new IllegalArgumentException ( "activateUnverifiedTextItemCoords.coords = null");
        if ( selectTextValue == null ) throw new IllegalArgumentException ( "activateUnverifiedTextItemCoords.selectTextValue = null");
        table.add( ListViewFunctions.activateUnverifiedTextItemCoords(getWindow().getName(), getName(), selectTextValue, coords, matchIndex));
    }

    /*********** <pre> 
                Double click an unverifiable text item at specific Coords.
              
                An unverifiable item is one whose READ value is not the same as its SET value.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         selectTextValue -- Optional:NO 
                 Case-sensitive text of node to select
              <BR/>         coords -- Optional:NO 
                The explicit coordinates ("x,y") or an App Map reference to 
                pre-defined coordinates.
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public ComponentFunction activateUnverifiedTextItemCoords(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "activateUnverifiedTextItemCoords.parameters = null");
        return ListViewFunctions.activateUnverifiedTextItemCoords(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                Double click an unverifiable text item at specific Coords.
              
                An unverifiable item is one whose READ value is not the same as its SET value.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         selectTextValue -- Optional:NO 
                 Case-sensitive text of node to select
              <BR/>         coords -- Optional:NO 
                The explicit coordinates ("x,y") or an App Map reference to 
                pre-defined coordinates.
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public void activateUnverifiedTextItemCoords(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "activateUnverifiedTextItemCoords.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "activateUnverifiedTextItemCoords.parameters = null");
        table.add( ListViewFunctions.activateUnverifiedTextItemCoords(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Assigns the value of a cell in a listview to a variable.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param varibale  Optional:NO 
                 Name of variable to assign value
              
     @param rowCoord  Optional:NO 
                The coordinate of the row in the listview that you want to capture the value.
              
     @param colCoord  Optional:NO 
                The coordinate of the column in the listview that you want to capture the value.
              
     **********/
    public ComponentFunction assignCellValue(String varibale, String rowCoord, String colCoord ) {

        if ( colCoord == null ) throw new IllegalArgumentException ( "assignCellValue.colCoord = null");
        if ( rowCoord == null ) throw new IllegalArgumentException ( "assignCellValue.rowCoord = null");
        if ( varibale == null ) throw new IllegalArgumentException ( "assignCellValue.varibale = null");
        return ListViewFunctions.assignCellValue(getWindow().getName(), getName(), varibale, rowCoord, colCoord);
    }

    /*********** <pre> 
                Assigns the value of a cell in a listview to a variable.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param varibale  Optional:NO 
                 Name of variable to assign value
              
     @param rowCoord  Optional:NO 
                The coordinate of the row in the listview that you want to capture the value.
              
     @param colCoord  Optional:NO 
                The coordinate of the column in the listview that you want to capture the value.
              
     **********/
    public void assignCellValue(StepTestTable table, String varibale, String rowCoord, String colCoord ) {

        if ( table == null ) throw new IllegalArgumentException ( "assignCellValue.table = null");

        if ( colCoord == null ) throw new IllegalArgumentException ( "assignCellValue.colCoord = null");
        if ( rowCoord == null ) throw new IllegalArgumentException ( "assignCellValue.rowCoord = null");
        if ( varibale == null ) throw new IllegalArgumentException ( "assignCellValue.varibale = null");
        table.add( ListViewFunctions.assignCellValue(getWindow().getName(), getName(), varibale, rowCoord, colCoord));
    }

    /*********** <pre> 
                Assigns the value of a cell in a listview to a variable.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         varibale -- Optional:NO 
                 Name of variable to assign value
              <BR/>         rowCoord -- Optional:NO 
                The coordinate of the row in the listview that you want to capture the value.
              <BR/>         colCoord -- Optional:NO 
                The coordinate of the column in the listview that you want to capture the value.
              
    </UL>

     **********/
    public ComponentFunction assignCellValue(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "assignCellValue.parameters = null");
        return ListViewFunctions.assignCellValue(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                Assigns the value of a cell in a listview to a variable.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         varibale -- Optional:NO 
                 Name of variable to assign value
              <BR/>         rowCoord -- Optional:NO 
                The coordinate of the row in the listview that you want to capture the value.
              <BR/>         colCoord -- Optional:NO 
                The coordinate of the column in the listview that you want to capture the value.
              
    </UL>

     **********/
    public void assignCellValue(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "assignCellValue.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "assignCellValue.parameters = null");
        table.add( ListViewFunctions.assignCellValue(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre>
                Capture Items To a File specified (if not abs, then to test dir)
               
                Capture Items To a File specified (if not abs, then to test dir)
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Google Android</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param fileName  Optional:NO 
                 File name (if not absolute, then to test dir)
              
     @param fileEncoding  Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
     **********/
    public ComponentFunction captureItemsToFile(String fileName, String fileEncoding ) {

        if ( fileName == null ) throw new IllegalArgumentException ( "captureItemsToFile.fileName = null");
        return ListViewFunctions.captureItemsToFile(getWindow().getName(), getName(), fileName, fileEncoding);
    }

    /*********** <pre>
                Capture Items To a File specified (if not abs, then to test dir)
               
                Capture Items To a File specified (if not abs, then to test dir)
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Google Android</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param fileName  Optional:NO 
                 File name (if not absolute, then to test dir)
              
     @param fileEncoding  Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
     **********/
    public void captureItemsToFile(StepTestTable table, String fileName, String fileEncoding ) {

        if ( table == null ) throw new IllegalArgumentException ( "captureItemsToFile.table = null");

        if ( fileName == null ) throw new IllegalArgumentException ( "captureItemsToFile.fileName = null");
        table.add( ListViewFunctions.captureItemsToFile(getWindow().getName(), getName(), fileName, fileEncoding));
    }

    /*********** <pre>
                Capture Items To a File specified (if not abs, then to test dir)
               
                Capture Items To a File specified (if not abs, then to test dir)
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Google Android</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         fileName -- Optional:NO 
                 File name (if not absolute, then to test dir)
              <BR/>         fileEncoding -- Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
    </UL>

     **********/
    public ComponentFunction captureItemsToFile(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "captureItemsToFile.parameters = null");
        return ListViewFunctions.captureItemsToFile(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre>
                Capture Items To a File specified (if not abs, then to test dir)
               
                Capture Items To a File specified (if not abs, then to test dir)
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Google Android</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         fileName -- Optional:NO 
                 File name (if not absolute, then to test dir)
              <BR/>         fileEncoding -- Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
    </UL>

     **********/
    public void captureItemsToFile(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "captureItemsToFile.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "captureItemsToFile.parameters = null");
        table.add( ListViewFunctions.captureItemsToFile(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Same as (Alias for) ListView ActivateIndexItem
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param index  Optional:NO 
                 See ListView ActivateIndexItem
              
     **********/
    public ComponentFunction clickIndex(String index ) {

        if ( index == null ) throw new IllegalArgumentException ( "clickIndex.index = null");
        return ListViewFunctions.clickIndex(getWindow().getName(), getName(), index);
    }

    /*********** <pre> 
                Same as (Alias for) ListView ActivateIndexItem
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param index  Optional:NO 
                 See ListView ActivateIndexItem
              
     **********/
    public void clickIndex(StepTestTable table, String index ) {

        if ( table == null ) throw new IllegalArgumentException ( "clickIndex.table = null");

        if ( index == null ) throw new IllegalArgumentException ( "clickIndex.index = null");
        table.add( ListViewFunctions.clickIndex(getWindow().getName(), getName(), index));
    }

    /*********** <pre> 
                Same as (Alias for) ListView ActivateIndexItem
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param index  Optional:NO 
                 See ListView ActivateIndexItem
              
     **********/
    public ComponentFunction clickIndexItem(String index ) {

        if ( index == null ) throw new IllegalArgumentException ( "clickIndexItem.index = null");
        return ListViewFunctions.clickIndexItem(getWindow().getName(), getName(), index);
    }

    /*********** <pre> 
                Same as (Alias for) ListView ActivateIndexItem
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param index  Optional:NO 
                 See ListView ActivateIndexItem
              
     **********/
    public void clickIndexItem(StepTestTable table, String index ) {

        if ( table == null ) throw new IllegalArgumentException ( "clickIndexItem.table = null");

        if ( index == null ) throw new IllegalArgumentException ( "clickIndexItem.index = null");
        table.add( ListViewFunctions.clickIndexItem(getWindow().getName(), getName(), index));
    }

    /*********** <pre> 
                Routine to Shift+Click and Verify a selection according to its text value.
               
                This extends the current selection to include the specified selection and all other items inbetween.
                NOTE: This may not work in all environments (Java, Web, etc...)
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>AutomatedQA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of node to select and verify.
              
     **********/
    public ComponentFunction extendSelectionToTextItem(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "extendSelectionToTextItem.textValue = null");
        return ListViewFunctions.extendSelectionToTextItem(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                Routine to Shift+Click and Verify a selection according to its text value.
               
                This extends the current selection to include the specified selection and all other items inbetween.
                NOTE: This may not work in all environments (Java, Web, etc...)
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>AutomatedQA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to select and verify.
              
     **********/
    public void extendSelectionToTextItem(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "extendSelectionToTextItem.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "extendSelectionToTextItem.textValue = null");
        table.add( ListViewFunctions.extendSelectionToTextItem(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                     Routine to RightClick (single click) an item according to its text value.
                       </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param selectTextValue  Optional:NO 
                      Case-sensitive text of node to RightClick
                   
     @param matchIndex  Optional:YES 
                      Optional index of the Nth duplicate item to match.
                   
     **********/
    public ComponentFunction rightClickTextItem(String selectTextValue, String matchIndex ) {

        if ( selectTextValue == null ) throw new IllegalArgumentException ( "rightClickTextItem.selectTextValue = null");
        return ListViewFunctions.rightClickTextItem(getWindow().getName(), getName(), selectTextValue, matchIndex);
    }

    /*********** <pre> 
                     Routine to RightClick (single click) an item according to its text value.
                       </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param selectTextValue  Optional:NO 
                      Case-sensitive text of node to RightClick
                   
     @param matchIndex  Optional:YES 
                      Optional index of the Nth duplicate item to match.
                   
     **********/
    public void rightClickTextItem(StepTestTable table, String selectTextValue, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "rightClickTextItem.table = null");

        if ( selectTextValue == null ) throw new IllegalArgumentException ( "rightClickTextItem.selectTextValue = null");
        table.add( ListViewFunctions.rightClickTextItem(getWindow().getName(), getName(), selectTextValue, matchIndex));
    }

    /*********** <pre> 
                     Routine to RightClick (single click) an item according to its text value.
                       </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         selectTextValue -- Optional:NO 
                      Case-sensitive text of node to RightClick
                   <BR/>         matchIndex -- Optional:YES 
                      Optional index of the Nth duplicate item to match.
                   
    </UL>

     **********/
    public ComponentFunction rightClickTextItem(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "rightClickTextItem.parameters = null");
        return ListViewFunctions.rightClickTextItem(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                     Routine to RightClick (single click) an item according to its text value.
                       </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         selectTextValue -- Optional:NO 
                      Case-sensitive text of node to RightClick
                   <BR/>         matchIndex -- Optional:YES 
                      Optional index of the Nth duplicate item to match.
                   
    </UL>

     **********/
    public void rightClickTextItem(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "rightClickTextItem.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "rightClickTextItem.parameters = null");
        table.add( ListViewFunctions.rightClickTextItem(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                     Right click a text item at specific Coords.
                       </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param selectTextValue  Optional:NO 
                      Case-sensitive text of node to RightClick
                   
     @param coords  Optional:NO 
                     The explicit coordinates ("x,y") or an App Map reference to 
                     pre-defined coordinates.
                   
     @param matchIndex  Optional:YES 
                      Optional index of the Nth duplicate item to match.
                   
     **********/
    public ComponentFunction rightClickTextItemCoords(String selectTextValue, String coords, String matchIndex ) {

        if ( coords == null ) throw new IllegalArgumentException ( "rightClickTextItemCoords.coords = null");
        if ( selectTextValue == null ) throw new IllegalArgumentException ( "rightClickTextItemCoords.selectTextValue = null");
        return ListViewFunctions.rightClickTextItemCoords(getWindow().getName(), getName(), selectTextValue, coords, matchIndex);
    }

    /*********** <pre> 
                     Right click a text item at specific Coords.
                       </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param selectTextValue  Optional:NO 
                      Case-sensitive text of node to RightClick
                   
     @param coords  Optional:NO 
                     The explicit coordinates ("x,y") or an App Map reference to 
                     pre-defined coordinates.
                   
     @param matchIndex  Optional:YES 
                      Optional index of the Nth duplicate item to match.
                   
     **********/
    public void rightClickTextItemCoords(StepTestTable table, String selectTextValue, String coords, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "rightClickTextItemCoords.table = null");

        if ( coords == null ) throw new IllegalArgumentException ( "rightClickTextItemCoords.coords = null");
        if ( selectTextValue == null ) throw new IllegalArgumentException ( "rightClickTextItemCoords.selectTextValue = null");
        table.add( ListViewFunctions.rightClickTextItemCoords(getWindow().getName(), getName(), selectTextValue, coords, matchIndex));
    }

    /*********** <pre> 
                     Right click a text item at specific Coords.
                       </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         selectTextValue -- Optional:NO 
                      Case-sensitive text of node to RightClick
                   <BR/>         coords -- Optional:NO 
                     The explicit coordinates ("x,y") or an App Map reference to 
                     pre-defined coordinates.
                   <BR/>         matchIndex -- Optional:YES 
                      Optional index of the Nth duplicate item to match.
                   
    </UL>

     **********/
    public ComponentFunction rightClickTextItemCoords(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "rightClickTextItemCoords.parameters = null");
        return ListViewFunctions.rightClickTextItemCoords(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                     Right click a text item at specific Coords.
                       </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         selectTextValue -- Optional:NO 
                      Case-sensitive text of node to RightClick
                   <BR/>         coords -- Optional:NO 
                     The explicit coordinates ("x,y") or an App Map reference to 
                     pre-defined coordinates.
                   <BR/>         matchIndex -- Optional:YES 
                      Optional index of the Nth duplicate item to match.
                   
    </UL>

     **********/
    public void rightClickTextItemCoords(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "rightClickTextItemCoords.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "rightClickTextItemCoords.parameters = null");
        table.add( ListViewFunctions.rightClickTextItemCoords(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                     Routine to RightClick (single click) an unverifiable item according to its text value.
                   
                     An unverifiable item is one whose READ value is not the same as its SET value.
                       </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param selectTextValue  Optional:NO 
                      Case-sensitive text of node to RightClick
                   
     @param matchIndex  Optional:YES 
                      Optional index of the Nth duplicate item to match.
                   
     **********/
    public ComponentFunction rightClickUnverifiedTextItem(String selectTextValue, String matchIndex ) {

        if ( selectTextValue == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextItem.selectTextValue = null");
        return ListViewFunctions.rightClickUnverifiedTextItem(getWindow().getName(), getName(), selectTextValue, matchIndex);
    }

    /*********** <pre> 
                     Routine to RightClick (single click) an unverifiable item according to its text value.
                   
                     An unverifiable item is one whose READ value is not the same as its SET value.
                       </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param selectTextValue  Optional:NO 
                      Case-sensitive text of node to RightClick
                   
     @param matchIndex  Optional:YES 
                      Optional index of the Nth duplicate item to match.
                   
     **********/
    public void rightClickUnverifiedTextItem(StepTestTable table, String selectTextValue, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextItem.table = null");

        if ( selectTextValue == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextItem.selectTextValue = null");
        table.add( ListViewFunctions.rightClickUnverifiedTextItem(getWindow().getName(), getName(), selectTextValue, matchIndex));
    }

    /*********** <pre> 
                     Routine to RightClick (single click) an unverifiable item according to its text value.
                   
                     An unverifiable item is one whose READ value is not the same as its SET value.
                       </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         selectTextValue -- Optional:NO 
                      Case-sensitive text of node to RightClick
                   <BR/>         matchIndex -- Optional:YES 
                      Optional index of the Nth duplicate item to match.
                   
    </UL>

     **********/
    public ComponentFunction rightClickUnverifiedTextItem(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextItem.parameters = null");
        return ListViewFunctions.rightClickUnverifiedTextItem(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                     Routine to RightClick (single click) an unverifiable item according to its text value.
                   
                     An unverifiable item is one whose READ value is not the same as its SET value.
                       </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         selectTextValue -- Optional:NO 
                      Case-sensitive text of node to RightClick
                   <BR/>         matchIndex -- Optional:YES 
                      Optional index of the Nth duplicate item to match.
                   
    </UL>

     **********/
    public void rightClickUnverifiedTextItem(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextItem.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextItem.parameters = null");
        table.add( ListViewFunctions.rightClickUnverifiedTextItem(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                     Right Click an unverifiable text item at specific Coords.
                   
                     An unverifiable item is one whose READ value is not the same as its SET value.
                       </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param selectTextValue  Optional:NO 
                      Case-sensitive text of node to select
                   
     @param coords  Optional:NO 
                     The explicit coordinates ("x,y") or an App Map reference to 
                     pre-defined coordinates.
                   
     @param matchIndex  Optional:YES 
                      Optional index of the Nth duplicate item to match.
                   
     **********/
    public ComponentFunction rightClickUnverifiedTextItemCoords(String selectTextValue, String coords, String matchIndex ) {

        if ( coords == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextItemCoords.coords = null");
        if ( selectTextValue == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextItemCoords.selectTextValue = null");
        return ListViewFunctions.rightClickUnverifiedTextItemCoords(getWindow().getName(), getName(), selectTextValue, coords, matchIndex);
    }

    /*********** <pre> 
                     Right Click an unverifiable text item at specific Coords.
                   
                     An unverifiable item is one whose READ value is not the same as its SET value.
                       </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param selectTextValue  Optional:NO 
                      Case-sensitive text of node to select
                   
     @param coords  Optional:NO 
                     The explicit coordinates ("x,y") or an App Map reference to 
                     pre-defined coordinates.
                   
     @param matchIndex  Optional:YES 
                      Optional index of the Nth duplicate item to match.
                   
     **********/
    public void rightClickUnverifiedTextItemCoords(StepTestTable table, String selectTextValue, String coords, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextItemCoords.table = null");

        if ( coords == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextItemCoords.coords = null");
        if ( selectTextValue == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextItemCoords.selectTextValue = null");
        table.add( ListViewFunctions.rightClickUnverifiedTextItemCoords(getWindow().getName(), getName(), selectTextValue, coords, matchIndex));
    }

    /*********** <pre> 
                     Right Click an unverifiable text item at specific Coords.
                   
                     An unverifiable item is one whose READ value is not the same as its SET value.
                       </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         selectTextValue -- Optional:NO 
                      Case-sensitive text of node to select
                   <BR/>         coords -- Optional:NO 
                     The explicit coordinates ("x,y") or an App Map reference to 
                     pre-defined coordinates.
                   <BR/>         matchIndex -- Optional:YES 
                      Optional index of the Nth duplicate item to match.
                   
    </UL>

     **********/
    public ComponentFunction rightClickUnverifiedTextItemCoords(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextItemCoords.parameters = null");
        return ListViewFunctions.rightClickUnverifiedTextItemCoords(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                     Right Click an unverifiable text item at specific Coords.
                   
                     An unverifiable item is one whose READ value is not the same as its SET value.
                       </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         selectTextValue -- Optional:NO 
                      Case-sensitive text of node to select
                   <BR/>         coords -- Optional:NO 
                     The explicit coordinates ("x,y") or an App Map reference to 
                     pre-defined coordinates.
                   <BR/>         matchIndex -- Optional:YES 
                      Optional index of the Nth duplicate item to match.
                   
    </UL>

     **********/
    public void rightClickUnverifiedTextItemCoords(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextItemCoords.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextItemCoords.parameters = null");
        table.add( ListViewFunctions.rightClickUnverifiedTextItemCoords(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Routine for multiple selection to Control+Click on an item according to a partial text match.
               
                This adds selected items to items already selected.

                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>AutomatedQA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param partialTextValue  Optional:NO 
                 Case-sensitive substring of text item to select.
              
     @param matchIndex  Optional:YES  DefaultVal:1 
                 Optional index of the Nth duplicate item to match. 
              
     **********/
    public ComponentFunction selectAnotherPartialMatch(String partialTextValue, String matchIndex ) {

        if ( partialTextValue == null ) throw new IllegalArgumentException ( "selectAnotherPartialMatch.partialTextValue = null");
        return ListViewFunctions.selectAnotherPartialMatch(getWindow().getName(), getName(), partialTextValue, matchIndex);
    }

    /*********** <pre> 
                Routine for multiple selection to Control+Click on an item according to a partial text match.
               
                This adds selected items to items already selected.

                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>AutomatedQA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param partialTextValue  Optional:NO 
                 Case-sensitive substring of text item to select.
              
     @param matchIndex  Optional:YES  DefaultVal:1 
                 Optional index of the Nth duplicate item to match. 
              
     **********/
    public void selectAnotherPartialMatch(StepTestTable table, String partialTextValue, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectAnotherPartialMatch.table = null");

        if ( partialTextValue == null ) throw new IllegalArgumentException ( "selectAnotherPartialMatch.partialTextValue = null");
        table.add( ListViewFunctions.selectAnotherPartialMatch(getWindow().getName(), getName(), partialTextValue, matchIndex));
    }

    /*********** <pre> 
                Routine for multiple selection to Control+Click on an item according to a partial text match.
               
                This adds selected items to items already selected.

                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>AutomatedQA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         partialTextValue -- Optional:NO 
                 Case-sensitive substring of text item to select.
              <BR/>         matchIndex -- Optional:YES  DefaultVal:1 
                 Optional index of the Nth duplicate item to match. 
              
    </UL>

     **********/
    public ComponentFunction selectAnotherPartialMatch(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "selectAnotherPartialMatch.parameters = null");
        return ListViewFunctions.selectAnotherPartialMatch(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                Routine for multiple selection to Control+Click on an item according to a partial text match.
               
                This adds selected items to items already selected.

                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>AutomatedQA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         partialTextValue -- Optional:NO 
                 Case-sensitive substring of text item to select.
              <BR/>         matchIndex -- Optional:YES  DefaultVal:1 
                 Optional index of the Nth duplicate item to match. 
              
    </UL>

     **********/
    public void selectAnotherPartialMatch(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectAnotherPartialMatch.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectAnotherPartialMatch.parameters = null");
        table.add( ListViewFunctions.selectAnotherPartialMatch(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Routine for multiple selection to Control+Click on an item by its text value.
               
                This adds selected items to items already selected.

                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>AutomatedQA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of node to select.
              
     @param matchIndex  Optional:YES  DefaultVal:1 
                 Optional index of the Nth duplicate item to match. 
              
     **********/
    public ComponentFunction selectAnotherTextItem(String textValue, String matchIndex ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "selectAnotherTextItem.textValue = null");
        return ListViewFunctions.selectAnotherTextItem(getWindow().getName(), getName(), textValue, matchIndex);
    }

    /*********** <pre> 
                Routine for multiple selection to Control+Click on an item by its text value.
               
                This adds selected items to items already selected.

                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>AutomatedQA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to select.
              
     @param matchIndex  Optional:YES  DefaultVal:1 
                 Optional index of the Nth duplicate item to match. 
              
     **********/
    public void selectAnotherTextItem(StepTestTable table, String textValue, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectAnotherTextItem.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectAnotherTextItem.textValue = null");
        table.add( ListViewFunctions.selectAnotherTextItem(getWindow().getName(), getName(), textValue, matchIndex));
    }

    /*********** <pre> 
                Routine for multiple selection to Control+Click on an item by its text value.
               
                This adds selected items to items already selected.

                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>AutomatedQA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of node to select.
              <BR/>         matchIndex -- Optional:YES  DefaultVal:1 
                 Optional index of the Nth duplicate item to match. 
              
    </UL>

     **********/
    public ComponentFunction selectAnotherTextItem(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "selectAnotherTextItem.parameters = null");
        return ListViewFunctions.selectAnotherTextItem(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                Routine for multiple selection to Control+Click on an item by its text value.
               
                This adds selected items to items already selected.

                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>AutomatedQA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of node to select.
              <BR/>         matchIndex -- Optional:YES  DefaultVal:1 
                 Optional index of the Nth duplicate item to match. 
              
    </UL>

     **********/
    public void selectAnotherTextItem(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectAnotherTextItem.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectAnotherTextItem.parameters = null");
        table.add( ListViewFunctions.selectAnotherTextItem(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Same as (Alias for) ListView SelectIndexItem
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param index  Optional:NO 
                 See ListView SelectIndexItem
              
     **********/
    public ComponentFunction selectIndex(String index ) {

        if ( index == null ) throw new IllegalArgumentException ( "selectIndex.index = null");
        return ListViewFunctions.selectIndex(getWindow().getName(), getName(), index);
    }

    /*********** <pre> 
                Same as (Alias for) ListView SelectIndexItem
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param index  Optional:NO 
                 See ListView SelectIndexItem
              
     **********/
    public void selectIndex(StepTestTable table, String index ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectIndex.table = null");

        if ( index == null ) throw new IllegalArgumentException ( "selectIndex.index = null");
        table.add( ListViewFunctions.selectIndex(getWindow().getName(), getName(), index));
    }

    /*********** <pre> 
                Routine to single click an item according to its Index value.
               
                It is important to note that some ListViews index their values
                differently.  For example, you may need to select an item by 
                text by using a property whose starting index is 1.  Yet, 
                if you request to seek an item strictly by index, the starting 
                index is 0.  So, the test developer may need to evaluate their 
                ListView object for these differences.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param itemIndex  Optional:NO 
                 Index of node to select.
              
     **********/
    public ComponentFunction selectIndexItem(String itemIndex ) {

        if ( itemIndex == null ) throw new IllegalArgumentException ( "selectIndexItem.itemIndex = null");
        return ListViewFunctions.selectIndexItem(getWindow().getName(), getName(), itemIndex);
    }

    /*********** <pre> 
                Routine to single click an item according to its Index value.
               
                It is important to note that some ListViews index their values
                differently.  For example, you may need to select an item by 
                text by using a property whose starting index is 1.  Yet, 
                if you request to seek an item strictly by index, the starting 
                index is 0.  So, the test developer may need to evaluate their 
                ListView object for these differences.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param itemIndex  Optional:NO 
                 Index of node to select.
              
     **********/
    public void selectIndexItem(StepTestTable table, String itemIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectIndexItem.table = null");

        if ( itemIndex == null ) throw new IllegalArgumentException ( "selectIndexItem.itemIndex = null");
        table.add( ListViewFunctions.selectIndexItem(getWindow().getName(), getName(), itemIndex));
    }

    /*********** <pre> 
                Routine to single click an item by Index at specific coordinates.
               
                It is important to note that some ListViews index their values
                differently.  For example, you may need to select an item by 
                text by using a property whose starting index is 1.  Yet, 
                if you request to seek an item strictly by index, the starting 
                index is 0.  So, the test developer may need to evaluate their 
                ListView object for these differences.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param itemIndex  Optional:NO 
                 Index of node to select.
              
     @param coords  Optional:NO 
                The explicit coordinates ("x,y") or an App Map reference to 
                pre-defined coordinates.
              
     **********/
    public ComponentFunction selectIndexItemCoords(String itemIndex, String coords ) {

        if ( coords == null ) throw new IllegalArgumentException ( "selectIndexItemCoords.coords = null");
        if ( itemIndex == null ) throw new IllegalArgumentException ( "selectIndexItemCoords.itemIndex = null");
        return ListViewFunctions.selectIndexItemCoords(getWindow().getName(), getName(), itemIndex, coords);
    }

    /*********** <pre> 
                Routine to single click an item by Index at specific coordinates.
               
                It is important to note that some ListViews index their values
                differently.  For example, you may need to select an item by 
                text by using a property whose starting index is 1.  Yet, 
                if you request to seek an item strictly by index, the starting 
                index is 0.  So, the test developer may need to evaluate their 
                ListView object for these differences.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param itemIndex  Optional:NO 
                 Index of node to select.
              
     @param coords  Optional:NO 
                The explicit coordinates ("x,y") or an App Map reference to 
                pre-defined coordinates.
              
     **********/
    public void selectIndexItemCoords(StepTestTable table, String itemIndex, String coords ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectIndexItemCoords.table = null");

        if ( coords == null ) throw new IllegalArgumentException ( "selectIndexItemCoords.coords = null");
        if ( itemIndex == null ) throw new IllegalArgumentException ( "selectIndexItemCoords.itemIndex = null");
        table.add( ListViewFunctions.selectIndexItemCoords(getWindow().getName(), getName(), itemIndex, coords));
    }

    /*********** <pre> 
                Routine to single click an item by Index at specific coordinates.
               
                It is important to note that some ListViews index their values
                differently.  For example, you may need to select an item by 
                text by using a property whose starting index is 1.  Yet, 
                if you request to seek an item strictly by index, the starting 
                index is 0.  So, the test developer may need to evaluate their 
                ListView object for these differences.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         itemIndex -- Optional:NO 
                 Index of node to select.
              <BR/>         coords -- Optional:NO 
                The explicit coordinates ("x,y") or an App Map reference to 
                pre-defined coordinates.
              
    </UL>

     **********/
    public ComponentFunction selectIndexItemCoords(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "selectIndexItemCoords.parameters = null");
        return ListViewFunctions.selectIndexItemCoords(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                Routine to single click an item by Index at specific coordinates.
               
                It is important to note that some ListViews index their values
                differently.  For example, you may need to select an item by 
                text by using a property whose starting index is 1.  Yet, 
                if you request to seek an item strictly by index, the starting 
                index is 0.  So, the test developer may need to evaluate their 
                ListView object for these differences.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         itemIndex -- Optional:NO 
                 Index of node to select.
              <BR/>         coords -- Optional:NO 
                The explicit coordinates ("x,y") or an App Map reference to 
                pre-defined coordinates.
              
    </UL>

     **********/
    public void selectIndexItemCoords(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectIndexItemCoords.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectIndexItemCoords.parameters = null");
        table.add( ListViewFunctions.selectIndexItemCoords(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Routine to select (single click) an item according to a partial text match.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param partialTextValue  Optional:NO 
                 Case-sensitive substring of node to select
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public ComponentFunction selectPartialMatch(String partialTextValue, String matchIndex ) {

        if ( partialTextValue == null ) throw new IllegalArgumentException ( "selectPartialMatch.partialTextValue = null");
        return ListViewFunctions.selectPartialMatch(getWindow().getName(), getName(), partialTextValue, matchIndex);
    }

    /*********** <pre> 
                Routine to select (single click) an item according to a partial text match.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param partialTextValue  Optional:NO 
                 Case-sensitive substring of node to select
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public void selectPartialMatch(StepTestTable table, String partialTextValue, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectPartialMatch.table = null");

        if ( partialTextValue == null ) throw new IllegalArgumentException ( "selectPartialMatch.partialTextValue = null");
        table.add( ListViewFunctions.selectPartialMatch(getWindow().getName(), getName(), partialTextValue, matchIndex));
    }

    /*********** <pre> 
                Routine to select (single click) an item according to a partial text match.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         partialTextValue -- Optional:NO 
                 Case-sensitive substring of node to select
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public ComponentFunction selectPartialMatch(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "selectPartialMatch.parameters = null");
        return ListViewFunctions.selectPartialMatch(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                Routine to select (single click) an item according to a partial text match.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         partialTextValue -- Optional:NO 
                 Case-sensitive substring of node to select
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public void selectPartialMatch(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectPartialMatch.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectPartialMatch.parameters = null");
        table.add( ListViewFunctions.selectPartialMatch(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Routine to randomly select multiple items in the ListView object.
              
                Routine to randomly select multiple items in the ListView object.  
                Each selection is done with a CTRL + Single Left Click.  
                Items are selected by index, not by their text values. Items 
                already selected are NOT unselected.  We add to existing 
                selections.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param itemCount  Optional:NO 
                  The quantity of items to randomly select in the object.
              
     **********/
    public ComponentFunction selectRandomItems(String itemCount ) {

        if ( itemCount == null ) throw new IllegalArgumentException ( "selectRandomItems.itemCount = null");
        return ListViewFunctions.selectRandomItems(getWindow().getName(), getName(), itemCount);
    }

    /*********** <pre> 
                Routine to randomly select multiple items in the ListView object.
              
                Routine to randomly select multiple items in the ListView object.  
                Each selection is done with a CTRL + Single Left Click.  
                Items are selected by index, not by their text values. Items 
                already selected are NOT unselected.  We add to existing 
                selections.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param itemCount  Optional:NO 
                  The quantity of items to randomly select in the object.
              
     **********/
    public void selectRandomItems(StepTestTable table, String itemCount ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectRandomItems.table = null");

        if ( itemCount == null ) throw new IllegalArgumentException ( "selectRandomItems.itemCount = null");
        table.add( ListViewFunctions.selectRandomItems(getWindow().getName(), getName(), itemCount));
    }

    /*********** <pre> 
                Routine to select (single click) an item according to its text value.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param selectTextValue  Optional:NO 
                 Case-sensitive text of node to select
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public ComponentFunction selectTextItem(String selectTextValue, String matchIndex ) {

        if ( selectTextValue == null ) throw new IllegalArgumentException ( "selectTextItem.selectTextValue = null");
        return ListViewFunctions.selectTextItem(getWindow().getName(), getName(), selectTextValue, matchIndex);
    }

    /*********** <pre> 
                Routine to select (single click) an item according to its text value.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param selectTextValue  Optional:NO 
                 Case-sensitive text of node to select
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public void selectTextItem(StepTestTable table, String selectTextValue, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectTextItem.table = null");

        if ( selectTextValue == null ) throw new IllegalArgumentException ( "selectTextItem.selectTextValue = null");
        table.add( ListViewFunctions.selectTextItem(getWindow().getName(), getName(), selectTextValue, matchIndex));
    }

    /*********** <pre> 
                Routine to select (single click) an item according to its text value.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         selectTextValue -- Optional:NO 
                 Case-sensitive text of node to select
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public ComponentFunction selectTextItem(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "selectTextItem.parameters = null");
        return ListViewFunctions.selectTextItem(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                Routine to select (single click) an item according to its text value.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         selectTextValue -- Optional:NO 
                 Case-sensitive text of node to select
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public void selectTextItem(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectTextItem.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectTextItem.parameters = null");
        table.add( ListViewFunctions.selectTextItem(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Single click a text item at specific Coords.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param selectTextValue  Optional:NO 
                 Case-sensitive text of node to select
              
     @param coords  Optional:NO 
                The explicit coordinates ("x,y") or an App Map reference to 
                pre-defined coordinates.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public ComponentFunction selectTextItemCoords(String selectTextValue, String coords, String matchIndex ) {

        if ( coords == null ) throw new IllegalArgumentException ( "selectTextItemCoords.coords = null");
        if ( selectTextValue == null ) throw new IllegalArgumentException ( "selectTextItemCoords.selectTextValue = null");
        return ListViewFunctions.selectTextItemCoords(getWindow().getName(), getName(), selectTextValue, coords, matchIndex);
    }

    /*********** <pre> 
                Single click a text item at specific Coords.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param selectTextValue  Optional:NO 
                 Case-sensitive text of node to select
              
     @param coords  Optional:NO 
                The explicit coordinates ("x,y") or an App Map reference to 
                pre-defined coordinates.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public void selectTextItemCoords(StepTestTable table, String selectTextValue, String coords, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectTextItemCoords.table = null");

        if ( coords == null ) throw new IllegalArgumentException ( "selectTextItemCoords.coords = null");
        if ( selectTextValue == null ) throw new IllegalArgumentException ( "selectTextItemCoords.selectTextValue = null");
        table.add( ListViewFunctions.selectTextItemCoords(getWindow().getName(), getName(), selectTextValue, coords, matchIndex));
    }

    /*********** <pre> 
                Single click a text item at specific Coords.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         selectTextValue -- Optional:NO 
                 Case-sensitive text of node to select
              <BR/>         coords -- Optional:NO 
                The explicit coordinates ("x,y") or an App Map reference to 
                pre-defined coordinates.
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public ComponentFunction selectTextItemCoords(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "selectTextItemCoords.parameters = null");
        return ListViewFunctions.selectTextItemCoords(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                Single click a text item at specific Coords.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         selectTextValue -- Optional:NO 
                 Case-sensitive text of node to select
              <BR/>         coords -- Optional:NO 
                The explicit coordinates ("x,y") or an App Map reference to 
                pre-defined coordinates.
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public void selectTextItemCoords(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectTextItemCoords.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectTextItemCoords.parameters = null");
        table.add( ListViewFunctions.selectTextItemCoords(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Routine to select (single click) an unverifiable item according to its text value.
              
                An unverifiable item is one whose READ value is not the same as its SET value.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param selectTextValue  Optional:NO 
                 Case-sensitive text of node to select
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public ComponentFunction selectUnverifiedTextItem(String selectTextValue, String matchIndex ) {

        if ( selectTextValue == null ) throw new IllegalArgumentException ( "selectUnverifiedTextItem.selectTextValue = null");
        return ListViewFunctions.selectUnverifiedTextItem(getWindow().getName(), getName(), selectTextValue, matchIndex);
    }

    /*********** <pre> 
                Routine to select (single click) an unverifiable item according to its text value.
              
                An unverifiable item is one whose READ value is not the same as its SET value.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param selectTextValue  Optional:NO 
                 Case-sensitive text of node to select
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public void selectUnverifiedTextItem(StepTestTable table, String selectTextValue, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectUnverifiedTextItem.table = null");

        if ( selectTextValue == null ) throw new IllegalArgumentException ( "selectUnverifiedTextItem.selectTextValue = null");
        table.add( ListViewFunctions.selectUnverifiedTextItem(getWindow().getName(), getName(), selectTextValue, matchIndex));
    }

    /*********** <pre> 
                Routine to select (single click) an unverifiable item according to its text value.
              
                An unverifiable item is one whose READ value is not the same as its SET value.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         selectTextValue -- Optional:NO 
                 Case-sensitive text of node to select
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public ComponentFunction selectUnverifiedTextItem(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "selectUnverifiedTextItem.parameters = null");
        return ListViewFunctions.selectUnverifiedTextItem(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                Routine to select (single click) an unverifiable item according to its text value.
              
                An unverifiable item is one whose READ value is not the same as its SET value.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         selectTextValue -- Optional:NO 
                 Case-sensitive text of node to select
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public void selectUnverifiedTextItem(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectUnverifiedTextItem.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectUnverifiedTextItem.parameters = null");
        table.add( ListViewFunctions.selectUnverifiedTextItem(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Single click an unverifiable text item at specific Coords.
              
                An unverifiable item is one whose READ value is not the same as its SET value.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param selectTextValue  Optional:NO 
                 Case-sensitive text of node to select
              
     @param coords  Optional:NO 
                The explicit coordinates ("x,y") or an App Map reference to 
                pre-defined coordinates.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public ComponentFunction selectUnverifiedTextItemCoords(String selectTextValue, String coords, String matchIndex ) {

        if ( coords == null ) throw new IllegalArgumentException ( "selectUnverifiedTextItemCoords.coords = null");
        if ( selectTextValue == null ) throw new IllegalArgumentException ( "selectUnverifiedTextItemCoords.selectTextValue = null");
        return ListViewFunctions.selectUnverifiedTextItemCoords(getWindow().getName(), getName(), selectTextValue, coords, matchIndex);
    }

    /*********** <pre> 
                Single click an unverifiable text item at specific Coords.
              
                An unverifiable item is one whose READ value is not the same as its SET value.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param selectTextValue  Optional:NO 
                 Case-sensitive text of node to select
              
     @param coords  Optional:NO 
                The explicit coordinates ("x,y") or an App Map reference to 
                pre-defined coordinates.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    public void selectUnverifiedTextItemCoords(StepTestTable table, String selectTextValue, String coords, String matchIndex ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectUnverifiedTextItemCoords.table = null");

        if ( coords == null ) throw new IllegalArgumentException ( "selectUnverifiedTextItemCoords.coords = null");
        if ( selectTextValue == null ) throw new IllegalArgumentException ( "selectUnverifiedTextItemCoords.selectTextValue = null");
        table.add( ListViewFunctions.selectUnverifiedTextItemCoords(getWindow().getName(), getName(), selectTextValue, coords, matchIndex));
    }

    /*********** <pre> 
                Single click an unverifiable text item at specific Coords.
              
                An unverifiable item is one whose READ value is not the same as its SET value.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         selectTextValue -- Optional:NO 
                 Case-sensitive text of node to select
              <BR/>         coords -- Optional:NO 
                The explicit coordinates ("x,y") or an App Map reference to 
                pre-defined coordinates.
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public ComponentFunction selectUnverifiedTextItemCoords(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "selectUnverifiedTextItemCoords.parameters = null");
        return ListViewFunctions.selectUnverifiedTextItemCoords(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                Single click an unverifiable text item at specific Coords.
              
                An unverifiable item is one whose READ value is not the same as its SET value.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         selectTextValue -- Optional:NO 
                 Case-sensitive text of node to select
              <BR/>         coords -- Optional:NO 
                The explicit coordinates ("x,y") or an App Map reference to 
                pre-defined coordinates.
              <BR/>         matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    public void selectUnverifiedTextItemCoords(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectUnverifiedTextItemCoords.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectUnverifiedTextItemCoords.parameters = null");
        table.add( ListViewFunctions.selectUnverifiedTextItemCoords(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre>
            	Set a variable with the result of checking that a listview contains the provided item.
			
            	The search of the item is expected to be a case-sensitive exact match of the item.  The
            	   provided variable is set with 'TRUE' if the item is found or 'FALSE' if the item is not found.
                </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param itemText  Optional:NO
						The case-sensitive name of the sought item.
					
     @param resultVar  Optional:NO
						The name of the variable receiving the result.
					
     **********/
    public ComponentFunction setListContains(String itemText, String resultVar ) {

        if ( itemText == null ) throw new IllegalArgumentException ( "setListContains.itemText = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "setListContains.resultVar = null");
        return ListViewFunctions.setListContains(getWindow().getName(), getName(), itemText, resultVar);
    }

    /*********** <pre>
            	Set a variable with the result of checking that a listview contains the provided item.
			
            	The search of the item is expected to be a case-sensitive exact match of the item.  The
            	   provided variable is set with 'TRUE' if the item is found or 'FALSE' if the item is not found.
                </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param itemText  Optional:NO
						The case-sensitive name of the sought item.
					
     @param resultVar  Optional:NO
						The name of the variable receiving the result.
					
     **********/
    public void setListContains(StepTestTable table, String itemText, String resultVar ) {

        if ( table == null ) throw new IllegalArgumentException ( "setListContains.table = null");

        if ( itemText == null ) throw new IllegalArgumentException ( "setListContains.itemText = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "setListContains.resultVar = null");
        table.add( ListViewFunctions.setListContains(getWindow().getName(), getName(), itemText, resultVar));
    }

    /*********** <pre>
            	Set a variable with the result of checking that a listview contains the provided item.
			
            	The search of the item is expected to be a case-sensitive exact match of the item.  The
            	   provided variable is set with 'TRUE' if the item is found or 'FALSE' if the item is not found.
                </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         itemText -- Optional:NO
						The case-sensitive name of the sought item.
					<BR/>         resultVar -- Optional:NO
						The name of the variable receiving the result.
					
    </UL>

     **********/
    public ComponentFunction setListContains(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "setListContains.parameters = null");
        return ListViewFunctions.setListContains(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre>
            	Set a variable with the result of checking that a listview contains the provided item.
			
            	The search of the item is expected to be a case-sensitive exact match of the item.  The
            	   provided variable is set with 'TRUE' if the item is found or 'FALSE' if the item is not found.
                </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         itemText -- Optional:NO
						The case-sensitive name of the sought item.
					<BR/>         resultVar -- Optional:NO
						The name of the variable receiving the result.
					
    </UL>

     **********/
    public void setListContains(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "setListContains.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "setListContains.parameters = null");
        table.add( ListViewFunctions.setListContains(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Verifies a particular case-sensitive text item is NOT selected.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of node that will be verified unselected
              
     **********/
    public ComponentFunction verifyItemUnselected(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "verifyItemUnselected.textValue = null");
        return ListViewFunctions.verifyItemUnselected(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                Verifies a particular case-sensitive text item is NOT selected.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of node that will be verified unselected
              
     **********/
    public void verifyItemUnselected(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyItemUnselected.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "verifyItemUnselected.textValue = null");
        table.add( ListViewFunctions.verifyItemUnselected(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre>
            	Verify that a list view contains the provided item.
			
            	The search of the item is expected to be a case-sensitive exact match of the item.
                </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param itemText  Optional:NO
						The case-sensitive name of the item to verify.
					
     **********/
    public ComponentFunction verifyListContains(String itemText ) {

        if ( itemText == null ) throw new IllegalArgumentException ( "verifyListContains.itemText = null");
        return ListViewFunctions.verifyListContains(getWindow().getName(), getName(), itemText);
    }

    /*********** <pre>
            	Verify that a list view contains the provided item.
			
            	The search of the item is expected to be a case-sensitive exact match of the item.
                </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param itemText  Optional:NO
						The case-sensitive name of the item to verify.
					
     **********/
    public void verifyListContains(StepTestTable table, String itemText ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyListContains.table = null");

        if ( itemText == null ) throw new IllegalArgumentException ( "verifyListContains.itemText = null");
        table.add( ListViewFunctions.verifyListContains(getWindow().getName(), getName(), itemText));
    }

    /*********** <pre> 
                Verifies a particular case-sensitive text item is selected
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of node that will be verified selected
              
     **********/
    public ComponentFunction verifySelectedItem(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "verifySelectedItem.textValue = null");
        return ListViewFunctions.verifySelectedItem(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                Verifies a particular case-sensitive text item is selected
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of node that will be verified selected
              
     **********/
    public void verifySelectedItem(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifySelectedItem.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "verifySelectedItem.textValue = null");
        table.add( ListViewFunctions.verifySelectedItem(getWindow().getName(), getName(), textValue));
    }

}
