
/******************************************************************************
 * JavaMenu.java
 *
 * Copyright (C) SAS Institute, All rights reserved.
 * General Public License: https://www.gnu.org/licenses/gpl-3.0.en.html
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   JavaMenuFunctions.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaComponentModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe JavaMenuFunctions.xml XSLJavaComponentModel.xsl -o JavaMenu.java
 *
 ******************************************************************************/ 
package org.safs.model.components;

import org.safs.model.commands.JavaMenuFunctions;
import org.safs.model.ComponentFunction;
import org.safs.model.components.UIComponent;
import org.safs.model.StepTestTable;

public class JavaMenu extends GenericObject {

    /*****************
    Constructor 

    Create an instance of pseudo-component representing 
    a specific component in a specific window.
    
    @param window  Optional:NO 
           Specifies which Window this component is 'in'.
    @param compname Optional:NO 
           Specifies the AppMap name of the component in the Window.
    ****************/
    public JavaMenu(Window window, String compname) {

        super(window, compname);
    }

    /*****************
    Constructor 

    Create an instance of pseudo-component representing 
    a specific component in a specific window.
    
    This convenience routine will create the requisite Window component.
    
    @param winname  Optional:NO 
           Specifies the AppMap name of the window.
    @param compname Optional:NO 
           Specifies the AppMap name of the component in the Window.
    ****************/
    public JavaMenu(String winname, String compname) {

        this(new Window(winname), compname);
    }

    protected JavaMenu(String compname) {

        super(compname);
    }



    /*********** <pre> 
                 Reset the cache containing the content of whole menu.
               
                Reset the cache containing the content of whole menu.
                
                When we begin to manipulate a new menu, we should call this keyword to reset the cache.
                This cache is used for verification.
                
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Automated QA TestComplete</LI>
    </UL>

     **********/
    public ComponentFunction resetMenuCache( ) {

        return JavaMenuFunctions.resetMenuCache(getWindow().getName(), getName());
    }

    /*********** <pre> 
                 Reset the cache containing the content of whole menu.
               
                Reset the cache containing the content of whole menu.
                
                When we begin to manipulate a new menu, we should call this keyword to reset the cache.
                This cache is used for verification.
                
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Automated QA TestComplete</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     **********/
    public void resetMenuCache(StepTestTable table ) {

        if ( table == null ) throw new IllegalArgumentException ( "resetMenuCache.table = null");

        table.add( JavaMenuFunctions.resetMenuCache(getWindow().getName(), getName()));
    }

    /*********** <pre> 
                 Action to select a menuItem according to its text value.
              
                 In RRAFS, this command will work on both JavaMenu items and JavaPopupMenu items.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:YES 
                 Case-sensitive text of menuItem to select OR an App Map reference.
              
     @param indexPath  Optional:YES 
                 The index for item of each level. It is 1-based.
              
     **********/
    public ComponentFunction selectMenuItem(String textValue, String indexPath ) {

        return JavaMenuFunctions.selectMenuItem(getWindow().getName(), getName(), textValue, indexPath);
    }

    /*********** <pre> 
                 Action to select a menuItem according to its text value.
              
                 In RRAFS, this command will work on both JavaMenu items and JavaPopupMenu items.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:YES 
                 Case-sensitive text of menuItem to select OR an App Map reference.
              
     @param indexPath  Optional:YES 
                 The index for item of each level. It is 1-based.
              
     **********/
    public void selectMenuItem(StepTestTable table, String textValue, String indexPath ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectMenuItem.table = null");

        table.add( JavaMenuFunctions.selectMenuItem(getWindow().getName(), getName(), textValue, indexPath));
    }

    /*********** <pre> 
                 Action to select a menuItem according to its text value.
              
                 In RRAFS, this command will work on both JavaMenu items and JavaPopupMenu items.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:YES 
                 Case-sensitive text of menuItem to select OR an App Map reference.
              <BR/>         indexPath -- Optional:YES 
                 The index for item of each level. It is 1-based.
              
    </UL>

     **********/
    public ComponentFunction selectMenuItem(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "selectMenuItem.parameters = null");
        return JavaMenuFunctions.selectMenuItem(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Action to select a menuItem according to its text value.
              
                 In RRAFS, this command will work on both JavaMenu items and JavaPopupMenu items.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:YES 
                 Case-sensitive text of menuItem to select OR an App Map reference.
              <BR/>         indexPath -- Optional:YES 
                 The index for item of each level. It is 1-based.
              
    </UL>

     **********/
    public void selectMenuItem(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectMenuItem.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectMenuItem.parameters = null");
        table.add( JavaMenuFunctions.selectMenuItem(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Action to select a menuItem according to a partial match of its text value.
              
                 In RRAFS, this command will work on both JavaMenu items and JavaPopupMenu items.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:YES 
                 Case-insensitive substring of menuItem to select OR an App Map reference.
              
     @param indexPath  Optional:YES 
                 The index for item of each level. It is 1-based.
              
     **********/
    public ComponentFunction selectMenuItemContains(String textValue, String indexPath ) {

        return JavaMenuFunctions.selectMenuItemContains(getWindow().getName(), getName(), textValue, indexPath);
    }

    /*********** <pre> 
                 Action to select a menuItem according to a partial match of its text value.
              
                 In RRAFS, this command will work on both JavaMenu items and JavaPopupMenu items.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:YES 
                 Case-insensitive substring of menuItem to select OR an App Map reference.
              
     @param indexPath  Optional:YES 
                 The index for item of each level. It is 1-based.
              
     **********/
    public void selectMenuItemContains(StepTestTable table, String textValue, String indexPath ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectMenuItemContains.table = null");

        table.add( JavaMenuFunctions.selectMenuItemContains(getWindow().getName(), getName(), textValue, indexPath));
    }

    /*********** <pre> 
                 Action to select a menuItem according to a partial match of its text value.
              
                 In RRAFS, this command will work on both JavaMenu items and JavaPopupMenu items.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:YES 
                 Case-insensitive substring of menuItem to select OR an App Map reference.
              <BR/>         indexPath -- Optional:YES 
                 The index for item of each level. It is 1-based.
              
    </UL>

     **********/
    public ComponentFunction selectMenuItemContains(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "selectMenuItemContains.parameters = null");
        return JavaMenuFunctions.selectMenuItemContains(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Action to select a menuItem according to a partial match of its text value.
              
                 In RRAFS, this command will work on both JavaMenu items and JavaPopupMenu items.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:YES 
                 Case-insensitive substring of menuItem to select OR an App Map reference.
              <BR/>         indexPath -- Optional:YES 
                 The index for item of each level. It is 1-based.
              
    </UL>

     **********/
    public void selectMenuItemContains(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectMenuItemContains.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectMenuItemContains.parameters = null");
        table.add( JavaMenuFunctions.selectMenuItemContains(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Action to select a menuItem according to its text value without verification of it's existance.
              
				  Action to select a menuItem according to its text value without verification of it's existance.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of menuItem to select OR an App Map reference.
              
     @param indexPath  Optional:YES 
                 The index for item of each level. It is 1-based.
              
     **********/
    public ComponentFunction selectUnverifiedMenuItem(String textValue, String indexPath ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "selectUnverifiedMenuItem.textValue = null");
        return JavaMenuFunctions.selectUnverifiedMenuItem(getWindow().getName(), getName(), textValue, indexPath);
    }

    /*********** <pre> 
                 Action to select a menuItem according to its text value without verification of it's existance.
              
				  Action to select a menuItem according to its text value without verification of it's existance.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of menuItem to select OR an App Map reference.
              
     @param indexPath  Optional:YES 
                 The index for item of each level. It is 1-based.
              
     **********/
    public void selectUnverifiedMenuItem(StepTestTable table, String textValue, String indexPath ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectUnverifiedMenuItem.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectUnverifiedMenuItem.textValue = null");
        table.add( JavaMenuFunctions.selectUnverifiedMenuItem(getWindow().getName(), getName(), textValue, indexPath));
    }

    /*********** <pre> 
                 Action to select a menuItem according to its text value without verification of it's existance.
              
				  Action to select a menuItem according to its text value without verification of it's existance.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of menuItem to select OR an App Map reference.
              <BR/>         indexPath -- Optional:YES 
                 The index for item of each level. It is 1-based.
              
    </UL>

     **********/
    public ComponentFunction selectUnverifiedMenuItem(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "selectUnverifiedMenuItem.parameters = null");
        return JavaMenuFunctions.selectUnverifiedMenuItem(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Action to select a menuItem according to its text value without verification of it's existance.
              
				  Action to select a menuItem according to its text value without verification of it's existance.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         textValue -- Optional:NO 
                 Case-sensitive text of menuItem to select OR an App Map reference.
              <BR/>         indexPath -- Optional:YES 
                 The index for item of each level. It is 1-based.
              
    </UL>

     **********/
    public void selectUnverifiedMenuItem(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectUnverifiedMenuItem.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectUnverifiedMenuItem.parameters = null");
        table.add( JavaMenuFunctions.selectUnverifiedMenuItem(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
               Attempts to verify the a particular menuitem exists in a menu.
               
                The menuitem should be specified in the form 
                "Menu->Menu->MenuItem   CTRL+V" with the full text (ampersands optional), 
                spaces(if any), and keyboard shortcut text (if any).  
                (The ampersands precede any character in the menuitem that is underlined.)
                
                This command differs from the WindowFunction.VerifyMenuItem command because 
                here we are actually seeking a JavaMenu component, not a Window that contains 
                a menu.  Also, we do not currently verify any state information like the 
                WindowFunctions.VerifyMenuItem command.
                
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param menuItemText  Optional:NO 
                Menu->MenuItem hierarchy string to identify which menuitem to find.
              
     @param expectedStatus  Optional:YES 
                Expected status string (or part thereof) of the menuitem. 
              
     @param indexPath  Optional:YES 
                 The index for item of each level. It is 1-based.
              
     **********/
    public ComponentFunction verifyMenuItem(String menuItemText, String expectedStatus, String indexPath ) {

        if ( menuItemText == null ) throw new IllegalArgumentException ( "verifyMenuItem.menuItemText = null");
        return JavaMenuFunctions.verifyMenuItem(getWindow().getName(), getName(), menuItemText, expectedStatus, indexPath);
    }

    /*********** <pre> 
               Attempts to verify the a particular menuitem exists in a menu.
               
                The menuitem should be specified in the form 
                "Menu->Menu->MenuItem   CTRL+V" with the full text (ampersands optional), 
                spaces(if any), and keyboard shortcut text (if any).  
                (The ampersands precede any character in the menuitem that is underlined.)
                
                This command differs from the WindowFunction.VerifyMenuItem command because 
                here we are actually seeking a JavaMenu component, not a Window that contains 
                a menu.  Also, we do not currently verify any state information like the 
                WindowFunctions.VerifyMenuItem command.
                
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param menuItemText  Optional:NO 
                Menu->MenuItem hierarchy string to identify which menuitem to find.
              
     @param expectedStatus  Optional:YES 
                Expected status string (or part thereof) of the menuitem. 
              
     @param indexPath  Optional:YES 
                 The index for item of each level. It is 1-based.
              
     **********/
    public void verifyMenuItem(StepTestTable table, String menuItemText, String expectedStatus, String indexPath ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyMenuItem.table = null");

        if ( menuItemText == null ) throw new IllegalArgumentException ( "verifyMenuItem.menuItemText = null");
        table.add( JavaMenuFunctions.verifyMenuItem(getWindow().getName(), getName(), menuItemText, expectedStatus, indexPath));
    }

    /*********** <pre> 
               Attempts to verify the a particular menuitem exists in a menu.
               
                The menuitem should be specified in the form 
                "Menu->Menu->MenuItem   CTRL+V" with the full text (ampersands optional), 
                spaces(if any), and keyboard shortcut text (if any).  
                (The ampersands precede any character in the menuitem that is underlined.)
                
                This command differs from the WindowFunction.VerifyMenuItem command because 
                here we are actually seeking a JavaMenu component, not a Window that contains 
                a menu.  Also, we do not currently verify any state information like the 
                WindowFunctions.VerifyMenuItem command.
                
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         menuItemText -- Optional:NO 
                Menu->MenuItem hierarchy string to identify which menuitem to find.
              <BR/>         expectedStatus -- Optional:YES 
                Expected status string (or part thereof) of the menuitem. 
              <BR/>         indexPath -- Optional:YES 
                 The index for item of each level. It is 1-based.
              
    </UL>

     **********/
    public ComponentFunction verifyMenuItem(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyMenuItem.parameters = null");
        return JavaMenuFunctions.verifyMenuItem(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
               Attempts to verify the a particular menuitem exists in a menu.
               
                The menuitem should be specified in the form 
                "Menu->Menu->MenuItem   CTRL+V" with the full text (ampersands optional), 
                spaces(if any), and keyboard shortcut text (if any).  
                (The ampersands precede any character in the menuitem that is underlined.)
                
                This command differs from the WindowFunction.VerifyMenuItem command because 
                here we are actually seeking a JavaMenu component, not a Window that contains 
                a menu.  Also, we do not currently verify any state information like the 
                WindowFunctions.VerifyMenuItem command.
                
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         menuItemText -- Optional:NO 
                Menu->MenuItem hierarchy string to identify which menuitem to find.
              <BR/>         expectedStatus -- Optional:YES 
                Expected status string (or part thereof) of the menuitem. 
              <BR/>         indexPath -- Optional:YES 
                 The index for item of each level. It is 1-based.
              
    </UL>

     **********/
    public void verifyMenuItem(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyMenuItem.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyMenuItem.parameters = null");
        table.add( JavaMenuFunctions.verifyMenuItem(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
               Attempts to verify the existence of a menuitem found by partial text match.
               
                Attempts to verify the existence of a menuitem found by partial text match.
                The menuitem should be specified in the form "Menu->Menu->MenuItem".  
                (Optional ampersands precede any character in the menuitem that is underlined.)
                
                This command differs from the WindowFunction.VerifyMenuItemContains command because 
                here we are actually seeking a JavaMenu component, not a Window that contains 
                a menu.  Also, we do not currently verify any state information like the 
                WindowFunctions.VerifyMenuItemContains command.
                
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param menuItemText  Optional:NO 
                Menu->MenuItem hierarchy string to identify which menuitem to find.
              
     @param expectedStatus  Optional:YES 
                Expected status string (or part thereof) of the menuitem. 
              
     @param indexPath  Optional:YES 
                 The index for item of each level. It is 1-based.
              
     **********/
    public ComponentFunction verifyMenuItemContains(String menuItemText, String expectedStatus, String indexPath ) {

        if ( menuItemText == null ) throw new IllegalArgumentException ( "verifyMenuItemContains.menuItemText = null");
        return JavaMenuFunctions.verifyMenuItemContains(getWindow().getName(), getName(), menuItemText, expectedStatus, indexPath);
    }

    /*********** <pre> 
               Attempts to verify the existence of a menuitem found by partial text match.
               
                Attempts to verify the existence of a menuitem found by partial text match.
                The menuitem should be specified in the form "Menu->Menu->MenuItem".  
                (Optional ampersands precede any character in the menuitem that is underlined.)
                
                This command differs from the WindowFunction.VerifyMenuItemContains command because 
                here we are actually seeking a JavaMenu component, not a Window that contains 
                a menu.  Also, we do not currently verify any state information like the 
                WindowFunctions.VerifyMenuItemContains command.
                
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param menuItemText  Optional:NO 
                Menu->MenuItem hierarchy string to identify which menuitem to find.
              
     @param expectedStatus  Optional:YES 
                Expected status string (or part thereof) of the menuitem. 
              
     @param indexPath  Optional:YES 
                 The index for item of each level. It is 1-based.
              
     **********/
    public void verifyMenuItemContains(StepTestTable table, String menuItemText, String expectedStatus, String indexPath ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyMenuItemContains.table = null");

        if ( menuItemText == null ) throw new IllegalArgumentException ( "verifyMenuItemContains.menuItemText = null");
        table.add( JavaMenuFunctions.verifyMenuItemContains(getWindow().getName(), getName(), menuItemText, expectedStatus, indexPath));
    }

    /*********** <pre> 
               Attempts to verify the existence of a menuitem found by partial text match.
               
                Attempts to verify the existence of a menuitem found by partial text match.
                The menuitem should be specified in the form "Menu->Menu->MenuItem".  
                (Optional ampersands precede any character in the menuitem that is underlined.)
                
                This command differs from the WindowFunction.VerifyMenuItemContains command because 
                here we are actually seeking a JavaMenu component, not a Window that contains 
                a menu.  Also, we do not currently verify any state information like the 
                WindowFunctions.VerifyMenuItemContains command.
                
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         menuItemText -- Optional:NO 
                Menu->MenuItem hierarchy string to identify which menuitem to find.
              <BR/>         expectedStatus -- Optional:YES 
                Expected status string (or part thereof) of the menuitem. 
              <BR/>         indexPath -- Optional:YES 
                 The index for item of each level. It is 1-based.
              
    </UL>

     **********/
    public ComponentFunction verifyMenuItemContains(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyMenuItemContains.parameters = null");
        return JavaMenuFunctions.verifyMenuItemContains(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
               Attempts to verify the existence of a menuitem found by partial text match.
               
                Attempts to verify the existence of a menuitem found by partial text match.
                The menuitem should be specified in the form "Menu->Menu->MenuItem".  
                (Optional ampersands precede any character in the menuitem that is underlined.)
                
                This command differs from the WindowFunction.VerifyMenuItemContains command because 
                here we are actually seeking a JavaMenu component, not a Window that contains 
                a menu.  Also, we do not currently verify any state information like the 
                WindowFunctions.VerifyMenuItemContains command.
                
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         menuItemText -- Optional:NO 
                Menu->MenuItem hierarchy string to identify which menuitem to find.
              <BR/>         expectedStatus -- Optional:YES 
                Expected status string (or part thereof) of the menuitem. 
              <BR/>         indexPath -- Optional:YES 
                 The index for item of each level. It is 1-based.
              
    </UL>

     **********/
    public void verifyMenuItemContains(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyMenuItemContains.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyMenuItemContains.parameters = null");
        table.add( JavaMenuFunctions.verifyMenuItemContains(getWindow().getName(), getName(), parameters));
    }

}
