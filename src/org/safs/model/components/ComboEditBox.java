
/******************************************************************************
 * ComboEditBox.java
 *
 * Copyright (c) by SAS Institute Inc., Cary, NC 27513
 * General Public License: http://www.opensource.org/licenses/gpl-license.php
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   ComboEditBoxFunctions.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaComponentModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe ComboEditBoxFunctions.xml XSLJavaComponentModel.xsl -o ComboEditBox.java
 *
 ******************************************************************************/ 
package org.safs.model.components;

import org.safs.model.commands.ComboEditBoxFunctions;
import org.safs.model.ComponentFunction;
import org.safs.model.components.UIComponent;
import org.safs.model.StepTestTable;

public class ComboEditBox extends GenericObject {

    /*****************
    Constructor 

    Create an instance of pseudo-component representing 
    a specific component in a specific window.
    
    @param window  Optional:NO 
           Specifies which Window this component is 'in'.
    @param compname Optional:NO 
           Specifies the AppMap name of the component in the Window.
    ****************/
    public ComboEditBox(Window window, String compname) {

        super(window, compname);
    }

    /*****************
    Constructor 

    Create an instance of pseudo-component representing 
    a specific component in a specific window.
    
    This convenience routine will create the requisite Window component.
    
    @param winname  Optional:NO 
           Specifies the AppMap name of the window.
    @param compname Optional:NO 
           Specifies the AppMap name of the component in the Window.
    ****************/
    public ComboEditBox(String winname, String compname) {

        this(new Window(winname), compname);
    }

    protected ComboEditBox(String compname) {

        super(compname);
    }



    /*********** <pre> 
                 Defaults to Generic CLICK where applicable.
               
                Attempts to perform a standard Click on the ComboEditBox.  If the ComboEditBox 
                list is not exposed then this may expose the list of items.  If the
                list is already exposed, then this may close the list.  It may also just provide 
                focus to the ComboEditBox.
                  
                It must be noted that when you expose the list in a ComboEditBox, it is no 
                longer a ComboEditBox.  It typically converts to a ComboListBox.  This may 
                not be an issue on controls that Robot can recognize with a NAME= method. 
                
                However, if the control is recognized by ObjectIndex or some other means 
                then the original ComboEditBox may no longer be found on the screen. 
                With this scenario, you need to reference the ComboEditBox and the ComboListBox
                in the application map (and associated data files) as two separate items.
                
                To avoid these potential problems, use the ComboEditBox 'SELECT' command 
                to actually open the list and select the item all with a single command.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>AutomatedQA TestComplete</LI>
    </UL>

     **********/
    public ComponentFunction click( ) {

        return ComboEditBoxFunctions.click(getWindow().getName(), getName());
    }

    /*********** <pre> 
                 Defaults to Generic CLICK where applicable.
               
                Attempts to perform a standard Click on the ComboEditBox.  If the ComboEditBox 
                list is not exposed then this may expose the list of items.  If the
                list is already exposed, then this may close the list.  It may also just provide 
                focus to the ComboEditBox.
                  
                It must be noted that when you expose the list in a ComboEditBox, it is no 
                longer a ComboEditBox.  It typically converts to a ComboListBox.  This may 
                not be an issue on controls that Robot can recognize with a NAME= method. 
                
                However, if the control is recognized by ObjectIndex or some other means 
                then the original ComboEditBox may no longer be found on the screen. 
                With this scenario, you need to reference the ComboEditBox and the ComboListBox
                in the application map (and associated data files) as two separate items.
                
                To avoid these potential problems, use the ComboEditBox 'SELECT' command 
                to actually open the list and select the item all with a single command.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     **********/
    public void click(StepTestTable table ) {

        if ( table == null ) throw new IllegalArgumentException ( "click.table = null");

        table.add( ComboEditBoxFunctions.click(getWindow().getName(), getName()));
    }

    /*********** <pre> 
                 Select an item by its text value from a ComboEditBox.
               
                Select an item by its text value from a ComboEditBox.  
                This method combines the initial Click required to expose the list 
                of items and then the subsequent selection of a text item from the list.
                
                The routine will first attempt to see if the item exists in the list 
                and should provide a warning if it cannot find the item or cannot 
                read the list of items.  The routine will then attempt the selection.
                
                After the selection is attempted, the routine tries to verify that the 
                list has the specified item as the selected item.  A warning will be 
                issued if the routine cannot read the list.  A failure will be issued 
                if the routine CAN read the list and determines that the specified 
                item is NOT the currently selected item.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param textValue  Optional:NO 
                 The case-sensitive item in the drop down list to select.
              
     **********/
    public ComponentFunction select(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "select.textValue = null");
        return ComboEditBoxFunctions.select(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Select an item by its text value from a ComboEditBox.
               
                Select an item by its text value from a ComboEditBox.  
                This method combines the initial Click required to expose the list 
                of items and then the subsequent selection of a text item from the list.
                
                The routine will first attempt to see if the item exists in the list 
                and should provide a warning if it cannot find the item or cannot 
                read the list of items.  The routine will then attempt the selection.
                
                After the selection is attempted, the routine tries to verify that the 
                list has the specified item as the selected item.  A warning will be 
                issued if the routine cannot read the list.  A failure will be issued 
                if the routine CAN read the list and determines that the specified 
                item is NOT the currently selected item.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 The case-sensitive item in the drop down list to select.
              
     **********/
    public void select(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "select.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "select.textValue = null");
        table.add( ComboEditBoxFunctions.select(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                 Select an item by its index from a ComboEditBox (ComboBox).
               
                Select an item by its index from a ComboEditBox (ComboBox).  
                This method combines the initial Click required to expose the list 
                of items and then the subsequent selection of the item from the list.
                
                The routine will first attempt to see if the index exists in the list 
                and should provide a warning if it cannot find the item or cannot 
                read the list of items.  The routine will then attempt the selection.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param indexValue  Optional:NO 
                 The item index in the drop down list to select.
              
     **********/
    public ComponentFunction selectIndex(String indexValue ) {

        if ( indexValue == null ) throw new IllegalArgumentException ( "selectIndex.indexValue = null");
        return ComboEditBoxFunctions.selectIndex(getWindow().getName(), getName(), indexValue);
    }

    /*********** <pre> 
                 Select an item by its index from a ComboEditBox (ComboBox).
               
                Select an item by its index from a ComboEditBox (ComboBox).  
                This method combines the initial Click required to expose the list 
                of items and then the subsequent selection of the item from the list.
                
                The routine will first attempt to see if the index exists in the list 
                and should provide a warning if it cannot find the item or cannot 
                read the list of items.  The routine will then attempt the selection.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param indexValue  Optional:NO 
                 The item index in the drop down list to select.
              
     **********/
    public void selectIndex(StepTestTable table, String indexValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectIndex.table = null");

        if ( indexValue == null ) throw new IllegalArgumentException ( "selectIndex.indexValue = null");
        table.add( ComboEditBoxFunctions.selectIndex(getWindow().getName(), getName(), indexValue));
    }

    /*********** <pre> 
                 Select an item via a partial text match.
               
                Select an item via a partial text match.
                This method combines the initial Click required to expose the list 
                of items and then the subsequent selection of a text item from the list.
                
                The routine will first attempt to see if the item exists in the list 
                and should provide a warning if it cannot find the item or cannot 
                read the list of items.  The routine will then attempt the selection.
                
                After the selection is attempted, the routine tries to verify that the 
                list has the specified item as the selected item.  A warning will be 
                issued if the routine cannot read the list.  A failure will be issued 
                if the routine CAN read the list and determines that the specified 
                item is NOT the currently selected item.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param textValue  Optional:NO 
                 The case-sensitive substring of an item in the drop down list to select.
              
     **********/
    public ComponentFunction selectPartialMatch(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "selectPartialMatch.textValue = null");
        return ComboEditBoxFunctions.selectPartialMatch(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Select an item via a partial text match.
               
                Select an item via a partial text match.
                This method combines the initial Click required to expose the list 
                of items and then the subsequent selection of a text item from the list.
                
                The routine will first attempt to see if the item exists in the list 
                and should provide a warning if it cannot find the item or cannot 
                read the list of items.  The routine will then attempt the selection.
                
                After the selection is attempted, the routine tries to verify that the 
                list has the specified item as the selected item.  A warning will be 
                issued if the routine cannot read the list.  A failure will be issued 
                if the routine CAN read the list and determines that the specified 
                item is NOT the currently selected item.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 The case-sensitive substring of an item in the drop down list to select.
              
     **********/
    public void selectPartialMatch(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectPartialMatch.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectPartialMatch.textValue = null");
        table.add( ComboEditBoxFunctions.selectPartialMatch(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
            Set the text of the ComboEditBox
               
                This action sets the text of the ComboEditBox.  This version allows the use 
                of special character combinations and substrings to identify specific 
                keyboard keys.  These are the same special characters and interpretation 
                used for Robot's InputKeys command and the Windows Scripting Host.
                
                ~^+%{( are primarily the characters that induce special processing.
                
                The routine verifies we can read the text property, sets the text value 
                and will verify that the property has been set to that value *IF* none 
                of the special characters exist in the provided text value.  If those 
                special characters exist, then no post-set verification will occur.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param textValue  Optional:YES  DefaultVal: 
             The text that will be typed into the ComboEditBox.
              
     **********/
    public ComponentFunction setTextValue(String textValue ) {

        return ComboEditBoxFunctions.setTextValue(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
            Set the text of the ComboEditBox
               
                This action sets the text of the ComboEditBox.  This version allows the use 
                of special character combinations and substrings to identify specific 
                keyboard keys.  These are the same special characters and interpretation 
                used for Robot's InputKeys command and the Windows Scripting Host.
                
                ~^+%{( are primarily the characters that induce special processing.
                
                The routine verifies we can read the text property, sets the text value 
                and will verify that the property has been set to that value *IF* none 
                of the special characters exist in the provided text value.  If those 
                special characters exist, then no post-set verification will occur.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:YES  DefaultVal: 
             The text that will be typed into the ComboEditBox.
              
     **********/
    public void setTextValue(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "setTextValue.table = null");

        table.add( ComboEditBoxFunctions.setTextValue(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
            Set the text of the ComboEditBox without verification
               
                This action sets the text of the ComboEditBox.  This version allows the use 
                of special character combinations and substrings to identify specific 
                keyboard keys.  These are the same special characters and interpretation 
                used for Robot's InputKeys command and the Windows Scripting Host.
                
                ~^+%{( are primarily the characters that induce special processing.
                
                The routine verifies we can read the text property, sets the text value 
                but does not verify that the property has been set to that value and does not verify whether
		or not any of the special characters exist in the provided text value.
		

                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param textValue  Optional:YES  DefaultVal: 
             The text that will be typed into the ComboEditBox.
              
     **********/
    public ComponentFunction setUnverifiedTextValue(String textValue ) {

        return ComboEditBoxFunctions.setUnverifiedTextValue(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
            Set the text of the ComboEditBox without verification
               
                This action sets the text of the ComboEditBox.  This version allows the use 
                of special character combinations and substrings to identify specific 
                keyboard keys.  These are the same special characters and interpretation 
                used for Robot's InputKeys command and the Windows Scripting Host.
                
                ~^+%{( are primarily the characters that induce special processing.
                
                The routine verifies we can read the text property, sets the text value 
                but does not verify that the property has been set to that value and does not verify whether
		or not any of the special characters exist in the provided text value.
		

                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:YES  DefaultVal: 
             The text that will be typed into the ComboEditBox.
              
     **********/
    public void setUnverifiedTextValue(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "setUnverifiedTextValue.table = null");

        table.add( ComboEditBoxFunctions.setUnverifiedTextValue(getWindow().getName(), getName(), textValue));
    }

}
