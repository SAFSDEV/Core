
/******************************************************************************
 * ScrollBar.java
 *
 * Copyright (C) SAS Institute, All rights reserved.
 * General Public License: https://www.gnu.org/licenses/gpl-3.0.en.html
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   ScrollBarFunctions.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaComponentModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe ScrollBarFunctions.xml XSLJavaComponentModel.xsl -o ScrollBar.java
 *
 ******************************************************************************/ 
package org.safs.model.components;

import org.safs.model.commands.ScrollBarFunctions;
import org.safs.model.ComponentFunction;
import org.safs.model.components.UIComponent;
import org.safs.model.StepTestTable;

public class ScrollBar extends GenericObject {

    /*****************
    Constructor 

    Create an instance of pseudo-component representing 
    a specific component in a specific window.
    
    @param window  Optional:NO 
           Specifies which Window this component is 'in'.
    @param compname Optional:NO 
           Specifies the AppMap name of the component in the Window.
    ****************/
    public ScrollBar(Window window, String compname) {

        super(window, compname);
    }

    /*****************
    Constructor 

    Create an instance of pseudo-component representing 
    a specific component in a specific window.
    
    This convenience routine will create the requisite Window component.
    
    @param winname  Optional:NO 
           Specifies the AppMap name of the window.
    @param compname Optional:NO 
           Specifies the AppMap name of the component in the Window.
    ****************/
    public ScrollBar(String winname, String compname) {

        this(new Window(winname), compname);
    }

    protected ScrollBar(String compname) {

        super(compname);
    }



    /*********** <pre> 
                 Attempts to perform a ScrollLineDown on a scrollbar.
               
                Attempts to perform a ScrollLineDown on a scrollbar.  The input record 
                can optionally specify the number of iterations to perform the action.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param integerValue  Optional:YES  DefaultVal:1 
                 Optional integer to specify how many times to perform the action.
              
     **********/
    public ComponentFunction oneDown(String integerValue ) {

        return ScrollBarFunctions.oneDown(getWindow().getName(), getName(), integerValue);
    }

    /*********** <pre> 
                 Attempts to perform a ScrollLineDown on a scrollbar.
               
                Attempts to perform a ScrollLineDown on a scrollbar.  The input record 
                can optionally specify the number of iterations to perform the action.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param integerValue  Optional:YES  DefaultVal:1 
                 Optional integer to specify how many times to perform the action.
              
     **********/
    public void oneDown(StepTestTable table, String integerValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "oneDown.table = null");

        table.add( ScrollBarFunctions.oneDown(getWindow().getName(), getName(), integerValue));
    }

    /*********** <pre> 
                 Attempts to perform a ScrollLeft on a scrollbar.
               
                Attempts to perform a ScrollLeft on a scrollbar.  The input record 
                can optionally specify the number of iterations to perform the action.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param integerValue  Optional:YES  DefaultVal:1 
                 Optional integer to specify how many times to perform the action.
              
     **********/
    public ComponentFunction oneLeft(String integerValue ) {

        return ScrollBarFunctions.oneLeft(getWindow().getName(), getName(), integerValue);
    }

    /*********** <pre> 
                 Attempts to perform a ScrollLeft on a scrollbar.
               
                Attempts to perform a ScrollLeft on a scrollbar.  The input record 
                can optionally specify the number of iterations to perform the action.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param integerValue  Optional:YES  DefaultVal:1 
                 Optional integer to specify how many times to perform the action.
              
     **********/
    public void oneLeft(StepTestTable table, String integerValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "oneLeft.table = null");

        table.add( ScrollBarFunctions.oneLeft(getWindow().getName(), getName(), integerValue));
    }

    /*********** <pre> 
                 Attempts to perform a ScrollRight on a scrollbar.
               
                Attempts to perform a ScrollRight on a scrollbar.  The input record 
                can optionally specify the number of iterations to perform the action.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param integerValue  Optional:YES  DefaultVal:1 
                 Optional integer to specify how many times to perform the action.
              
     **********/
    public ComponentFunction oneRight(String integerValue ) {

        return ScrollBarFunctions.oneRight(getWindow().getName(), getName(), integerValue);
    }

    /*********** <pre> 
                 Attempts to perform a ScrollRight on a scrollbar.
               
                Attempts to perform a ScrollRight on a scrollbar.  The input record 
                can optionally specify the number of iterations to perform the action.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param integerValue  Optional:YES  DefaultVal:1 
                 Optional integer to specify how many times to perform the action.
              
     **********/
    public void oneRight(StepTestTable table, String integerValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "oneRight.table = null");

        table.add( ScrollBarFunctions.oneRight(getWindow().getName(), getName(), integerValue));
    }

    /*********** <pre> 
                 Attempts to perform a ScrollLineUp on a scrollbar.
               
                Attempts to perform a ScrollLineUp on a scrollbar.  The input record 
                can optionally specify the number of iterations to perform the action.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param integerValue  Optional:YES  DefaultVal:1 
                 Optional integer to specify how many times to perform the action.
              
     **********/
    public ComponentFunction oneUp(String integerValue ) {

        return ScrollBarFunctions.oneUp(getWindow().getName(), getName(), integerValue);
    }

    /*********** <pre> 
                 Attempts to perform a ScrollLineUp on a scrollbar.
               
                Attempts to perform a ScrollLineUp on a scrollbar.  The input record 
                can optionally specify the number of iterations to perform the action.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param integerValue  Optional:YES  DefaultVal:1 
                 Optional integer to specify how many times to perform the action.
              
     **********/
    public void oneUp(StepTestTable table, String integerValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "oneUp.table = null");

        table.add( ScrollBarFunctions.oneUp(getWindow().getName(), getName(), integerValue));
    }

    /*********** <pre> 
                 Attempts to perform a ScrollPageDown on a scrollbar.
               
                Attempts to perform a ScrollPageDown on a scrollbar.  The input record 
                can optionally specify the number of iterations to perform the action.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param integerValue  Optional:YES  DefaultVal:1 
                 Optional integer to specify how many times to perform the action.
              
     **********/
    public ComponentFunction pageDown(String integerValue ) {

        return ScrollBarFunctions.pageDown(getWindow().getName(), getName(), integerValue);
    }

    /*********** <pre> 
                 Attempts to perform a ScrollPageDown on a scrollbar.
               
                Attempts to perform a ScrollPageDown on a scrollbar.  The input record 
                can optionally specify the number of iterations to perform the action.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param integerValue  Optional:YES  DefaultVal:1 
                 Optional integer to specify how many times to perform the action.
              
     **********/
    public void pageDown(StepTestTable table, String integerValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "pageDown.table = null");

        table.add( ScrollBarFunctions.pageDown(getWindow().getName(), getName(), integerValue));
    }

    /*********** <pre> 
                 Attempts to perform a ScrollPageLeft on a scrollbar.
               
                Attempts to perform a ScrollPageLeft on a scrollbar.  The input record 
                can optionally specify the number of iterations to perform the action.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param integerValue  Optional:YES  DefaultVal:1 
                 Optional integer to specify how many times to perform the action.
              
     **********/
    public ComponentFunction pageLeft(String integerValue ) {

        return ScrollBarFunctions.pageLeft(getWindow().getName(), getName(), integerValue);
    }

    /*********** <pre> 
                 Attempts to perform a ScrollPageLeft on a scrollbar.
               
                Attempts to perform a ScrollPageLeft on a scrollbar.  The input record 
                can optionally specify the number of iterations to perform the action.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param integerValue  Optional:YES  DefaultVal:1 
                 Optional integer to specify how many times to perform the action.
              
     **********/
    public void pageLeft(StepTestTable table, String integerValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "pageLeft.table = null");

        table.add( ScrollBarFunctions.pageLeft(getWindow().getName(), getName(), integerValue));
    }

    /*********** <pre> 
                 Attempts to perform a ScrollPageRight on a scrollbar.
               
                Attempts to perform a ScrollPageRight on a scrollbar.  The input record 
                can optionally specify the number of iterations to perform the action.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param integerValue  Optional:YES  DefaultVal:1 
                 Optional integer to specify how many times to perform the action.
              
     **********/
    public ComponentFunction pageRight(String integerValue ) {

        return ScrollBarFunctions.pageRight(getWindow().getName(), getName(), integerValue);
    }

    /*********** <pre> 
                 Attempts to perform a ScrollPageRight on a scrollbar.
               
                Attempts to perform a ScrollPageRight on a scrollbar.  The input record 
                can optionally specify the number of iterations to perform the action.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param integerValue  Optional:YES  DefaultVal:1 
                 Optional integer to specify how many times to perform the action.
              
     **********/
    public void pageRight(StepTestTable table, String integerValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "pageRight.table = null");

        table.add( ScrollBarFunctions.pageRight(getWindow().getName(), getName(), integerValue));
    }

    /*********** <pre> 
                 Attempts to perform a ScrollPageUp on a scrollbar.
               
                Attempts to perform a ScrollPageUp on a scrollbar.  The input record 
                can optionally specify the number of iterations to perform the action.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param integerValue  Optional:YES  DefaultVal:1 
                 Optional integer to specify how many times to perform the action.
              
     **********/
    public ComponentFunction pageUp(String integerValue ) {

        return ScrollBarFunctions.pageUp(getWindow().getName(), getName(), integerValue);
    }

    /*********** <pre> 
                 Attempts to perform a ScrollPageUp on a scrollbar.
               
                Attempts to perform a ScrollPageUp on a scrollbar.  The input record 
                can optionally specify the number of iterations to perform the action.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>Automated QA TestComplete</LI>
    <LI>Google Android</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param integerValue  Optional:YES  DefaultVal:1 
                 Optional integer to specify how many times to perform the action.
              
     **********/
    public void pageUp(StepTestTable table, String integerValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "pageUp.table = null");

        table.add( ScrollBarFunctions.pageUp(getWindow().getName(), getName(), integerValue));
    }

}
