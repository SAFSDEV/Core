
/******************************************************************************
 * DotNetTree.java
 *
 * Copyright (C) SAS Institute, All rights reserved.
 * General Public License: https://www.gnu.org/licenses/gpl-3.0.en.html
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   DotNetTreeFunctions.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaComponentModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe DotNetTreeFunctions.xml XSLJavaComponentModel.xsl -o DotNetTree.java
 *
 ******************************************************************************/ 
package org.safs.model.components;

import org.safs.model.commands.DotNetTreeFunctions;
import org.safs.model.ComponentFunction;
import org.safs.model.components.UIComponent;
import org.safs.model.StepTestTable;

public class DotNetTree extends JavaTree {

    /*****************
    Constructor 

    Create an instance of pseudo-component representing 
    a specific component in a specific window.
    
    @param window  Optional:NO 
           Specifies which Window this component is 'in'.
    @param compname Optional:NO 
           Specifies the AppMap name of the component in the Window.
    ****************/
    public DotNetTree(Window window, String compname) {

        super(window, compname);
    }

    /*****************
    Constructor 

    Create an instance of pseudo-component representing 
    a specific component in a specific window.
    
    This convenience routine will create the requisite Window component.
    
    @param winname  Optional:NO 
           Specifies the AppMap name of the window.
    @param compname Optional:NO 
           Specifies the AppMap name of the component in the Window.
    ****************/
    public DotNetTree(String winname, String compname) {

        this(new Window(winname), compname);
    }

    protected DotNetTree(String compname) {

        super(compname);
    }



    /*********** <pre>
             Copy the current contents of a tree[branch] to a file.
             
             The search of the path to the node is expected to be a case-sensitive 
             exact match of each node.  Use 'PartialMatchTreeDataToFile' if you 
             wish to specify case-insensitive substring matches for tree nodes.             
             
             By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param file  Optional:NO
             The name of the file used to store the tree data.
              
     @param branch  Optional:YES
	                	The full name of the tree branch to capture.
	                
     @param indentMark  Optional:YES
		        	The character(s) to use in the output file to indent the tree nodes from the 
		        	parent tree branches.
		        
     @param fileEncoding  Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
     @param filterMode  Optional:YES  DefaultVal:
             (Future) Specify a file filter to use to process the text before comparison.
              
     @param filterOptions  Optional:YES  DefaultVal:
             (Future) Specify filter options to use with the file filter.
              
     **********/
    public ComponentFunction captureTreeDataToFile(String file, String branch, String indentMark, String fileEncoding, String filterMode, String filterOptions ) {

        if ( file == null ) throw new IllegalArgumentException ( "captureTreeDataToFile.file = null");
        return DotNetTreeFunctions.captureTreeDataToFile(getWindow().getName(), getName(), file, branch, indentMark, fileEncoding, filterMode, filterOptions);
    }

    /*********** <pre>
             Copy the current contents of a tree[branch] to a file.
             
             The search of the path to the node is expected to be a case-sensitive 
             exact match of each node.  Use 'PartialMatchTreeDataToFile' if you 
             wish to specify case-insensitive substring matches for tree nodes.             
             
             By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param file  Optional:NO
             The name of the file used to store the tree data.
              
     @param branch  Optional:YES
	                	The full name of the tree branch to capture.
	                
     @param indentMark  Optional:YES
		        	The character(s) to use in the output file to indent the tree nodes from the 
		        	parent tree branches.
		        
     @param fileEncoding  Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
     @param filterMode  Optional:YES  DefaultVal:
             (Future) Specify a file filter to use to process the text before comparison.
              
     @param filterOptions  Optional:YES  DefaultVal:
             (Future) Specify filter options to use with the file filter.
              
     **********/
    public void captureTreeDataToFile(StepTestTable table, String file, String branch, String indentMark, String fileEncoding, String filterMode, String filterOptions ) {

        if ( table == null ) throw new IllegalArgumentException ( "captureTreeDataToFile.table = null");

        if ( file == null ) throw new IllegalArgumentException ( "captureTreeDataToFile.file = null");
        table.add( DotNetTreeFunctions.captureTreeDataToFile(getWindow().getName(), getName(), file, branch, indentMark, fileEncoding, filterMode, filterOptions));
    }

    /*********** <pre>
             Copy the current contents of a tree[branch] to a file.
             
             The search of the path to the node is expected to be a case-sensitive 
             exact match of each node.  Use 'PartialMatchTreeDataToFile' if you 
             wish to specify case-insensitive substring matches for tree nodes.             
             
             By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         file -- Optional:NO
             The name of the file used to store the tree data.
              <BR/>         branch -- Optional:YES
	                	The full name of the tree branch to capture.
	                <BR/>         indentMark -- Optional:YES
		        	The character(s) to use in the output file to indent the tree nodes from the 
		        	parent tree branches.
		        <BR/>         fileEncoding -- Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            <BR/>         filterMode -- Optional:YES  DefaultVal:
             (Future) Specify a file filter to use to process the text before comparison.
              <BR/>         filterOptions -- Optional:YES  DefaultVal:
             (Future) Specify filter options to use with the file filter.
              
    </UL>

     **********/
    public ComponentFunction captureTreeDataToFile(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "captureTreeDataToFile.parameters = null");
        return DotNetTreeFunctions.captureTreeDataToFile(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre>
             Copy the current contents of a tree[branch] to a file.
             
             The search of the path to the node is expected to be a case-sensitive 
             exact match of each node.  Use 'PartialMatchTreeDataToFile' if you 
             wish to specify case-insensitive substring matches for tree nodes.             
             
             By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         file -- Optional:NO
             The name of the file used to store the tree data.
              <BR/>         branch -- Optional:YES
	                	The full name of the tree branch to capture.
	                <BR/>         indentMark -- Optional:YES
		        	The character(s) to use in the output file to indent the tree nodes from the 
		        	parent tree branches.
		        <BR/>         fileEncoding -- Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            <BR/>         filterMode -- Optional:YES  DefaultVal:
             (Future) Specify a file filter to use to process the text before comparison.
              <BR/>         filterOptions -- Optional:YES  DefaultVal:
             (Future) Specify filter options to use with the file filter.
              
    </UL>

     **********/
    public void captureTreeDataToFile(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "captureTreeDataToFile.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "captureTreeDataToFile.parameters = null");
        table.add( DotNetTreeFunctions.captureTreeDataToFile(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Action to click a node according to its text value.  Currently, this component function 
                 is for Trees and works differently than documented in TreeViewFunctions (though that 
                 functionality may be added in the near future).
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of node to click.
              
     **********/
    public ComponentFunction clickTextNode(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "clickTextNode.textValue = null");
        return DotNetTreeFunctions.clickTextNode(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Action to click a node according to its text value.  Currently, this component function 
                 is for Trees and works differently than documented in TreeViewFunctions (though that 
                 functionality may be added in the near future).
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to click.
              
     **********/
    public void clickTextNode(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "clickTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "clickTextNode.textValue = null");
        table.add( DotNetTreeFunctions.clickTextNode(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                 Action to blindly click a node according to its text value.  Currently, this component function 
                 is for Trees and may work differently than documented in TreeViewFunctions.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive full path text of node to click.
              
     **********/
    public ComponentFunction clickUnverifiedTextNode(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "clickUnverifiedTextNode.textValue = null");
        return DotNetTreeFunctions.clickUnverifiedTextNode(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Action to blindly click a node according to its text value.  Currently, this component function 
                 is for Trees and may work differently than documented in TreeViewFunctions.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive full path text of node to click.
              
     **********/
    public void clickUnverifiedTextNode(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "clickUnverifiedTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "clickUnverifiedTextNode.textValue = null");
        table.add( DotNetTreeFunctions.clickUnverifiedTextNode(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                 Use CollapseTextNode instead.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of node to collapse
              
     **********/
    public ComponentFunction collapse(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "collapse.textValue = null");
        return DotNetTreeFunctions.collapse(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Use CollapseTextNode instead.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to collapse
              
     **********/
    public void collapse(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "collapse.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "collapse.textValue = null");
        table.add( DotNetTreeFunctions.collapse(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                 Action to collapse a node according to a partial match of its text value.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-Insensitive text of node to collapse
              
     **********/
    public ComponentFunction collapsePartialTextNode(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "collapsePartialTextNode.textValue = null");
        return DotNetTreeFunctions.collapsePartialTextNode(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Action to collapse a node according to a partial match of its text value.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-Insensitive text of node to collapse
              
     **********/
    public void collapsePartialTextNode(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "collapsePartialTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "collapsePartialTextNode.textValue = null");
        table.add( DotNetTreeFunctions.collapsePartialTextNode(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                 Action to collapse a node according to its text value.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of node to collapse
              
     **********/
    public ComponentFunction collapseTextNode(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "collapseTextNode.textValue = null");
        return DotNetTreeFunctions.collapseTextNode(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Action to collapse a node according to its text value.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to collapse
              
     **********/
    public void collapseTextNode(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "collapseTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "collapseTextNode.textValue = null");
        table.add( DotNetTreeFunctions.collapseTextNode(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                 Action to blindly collapse a node according to its text value.
              
                 Generally, no pre- or post- node checks are done. If the tree contains 
                 hidden root nodes the user must provide these.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive full path text of node to collapse
              
     **********/
    public ComponentFunction collapseUnverifiedTextNode(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "collapseUnverifiedTextNode.textValue = null");
        return DotNetTreeFunctions.collapseUnverifiedTextNode(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Action to blindly collapse a node according to its text value.
              
                 Generally, no pre- or post- node checks are done. If the tree contains 
                 hidden root nodes the user must provide these.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive full path text of node to collapse
              
     **********/
    public void collapseUnverifiedTextNode(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "collapseUnverifiedTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "collapseUnverifiedTextNode.textValue = null");
        table.add( DotNetTreeFunctions.collapseUnverifiedTextNode(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                 Action to blindly CTRL-click a node according to its text value.  Currently, this component function is for Trees only.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of node to CTRL-click.
              
     **********/
    public ComponentFunction ctrlClickUnverifiedTextNode(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "ctrlClickUnverifiedTextNode.textValue = null");
        return DotNetTreeFunctions.ctrlClickUnverifiedTextNode(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Action to blindly CTRL-click a node according to its text value.  Currently, this component function is for Trees only.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to CTRL-click.
              
     **********/
    public void ctrlClickUnverifiedTextNode(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "ctrlClickUnverifiedTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "ctrlClickUnverifiedTextNode.textValue = null");
        table.add( DotNetTreeFunctions.ctrlClickUnverifiedTextNode(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                 Action to double-click a node according to its text value.  Currently, this component function 
                 is for Trees and works differently than documented in TreeViewFunctions (though that 
                 functionality may be added in the near future).
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of node to double-click.
              
     **********/
    public ComponentFunction doubleClickTextNode(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "doubleClickTextNode.textValue = null");
        return DotNetTreeFunctions.doubleClickTextNode(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Action to double-click a node according to its text value.  Currently, this component function 
                 is for Trees and works differently than documented in TreeViewFunctions (though that 
                 functionality may be added in the near future).
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to double-click.
              
     **********/
    public void doubleClickTextNode(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "doubleClickTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "doubleClickTextNode.textValue = null");
        table.add( DotNetTreeFunctions.doubleClickTextNode(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                 Action to blindly double-click a node according to its text value.  Currently, this component function 
                 is for Trees and may work differently than documented in TreeViewFunctions.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive full path text of node to double-click.
              
     **********/
    public ComponentFunction doubleClickUnverifiedTextNode(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "doubleClickUnverifiedTextNode.textValue = null");
        return DotNetTreeFunctions.doubleClickUnverifiedTextNode(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Action to blindly double-click a node according to its text value.  Currently, this component function 
                 is for Trees and may work differently than documented in TreeViewFunctions.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive full path text of node to double-click.
              
     **********/
    public void doubleClickUnverifiedTextNode(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "doubleClickUnverifiedTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "doubleClickUnverifiedTextNode.textValue = null");
        table.add( DotNetTreeFunctions.doubleClickUnverifiedTextNode(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                 Use ExpandTextNode instead.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of node to expand
              
     **********/
    public ComponentFunction expand(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "expand.textValue = null");
        return DotNetTreeFunctions.expand(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Use ExpandTextNode instead.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to expand
              
     **********/
    public void expand(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "expand.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "expand.textValue = null");
        table.add( DotNetTreeFunctions.expand(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                 Action to expand a node according to a partial match of text value.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-Insensitive text of node to match.
              
     **********/
    public ComponentFunction expandPartialTextNode(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "expandPartialTextNode.textValue = null");
        return DotNetTreeFunctions.expandPartialTextNode(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Action to expand a node according to a partial match of text value.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-Insensitive text of node to match.
              
     **********/
    public void expandPartialTextNode(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "expandPartialTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "expandPartialTextNode.textValue = null");
        table.add( DotNetTreeFunctions.expandPartialTextNode(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                 Action to expand a node according to its text value.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of node to expand
              
     **********/
    public ComponentFunction expandTextNode(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "expandTextNode.textValue = null");
        return DotNetTreeFunctions.expandTextNode(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Action to expand a node according to its text value.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to expand
              
     **********/
    public void expandTextNode(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "expandTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "expandTextNode.textValue = null");
        table.add( DotNetTreeFunctions.expandTextNode(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                 Action to blindly expand a node according to its text value.
              
                 Generally, no pre- or post- node checks are done. If the tree contains 
                 hidden root nodes the user must provide these.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive full path text of node to expand
              
     **********/
    public ComponentFunction expandUnverifiedTextNode(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "expandUnverifiedTextNode.textValue = null");
        return DotNetTreeFunctions.expandUnverifiedTextNode(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Action to blindly expand a node according to its text value.
              
                 Generally, no pre- or post- node checks are done. If the tree contains 
                 hidden root nodes the user must provide these.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive full path text of node to expand
              
     **********/
    public void expandUnverifiedTextNode(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "expandUnverifiedTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "expandUnverifiedTextNode.textValue = null");
        table.add( DotNetTreeFunctions.expandUnverifiedTextNode(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                 Use SelectTextNode instead.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of node to select
              
     **********/
    public ComponentFunction makeSelection(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "makeSelection.textValue = null");
        return DotNetTreeFunctions.makeSelection(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Use SelectTextNode instead.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to select
              
     **********/
    public void makeSelection(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "makeSelection.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "makeSelection.textValue = null");
        table.add( DotNetTreeFunctions.makeSelection(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre>
             Copy the current contents of a tree[branch] to a file according to a partial match of its text value.
             
             The search of the path to the node is a case-insensitive 
             substring match of each node.  Use 'CaptureTreeDataToFile' if you 
             wish to specify case-sensitive exact matches for tree nodes.             
             
             By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param file  Optional:NO
             The name of the file used to store the tree data.
              
     @param branch  Optional:YES
	             The full name of the tree branch to capture.
	              
     @param indentMark  Optional:YES
			        	The character(s) to use in the output file to indent the tree nodes from the 
			        	parent tree branches.
			        
     @param filterMode  Optional:YES  DefaultVal:
             (Future) Specify a file filter to use to process the text before comparison.
              
     @param filterOptions  Optional:YES  DefaultVal:
             (Future) Specify filter options to use with the file filter.
              
     **********/
    public ComponentFunction partialMatchTreeDataToFile(String file, String branch, String indentMark, String filterMode, String filterOptions ) {

        if ( file == null ) throw new IllegalArgumentException ( "partialMatchTreeDataToFile.file = null");
        return DotNetTreeFunctions.partialMatchTreeDataToFile(getWindow().getName(), getName(), file, branch, indentMark, filterMode, filterOptions);
    }

    /*********** <pre>
             Copy the current contents of a tree[branch] to a file according to a partial match of its text value.
             
             The search of the path to the node is a case-insensitive 
             substring match of each node.  Use 'CaptureTreeDataToFile' if you 
             wish to specify case-sensitive exact matches for tree nodes.             
             
             By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param file  Optional:NO
             The name of the file used to store the tree data.
              
     @param branch  Optional:YES
	             The full name of the tree branch to capture.
	              
     @param indentMark  Optional:YES
			        	The character(s) to use in the output file to indent the tree nodes from the 
			        	parent tree branches.
			        
     @param filterMode  Optional:YES  DefaultVal:
             (Future) Specify a file filter to use to process the text before comparison.
              
     @param filterOptions  Optional:YES  DefaultVal:
             (Future) Specify filter options to use with the file filter.
              
     **********/
    public void partialMatchTreeDataToFile(StepTestTable table, String file, String branch, String indentMark, String filterMode, String filterOptions ) {

        if ( table == null ) throw new IllegalArgumentException ( "partialMatchTreeDataToFile.table = null");

        if ( file == null ) throw new IllegalArgumentException ( "partialMatchTreeDataToFile.file = null");
        table.add( DotNetTreeFunctions.partialMatchTreeDataToFile(getWindow().getName(), getName(), file, branch, indentMark, filterMode, filterOptions));
    }

    /*********** <pre>
             Copy the current contents of a tree[branch] to a file according to a partial match of its text value.
             
             The search of the path to the node is a case-insensitive 
             substring match of each node.  Use 'CaptureTreeDataToFile' if you 
             wish to specify case-sensitive exact matches for tree nodes.             
             
             By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         file -- Optional:NO
             The name of the file used to store the tree data.
              <BR/>         branch -- Optional:YES
	             The full name of the tree branch to capture.
	              <BR/>         indentMark -- Optional:YES
			        	The character(s) to use in the output file to indent the tree nodes from the 
			        	parent tree branches.
			        <BR/>         filterMode -- Optional:YES  DefaultVal:
             (Future) Specify a file filter to use to process the text before comparison.
              <BR/>         filterOptions -- Optional:YES  DefaultVal:
             (Future) Specify filter options to use with the file filter.
              
    </UL>

     **********/
    public ComponentFunction partialMatchTreeDataToFile(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "partialMatchTreeDataToFile.parameters = null");
        return DotNetTreeFunctions.partialMatchTreeDataToFile(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre>
             Copy the current contents of a tree[branch] to a file according to a partial match of its text value.
             
             The search of the path to the node is a case-insensitive 
             substring match of each node.  Use 'CaptureTreeDataToFile' if you 
             wish to specify case-sensitive exact matches for tree nodes.             
             
             By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         file -- Optional:NO
             The name of the file used to store the tree data.
              <BR/>         branch -- Optional:YES
	             The full name of the tree branch to capture.
	              <BR/>         indentMark -- Optional:YES
			        	The character(s) to use in the output file to indent the tree nodes from the 
			        	parent tree branches.
			        <BR/>         filterMode -- Optional:YES  DefaultVal:
             (Future) Specify a file filter to use to process the text before comparison.
              <BR/>         filterOptions -- Optional:YES  DefaultVal:
             (Future) Specify filter options to use with the file filter.
              
    </UL>

     **********/
    public void partialMatchTreeDataToFile(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "partialMatchTreeDataToFile.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "partialMatchTreeDataToFile.parameters = null");
        table.add( DotNetTreeFunctions.partialMatchTreeDataToFile(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Action to right-click a node according to its text value.  Currently, this component function 
                 is for Trees and works differently than documented in TreeViewFunctions (though that 
                 functionality may be added in the near future).
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of node to right-click.
              
     **********/
    public ComponentFunction rightClickTextNode(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "rightClickTextNode.textValue = null");
        return DotNetTreeFunctions.rightClickTextNode(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Action to right-click a node according to its text value.  Currently, this component function 
                 is for Trees and works differently than documented in TreeViewFunctions (though that 
                 functionality may be added in the near future).
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to right-click.
              
     **********/
    public void rightClickTextNode(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "rightClickTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "rightClickTextNode.textValue = null");
        table.add( DotNetTreeFunctions.rightClickTextNode(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                 Action to blindly right-click a node according to its text value.  Currently, this component function 
                 is for Trees and may work differently than documented in TreeViewFunctions.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive full path text of node to right-click.
              
     **********/
    public ComponentFunction rightClickUnverifiedTextNode(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextNode.textValue = null");
        return DotNetTreeFunctions.rightClickUnverifiedTextNode(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Action to blindly right-click a node according to its text value.  Currently, this component function 
                 is for Trees and may work differently than documented in TreeViewFunctions.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive full path text of node to right-click.
              
     **********/
    public void rightClickUnverifiedTextNode(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextNode.textValue = null");
        table.add( DotNetTreeFunctions.rightClickUnverifiedTextNode(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                 Action to select a node according to a partial match of its text value, in addition to any nodes already selected.
                 Performs selection as if CTRL key were held down during selection.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-Insensitive text of node to select.
              
     **********/
    public ComponentFunction selectAnotherPartialTextNode(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "selectAnotherPartialTextNode.textValue = null");
        return DotNetTreeFunctions.selectAnotherPartialTextNode(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Action to select a node according to a partial match of its text value, in addition to any nodes already selected.
                 Performs selection as if CTRL key were held down during selection.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-Insensitive text of node to select.
              
     **********/
    public void selectAnotherPartialTextNode(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectAnotherPartialTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectAnotherPartialTextNode.textValue = null");
        table.add( DotNetTreeFunctions.selectAnotherPartialTextNode(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                 Action to select a node according to its text value, in addition to any nodes already selected.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of node to select.
              
     **********/
    public ComponentFunction selectAnotherTextNode(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "selectAnotherTextNode.textValue = null");
        return DotNetTreeFunctions.selectAnotherTextNode(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Action to select a node according to its text value, in addition to any nodes already selected.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to select.
              
     **********/
    public void selectAnotherTextNode(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectAnotherTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectAnotherTextNode.textValue = null");
        table.add( DotNetTreeFunctions.selectAnotherTextNode(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                 Action to blindly select a node according to its text value, in addition to any nodes already selected.
              
                 Generally, no pre- or post- node checks are done. If the tree contains 
                 hidden root nodes the user must provide these.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive full path text of node to select.
              
     **********/
    public ComponentFunction selectAnotherUnverifiedTextNode(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "selectAnotherUnverifiedTextNode.textValue = null");
        return DotNetTreeFunctions.selectAnotherUnverifiedTextNode(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Action to blindly select a node according to its text value, in addition to any nodes already selected.
              
                 Generally, no pre- or post- node checks are done. If the tree contains 
                 hidden root nodes the user must provide these.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive full path text of node to select.
              
     **********/
    public void selectAnotherUnverifiedTextNode(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectAnotherUnverifiedTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectAnotherUnverifiedTextNode.textValue = null");
        table.add( DotNetTreeFunctions.selectAnotherUnverifiedTextNode(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                 Action to select a node according to a partial match of its text value.
                 Performs selection as if CTRL key were held down during selection.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-Insensitive text of node to select.
              
     **********/
    public ComponentFunction selectPartialTextNode(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "selectPartialTextNode.textValue = null");
        return DotNetTreeFunctions.selectPartialTextNode(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Action to select a node according to a partial match of its text value.
                 Performs selection as if CTRL key were held down during selection.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-Insensitive text of node to select.
              
     **********/
    public void selectPartialTextNode(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectPartialTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectPartialTextNode.textValue = null");
        table.add( DotNetTreeFunctions.selectPartialTextNode(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                 Action to select a node according to its text value.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of node to select.
              
     **********/
    public ComponentFunction selectTextNode(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "selectTextNode.textValue = null");
        return DotNetTreeFunctions.selectTextNode(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Action to select a node according to its text value.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to select.
              
     **********/
    public void selectTextNode(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectTextNode.textValue = null");
        table.add( DotNetTreeFunctions.selectTextNode(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre> 
                 Action to blindly select a node according to its text value.
              
                 Generally, no pre- or post- node checks are done. If the tree contains 
                 hidden root nodes the user must provide these.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive full path text of node to select.
              
     **********/
    public ComponentFunction selectUnverifiedTextNode(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "selectUnverifiedTextNode.textValue = null");
        return DotNetTreeFunctions.selectUnverifiedTextNode(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Action to blindly select a node according to its text value.
              
                 Generally, no pre- or post- node checks are done. If the tree contains 
                 hidden root nodes the user must provide these.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive full path text of node to select.
              
     **********/
    public void selectUnverifiedTextNode(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectUnverifiedTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectUnverifiedTextNode.textValue = null");
        table.add( DotNetTreeFunctions.selectUnverifiedTextNode(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre>
             		Sets a user-defined variable with the result of whether a tree contains the provided node.
             	
             		The search of the path to the node is expected to be a case-sensitive 
             		exact match of each node.  Use 'SetTreeContainsPartialMatch' if you 
             		wish to specify case-insensitive substring matches for tree nodes.
              	    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param node  Optional:NO
             				The name of the node to verify.
              			
     @param resultVar  Optional:NO
	             			The name of the variable which gets assigned the result.
	              		
     **********/
    public ComponentFunction setTreeContainsNode(String node, String resultVar ) {

        if ( node == null ) throw new IllegalArgumentException ( "setTreeContainsNode.node = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "setTreeContainsNode.resultVar = null");
        return DotNetTreeFunctions.setTreeContainsNode(getWindow().getName(), getName(), node, resultVar);
    }

    /*********** <pre>
             		Sets a user-defined variable with the result of whether a tree contains the provided node.
             	
             		The search of the path to the node is expected to be a case-sensitive 
             		exact match of each node.  Use 'SetTreeContainsPartialMatch' if you 
             		wish to specify case-insensitive substring matches for tree nodes.
              	    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param node  Optional:NO
             				The name of the node to verify.
              			
     @param resultVar  Optional:NO
	             			The name of the variable which gets assigned the result.
	              		
     **********/
    public void setTreeContainsNode(StepTestTable table, String node, String resultVar ) {

        if ( table == null ) throw new IllegalArgumentException ( "setTreeContainsNode.table = null");

        if ( node == null ) throw new IllegalArgumentException ( "setTreeContainsNode.node = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "setTreeContainsNode.resultVar = null");
        table.add( DotNetTreeFunctions.setTreeContainsNode(getWindow().getName(), getName(), node, resultVar));
    }

    /*********** <pre>
             		Sets a user-defined variable with the result of whether a tree contains the provided node.
             	
             		The search of the path to the node is expected to be a case-sensitive 
             		exact match of each node.  Use 'SetTreeContainsPartialMatch' if you 
             		wish to specify case-insensitive substring matches for tree nodes.
              	    </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         node -- Optional:NO
             				The name of the node to verify.
              			<BR/>         resultVar -- Optional:NO
	             			The name of the variable which gets assigned the result.
	              		
    </UL>

     **********/
    public ComponentFunction setTreeContainsNode(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "setTreeContainsNode.parameters = null");
        return DotNetTreeFunctions.setTreeContainsNode(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre>
             		Sets a user-defined variable with the result of whether a tree contains the provided node.
             	
             		The search of the path to the node is expected to be a case-sensitive 
             		exact match of each node.  Use 'SetTreeContainsPartialMatch' if you 
             		wish to specify case-insensitive substring matches for tree nodes.
              	    </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         node -- Optional:NO
             				The name of the node to verify.
              			<BR/>         resultVar -- Optional:NO
	             			The name of the variable which gets assigned the result.
	              		
    </UL>

     **********/
    public void setTreeContainsNode(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "setTreeContainsNode.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "setTreeContainsNode.parameters = null");
        table.add( DotNetTreeFunctions.setTreeContainsNode(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre>
             		Sets a user-defined variable with the result of whether a tree contains the provided node
             		according to a partial match of the node's text value.
             	
             		The search of the path to the node is expected to be a case-insensitive 
			substring match of each node.  Use 'SetTreeContainsNode' if you 
             		wish to specify case-sensitive substring matches for tree nodes.
              	    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param node  Optional:NO
             				The name of the node to verify.
              			
     @param resultVar  Optional:NO
	             			The name of the variable which gets assigned the result.
	              		
     **********/
    public ComponentFunction setTreeContainsPartialMatch(String node, String resultVar ) {

        if ( node == null ) throw new IllegalArgumentException ( "setTreeContainsPartialMatch.node = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "setTreeContainsPartialMatch.resultVar = null");
        return DotNetTreeFunctions.setTreeContainsPartialMatch(getWindow().getName(), getName(), node, resultVar);
    }

    /*********** <pre>
             		Sets a user-defined variable with the result of whether a tree contains the provided node
             		according to a partial match of the node's text value.
             	
             		The search of the path to the node is expected to be a case-insensitive 
			substring match of each node.  Use 'SetTreeContainsNode' if you 
             		wish to specify case-sensitive substring matches for tree nodes.
              	    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param node  Optional:NO
             				The name of the node to verify.
              			
     @param resultVar  Optional:NO
	             			The name of the variable which gets assigned the result.
	              		
     **********/
    public void setTreeContainsPartialMatch(StepTestTable table, String node, String resultVar ) {

        if ( table == null ) throw new IllegalArgumentException ( "setTreeContainsPartialMatch.table = null");

        if ( node == null ) throw new IllegalArgumentException ( "setTreeContainsPartialMatch.node = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "setTreeContainsPartialMatch.resultVar = null");
        table.add( DotNetTreeFunctions.setTreeContainsPartialMatch(getWindow().getName(), getName(), node, resultVar));
    }

    /*********** <pre>
             		Sets a user-defined variable with the result of whether a tree contains the provided node
             		according to a partial match of the node's text value.
             	
             		The search of the path to the node is expected to be a case-insensitive 
			substring match of each node.  Use 'SetTreeContainsNode' if you 
             		wish to specify case-sensitive substring matches for tree nodes.
              	    </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         node -- Optional:NO
             				The name of the node to verify.
              			<BR/>         resultVar -- Optional:NO
	             			The name of the variable which gets assigned the result.
	              		
    </UL>

     **********/
    public ComponentFunction setTreeContainsPartialMatch(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "setTreeContainsPartialMatch.parameters = null");
        return DotNetTreeFunctions.setTreeContainsPartialMatch(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre>
             		Sets a user-defined variable with the result of whether a tree contains the provided node
             		according to a partial match of the node's text value.
             	
             		The search of the path to the node is expected to be a case-insensitive 
			substring match of each node.  Use 'SetTreeContainsNode' if you 
             		wish to specify case-sensitive substring matches for tree nodes.
              	    </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         node -- Optional:NO
             				The name of the node to verify.
              			<BR/>         resultVar -- Optional:NO
	             			The name of the variable which gets assigned the result.
	              		
    </UL>

     **********/
    public void setTreeContainsPartialMatch(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "setTreeContainsPartialMatch.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "setTreeContainsPartialMatch.parameters = null");
        table.add( DotNetTreeFunctions.setTreeContainsPartialMatch(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Action to blindly SHIFT-click a node according to its text value. Currently, this component function is for Trees only.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param textValue  Optional:NO 
                 Case-sensitive text of node to SHIFT-click.
              
     **********/
    public ComponentFunction shiftClickUnverifiedTextNode(String textValue ) {

        if ( textValue == null ) throw new IllegalArgumentException ( "shiftClickUnverifiedTextNode.textValue = null");
        return DotNetTreeFunctions.shiftClickUnverifiedTextNode(getWindow().getName(), getName(), textValue);
    }

    /*********** <pre> 
                 Action to blindly SHIFT-click a node according to its text value. Currently, this component function is for Trees only.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to SHIFT-click.
              
     **********/
    public void shiftClickUnverifiedTextNode(StepTestTable table, String textValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "shiftClickUnverifiedTextNode.table = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "shiftClickUnverifiedTextNode.textValue = null");
        table.add( DotNetTreeFunctions.shiftClickUnverifiedTextNode(getWindow().getName(), getName(), textValue));
    }

    /*********** <pre>
             		Verify that a tree contains the provided node.
             	
             		The search of the path to the node is expected to be a case-sensitive 
             		exact match of each node.  Use 'VerifyTreeContainsPartialMatch' if you 
             		wish to specify case-insensitive substring matches for tree nodes.
              	    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param node  Optional:NO
             		The name of the node to verify.
              	
     **********/
    public ComponentFunction verifyTreeContainsNode(String node ) {

        if ( node == null ) throw new IllegalArgumentException ( "verifyTreeContainsNode.node = null");
        return DotNetTreeFunctions.verifyTreeContainsNode(getWindow().getName(), getName(), node);
    }

    /*********** <pre>
             		Verify that a tree contains the provided node.
             	
             		The search of the path to the node is expected to be a case-sensitive 
             		exact match of each node.  Use 'VerifyTreeContainsPartialMatch' if you 
             		wish to specify case-insensitive substring matches for tree nodes.
              	    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param node  Optional:NO
             		The name of the node to verify.
              	
     **********/
    public void verifyTreeContainsNode(StepTestTable table, String node ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyTreeContainsNode.table = null");

        if ( node == null ) throw new IllegalArgumentException ( "verifyTreeContainsNode.node = null");
        table.add( DotNetTreeFunctions.verifyTreeContainsNode(getWindow().getName(), getName(), node));
    }

    /*********** <pre>
             	Verify that a tree contains the provided node according to a partial match of the node's text value.
             	
             		The search of the path to the node is expected to be a case-insensitive 
             		substring match of each node.  Use 'VerifyTreeContainsNode' if you 
             		wish to specify case-sensitive substring matches for tree nodes.
              	    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param node  Optional:NO
             		The name of the node to verify.
              	
     **********/
    public ComponentFunction verifyTreeContainsPartialMatch(String node ) {

        if ( node == null ) throw new IllegalArgumentException ( "verifyTreeContainsPartialMatch.node = null");
        return DotNetTreeFunctions.verifyTreeContainsPartialMatch(getWindow().getName(), getName(), node);
    }

    /*********** <pre>
             	Verify that a tree contains the provided node according to a partial match of the node's text value.
             	
             		The search of the path to the node is expected to be a case-insensitive 
             		substring match of each node.  Use 'VerifyTreeContainsNode' if you 
             		wish to specify case-sensitive substring matches for tree nodes.
              	    </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param node  Optional:NO
             		The name of the node to verify.
              	
     **********/
    public void verifyTreeContainsPartialMatch(StepTestTable table, String node ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyTreeContainsPartialMatch.table = null");

        if ( node == null ) throw new IllegalArgumentException ( "verifyTreeContainsPartialMatch.node = null");
        table.add( DotNetTreeFunctions.verifyTreeContainsPartialMatch(getWindow().getName(), getName(), node));
    }

}
