
/******************************************************************************
 * VSFlexGrid.java
 *
 * Copyright (c) by SAS Institute Inc., Cary, NC 27513
 * General Public License: http://www.opensource.org/licenses/gpl-license.php
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   VSFlexGridFunctions.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaComponentModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe VSFlexGridFunctions.xml XSLJavaComponentModel.xsl -o VSFlexGrid.java
 *
 ******************************************************************************/ 
package org.safs.model.components;

import org.safs.model.commands.VSFlexGridFunctions;
import org.safs.model.ComponentFunction;
import org.safs.model.components.UIComponent;
import org.safs.model.StepTestTable;

public class VSFlexGrid extends GenericObject {

    /*****************
    Constructor 

    Create an instance of pseudo-component representing 
    a specific component in a specific window.
    
    @param window  Optional:NO 
           Specifies which Window this component is 'in'.
    @param compname Optional:NO 
           Specifies the AppMap name of the component in the Window.
    ****************/
    public VSFlexGrid(Window window, String compname) {

        super(window, compname);
    }

    /*****************
    Constructor 

    Create an instance of pseudo-component representing 
    a specific component in a specific window.
    
    This convenience routine will create the requisite Window component.
    
    @param winname  Optional:NO 
           Specifies the AppMap name of the window.
    @param compname Optional:NO 
           Specifies the AppMap name of the component in the Window.
    ****************/
    public VSFlexGrid(String winname, String compname) {

        this(new Window(winname), compname);
    }

    protected VSFlexGrid(String compname) {

        super(compname);
    }



    /*********** <pre> 
                 Attempts to perform a single Click on a table cell.
               
                 The cell to Click is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1. 
                 Logical Cells are those data cells viewable to the 
                 user.  They do not include hidden or fixed cells. 
                 Thus, the first top left cell for real grid data 
                 is considered cell 1,1.  
                 The grid will remain in edit mode if edit mode goes 
                 active. 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param row  Optional:YES  DefaultVal: 
             The 1-based logical row to select.
              
     @param col  Optional:YES  DefaultVal: 
             The 1-based logical col to select.
              
     **********/
    public ComponentFunction clickCell(String row, String col ) {

        return VSFlexGridFunctions.clickCell(getWindow().getName(), getName(), row, col);
    }

    /*********** <pre> 
                 Attempts to perform a single Click on a table cell.
               
                 The cell to Click is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1. 
                 Logical Cells are those data cells viewable to the 
                 user.  They do not include hidden or fixed cells. 
                 Thus, the first top left cell for real grid data 
                 is considered cell 1,1.  
                 The grid will remain in edit mode if edit mode goes 
                 active. 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param row  Optional:YES  DefaultVal: 
             The 1-based logical row to select.
              
     @param col  Optional:YES  DefaultVal: 
             The 1-based logical col to select.
              
     **********/
    public void clickCell(StepTestTable table, String row, String col ) {

        if ( table == null ) throw new IllegalArgumentException ( "clickCell.table = null");

        table.add( VSFlexGridFunctions.clickCell(getWindow().getName(), getName(), row, col));
    }

    /*********** <pre> 
                 Attempts to perform a single Click on a table cell.
               
                 The cell to Click is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1. 
                 Logical Cells are those data cells viewable to the 
                 user.  They do not include hidden or fixed cells. 
                 Thus, the first top left cell for real grid data 
                 is considered cell 1,1.  
                 The grid will remain in edit mode if edit mode goes 
                 active. 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         row -- Optional:YES  DefaultVal: 
             The 1-based logical row to select.
              <BR/>         col -- Optional:YES  DefaultVal: 
             The 1-based logical col to select.
              
    </UL>

     **********/
    public ComponentFunction clickCell(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "clickCell.parameters = null");
        return VSFlexGridFunctions.clickCell(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Attempts to perform a single Click on a table cell.
               
                 The cell to Click is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1. 
                 Logical Cells are those data cells viewable to the 
                 user.  They do not include hidden or fixed cells. 
                 Thus, the first top left cell for real grid data 
                 is considered cell 1,1.  
                 The grid will remain in edit mode if edit mode goes 
                 active. 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         row -- Optional:YES  DefaultVal: 
             The 1-based logical row to select.
              <BR/>         col -- Optional:YES  DefaultVal: 
             The 1-based logical col to select.
              
    </UL>

     **********/
    public void clickCell(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "clickCell.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "clickCell.parameters = null");
        table.add( VSFlexGridFunctions.clickCell(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                 Attempts to perform a Select on a table cell.
               
                 The cell to Select is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1. 
                 Logical Cells are those data cells viewable to the 
                 user.  They do not include hidden or fixed cells. 
                 Thus, the first top left cell for real grid data 
                 is considered cell 1,1.  
                 We will ESCAPE out of edit mode if edit mode goes 
                 active. 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param row  Optional:YES  DefaultVal: 
             The 1-based logical row to select.
              
     @param col  Optional:YES  DefaultVal: 
             The 1-based logical col to select.
              
     **********/
    public ComponentFunction selectCell(String row, String col ) {

        return VSFlexGridFunctions.selectCell(getWindow().getName(), getName(), row, col);
    }

    /*********** <pre> 
                 Attempts to perform a Select on a table cell.
               
                 The cell to Select is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1. 
                 Logical Cells are those data cells viewable to the 
                 user.  They do not include hidden or fixed cells. 
                 Thus, the first top left cell for real grid data 
                 is considered cell 1,1.  
                 We will ESCAPE out of edit mode if edit mode goes 
                 active. 
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param row  Optional:YES  DefaultVal: 
             The 1-based logical row to select.
              
     @param col  Optional:YES  DefaultVal: 
             The 1-based logical col to select.
              
     **********/
    public void selectCell(StepTestTable table, String row, String col ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectCell.table = null");

        table.add( VSFlexGridFunctions.selectCell(getWindow().getName(), getName(), row, col));
    }

    /*********** <pre> 
                 Attempts to perform a Select on a table cell.
               
                 The cell to Select is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1. 
                 Logical Cells are those data cells viewable to the 
                 user.  They do not include hidden or fixed cells. 
                 Thus, the first top left cell for real grid data 
                 is considered cell 1,1.  
                 We will ESCAPE out of edit mode if edit mode goes 
                 active. 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         row -- Optional:YES  DefaultVal: 
             The 1-based logical row to select.
              <BR/>         col -- Optional:YES  DefaultVal: 
             The 1-based logical col to select.
              
    </UL>

     **********/
    public ComponentFunction selectCell(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "selectCell.parameters = null");
        return VSFlexGridFunctions.selectCell(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                 Attempts to perform a Select on a table cell.
               
                 The cell to Select is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1. 
                 Logical Cells are those data cells viewable to the 
                 user.  They do not include hidden or fixed cells. 
                 Thus, the first top left cell for real grid data 
                 is considered cell 1,1.  
                 We will ESCAPE out of edit mode if edit mode goes 
                 active. 
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         row -- Optional:YES  DefaultVal: 
             The 1-based logical row to select.
              <BR/>         col -- Optional:YES  DefaultVal: 
             The 1-based logical col to select.
              
    </UL>

     **********/
    public void selectCell(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectCell.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectCell.parameters = null");
        table.add( VSFlexGridFunctions.selectCell(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
             Verify the string values of a grid block to a file benchmark.
              
             Grid rows and cols are considered 1-based.  You can specify a 
             subset of the grid by providing the optional values for 
             rowMin, rowMax, colMin, colMax.  The benchmark and the actual 
             will be stored as TAB delimited files.
             Typically, benchmarks are stored in the Datapool\Bench directory.  
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param benchmarkFile  Optional:NO 
             The name of the file used as the comparison benchmark.
              
     @param rowMin  Optional:YES  DefaultVal:1 
             The first row to include in the capture and compare.
              
     @param rowMax  Optional:YES 
             The last row to include in the capture and compare.
              
     @param colMin  Optional:YES  DefaultVal:1 
             The first col to include in the capture and compare.
              
     @param colMax  Optional:YES 
             The last col to include in the capture and compare.
              
     **********/
    public ComponentFunction verifyValuesToFile(String benchmarkFile, String rowMin, String rowMax, String colMin, String colMax ) {

        if ( benchmarkFile == null ) throw new IllegalArgumentException ( "verifyValuesToFile.benchmarkFile = null");
        return VSFlexGridFunctions.verifyValuesToFile(getWindow().getName(), getName(), benchmarkFile, rowMin, rowMax, colMin, colMax);
    }

    /*********** <pre> 
             Verify the string values of a grid block to a file benchmark.
              
             Grid rows and cols are considered 1-based.  You can specify a 
             subset of the grid by providing the optional values for 
             rowMin, rowMax, colMin, colMax.  The benchmark and the actual 
             will be stored as TAB delimited files.
             Typically, benchmarks are stored in the Datapool\Bench directory.  
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param benchmarkFile  Optional:NO 
             The name of the file used as the comparison benchmark.
              
     @param rowMin  Optional:YES  DefaultVal:1 
             The first row to include in the capture and compare.
              
     @param rowMax  Optional:YES 
             The last row to include in the capture and compare.
              
     @param colMin  Optional:YES  DefaultVal:1 
             The first col to include in the capture and compare.
              
     @param colMax  Optional:YES 
             The last col to include in the capture and compare.
              
     **********/
    public void verifyValuesToFile(StepTestTable table, String benchmarkFile, String rowMin, String rowMax, String colMin, String colMax ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyValuesToFile.table = null");

        if ( benchmarkFile == null ) throw new IllegalArgumentException ( "verifyValuesToFile.benchmarkFile = null");
        table.add( VSFlexGridFunctions.verifyValuesToFile(getWindow().getName(), getName(), benchmarkFile, rowMin, rowMax, colMin, colMax));
    }

    /*********** <pre> 
             Verify the string values of a grid block to a file benchmark.
              
             Grid rows and cols are considered 1-based.  You can specify a 
             subset of the grid by providing the optional values for 
             rowMin, rowMax, colMin, colMax.  The benchmark and the actual 
             will be stored as TAB delimited files.
             Typically, benchmarks are stored in the Datapool\Bench directory.  
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         benchmarkFile -- Optional:NO 
             The name of the file used as the comparison benchmark.
              <BR/>         rowMin -- Optional:YES  DefaultVal:1 
             The first row to include in the capture and compare.
              <BR/>         rowMax -- Optional:YES 
             The last row to include in the capture and compare.
              <BR/>         colMin -- Optional:YES  DefaultVal:1 
             The first col to include in the capture and compare.
              <BR/>         colMax -- Optional:YES 
             The last col to include in the capture and compare.
              
    </UL>

     **********/
    public ComponentFunction verifyValuesToFile(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyValuesToFile.parameters = null");
        return VSFlexGridFunctions.verifyValuesToFile(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
             Verify the string values of a grid block to a file benchmark.
              
             Grid rows and cols are considered 1-based.  You can specify a 
             subset of the grid by providing the optional values for 
             rowMin, rowMax, colMin, colMax.  The benchmark and the actual 
             will be stored as TAB delimited files.
             Typically, benchmarks are stored in the Datapool\Bench directory.  
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         benchmarkFile -- Optional:NO 
             The name of the file used as the comparison benchmark.
              <BR/>         rowMin -- Optional:YES  DefaultVal:1 
             The first row to include in the capture and compare.
              <BR/>         rowMax -- Optional:YES 
             The last row to include in the capture and compare.
              <BR/>         colMin -- Optional:YES  DefaultVal:1 
             The first col to include in the capture and compare.
              <BR/>         colMax -- Optional:YES 
             The last col to include in the capture and compare.
              
    </UL>

     **********/
    public void verifyValuesToFile(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyValuesToFile.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyValuesToFile.parameters = null");
        table.add( VSFlexGridFunctions.verifyValuesToFile(getWindow().getName(), getName(), parameters));
    }

}
