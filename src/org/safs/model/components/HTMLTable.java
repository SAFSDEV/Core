
/******************************************************************************
 * HTMLTable.java
 *
 * Copyright (c) by SAS Institute Inc., Cary, NC 27513
 * General Public License: http://www.opensource.org/licenses/gpl-license.php
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   HTMLTableFunctions.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaComponentModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe HTMLTableFunctions.xml XSLJavaComponentModel.xsl -o HTMLTable.java
 *
 ******************************************************************************/ 
package org.safs.model.components;

import org.safs.model.commands.HTMLTableFunctions;
import org.safs.model.ComponentFunction;
import org.safs.model.components.UIComponent;
import org.safs.model.StepTestTable;

public class HTMLTable extends HTML {

    /*****************
    Constructor 

    Create an instance of pseudo-component representing 
    a specific component in a specific window.
    
    @param window  Optional:NO 
           Specifies which Window this component is 'in'.
    @param compname Optional:NO 
           Specifies the AppMap name of the component in the Window.
    ****************/
    public HTMLTable(Window window, String compname) {

        super(window, compname);
    }

    /*****************
    Constructor 

    Create an instance of pseudo-component representing 
    a specific component in a specific window.
    
    This convenience routine will create the requisite Window component.
    
    @param winname  Optional:NO 
           Specifies the AppMap name of the window.
    @param compname Optional:NO 
           Specifies the AppMap name of the component in the Window.
    ****************/
    public HTMLTable(String winname, String compname) {

        this(new Window(winname), compname);
    }

    protected HTMLTable(String compname) {

        super(compname);
    }



    /*********** <pre> 
                Attempts to perform a double click on a Table cell.
               
                Clicks on a particular row/column of the table. 
                The default location is Row=1, Col=1 unless either parameter 
                is specified otherwise.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param row  Optional:YES  DefaultVal:1 
                The 1-based cell row in the row/col specification.
              
     @param col  Optional:YES  DefaultVal:1 
                The 1-based cell column in the row/col specification.
              
     **********/
    public ComponentFunction activateCell(String row, String col ) {

        return HTMLTableFunctions.activateCell(getWindow().getName(), getName(), row, col);
    }

    /*********** <pre> 
                Attempts to perform a double click on a Table cell.
               
                Clicks on a particular row/column of the table. 
                The default location is Row=1, Col=1 unless either parameter 
                is specified otherwise.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param row  Optional:YES  DefaultVal:1 
                The 1-based cell row in the row/col specification.
              
     @param col  Optional:YES  DefaultVal:1 
                The 1-based cell column in the row/col specification.
              
     **********/
    public void activateCell(StepTestTable table, String row, String col ) {

        if ( table == null ) throw new IllegalArgumentException ( "activateCell.table = null");

        table.add( HTMLTableFunctions.activateCell(getWindow().getName(), getName(), row, col));
    }

    /*********** <pre> 
                Attempts to perform a double click on a Table cell.
               
                Clicks on a particular row/column of the table. 
                The default location is Row=1, Col=1 unless either parameter 
                is specified otherwise.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         row -- Optional:YES  DefaultVal:1 
                The 1-based cell row in the row/col specification.
              <BR/>         col -- Optional:YES  DefaultVal:1 
                The 1-based cell column in the row/col specification.
              
    </UL>

     **********/
    public ComponentFunction activateCell(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "activateCell.parameters = null");
        return HTMLTableFunctions.activateCell(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                Attempts to perform a double click on a Table cell.
               
                Clicks on a particular row/column of the table. 
                The default location is Row=1, Col=1 unless either parameter 
                is specified otherwise.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         row -- Optional:YES  DefaultVal:1 
                The 1-based cell row in the row/col specification.
              <BR/>         col -- Optional:YES  DefaultVal:1 
                The 1-based cell column in the row/col specification.
              
    </UL>

     **********/
    public void activateCell(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "activateCell.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "activateCell.parameters = null");
        table.add( HTMLTableFunctions.activateCell(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                  Assigns a user-defined variable a row # based on partial matching cell values.
              
                  The cell value from the specified column in the found row is also assigned to 
                  a variable derived from the user-defined variable name.
                  
                  The cell value comparisons are not case-senstive, and provided values can be substrings 
                  of the actual cell value in the table.
                  
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param var  Optional:NO 
                The variable which gets assigned the row found.
              
     @param col  Optional:NO 
                The 1-based cell column # or header value, identifying the column for extracting the 
                cell value into variable +".Value".
              
     @param colN  Optional:NO 
                A 1-based cell column #, or header value, identifying the column to locate the VALUEN below.
              
     @param valueN  Optional:NO 
                A Value to search for in the 'COLN' column.
              
     **********/
    public ComponentFunction assignCellContainsTextRow(String var, String col, String colN, String valueN ) {

        if ( col == null ) throw new IllegalArgumentException ( "assignCellContainsTextRow.col = null");
        if ( colN == null ) throw new IllegalArgumentException ( "assignCellContainsTextRow.colN = null");
        if ( valueN == null ) throw new IllegalArgumentException ( "assignCellContainsTextRow.valueN = null");
        if ( var == null ) throw new IllegalArgumentException ( "assignCellContainsTextRow.var = null");
        return HTMLTableFunctions.assignCellContainsTextRow(getWindow().getName(), getName(), var, col, colN, valueN);
    }

    /*********** <pre> 
                  Assigns a user-defined variable a row # based on partial matching cell values.
              
                  The cell value from the specified column in the found row is also assigned to 
                  a variable derived from the user-defined variable name.
                  
                  The cell value comparisons are not case-senstive, and provided values can be substrings 
                  of the actual cell value in the table.
                  
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param var  Optional:NO 
                The variable which gets assigned the row found.
              
     @param col  Optional:NO 
                The 1-based cell column # or header value, identifying the column for extracting the 
                cell value into variable +".Value".
              
     @param colN  Optional:NO 
                A 1-based cell column #, or header value, identifying the column to locate the VALUEN below.
              
     @param valueN  Optional:NO 
                A Value to search for in the 'COLN' column.
              
     **********/
    public void assignCellContainsTextRow(StepTestTable table, String var, String col, String colN, String valueN ) {

        if ( table == null ) throw new IllegalArgumentException ( "assignCellContainsTextRow.table = null");

        if ( col == null ) throw new IllegalArgumentException ( "assignCellContainsTextRow.col = null");
        if ( colN == null ) throw new IllegalArgumentException ( "assignCellContainsTextRow.colN = null");
        if ( valueN == null ) throw new IllegalArgumentException ( "assignCellContainsTextRow.valueN = null");
        if ( var == null ) throw new IllegalArgumentException ( "assignCellContainsTextRow.var = null");
        table.add( HTMLTableFunctions.assignCellContainsTextRow(getWindow().getName(), getName(), var, col, colN, valueN));
    }

    /*********** <pre> 
                  Assigns a user-defined variable a row # based on partial matching cell values.
              
                  The cell value from the specified column in the found row is also assigned to 
                  a variable derived from the user-defined variable name.
                  
                  The cell value comparisons are not case-senstive, and provided values can be substrings 
                  of the actual cell value in the table.
                  
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         var -- Optional:NO 
                The variable which gets assigned the row found.
              <BR/>         col -- Optional:NO 
                The 1-based cell column # or header value, identifying the column for extracting the 
                cell value into variable +".Value".
              <BR/>         colN -- Optional:NO 
                A 1-based cell column #, or header value, identifying the column to locate the VALUEN below.
              <BR/>         valueN -- Optional:NO 
                A Value to search for in the 'COLN' column.
              
    </UL>

     **********/
    public ComponentFunction assignCellContainsTextRow(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "assignCellContainsTextRow.parameters = null");
        return HTMLTableFunctions.assignCellContainsTextRow(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                  Assigns a user-defined variable a row # based on partial matching cell values.
              
                  The cell value from the specified column in the found row is also assigned to 
                  a variable derived from the user-defined variable name.
                  
                  The cell value comparisons are not case-senstive, and provided values can be substrings 
                  of the actual cell value in the table.
                  
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         var -- Optional:NO 
                The variable which gets assigned the row found.
              <BR/>         col -- Optional:NO 
                The 1-based cell column # or header value, identifying the column for extracting the 
                cell value into variable +".Value".
              <BR/>         colN -- Optional:NO 
                A 1-based cell column #, or header value, identifying the column to locate the VALUEN below.
              <BR/>         valueN -- Optional:NO 
                A Value to search for in the 'COLN' column.
              
    </UL>

     **********/
    public void assignCellContainsTextRow(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "assignCellContainsTextRow.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "assignCellContainsTextRow.parameters = null");
        table.add( HTMLTableFunctions.assignCellContainsTextRow(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                  Assigns a user-defined variable a row # based on matching cell values.
              
                  The cell value from the specified column in the found row is also assigned to 
                  a variable derived from the user-defined variable name.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param var  Optional:NO 
                The variable which gets assigned the row found.
              
     @param col  Optional:NO 
                The 1-based cell column # or header value, identifying the column for extracting the 
                cell value into variable +".Value".
              
     @param colN  Optional:NO 
                A 1-based cell column #, or header value, identifying the column to locate the VALUEN below.
              
     @param valueN  Optional:NO 
                A Value to search for in the 'COLN' column
              
     **********/
    public ComponentFunction assignCellTextRow(String var, String col, String colN, String valueN ) {

        if ( col == null ) throw new IllegalArgumentException ( "assignCellTextRow.col = null");
        if ( colN == null ) throw new IllegalArgumentException ( "assignCellTextRow.colN = null");
        if ( valueN == null ) throw new IllegalArgumentException ( "assignCellTextRow.valueN = null");
        if ( var == null ) throw new IllegalArgumentException ( "assignCellTextRow.var = null");
        return HTMLTableFunctions.assignCellTextRow(getWindow().getName(), getName(), var, col, colN, valueN);
    }

    /*********** <pre> 
                  Assigns a user-defined variable a row # based on matching cell values.
              
                  The cell value from the specified column in the found row is also assigned to 
                  a variable derived from the user-defined variable name.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param var  Optional:NO 
                The variable which gets assigned the row found.
              
     @param col  Optional:NO 
                The 1-based cell column # or header value, identifying the column for extracting the 
                cell value into variable +".Value".
              
     @param colN  Optional:NO 
                A 1-based cell column #, or header value, identifying the column to locate the VALUEN below.
              
     @param valueN  Optional:NO 
                A Value to search for in the 'COLN' column
              
     **********/
    public void assignCellTextRow(StepTestTable table, String var, String col, String colN, String valueN ) {

        if ( table == null ) throw new IllegalArgumentException ( "assignCellTextRow.table = null");

        if ( col == null ) throw new IllegalArgumentException ( "assignCellTextRow.col = null");
        if ( colN == null ) throw new IllegalArgumentException ( "assignCellTextRow.colN = null");
        if ( valueN == null ) throw new IllegalArgumentException ( "assignCellTextRow.valueN = null");
        if ( var == null ) throw new IllegalArgumentException ( "assignCellTextRow.var = null");
        table.add( HTMLTableFunctions.assignCellTextRow(getWindow().getName(), getName(), var, col, colN, valueN));
    }

    /*********** <pre> 
                  Assigns a user-defined variable a row # based on matching cell values.
              
                  The cell value from the specified column in the found row is also assigned to 
                  a variable derived from the user-defined variable name.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         var -- Optional:NO 
                The variable which gets assigned the row found.
              <BR/>         col -- Optional:NO 
                The 1-based cell column # or header value, identifying the column for extracting the 
                cell value into variable +".Value".
              <BR/>         colN -- Optional:NO 
                A 1-based cell column #, or header value, identifying the column to locate the VALUEN below.
              <BR/>         valueN -- Optional:NO 
                A Value to search for in the 'COLN' column
              
    </UL>

     **********/
    public ComponentFunction assignCellTextRow(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "assignCellTextRow.parameters = null");
        return HTMLTableFunctions.assignCellTextRow(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                  Assigns a user-defined variable a row # based on matching cell values.
              
                  The cell value from the specified column in the found row is also assigned to 
                  a variable derived from the user-defined variable name.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         var -- Optional:NO 
                The variable which gets assigned the row found.
              <BR/>         col -- Optional:NO 
                The 1-based cell column # or header value, identifying the column for extracting the 
                cell value into variable +".Value".
              <BR/>         colN -- Optional:NO 
                A 1-based cell column #, or header value, identifying the column to locate the VALUEN below.
              <BR/>         valueN -- Optional:NO 
                A Value to search for in the 'COLN' column
              
    </UL>

     **********/
    public void assignCellTextRow(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "assignCellTextRow.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "assignCellTextRow.parameters = null");
        table.add( HTMLTableFunctions.assignCellTextRow(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Attempts to extract a particular cell value and assign 
                it to the provided variable name.
              
               Note, if you supply the name of the variable and include the leading
               caret (^) symbol then the variable must be enclosed in quotes.
               Otherwise, that variable will be used like any other variable and the
               substituted value of that variable will be interpretted as the name
               of the variable you wish to use.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param variableName  Optional:NO
             The name of the variable to receive the property value.
              
     @param row  Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification.
              
     @param col  Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification.
              
     **********/
    public ComponentFunction assignVariableCellText(String variableName, String row, String col ) {

        if ( variableName == null ) throw new IllegalArgumentException ( "assignVariableCellText.variableName = null");
        return HTMLTableFunctions.assignVariableCellText(getWindow().getName(), getName(), variableName, row, col);
    }

    /*********** <pre> 
                Attempts to extract a particular cell value and assign 
                it to the provided variable name.
              
               Note, if you supply the name of the variable and include the leading
               caret (^) symbol then the variable must be enclosed in quotes.
               Otherwise, that variable will be used like any other variable and the
               substituted value of that variable will be interpretted as the name
               of the variable you wish to use.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param variableName  Optional:NO
             The name of the variable to receive the property value.
              
     @param row  Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification.
              
     @param col  Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification.
              
     **********/
    public void assignVariableCellText(StepTestTable table, String variableName, String row, String col ) {

        if ( table == null ) throw new IllegalArgumentException ( "assignVariableCellText.table = null");

        if ( variableName == null ) throw new IllegalArgumentException ( "assignVariableCellText.variableName = null");
        table.add( HTMLTableFunctions.assignVariableCellText(getWindow().getName(), getName(), variableName, row, col));
    }

    /*********** <pre> 
                Attempts to extract a particular cell value and assign 
                it to the provided variable name.
              
               Note, if you supply the name of the variable and include the leading
               caret (^) symbol then the variable must be enclosed in quotes.
               Otherwise, that variable will be used like any other variable and the
               substituted value of that variable will be interpretted as the name
               of the variable you wish to use.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         variableName -- Optional:NO
             The name of the variable to receive the property value.
              <BR/>         row -- Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification.
              <BR/>         col -- Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification.
              
    </UL>

     **********/
    public ComponentFunction assignVariableCellText(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "assignVariableCellText.parameters = null");
        return HTMLTableFunctions.assignVariableCellText(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                Attempts to extract a particular cell value and assign 
                it to the provided variable name.
              
               Note, if you supply the name of the variable and include the leading
               caret (^) symbol then the variable must be enclosed in quotes.
               Otherwise, that variable will be used like any other variable and the
               substituted value of that variable will be interpretted as the name
               of the variable you wish to use.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         variableName -- Optional:NO
             The name of the variable to receive the property value.
              <BR/>         row -- Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification.
              <BR/>         col -- Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification.
              
    </UL>

     **********/
    public void assignVariableCellText(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "assignVariableCellText.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "assignVariableCellText.parameters = null");
        table.add( HTMLTableFunctions.assignVariableCellText(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Saves a range of values to the specified file.
              
                "Fuzzy" matches come into play when using header field text 
                or column1 row text to specify row and column identities.  The 
                specified text does NOT have to be an exact match--it is NOT 
                case-sensitive and can be just a substring of the desired value 
                in the table.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param fileName  Optional:NO
             The name of the file to receive the data.
              
     @param row  Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification or a unique row 
                value in column 1.  
              
     @param col  Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification or column header text.
              
     @param rows  Optional:YES  DefaultVal: 
                The number of rows to capture.
              
     @param columns  Optional:YES  DefaultVal: 
                The number of columns to capture.
              
     @param fileEncoding  Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
     @param filterMode  Optional:YES  DefaultVal: 
                (FUTURE) A file filter to use when processing the text values.
              
     @param filterOptions  Optional:YES  DefaultVal: 
                (FUTURE) Filter options to use with the file filter.
              
     **********/
    public ComponentFunction captureFuzzyRangeToFile(String fileName, String row, String col, String rows, String columns, String fileEncoding, String filterMode, String filterOptions ) {

        if ( fileName == null ) throw new IllegalArgumentException ( "captureFuzzyRangeToFile.fileName = null");
        return HTMLTableFunctions.captureFuzzyRangeToFile(getWindow().getName(), getName(), fileName, row, col, rows, columns, fileEncoding, filterMode, filterOptions);
    }

    /*********** <pre> 
                Saves a range of values to the specified file.
              
                "Fuzzy" matches come into play when using header field text 
                or column1 row text to specify row and column identities.  The 
                specified text does NOT have to be an exact match--it is NOT 
                case-sensitive and can be just a substring of the desired value 
                in the table.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param fileName  Optional:NO
             The name of the file to receive the data.
              
     @param row  Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification or a unique row 
                value in column 1.  
              
     @param col  Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification or column header text.
              
     @param rows  Optional:YES  DefaultVal: 
                The number of rows to capture.
              
     @param columns  Optional:YES  DefaultVal: 
                The number of columns to capture.
              
     @param fileEncoding  Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
     @param filterMode  Optional:YES  DefaultVal: 
                (FUTURE) A file filter to use when processing the text values.
              
     @param filterOptions  Optional:YES  DefaultVal: 
                (FUTURE) Filter options to use with the file filter.
              
     **********/
    public void captureFuzzyRangeToFile(StepTestTable table, String fileName, String row, String col, String rows, String columns, String fileEncoding, String filterMode, String filterOptions ) {

        if ( table == null ) throw new IllegalArgumentException ( "captureFuzzyRangeToFile.table = null");

        if ( fileName == null ) throw new IllegalArgumentException ( "captureFuzzyRangeToFile.fileName = null");
        table.add( HTMLTableFunctions.captureFuzzyRangeToFile(getWindow().getName(), getName(), fileName, row, col, rows, columns, fileEncoding, filterMode, filterOptions));
    }

    /*********** <pre> 
                Saves a range of values to the specified file.
              
                "Fuzzy" matches come into play when using header field text 
                or column1 row text to specify row and column identities.  The 
                specified text does NOT have to be an exact match--it is NOT 
                case-sensitive and can be just a substring of the desired value 
                in the table.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         fileName -- Optional:NO
             The name of the file to receive the data.
              <BR/>         row -- Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification or a unique row 
                value in column 1.  
              <BR/>         col -- Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification or column header text.
              <BR/>         rows -- Optional:YES  DefaultVal: 
                The number of rows to capture.
              <BR/>         columns -- Optional:YES  DefaultVal: 
                The number of columns to capture.
              <BR/>         fileEncoding -- Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            <BR/>         filterMode -- Optional:YES  DefaultVal: 
                (FUTURE) A file filter to use when processing the text values.
              <BR/>         filterOptions -- Optional:YES  DefaultVal: 
                (FUTURE) Filter options to use with the file filter.
              
    </UL>

     **********/
    public ComponentFunction captureFuzzyRangeToFile(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "captureFuzzyRangeToFile.parameters = null");
        return HTMLTableFunctions.captureFuzzyRangeToFile(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                Saves a range of values to the specified file.
              
                "Fuzzy" matches come into play when using header field text 
                or column1 row text to specify row and column identities.  The 
                specified text does NOT have to be an exact match--it is NOT 
                case-sensitive and can be just a substring of the desired value 
                in the table.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         fileName -- Optional:NO
             The name of the file to receive the data.
              <BR/>         row -- Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification or a unique row 
                value in column 1.  
              <BR/>         col -- Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification or column header text.
              <BR/>         rows -- Optional:YES  DefaultVal: 
                The number of rows to capture.
              <BR/>         columns -- Optional:YES  DefaultVal: 
                The number of columns to capture.
              <BR/>         fileEncoding -- Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            <BR/>         filterMode -- Optional:YES  DefaultVal: 
                (FUTURE) A file filter to use when processing the text values.
              <BR/>         filterOptions -- Optional:YES  DefaultVal: 
                (FUTURE) Filter options to use with the file filter.
              
    </UL>

     **********/
    public void captureFuzzyRangeToFile(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "captureFuzzyRangeToFile.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "captureFuzzyRangeToFile.parameters = null");
        table.add( HTMLTableFunctions.captureFuzzyRangeToFile(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Saves a range of values to the specified file.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param fileName  Optional:NO
             The name of the file to receive the data.
              
     @param row  Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              
     @param col  Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification or column header text.
              
     @param rows  Optional:YES  DefaultVal: 
                The number of rows to capture.
              
     @param columns  Optional:YES  DefaultVal: 
                The number of columns to capture.
              
     @param fileEncoding  Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
     @param filterMode  Optional:YES  DefaultVal: 
                (FUTURE) A file filter to use when processing the text values.
              
     @param filterOptions  Optional:YES  DefaultVal: 
                (FUTURE) Filter options to use with the file filter.
              
     **********/
    public ComponentFunction captureRangeToFile(String fileName, String row, String col, String rows, String columns, String fileEncoding, String filterMode, String filterOptions ) {

        if ( fileName == null ) throw new IllegalArgumentException ( "captureRangeToFile.fileName = null");
        return HTMLTableFunctions.captureRangeToFile(getWindow().getName(), getName(), fileName, row, col, rows, columns, fileEncoding, filterMode, filterOptions);
    }

    /*********** <pre> 
                Saves a range of values to the specified file.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param fileName  Optional:NO
             The name of the file to receive the data.
              
     @param row  Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              
     @param col  Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification or column header text.
              
     @param rows  Optional:YES  DefaultVal: 
                The number of rows to capture.
              
     @param columns  Optional:YES  DefaultVal: 
                The number of columns to capture.
              
     @param fileEncoding  Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
     @param filterMode  Optional:YES  DefaultVal: 
                (FUTURE) A file filter to use when processing the text values.
              
     @param filterOptions  Optional:YES  DefaultVal: 
                (FUTURE) Filter options to use with the file filter.
              
     **********/
    public void captureRangeToFile(StepTestTable table, String fileName, String row, String col, String rows, String columns, String fileEncoding, String filterMode, String filterOptions ) {

        if ( table == null ) throw new IllegalArgumentException ( "captureRangeToFile.table = null");

        if ( fileName == null ) throw new IllegalArgumentException ( "captureRangeToFile.fileName = null");
        table.add( HTMLTableFunctions.captureRangeToFile(getWindow().getName(), getName(), fileName, row, col, rows, columns, fileEncoding, filterMode, filterOptions));
    }

    /*********** <pre> 
                Saves a range of values to the specified file.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         fileName -- Optional:NO
             The name of the file to receive the data.
              <BR/>         row -- Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              <BR/>         col -- Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification or column header text.
              <BR/>         rows -- Optional:YES  DefaultVal: 
                The number of rows to capture.
              <BR/>         columns -- Optional:YES  DefaultVal: 
                The number of columns to capture.
              <BR/>         fileEncoding -- Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            <BR/>         filterMode -- Optional:YES  DefaultVal: 
                (FUTURE) A file filter to use when processing the text values.
              <BR/>         filterOptions -- Optional:YES  DefaultVal: 
                (FUTURE) Filter options to use with the file filter.
              
    </UL>

     **********/
    public ComponentFunction captureRangeToFile(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "captureRangeToFile.parameters = null");
        return HTMLTableFunctions.captureRangeToFile(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                Saves a range of values to the specified file.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         fileName -- Optional:NO
             The name of the file to receive the data.
              <BR/>         row -- Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              <BR/>         col -- Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification or column header text.
              <BR/>         rows -- Optional:YES  DefaultVal: 
                The number of rows to capture.
              <BR/>         columns -- Optional:YES  DefaultVal: 
                The number of columns to capture.
              <BR/>         fileEncoding -- Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            <BR/>         filterMode -- Optional:YES  DefaultVal: 
                (FUTURE) A file filter to use when processing the text values.
              <BR/>         filterOptions -- Optional:YES  DefaultVal: 
                (FUTURE) Filter options to use with the file filter.
              
    </UL>

     **********/
    public void captureRangeToFile(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "captureRangeToFile.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "captureRangeToFile.parameters = null");
        table.add( HTMLTableFunctions.captureRangeToFile(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Attempts to perform a standard Click on an HTMLTable on a webpage.
               
                Attempts to perform a standard Click on an HTMLTable on a webpage.
                We can optionally click on a particular area of the table 
                rather than a generic click (Coords=1,1).
                 
                The click area lookup is done with the component name AND an additional
                app map reference provided in Field #5.
                
                Typical Data Table records:
                
                (1) t BrowserWin ATable Click
                (2) t BrowserWin ATable Click AMappedRegion
                
                #1 above should merely click in the top-left corner of the table.
                
                #2 above will contain a ATable entry in the BrowserWin section with 
                normal recognition information for it.  ATable will also have it's
                own section in the Application Map in which there will be entries
                defining specific indexed or named regions for the table.
                
                Examples:
                
                [BrowserWin]
                BrowserWin=WindowTag=WEBBrowser
                ATable=Type=HTMLFrame;HTMLID=top;Type=HTMLTable;Index=1
                ...
                
                [ATable]
                AMappedRegion=Coords=10,10
                ANamedRegion=Coords=10,10,25,25
                AnIndexedRegion=Col=1;Row=1
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param appMapSubkey  Optional:YES 
                Name of the AppMap subkey to lookup and use for the click.
              
     **********/
    public ComponentFunction click(String appMapSubkey ) {

        return HTMLTableFunctions.click(getWindow().getName(), getName(), appMapSubkey);
    }

    /*********** <pre> 
                Attempts to perform a standard Click on an HTMLTable on a webpage.
               
                Attempts to perform a standard Click on an HTMLTable on a webpage.
                We can optionally click on a particular area of the table 
                rather than a generic click (Coords=1,1).
                 
                The click area lookup is done with the component name AND an additional
                app map reference provided in Field #5.
                
                Typical Data Table records:
                
                (1) t BrowserWin ATable Click
                (2) t BrowserWin ATable Click AMappedRegion
                
                #1 above should merely click in the top-left corner of the table.
                
                #2 above will contain a ATable entry in the BrowserWin section with 
                normal recognition information for it.  ATable will also have it's
                own section in the Application Map in which there will be entries
                defining specific indexed or named regions for the table.
                
                Examples:
                
                [BrowserWin]
                BrowserWin=WindowTag=WEBBrowser
                ATable=Type=HTMLFrame;HTMLID=top;Type=HTMLTable;Index=1
                ...
                
                [ATable]
                AMappedRegion=Coords=10,10
                ANamedRegion=Coords=10,10,25,25
                AnIndexedRegion=Col=1;Row=1
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param appMapSubkey  Optional:YES 
                Name of the AppMap subkey to lookup and use for the click.
              
     **********/
    public void click(StepTestTable table, String appMapSubkey ) {

        if ( table == null ) throw new IllegalArgumentException ( "click.table = null");

        table.add( HTMLTableFunctions.click(getWindow().getName(), getName(), appMapSubkey));
    }

    /*********** <pre> 
                Click on a cell specified by row and column.
               
                Click on a cell specified by row and column
                parameters.
                
                Note, for the RobotJ version, (and maybe other engines
                as well), the row and column values are true to the TR
                and TD elements of the web page, so if a TR or TD has
                no text in it, then it may seem confusing. In other
                words, a table may only seem to have lets say 5
                columns, but there may actually be more based on the
                contents of the cells.
                
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param row  Optional:NO 
                The row of the cell to click.
              
     @param col  Optional:NO 
                The column of the cell to click.
              
     **********/
    public ComponentFunction clickCell(String row, String col ) {

        if ( col == null ) throw new IllegalArgumentException ( "clickCell.col = null");
        if ( row == null ) throw new IllegalArgumentException ( "clickCell.row = null");
        return HTMLTableFunctions.clickCell(getWindow().getName(), getName(), row, col);
    }

    /*********** <pre> 
                Click on a cell specified by row and column.
               
                Click on a cell specified by row and column
                parameters.
                
                Note, for the RobotJ version, (and maybe other engines
                as well), the row and column values are true to the TR
                and TD elements of the web page, so if a TR or TD has
                no text in it, then it may seem confusing. In other
                words, a table may only seem to have lets say 5
                columns, but there may actually be more based on the
                contents of the cells.
                
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param row  Optional:NO 
                The row of the cell to click.
              
     @param col  Optional:NO 
                The column of the cell to click.
              
     **********/
    public void clickCell(StepTestTable table, String row, String col ) {

        if ( table == null ) throw new IllegalArgumentException ( "clickCell.table = null");

        if ( col == null ) throw new IllegalArgumentException ( "clickCell.col = null");
        if ( row == null ) throw new IllegalArgumentException ( "clickCell.row = null");
        table.add( HTMLTableFunctions.clickCell(getWindow().getName(), getName(), row, col));
    }

    /*********** <pre> 
                Click on a cell specified by row and column.
               
                Click on a cell specified by row and column
                parameters.
                
                Note, for the RobotJ version, (and maybe other engines
                as well), the row and column values are true to the TR
                and TD elements of the web page, so if a TR or TD has
                no text in it, then it may seem confusing. In other
                words, a table may only seem to have lets say 5
                columns, but there may actually be more based on the
                contents of the cells.
                
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         row -- Optional:NO 
                The row of the cell to click.
              <BR/>         col -- Optional:NO 
                The column of the cell to click.
              
    </UL>

     **********/
    public ComponentFunction clickCell(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "clickCell.parameters = null");
        return HTMLTableFunctions.clickCell(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                Click on a cell specified by row and column.
               
                Click on a cell specified by row and column
                parameters.
                
                Note, for the RobotJ version, (and maybe other engines
                as well), the row and column values are true to the TR
                and TD elements of the web page, so if a TR or TD has
                no text in it, then it may seem confusing. In other
                words, a table may only seem to have lets say 5
                columns, but there may actually be more based on the
                contents of the cells.
                
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         row -- Optional:NO 
                The row of the cell to click.
              <BR/>         col -- Optional:NO 
                The column of the cell to click.
              
    </UL>

     **********/
    public void clickCell(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "clickCell.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "clickCell.parameters = null");
        table.add( HTMLTableFunctions.clickCell(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Performs a HTMLTableVP CompareData on an HTMLTable object.
               
                Performs a HTMLTableVP CompareProperties on an HTMLTable object.
                
                THE BENCHMARK VP MUST ALREADY EXIST AND BE AN ASSET OF THE CURRENTLY
                RUNNING SCRIPT.
                  
                Modified VP parameter information can be added to the standard
                VP=VPName by including the VPName reference in the application map
                in a section defined for the HTMLTable.  If this is done, the value 
                retrieved from the application map will be appended to VP=VPName.
                The required semicolon for this append will be provided by this routine.
                
                Example 1: Perform a standard HTMLTable CompareProperties.  To perform
                a basic CompareProperties the name "StoredVP" will not exist in the app map:
                
                The Step File call:
                
                BrowserWindow AnHTMLTable CompareStoredProperties StoredVP
                
                This will produce a CompareProperties VP with "VP=StoredVP;Wait=2,10".
                
                The StoredVP baseline MUST already exist as an asset of the
                currently running script.
                
                Example 2: Perform a HTMLTable CompareProperties providing addition 
                parameter information (such as ExpectedResult=FAIL).  To do this the
                HTMLTable object must have its own section in the app map and an item
                with the same name as the StoredVP.  The value of that item will be
                appended to the standard VP argument with a semicolon.
                
                Part of App Map:
                
                [BrowserWindow]
                BrowserWindow=WindowTag=WEBBrowser
                AnHTMLTable=<snipped for brevity>;\;Type=HTMLTable;HTMLID=TableID
                ...
                [AnHTMLTable]
                StoredVP=ExpectedResult=FAIL;Wait=3,30
                
                The Step File call:
                
                BrowserWindow AnHTMLTable CompareStoredProperties StoredVP
                
                This will produce a CompareProperties VP with all the parameters appended
                like this: "VP=StoredVP;ExpectedResult=FAIL;Wait=3,30".
                NOTE:When stored parameters are found in the app map then the default Wait= 
                parameter used in the standard compare is no longer provided.  If you still 
                need a Wait= parameter, then it must be included in the stored parameters.
                
                The StoredVP baseline MUST already exist as an asset of the
                currently running script.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param vPAsset  Optional:NO 
                Name of the pre-existing VP asset stored in the currently running script.
              
     **********/
    public ComponentFunction compareStoredData(String vPAsset ) {

        if ( vPAsset == null ) throw new IllegalArgumentException ( "compareStoredData.vPAsset = null");
        return HTMLTableFunctions.compareStoredData(getWindow().getName(), getName(), vPAsset);
    }

    /*********** <pre> 
                Performs a HTMLTableVP CompareData on an HTMLTable object.
               
                Performs a HTMLTableVP CompareProperties on an HTMLTable object.
                
                THE BENCHMARK VP MUST ALREADY EXIST AND BE AN ASSET OF THE CURRENTLY
                RUNNING SCRIPT.
                  
                Modified VP parameter information can be added to the standard
                VP=VPName by including the VPName reference in the application map
                in a section defined for the HTMLTable.  If this is done, the value 
                retrieved from the application map will be appended to VP=VPName.
                The required semicolon for this append will be provided by this routine.
                
                Example 1: Perform a standard HTMLTable CompareProperties.  To perform
                a basic CompareProperties the name "StoredVP" will not exist in the app map:
                
                The Step File call:
                
                BrowserWindow AnHTMLTable CompareStoredProperties StoredVP
                
                This will produce a CompareProperties VP with "VP=StoredVP;Wait=2,10".
                
                The StoredVP baseline MUST already exist as an asset of the
                currently running script.
                
                Example 2: Perform a HTMLTable CompareProperties providing addition 
                parameter information (such as ExpectedResult=FAIL).  To do this the
                HTMLTable object must have its own section in the app map and an item
                with the same name as the StoredVP.  The value of that item will be
                appended to the standard VP argument with a semicolon.
                
                Part of App Map:
                
                [BrowserWindow]
                BrowserWindow=WindowTag=WEBBrowser
                AnHTMLTable=<snipped for brevity>;\;Type=HTMLTable;HTMLID=TableID
                ...
                [AnHTMLTable]
                StoredVP=ExpectedResult=FAIL;Wait=3,30
                
                The Step File call:
                
                BrowserWindow AnHTMLTable CompareStoredProperties StoredVP
                
                This will produce a CompareProperties VP with all the parameters appended
                like this: "VP=StoredVP;ExpectedResult=FAIL;Wait=3,30".
                NOTE:When stored parameters are found in the app map then the default Wait= 
                parameter used in the standard compare is no longer provided.  If you still 
                need a Wait= parameter, then it must be included in the stored parameters.
                
                The StoredVP baseline MUST already exist as an asset of the
                currently running script.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param vPAsset  Optional:NO 
                Name of the pre-existing VP asset stored in the currently running script.
              
     **********/
    public void compareStoredData(StepTestTable table, String vPAsset ) {

        if ( table == null ) throw new IllegalArgumentException ( "compareStoredData.table = null");

        if ( vPAsset == null ) throw new IllegalArgumentException ( "compareStoredData.vPAsset = null");
        table.add( HTMLTableFunctions.compareStoredData(getWindow().getName(), getName(), vPAsset));
    }

    /*********** <pre> 
                Performs a HTMLTableVP CompareProperties on an HTMLTable object.
               
                Performs a HTMLTableVP CompareProperties on an HTMLTable object.
                
                THE BENCHMARK VP MUST ALREADY EXIST AND BE AN ASSET OF THE CURRENTLY
                RUNNING SCRIPT.
                  
                Modified VP parameter information can be added to the standard
                VP=VPName by including the VPName reference in the application map
                in a section defined for the HTMLTable.  If this is done, the value 
                retrieved from the application map will be appended to VP=VPName.
                The required semicolon for this append will be provided by this routine.
                
                Example 1: Perform a standard HTMLTable CompareProperties.  To perform
                a basic CompareProperties the name "StoredVP" will not exist in the app map:
                
                The Step File call:
                
                BrowserWindow AnHTMLTable CompareStoredProperties StoredVP
                
                This will produce a CompareProperties VP with "VP=StoredVP;Wait=2,10".
                
                The StoredVP baseline MUST already exist as an asset of the
                currently running script.
                
                Example 2: Perform a HTMLTable CompareProperties providing addition 
                parameter information (such as ExpectedResult=FAIL).  To do this the
                HTMLTable object must have its own section in the app map and an item
                with the same name as the StoredVP.  The value of that item will be
                appended to the standard VP argument with a semicolon.
                
                Part of App Map:
                
                [BrowserWindow]
                BrowserWindow=WindowTag=WEBBrowser
                AnHTMLTable=<snipped for brevity>;\;Type=HTMLTable;HTMLID=TableID
                ...
                [AnHTMLTable]
                StoredVP=ExpectedResult=FAIL;Wait=3,30
                
                The Step File call:
                
                BrowserWindow AnHTMLTable CompareStoredProperties StoredVP
                
                This will produce a CompareProperties VP with all the parameters appended
                like this: "VP=StoredVP;ExpectedResult=FAIL;Wait=3,30".
                NOTE:When stored parameters are found in the app map then the default Wait= 
                parameter used in the standard compare is no longer provided.  If you still 
                need a Wait= parameter, then it must be included in the stored parameters.
                
                The StoredVP baseline MUST already exist as an asset of the
                currently running script.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param vPAsset  Optional:NO
                Name of the pre-existing VP asset stored in the currently running script.
              
     **********/
    public ComponentFunction compareStoredProperties(String vPAsset ) {

        if ( vPAsset == null ) throw new IllegalArgumentException ( "compareStoredProperties.vPAsset = null");
        return HTMLTableFunctions.compareStoredProperties(getWindow().getName(), getName(), vPAsset);
    }

    /*********** <pre> 
                Performs a HTMLTableVP CompareProperties on an HTMLTable object.
               
                Performs a HTMLTableVP CompareProperties on an HTMLTable object.
                
                THE BENCHMARK VP MUST ALREADY EXIST AND BE AN ASSET OF THE CURRENTLY
                RUNNING SCRIPT.
                  
                Modified VP parameter information can be added to the standard
                VP=VPName by including the VPName reference in the application map
                in a section defined for the HTMLTable.  If this is done, the value 
                retrieved from the application map will be appended to VP=VPName.
                The required semicolon for this append will be provided by this routine.
                
                Example 1: Perform a standard HTMLTable CompareProperties.  To perform
                a basic CompareProperties the name "StoredVP" will not exist in the app map:
                
                The Step File call:
                
                BrowserWindow AnHTMLTable CompareStoredProperties StoredVP
                
                This will produce a CompareProperties VP with "VP=StoredVP;Wait=2,10".
                
                The StoredVP baseline MUST already exist as an asset of the
                currently running script.
                
                Example 2: Perform a HTMLTable CompareProperties providing addition 
                parameter information (such as ExpectedResult=FAIL).  To do this the
                HTMLTable object must have its own section in the app map and an item
                with the same name as the StoredVP.  The value of that item will be
                appended to the standard VP argument with a semicolon.
                
                Part of App Map:
                
                [BrowserWindow]
                BrowserWindow=WindowTag=WEBBrowser
                AnHTMLTable=<snipped for brevity>;\;Type=HTMLTable;HTMLID=TableID
                ...
                [AnHTMLTable]
                StoredVP=ExpectedResult=FAIL;Wait=3,30
                
                The Step File call:
                
                BrowserWindow AnHTMLTable CompareStoredProperties StoredVP
                
                This will produce a CompareProperties VP with all the parameters appended
                like this: "VP=StoredVP;ExpectedResult=FAIL;Wait=3,30".
                NOTE:When stored parameters are found in the app map then the default Wait= 
                parameter used in the standard compare is no longer provided.  If you still 
                need a Wait= parameter, then it must be included in the stored parameters.
                
                The StoredVP baseline MUST already exist as an asset of the
                currently running script.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param vPAsset  Optional:NO
                Name of the pre-existing VP asset stored in the currently running script.
              
     **********/
    public void compareStoredProperties(StepTestTable table, String vPAsset ) {

        if ( table == null ) throw new IllegalArgumentException ( "compareStoredProperties.table = null");

        if ( vPAsset == null ) throw new IllegalArgumentException ( "compareStoredProperties.vPAsset = null");
        table.add( HTMLTableFunctions.compareStoredProperties(getWindow().getName(), getName(), vPAsset));
    }

    /*********** <pre> 
                Attempts to perform a double click on a cell in a Table.
               
                Clicks on a particular row/column of the table. 
                The default location is Row=1, Col=1 unless either parameter 
                is specified otherwise.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param row  Optional:YES  DefaultVal:1 
                The 1-based cell row in the row/col specification.
              
     @param col  Optional:YES  DefaultVal:1 
                The 1-based cell column in the row/col specification.
              
     **********/
    public ComponentFunction doubleClickCell(String row, String col ) {

        return HTMLTableFunctions.doubleClickCell(getWindow().getName(), getName(), row, col);
    }

    /*********** <pre> 
                Attempts to perform a double click on a cell in a Table.
               
                Clicks on a particular row/column of the table. 
                The default location is Row=1, Col=1 unless either parameter 
                is specified otherwise.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param row  Optional:YES  DefaultVal:1 
                The 1-based cell row in the row/col specification.
              
     @param col  Optional:YES  DefaultVal:1 
                The 1-based cell column in the row/col specification.
              
     **********/
    public void doubleClickCell(StepTestTable table, String row, String col ) {

        if ( table == null ) throw new IllegalArgumentException ( "doubleClickCell.table = null");

        table.add( HTMLTableFunctions.doubleClickCell(getWindow().getName(), getName(), row, col));
    }

    /*********** <pre> 
                Attempts to perform a double click on a cell in a Table.
               
                Clicks on a particular row/column of the table. 
                The default location is Row=1, Col=1 unless either parameter 
                is specified otherwise.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         row -- Optional:YES  DefaultVal:1 
                The 1-based cell row in the row/col specification.
              <BR/>         col -- Optional:YES  DefaultVal:1 
                The 1-based cell column in the row/col specification.
              
    </UL>

     **********/
    public ComponentFunction doubleClickCell(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "doubleClickCell.parameters = null");
        return HTMLTableFunctions.doubleClickCell(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                Attempts to perform a double click on a cell in a Table.
               
                Clicks on a particular row/column of the table. 
                The default location is Row=1, Col=1 unless either parameter 
                is specified otherwise.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         row -- Optional:YES  DefaultVal:1 
                The 1-based cell row in the row/col specification.
              <BR/>         col -- Optional:YES  DefaultVal:1 
                The 1-based cell column in the row/col specification.
              
    </UL>

     **********/
    public void doubleClickCell(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "doubleClickCell.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "doubleClickCell.parameters = null");
        table.add( HTMLTableFunctions.doubleClickCell(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Attempts to perform a right click on a cell in a Table.
               
                Right clicks on a particular row/column of the table. 
                The default location is Row=1, Col=1 unless either parameter 
                is specified otherwise.
                
                RJ: CFHTMLTable gets this support from subclassing CFTable.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param row  Optional:YES  DefaultVal:1 
                The 1-based cell row in the row/col specification.
              
     @param col  Optional:YES  DefaultVal:1 
                The 1-based cell column in the row/col specification.
              
     **********/
    public ComponentFunction rightClickCell(String row, String col ) {

        return HTMLTableFunctions.rightClickCell(getWindow().getName(), getName(), row, col);
    }

    /*********** <pre> 
                Attempts to perform a right click on a cell in a Table.
               
                Right clicks on a particular row/column of the table. 
                The default location is Row=1, Col=1 unless either parameter 
                is specified otherwise.
                
                RJ: CFHTMLTable gets this support from subclassing CFTable.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param row  Optional:YES  DefaultVal:1 
                The 1-based cell row in the row/col specification.
              
     @param col  Optional:YES  DefaultVal:1 
                The 1-based cell column in the row/col specification.
              
     **********/
    public void rightClickCell(StepTestTable table, String row, String col ) {

        if ( table == null ) throw new IllegalArgumentException ( "rightClickCell.table = null");

        table.add( HTMLTableFunctions.rightClickCell(getWindow().getName(), getName(), row, col));
    }

    /*********** <pre> 
                Attempts to perform a right click on a cell in a Table.
               
                Right clicks on a particular row/column of the table. 
                The default location is Row=1, Col=1 unless either parameter 
                is specified otherwise.
                
                RJ: CFHTMLTable gets this support from subclassing CFTable.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         row -- Optional:YES  DefaultVal:1 
                The 1-based cell row in the row/col specification.
              <BR/>         col -- Optional:YES  DefaultVal:1 
                The 1-based cell column in the row/col specification.
              
    </UL>

     **********/
    public ComponentFunction rightClickCell(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "rightClickCell.parameters = null");
        return HTMLTableFunctions.rightClickCell(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                Attempts to perform a right click on a cell in a Table.
               
                Right clicks on a particular row/column of the table. 
                The default location is Row=1, Col=1 unless either parameter 
                is specified otherwise.
                
                RJ: CFHTMLTable gets this support from subclassing CFTable.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         row -- Optional:YES  DefaultVal:1 
                The 1-based cell row in the row/col specification.
              <BR/>         col -- Optional:YES  DefaultVal:1 
                The 1-based cell column in the row/col specification.
              
    </UL>

     **********/
    public void rightClickCell(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "rightClickCell.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "rightClickCell.parameters = null");
        table.add( HTMLTableFunctions.rightClickCell(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Same as ClickCell.
               
                Clicks on a particular row/column of the table. 
                The default location is Row=1, Col=1 unless either parameter 
                is specified otherwise.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param row  Optional:YES  DefaultVal:1 
                The 1-based cell row in the row/col specification.
              
     @param col  Optional:YES  DefaultVal:1 
                The 1-based cell column in the row/col specification.
              
     **********/
    public ComponentFunction selectCell(String row, String col ) {

        return HTMLTableFunctions.selectCell(getWindow().getName(), getName(), row, col);
    }

    /*********** <pre> 
                Same as ClickCell.
               
                Clicks on a particular row/column of the table. 
                The default location is Row=1, Col=1 unless either parameter 
                is specified otherwise.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param row  Optional:YES  DefaultVal:1 
                The 1-based cell row in the row/col specification.
              
     @param col  Optional:YES  DefaultVal:1 
                The 1-based cell column in the row/col specification.
              
     **********/
    public void selectCell(StepTestTable table, String row, String col ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectCell.table = null");

        table.add( HTMLTableFunctions.selectCell(getWindow().getName(), getName(), row, col));
    }

    /*********** <pre> 
                Same as ClickCell.
               
                Clicks on a particular row/column of the table. 
                The default location is Row=1, Col=1 unless either parameter 
                is specified otherwise.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         row -- Optional:YES  DefaultVal:1 
                The 1-based cell row in the row/col specification.
              <BR/>         col -- Optional:YES  DefaultVal:1 
                The 1-based cell column in the row/col specification.
              
    </UL>

     **********/
    public ComponentFunction selectCell(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "selectCell.parameters = null");
        return HTMLTableFunctions.selectCell(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                Same as ClickCell.
               
                Clicks on a particular row/column of the table. 
                The default location is Row=1, Col=1 unless either parameter 
                is specified otherwise.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         row -- Optional:YES  DefaultVal:1 
                The 1-based cell row in the row/col specification.
              <BR/>         col -- Optional:YES  DefaultVal:1 
                The 1-based cell column in the row/col specification.
              
    </UL>

     **********/
    public void selectCell(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectCell.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectCell.parameters = null");
        table.add( HTMLTableFunctions.selectCell(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                  Attempts to select a particular cell by finding the row based on cell values.
              
                  This is the same as SelectFuzzyCellTextFind.
                  The row # for the cell is also assigned to a user-defined variable.
                  The parameter values are not case-sensitive, and can be substrings of the actual 
                  table values.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param var  Optional:NO 
                The variable which gets assigned the row found.
              
     @param col  Optional:NO 
                The 1-based cell column # or header value, identifying the column for the select.
              
     @param colN  Optional:NO 
                A 1-based cell column #, or header value, identifying the column to locate the VALUEN below.
              
     @param valueN  Optional:NO 
                A Value to search for in the 'COLN' column
              
     **********/
    public ComponentFunction selectCellContainsTextFind(String var, String col, String colN, String valueN ) {

        if ( col == null ) throw new IllegalArgumentException ( "selectCellContainsTextFind.col = null");
        if ( colN == null ) throw new IllegalArgumentException ( "selectCellContainsTextFind.colN = null");
        if ( valueN == null ) throw new IllegalArgumentException ( "selectCellContainsTextFind.valueN = null");
        if ( var == null ) throw new IllegalArgumentException ( "selectCellContainsTextFind.var = null");
        return HTMLTableFunctions.selectCellContainsTextFind(getWindow().getName(), getName(), var, col, colN, valueN);
    }

    /*********** <pre> 
                  Attempts to select a particular cell by finding the row based on cell values.
              
                  This is the same as SelectFuzzyCellTextFind.
                  The row # for the cell is also assigned to a user-defined variable.
                  The parameter values are not case-sensitive, and can be substrings of the actual 
                  table values.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param var  Optional:NO 
                The variable which gets assigned the row found.
              
     @param col  Optional:NO 
                The 1-based cell column # or header value, identifying the column for the select.
              
     @param colN  Optional:NO 
                A 1-based cell column #, or header value, identifying the column to locate the VALUEN below.
              
     @param valueN  Optional:NO 
                A Value to search for in the 'COLN' column
              
     **********/
    public void selectCellContainsTextFind(StepTestTable table, String var, String col, String colN, String valueN ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectCellContainsTextFind.table = null");

        if ( col == null ) throw new IllegalArgumentException ( "selectCellContainsTextFind.col = null");
        if ( colN == null ) throw new IllegalArgumentException ( "selectCellContainsTextFind.colN = null");
        if ( valueN == null ) throw new IllegalArgumentException ( "selectCellContainsTextFind.valueN = null");
        if ( var == null ) throw new IllegalArgumentException ( "selectCellContainsTextFind.var = null");
        table.add( HTMLTableFunctions.selectCellContainsTextFind(getWindow().getName(), getName(), var, col, colN, valueN));
    }

    /*********** <pre> 
                  Attempts to select a particular cell by finding the row based on cell values.
              
                  This is the same as SelectFuzzyCellTextFind.
                  The row # for the cell is also assigned to a user-defined variable.
                  The parameter values are not case-sensitive, and can be substrings of the actual 
                  table values.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         var -- Optional:NO 
                The variable which gets assigned the row found.
              <BR/>         col -- Optional:NO 
                The 1-based cell column # or header value, identifying the column for the select.
              <BR/>         colN -- Optional:NO 
                A 1-based cell column #, or header value, identifying the column to locate the VALUEN below.
              <BR/>         valueN -- Optional:NO 
                A Value to search for in the 'COLN' column
              
    </UL>

     **********/
    public ComponentFunction selectCellContainsTextFind(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "selectCellContainsTextFind.parameters = null");
        return HTMLTableFunctions.selectCellContainsTextFind(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                  Attempts to select a particular cell by finding the row based on cell values.
              
                  This is the same as SelectFuzzyCellTextFind.
                  The row # for the cell is also assigned to a user-defined variable.
                  The parameter values are not case-sensitive, and can be substrings of the actual 
                  table values.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         var -- Optional:NO 
                The variable which gets assigned the row found.
              <BR/>         col -- Optional:NO 
                The 1-based cell column # or header value, identifying the column for the select.
              <BR/>         colN -- Optional:NO 
                A 1-based cell column #, or header value, identifying the column to locate the VALUEN below.
              <BR/>         valueN -- Optional:NO 
                A Value to search for in the 'COLN' column
              
    </UL>

     **********/
    public void selectCellContainsTextFind(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectCellContainsTextFind.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectCellContainsTextFind.parameters = null");
        table.add( HTMLTableFunctions.selectCellContainsTextFind(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Attempts to select a particular cell.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param row  Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              
     @param col  Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification or column header text.
              
     **********/
    public ComponentFunction selectCellText(String row, String col ) {

        return HTMLTableFunctions.selectCellText(getWindow().getName(), getName(), row, col);
    }

    /*********** <pre> 
                Attempts to select a particular cell.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param row  Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              
     @param col  Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification or column header text.
              
     **********/
    public void selectCellText(StepTestTable table, String row, String col ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectCellText.table = null");

        table.add( HTMLTableFunctions.selectCellText(getWindow().getName(), getName(), row, col));
    }

    /*********** <pre> 
                Attempts to select a particular cell.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         row -- Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              <BR/>         col -- Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification or column header text.
              
    </UL>

     **********/
    public ComponentFunction selectCellText(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "selectCellText.parameters = null");
        return HTMLTableFunctions.selectCellText(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                Attempts to select a particular cell.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         row -- Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              <BR/>         col -- Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification or column header text.
              
    </UL>

     **********/
    public void selectCellText(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectCellText.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectCellText.parameters = null");
        table.add( HTMLTableFunctions.selectCellText(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                  Attempts to select a particular cell by finding the row based on cell values.
              
                  The row # for the cell is also assigned to a user-defined variable.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param var  Optional:NO 
                The variable which gets assigned the row found.
              
     @param col  Optional:NO 
                The 1-based cell column # or header value, identifying the column for the select.
              
     @param colN  Optional:NO 
                A 1-based cell column #, or header value, identifying the column to locate the VALUEN below.
              
     @param valueN  Optional:NO 
                A Value to search for in the 'COLN' column
              
     **********/
    public ComponentFunction selectCellTextFind(String var, String col, String colN, String valueN ) {

        if ( col == null ) throw new IllegalArgumentException ( "selectCellTextFind.col = null");
        if ( colN == null ) throw new IllegalArgumentException ( "selectCellTextFind.colN = null");
        if ( valueN == null ) throw new IllegalArgumentException ( "selectCellTextFind.valueN = null");
        if ( var == null ) throw new IllegalArgumentException ( "selectCellTextFind.var = null");
        return HTMLTableFunctions.selectCellTextFind(getWindow().getName(), getName(), var, col, colN, valueN);
    }

    /*********** <pre> 
                  Attempts to select a particular cell by finding the row based on cell values.
              
                  The row # for the cell is also assigned to a user-defined variable.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param var  Optional:NO 
                The variable which gets assigned the row found.
              
     @param col  Optional:NO 
                The 1-based cell column # or header value, identifying the column for the select.
              
     @param colN  Optional:NO 
                A 1-based cell column #, or header value, identifying the column to locate the VALUEN below.
              
     @param valueN  Optional:NO 
                A Value to search for in the 'COLN' column
              
     **********/
    public void selectCellTextFind(StepTestTable table, String var, String col, String colN, String valueN ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectCellTextFind.table = null");

        if ( col == null ) throw new IllegalArgumentException ( "selectCellTextFind.col = null");
        if ( colN == null ) throw new IllegalArgumentException ( "selectCellTextFind.colN = null");
        if ( valueN == null ) throw new IllegalArgumentException ( "selectCellTextFind.valueN = null");
        if ( var == null ) throw new IllegalArgumentException ( "selectCellTextFind.var = null");
        table.add( HTMLTableFunctions.selectCellTextFind(getWindow().getName(), getName(), var, col, colN, valueN));
    }

    /*********** <pre> 
                  Attempts to select a particular cell by finding the row based on cell values.
              
                  The row # for the cell is also assigned to a user-defined variable.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         var -- Optional:NO 
                The variable which gets assigned the row found.
              <BR/>         col -- Optional:NO 
                The 1-based cell column # or header value, identifying the column for the select.
              <BR/>         colN -- Optional:NO 
                A 1-based cell column #, or header value, identifying the column to locate the VALUEN below.
              <BR/>         valueN -- Optional:NO 
                A Value to search for in the 'COLN' column
              
    </UL>

     **********/
    public ComponentFunction selectCellTextFind(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "selectCellTextFind.parameters = null");
        return HTMLTableFunctions.selectCellTextFind(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                  Attempts to select a particular cell by finding the row based on cell values.
              
                  The row # for the cell is also assigned to a user-defined variable.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         var -- Optional:NO 
                The variable which gets assigned the row found.
              <BR/>         col -- Optional:NO 
                The 1-based cell column # or header value, identifying the column for the select.
              <BR/>         colN -- Optional:NO 
                A 1-based cell column #, or header value, identifying the column to locate the VALUEN below.
              <BR/>         valueN -- Optional:NO 
                A Value to search for in the 'COLN' column
              
    </UL>

     **********/
    public void selectCellTextFind(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectCellTextFind.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectCellTextFind.parameters = null");
        table.add( HTMLTableFunctions.selectCellTextFind(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
	        Holds down either key Control or Shift while making a cell selection
		with emulating either a Left or Right mouse click.
              
	        Special cell selection which can be used to select multiple rows.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param specialKey  Optional:NO
             The special key command used in the row selection.
	     For now, ownly "Control" and "Shift" are supported.
              
     @param mouseClick  Optional:NO 
	        The type of mouse click needed.
		For now, ownly "Left" and "Right" are supported.
              
     @param row  Optional:NO 
	        The 1-based cell row in the row/col specification.
              
     @param col  Optional:NO 
	        The 1-based cell column in the row/col specification.
              
     **********/
    public ComponentFunction selectCellTextSpecial(String specialKey, String mouseClick, String row, String col ) {

        if ( col == null ) throw new IllegalArgumentException ( "selectCellTextSpecial.col = null");
        if ( mouseClick == null ) throw new IllegalArgumentException ( "selectCellTextSpecial.mouseClick = null");
        if ( row == null ) throw new IllegalArgumentException ( "selectCellTextSpecial.row = null");
        if ( specialKey == null ) throw new IllegalArgumentException ( "selectCellTextSpecial.specialKey = null");
        return HTMLTableFunctions.selectCellTextSpecial(getWindow().getName(), getName(), specialKey, mouseClick, row, col);
    }

    /*********** <pre> 
	        Holds down either key Control or Shift while making a cell selection
		with emulating either a Left or Right mouse click.
              
	        Special cell selection which can be used to select multiple rows.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param specialKey  Optional:NO
             The special key command used in the row selection.
	     For now, ownly "Control" and "Shift" are supported.
              
     @param mouseClick  Optional:NO 
	        The type of mouse click needed.
		For now, ownly "Left" and "Right" are supported.
              
     @param row  Optional:NO 
	        The 1-based cell row in the row/col specification.
              
     @param col  Optional:NO 
	        The 1-based cell column in the row/col specification.
              
     **********/
    public void selectCellTextSpecial(StepTestTable table, String specialKey, String mouseClick, String row, String col ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectCellTextSpecial.table = null");

        if ( col == null ) throw new IllegalArgumentException ( "selectCellTextSpecial.col = null");
        if ( mouseClick == null ) throw new IllegalArgumentException ( "selectCellTextSpecial.mouseClick = null");
        if ( row == null ) throw new IllegalArgumentException ( "selectCellTextSpecial.row = null");
        if ( specialKey == null ) throw new IllegalArgumentException ( "selectCellTextSpecial.specialKey = null");
        table.add( HTMLTableFunctions.selectCellTextSpecial(getWindow().getName(), getName(), specialKey, mouseClick, row, col));
    }

    /*********** <pre> 
	        Holds down either key Control or Shift while making a cell selection
		with emulating either a Left or Right mouse click.
              
	        Special cell selection which can be used to select multiple rows.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         specialKey -- Optional:NO
             The special key command used in the row selection.
	     For now, ownly "Control" and "Shift" are supported.
              <BR/>         mouseClick -- Optional:NO 
	        The type of mouse click needed.
		For now, ownly "Left" and "Right" are supported.
              <BR/>         row -- Optional:NO 
	        The 1-based cell row in the row/col specification.
              <BR/>         col -- Optional:NO 
	        The 1-based cell column in the row/col specification.
              
    </UL>

     **********/
    public ComponentFunction selectCellTextSpecial(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "selectCellTextSpecial.parameters = null");
        return HTMLTableFunctions.selectCellTextSpecial(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
	        Holds down either key Control or Shift while making a cell selection
		with emulating either a Left or Right mouse click.
              
	        Special cell selection which can be used to select multiple rows.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         specialKey -- Optional:NO
             The special key command used in the row selection.
	     For now, ownly "Control" and "Shift" are supported.
              <BR/>         mouseClick -- Optional:NO 
	        The type of mouse click needed.
		For now, ownly "Left" and "Right" are supported.
              <BR/>         row -- Optional:NO 
	        The 1-based cell row in the row/col specification.
              <BR/>         col -- Optional:NO 
	        The 1-based cell column in the row/col specification.
              
    </UL>

     **********/
    public void selectCellTextSpecial(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectCellTextSpecial.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectCellTextSpecial.parameters = null");
        table.add( HTMLTableFunctions.selectCellTextSpecial(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Attempts to select a particular cell.
               
                "Fuzzy" matches come into play when using header field text 
                or column1 row text to specify row and column identities.  The 
                specified text does NOT have to be an exact match--it is NOT 
                case-sensitive and can be just a substring of the desired value 
                in the table.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param row  Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              
     @param col  Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification or column header text.
              
     **********/
    public ComponentFunction selectFuzzyCellText(String row, String col ) {

        return HTMLTableFunctions.selectFuzzyCellText(getWindow().getName(), getName(), row, col);
    }

    /*********** <pre> 
                Attempts to select a particular cell.
               
                "Fuzzy" matches come into play when using header field text 
                or column1 row text to specify row and column identities.  The 
                specified text does NOT have to be an exact match--it is NOT 
                case-sensitive and can be just a substring of the desired value 
                in the table.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param row  Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              
     @param col  Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification or column header text.
              
     **********/
    public void selectFuzzyCellText(StepTestTable table, String row, String col ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectFuzzyCellText.table = null");

        table.add( HTMLTableFunctions.selectFuzzyCellText(getWindow().getName(), getName(), row, col));
    }

    /*********** <pre> 
                Attempts to select a particular cell.
               
                "Fuzzy" matches come into play when using header field text 
                or column1 row text to specify row and column identities.  The 
                specified text does NOT have to be an exact match--it is NOT 
                case-sensitive and can be just a substring of the desired value 
                in the table.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         row -- Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              <BR/>         col -- Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification or column header text.
              
    </UL>

     **********/
    public ComponentFunction selectFuzzyCellText(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "selectFuzzyCellText.parameters = null");
        return HTMLTableFunctions.selectFuzzyCellText(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                Attempts to select a particular cell.
               
                "Fuzzy" matches come into play when using header field text 
                or column1 row text to specify row and column identities.  The 
                specified text does NOT have to be an exact match--it is NOT 
                case-sensitive and can be just a substring of the desired value 
                in the table.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         row -- Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              <BR/>         col -- Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification or column header text.
              
    </UL>

     **********/
    public void selectFuzzyCellText(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectFuzzyCellText.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectFuzzyCellText.parameters = null");
        table.add( HTMLTableFunctions.selectFuzzyCellText(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Attempts to select a particular cell by finding the row based on fuzzy cell values.
               
                This is the same as SelectCellContainsTextFind.
                "Fuzzy" matches come into play when using header field text 
                or column1 row text to specify row and column identities.  The 
                specified column/cell text does NOT have to be an exact match--it is NOT 
                case-sensitive and can be just a substring of the desired value 
                in the table.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param var  Optional:NO 
                The variable which gets assigned the row found.
              
     @param col  Optional:NO 
                The 1-based cell column # in the row/col specification or fuzzy column header text.
              
     @param colN  Optional:NO 
                A 1-based cell column # in the row/col specification or fuzzy column header text.
              
     @param valueN  Optional:NO 
                A Value to search for in a cell under the 'ColN' column
              
     **********/
    public ComponentFunction selectFuzzyCellTextFind(String var, String col, String colN, String valueN ) {

        if ( col == null ) throw new IllegalArgumentException ( "selectFuzzyCellTextFind.col = null");
        if ( colN == null ) throw new IllegalArgumentException ( "selectFuzzyCellTextFind.colN = null");
        if ( valueN == null ) throw new IllegalArgumentException ( "selectFuzzyCellTextFind.valueN = null");
        if ( var == null ) throw new IllegalArgumentException ( "selectFuzzyCellTextFind.var = null");
        return HTMLTableFunctions.selectFuzzyCellTextFind(getWindow().getName(), getName(), var, col, colN, valueN);
    }

    /*********** <pre> 
                Attempts to select a particular cell by finding the row based on fuzzy cell values.
               
                This is the same as SelectCellContainsTextFind.
                "Fuzzy" matches come into play when using header field text 
                or column1 row text to specify row and column identities.  The 
                specified column/cell text does NOT have to be an exact match--it is NOT 
                case-sensitive and can be just a substring of the desired value 
                in the table.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param var  Optional:NO 
                The variable which gets assigned the row found.
              
     @param col  Optional:NO 
                The 1-based cell column # in the row/col specification or fuzzy column header text.
              
     @param colN  Optional:NO 
                A 1-based cell column # in the row/col specification or fuzzy column header text.
              
     @param valueN  Optional:NO 
                A Value to search for in a cell under the 'ColN' column
              
     **********/
    public void selectFuzzyCellTextFind(StepTestTable table, String var, String col, String colN, String valueN ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectFuzzyCellTextFind.table = null");

        if ( col == null ) throw new IllegalArgumentException ( "selectFuzzyCellTextFind.col = null");
        if ( colN == null ) throw new IllegalArgumentException ( "selectFuzzyCellTextFind.colN = null");
        if ( valueN == null ) throw new IllegalArgumentException ( "selectFuzzyCellTextFind.valueN = null");
        if ( var == null ) throw new IllegalArgumentException ( "selectFuzzyCellTextFind.var = null");
        table.add( HTMLTableFunctions.selectFuzzyCellTextFind(getWindow().getName(), getName(), var, col, colN, valueN));
    }

    /*********** <pre> 
                Attempts to select a particular cell by finding the row based on fuzzy cell values.
               
                This is the same as SelectCellContainsTextFind.
                "Fuzzy" matches come into play when using header field text 
                or column1 row text to specify row and column identities.  The 
                specified column/cell text does NOT have to be an exact match--it is NOT 
                case-sensitive and can be just a substring of the desired value 
                in the table.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         var -- Optional:NO 
                The variable which gets assigned the row found.
              <BR/>         col -- Optional:NO 
                The 1-based cell column # in the row/col specification or fuzzy column header text.
              <BR/>         colN -- Optional:NO 
                A 1-based cell column # in the row/col specification or fuzzy column header text.
              <BR/>         valueN -- Optional:NO 
                A Value to search for in a cell under the 'ColN' column
              
    </UL>

     **********/
    public ComponentFunction selectFuzzyCellTextFind(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "selectFuzzyCellTextFind.parameters = null");
        return HTMLTableFunctions.selectFuzzyCellTextFind(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                Attempts to select a particular cell by finding the row based on fuzzy cell values.
               
                This is the same as SelectCellContainsTextFind.
                "Fuzzy" matches come into play when using header field text 
                or column1 row text to specify row and column identities.  The 
                specified column/cell text does NOT have to be an exact match--it is NOT 
                case-sensitive and can be just a substring of the desired value 
                in the table.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         var -- Optional:NO 
                The variable which gets assigned the row found.
              <BR/>         col -- Optional:NO 
                The 1-based cell column # in the row/col specification or fuzzy column header text.
              <BR/>         colN -- Optional:NO 
                A 1-based cell column # in the row/col specification or fuzzy column header text.
              <BR/>         valueN -- Optional:NO 
                A Value to search for in a cell under the 'ColN' column
              
    </UL>

     **********/
    public void selectFuzzyCellTextFind(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "selectFuzzyCellTextFind.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectFuzzyCellTextFind.parameters = null");
        table.add( HTMLTableFunctions.selectFuzzyCellTextFind(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Verifies whether the specified cell is editable.
               
	        RJ: Invokes the "editCellAt" method on a specific cell.
		That method returns a boolean which is used for the verification.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param row  Optional:NO
	    The 1-based cell row in the row/col specification.
              
     @param col  Optional:NO
	       The 1-based cell column in the row/col specification.
              
     @param expectedValue  Optional:NO 
	         The case-insensitive value we expect for the editable value ("true" or"false").
              
     **********/
    public ComponentFunction verifyCellEditable(String row, String col, String expectedValue ) {

        if ( col == null ) throw new IllegalArgumentException ( "verifyCellEditable.col = null");
        if ( expectedValue == null ) throw new IllegalArgumentException ( "verifyCellEditable.expectedValue = null");
        if ( row == null ) throw new IllegalArgumentException ( "verifyCellEditable.row = null");
        return HTMLTableFunctions.verifyCellEditable(getWindow().getName(), getName(), row, col, expectedValue);
    }

    /*********** <pre> 
                Verifies whether the specified cell is editable.
               
	        RJ: Invokes the "editCellAt" method on a specific cell.
		That method returns a boolean which is used for the verification.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param row  Optional:NO
	    The 1-based cell row in the row/col specification.
              
     @param col  Optional:NO
	       The 1-based cell column in the row/col specification.
              
     @param expectedValue  Optional:NO 
	         The case-insensitive value we expect for the editable value ("true" or"false").
              
     **********/
    public void verifyCellEditable(StepTestTable table, String row, String col, String expectedValue ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyCellEditable.table = null");

        if ( col == null ) throw new IllegalArgumentException ( "verifyCellEditable.col = null");
        if ( expectedValue == null ) throw new IllegalArgumentException ( "verifyCellEditable.expectedValue = null");
        if ( row == null ) throw new IllegalArgumentException ( "verifyCellEditable.row = null");
        table.add( HTMLTableFunctions.verifyCellEditable(getWindow().getName(), getName(), row, col, expectedValue));
    }

    /*********** <pre> 
                Verifies whether the specified cell is editable.
               
	        RJ: Invokes the "editCellAt" method on a specific cell.
		That method returns a boolean which is used for the verification.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         row -- Optional:NO
	    The 1-based cell row in the row/col specification.
              <BR/>         col -- Optional:NO
	       The 1-based cell column in the row/col specification.
              <BR/>         expectedValue -- Optional:NO 
	         The case-insensitive value we expect for the editable value ("true" or"false").
              
    </UL>

     **********/
    public ComponentFunction verifyCellEditable(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyCellEditable.parameters = null");
        return HTMLTableFunctions.verifyCellEditable(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                Verifies whether the specified cell is editable.
               
	        RJ: Invokes the "editCellAt" method on a specific cell.
		That method returns a boolean which is used for the verification.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         row -- Optional:NO
	    The 1-based cell row in the row/col specification.
              <BR/>         col -- Optional:NO
	       The 1-based cell column in the row/col specification.
              <BR/>         expectedValue -- Optional:NO 
	         The case-insensitive value we expect for the editable value ("true" or"false").
              
    </UL>

     **********/
    public void verifyCellEditable(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyCellEditable.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyCellEditable.parameters = null");
        table.add( HTMLTableFunctions.verifyCellEditable(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Attempts to verify a particular cell value.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param benchValue  Optional:NO
             The case-sensitive expected value for the specified cell.
              
     @param row  Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification.
              
     @param col  Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification.
              
     **********/
    public ComponentFunction verifyCellText(String benchValue, String row, String col ) {

        if ( benchValue == null ) throw new IllegalArgumentException ( "verifyCellText.benchValue = null");
        return HTMLTableFunctions.verifyCellText(getWindow().getName(), getName(), benchValue, row, col);
    }

    /*********** <pre> 
                Attempts to verify a particular cell value.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param benchValue  Optional:NO
             The case-sensitive expected value for the specified cell.
              
     @param row  Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification.
              
     @param col  Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification.
              
     **********/
    public void verifyCellText(StepTestTable table, String benchValue, String row, String col ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyCellText.table = null");

        if ( benchValue == null ) throw new IllegalArgumentException ( "verifyCellText.benchValue = null");
        table.add( HTMLTableFunctions.verifyCellText(getWindow().getName(), getName(), benchValue, row, col));
    }

    /*********** <pre> 
                Attempts to verify a particular cell value.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         benchValue -- Optional:NO
             The case-sensitive expected value for the specified cell.
              <BR/>         row -- Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification.
              <BR/>         col -- Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification.
              
    </UL>

     **********/
    public ComponentFunction verifyCellText(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyCellText.parameters = null");
        return HTMLTableFunctions.verifyCellText(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                Attempts to verify a particular cell value.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         benchValue -- Optional:NO
             The case-sensitive expected value for the specified cell.
              <BR/>         row -- Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification.
              <BR/>         col -- Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification.
              
    </UL>

     **********/
    public void verifyCellText(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyCellText.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyCellText.parameters = null");
        table.add( HTMLTableFunctions.verifyCellText(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Attempts to verify a particular cell value.
               
                The value comparison is NOT case-sensitive and can be a substring.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param benchValue  Optional:NO
                  The expected value for the specified cell.
              
     @param row  Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification.
              
     @param col  Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification.
              
     **********/
    public ComponentFunction verifyCellTextContains(String benchValue, String row, String col ) {

        if ( benchValue == null ) throw new IllegalArgumentException ( "verifyCellTextContains.benchValue = null");
        return HTMLTableFunctions.verifyCellTextContains(getWindow().getName(), getName(), benchValue, row, col);
    }

    /*********** <pre> 
                Attempts to verify a particular cell value.
               
                The value comparison is NOT case-sensitive and can be a substring.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param benchValue  Optional:NO
                  The expected value for the specified cell.
              
     @param row  Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification.
              
     @param col  Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification.
              
     **********/
    public void verifyCellTextContains(StepTestTable table, String benchValue, String row, String col ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyCellTextContains.table = null");

        if ( benchValue == null ) throw new IllegalArgumentException ( "verifyCellTextContains.benchValue = null");
        table.add( HTMLTableFunctions.verifyCellTextContains(getWindow().getName(), getName(), benchValue, row, col));
    }

    /*********** <pre> 
                Attempts to verify a particular cell value.
               
                The value comparison is NOT case-sensitive and can be a substring.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         benchValue -- Optional:NO
                  The expected value for the specified cell.
              <BR/>         row -- Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification.
              <BR/>         col -- Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification.
              
    </UL>

     **********/
    public ComponentFunction verifyCellTextContains(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyCellTextContains.parameters = null");
        return HTMLTableFunctions.verifyCellTextContains(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                Attempts to verify a particular cell value.
               
                The value comparison is NOT case-sensitive and can be a substring.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         benchValue -- Optional:NO
                  The expected value for the specified cell.
              <BR/>         row -- Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification.
              <BR/>         col -- Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification.
              
    </UL>

     **********/
    public void verifyCellTextContains(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyCellTextContains.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyCellTextContains.parameters = null");
        table.add( HTMLTableFunctions.verifyCellTextContains(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Attempts to verify a particular cell by finding the row based on cell values.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param benchValue  Optional:NO
             The case-sensitive expected value for the specified cell.
              
     @param var  Optional:NO 
                The variable which gets assigned the row found.
              
     @param col  Optional:NO 
                The 1-based cell column # in the row/col specification or column header text.
              
     @param colN  Optional:NO 
                A 1-based cell column # in the row/col specification or column header text.
              
     @param valueN  Optional:NO 
                A Value to search for in a cell under the 'ColN' column
              
     **********/
    public ComponentFunction verifyCellTextFind(String benchValue, String var, String col, String colN, String valueN ) {

        if ( benchValue == null ) throw new IllegalArgumentException ( "verifyCellTextFind.benchValue = null");
        if ( col == null ) throw new IllegalArgumentException ( "verifyCellTextFind.col = null");
        if ( colN == null ) throw new IllegalArgumentException ( "verifyCellTextFind.colN = null");
        if ( valueN == null ) throw new IllegalArgumentException ( "verifyCellTextFind.valueN = null");
        if ( var == null ) throw new IllegalArgumentException ( "verifyCellTextFind.var = null");
        return HTMLTableFunctions.verifyCellTextFind(getWindow().getName(), getName(), benchValue, var, col, colN, valueN);
    }

    /*********** <pre> 
                Attempts to verify a particular cell by finding the row based on cell values.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param benchValue  Optional:NO
             The case-sensitive expected value for the specified cell.
              
     @param var  Optional:NO 
                The variable which gets assigned the row found.
              
     @param col  Optional:NO 
                The 1-based cell column # in the row/col specification or column header text.
              
     @param colN  Optional:NO 
                A 1-based cell column # in the row/col specification or column header text.
              
     @param valueN  Optional:NO 
                A Value to search for in a cell under the 'ColN' column
              
     **********/
    public void verifyCellTextFind(StepTestTable table, String benchValue, String var, String col, String colN, String valueN ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyCellTextFind.table = null");

        if ( benchValue == null ) throw new IllegalArgumentException ( "verifyCellTextFind.benchValue = null");
        if ( col == null ) throw new IllegalArgumentException ( "verifyCellTextFind.col = null");
        if ( colN == null ) throw new IllegalArgumentException ( "verifyCellTextFind.colN = null");
        if ( valueN == null ) throw new IllegalArgumentException ( "verifyCellTextFind.valueN = null");
        if ( var == null ) throw new IllegalArgumentException ( "verifyCellTextFind.var = null");
        table.add( HTMLTableFunctions.verifyCellTextFind(getWindow().getName(), getName(), benchValue, var, col, colN, valueN));
    }

    /*********** <pre> 
                Attempts to verify a particular cell by finding the row based on cell values.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         benchValue -- Optional:NO
             The case-sensitive expected value for the specified cell.
              <BR/>         var -- Optional:NO 
                The variable which gets assigned the row found.
              <BR/>         col -- Optional:NO 
                The 1-based cell column # in the row/col specification or column header text.
              <BR/>         colN -- Optional:NO 
                A 1-based cell column # in the row/col specification or column header text.
              <BR/>         valueN -- Optional:NO 
                A Value to search for in a cell under the 'ColN' column
              
    </UL>

     **********/
    public ComponentFunction verifyCellTextFind(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyCellTextFind.parameters = null");
        return HTMLTableFunctions.verifyCellTextFind(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                Attempts to verify a particular cell by finding the row based on cell values.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         benchValue -- Optional:NO
             The case-sensitive expected value for the specified cell.
              <BR/>         var -- Optional:NO 
                The variable which gets assigned the row found.
              <BR/>         col -- Optional:NO 
                The 1-based cell column # in the row/col specification or column header text.
              <BR/>         colN -- Optional:NO 
                A 1-based cell column # in the row/col specification or column header text.
              <BR/>         valueN -- Optional:NO 
                A Value to search for in a cell under the 'ColN' column
              
    </UL>

     **********/
    public void verifyCellTextFind(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyCellTextFind.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyCellTextFind.parameters = null");
        table.add( HTMLTableFunctions.verifyCellTextFind(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                     Verify the value of a specific Cell.
                    
                     Attemps to verify the contents of a table cell on a webpage
		     should the command not contain what cell to verify it will default
		     to 1,1
                       </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param expectedValue  Optional:NO 
                     The Expected Value of the cell.
                   
     @param cell  Optional:YES 
                     This is the optional cell location to be tested
                   
     **********/
    public ComponentFunction verifyCellValue(String expectedValue, String cell ) {

        if ( expectedValue == null ) throw new IllegalArgumentException ( "verifyCellValue.expectedValue = null");
        return HTMLTableFunctions.verifyCellValue(getWindow().getName(), getName(), expectedValue, cell);
    }

    /*********** <pre> 
                     Verify the value of a specific Cell.
                    
                     Attemps to verify the contents of a table cell on a webpage
		     should the command not contain what cell to verify it will default
		     to 1,1
                       </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param expectedValue  Optional:NO 
                     The Expected Value of the cell.
                   
     @param cell  Optional:YES 
                     This is the optional cell location to be tested
                   
     **********/
    public void verifyCellValue(StepTestTable table, String expectedValue, String cell ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyCellValue.table = null");

        if ( expectedValue == null ) throw new IllegalArgumentException ( "verifyCellValue.expectedValue = null");
        table.add( HTMLTableFunctions.verifyCellValue(getWindow().getName(), getName(), expectedValue, cell));
    }

    /*********** <pre> 
                     Verify the value of a specific Cell.
                    
                     Attemps to verify the contents of a table cell on a webpage
		     should the command not contain what cell to verify it will default
		     to 1,1
                       </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         expectedValue -- Optional:NO 
                     The Expected Value of the cell.
                   <BR/>         cell -- Optional:YES 
                     This is the optional cell location to be tested
                   
    </UL>

     **********/
    public ComponentFunction verifyCellValue(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyCellValue.parameters = null");
        return HTMLTableFunctions.verifyCellValue(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                     Verify the value of a specific Cell.
                    
                     Attemps to verify the contents of a table cell on a webpage
		     should the command not contain what cell to verify it will default
		     to 1,1
                       </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         expectedValue -- Optional:NO 
                     The Expected Value of the cell.
                   <BR/>         cell -- Optional:YES 
                     This is the optional cell location to be tested
                   
    </UL>

     **********/
    public void verifyCellValue(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyCellValue.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyCellValue.parameters = null");
        table.add( HTMLTableFunctions.verifyCellValue(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Attempts to verify a particular column's label when given a column number.
               
                Verifies a column label when given the column number.  It currently
		does NOT work with columns with multi-line names.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param colLabel  Optional:NO
             The case-insensitive expected value for the specified column label.
              
     @param colNumber  Optional:NO 
                The 1-based column number of the label that needs verified.
              
     **********/
    public ComponentFunction verifyColumnLabel(String colLabel, String colNumber ) {

        if ( colLabel == null ) throw new IllegalArgumentException ( "verifyColumnLabel.colLabel = null");
        if ( colNumber == null ) throw new IllegalArgumentException ( "verifyColumnLabel.colNumber = null");
        return HTMLTableFunctions.verifyColumnLabel(getWindow().getName(), getName(), colLabel, colNumber);
    }

    /*********** <pre> 
                Attempts to verify a particular column's label when given a column number.
               
                Verifies a column label when given the column number.  It currently
		does NOT work with columns with multi-line names.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param colLabel  Optional:NO
             The case-insensitive expected value for the specified column label.
              
     @param colNumber  Optional:NO 
                The 1-based column number of the label that needs verified.
              
     **********/
    public void verifyColumnLabel(StepTestTable table, String colLabel, String colNumber ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyColumnLabel.table = null");

        if ( colLabel == null ) throw new IllegalArgumentException ( "verifyColumnLabel.colLabel = null");
        if ( colNumber == null ) throw new IllegalArgumentException ( "verifyColumnLabel.colNumber = null");
        table.add( HTMLTableFunctions.verifyColumnLabel(getWindow().getName(), getName(), colLabel, colNumber));
    }

    /*********** <pre> 
                Attempts to verify a particular column's label when given a column number.
               
                Verifies a column label when given the column number.  It currently
		does NOT work with columns with multi-line names.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         colLabel -- Optional:NO
             The case-insensitive expected value for the specified column label.
              <BR/>         colNumber -- Optional:NO 
                The 1-based column number of the label that needs verified.
              
    </UL>

     **********/
    public ComponentFunction verifyColumnLabel(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyColumnLabel.parameters = null");
        return HTMLTableFunctions.verifyColumnLabel(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                Attempts to verify a particular column's label when given a column number.
               
                Verifies a column label when given the column number.  It currently
		does NOT work with columns with multi-line names.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         colLabel -- Optional:NO
             The case-insensitive expected value for the specified column label.
              <BR/>         colNumber -- Optional:NO 
                The 1-based column number of the label that needs verified.
              
    </UL>

     **********/
    public void verifyColumnLabel(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyColumnLabel.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyColumnLabel.parameters = null");
        table.add( HTMLTableFunctions.verifyColumnLabel(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Attempts to verify a particular cell value.
               
                "Fuzzy" matches come into play when using header field text 
                or column1 row text to specify row and column identities.  The 
                specified text does NOT have to be an exact match--it is NOT 
                case-sensitive and can be just a substring of the desired value 
                in the table.
                The Benchmark must be exact, however.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param benchValue  Optional:NO
             The case-sensitive expected value for the specified cell.
              
     @param row  Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              
     @param col  Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification or column header text.
              
     **********/
    public ComponentFunction verifyFuzzyCellText(String benchValue, String row, String col ) {

        if ( benchValue == null ) throw new IllegalArgumentException ( "verifyFuzzyCellText.benchValue = null");
        return HTMLTableFunctions.verifyFuzzyCellText(getWindow().getName(), getName(), benchValue, row, col);
    }

    /*********** <pre> 
                Attempts to verify a particular cell value.
               
                "Fuzzy" matches come into play when using header field text 
                or column1 row text to specify row and column identities.  The 
                specified text does NOT have to be an exact match--it is NOT 
                case-sensitive and can be just a substring of the desired value 
                in the table.
                The Benchmark must be exact, however.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param benchValue  Optional:NO
             The case-sensitive expected value for the specified cell.
              
     @param row  Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              
     @param col  Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification or column header text.
              
     **********/
    public void verifyFuzzyCellText(StepTestTable table, String benchValue, String row, String col ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyFuzzyCellText.table = null");

        if ( benchValue == null ) throw new IllegalArgumentException ( "verifyFuzzyCellText.benchValue = null");
        table.add( HTMLTableFunctions.verifyFuzzyCellText(getWindow().getName(), getName(), benchValue, row, col));
    }

    /*********** <pre> 
                Attempts to verify a particular cell value.
               
                "Fuzzy" matches come into play when using header field text 
                or column1 row text to specify row and column identities.  The 
                specified text does NOT have to be an exact match--it is NOT 
                case-sensitive and can be just a substring of the desired value 
                in the table.
                The Benchmark must be exact, however.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         benchValue -- Optional:NO
             The case-sensitive expected value for the specified cell.
              <BR/>         row -- Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              <BR/>         col -- Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification or column header text.
              
    </UL>

     **********/
    public ComponentFunction verifyFuzzyCellText(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyFuzzyCellText.parameters = null");
        return HTMLTableFunctions.verifyFuzzyCellText(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                Attempts to verify a particular cell value.
               
                "Fuzzy" matches come into play when using header field text 
                or column1 row text to specify row and column identities.  The 
                specified text does NOT have to be an exact match--it is NOT 
                case-sensitive and can be just a substring of the desired value 
                in the table.
                The Benchmark must be exact, however.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         benchValue -- Optional:NO
             The case-sensitive expected value for the specified cell.
              <BR/>         row -- Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              <BR/>         col -- Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification or column header text.
              
    </UL>

     **********/
    public void verifyFuzzyCellText(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyFuzzyCellText.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyFuzzyCellText.parameters = null");
        table.add( HTMLTableFunctions.verifyFuzzyCellText(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Attempts to verify a particular cell value.
               
                "Fuzzy" matches come into play when using header field text 
                or column1 row text to specify row and column identities.  The 
                specified text does NOT have to be an exact match--it is NOT 
                case-sensitive and can be just a substring of the desired value 
                in the table.
                The Benchmark comparison is NOT case-sensitive and can be a substring.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param benchValue  Optional:NO
                  The expected value for the specified cell.
              
     @param row  Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              
     @param col  Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification or column header text.
              
     **********/
    public ComponentFunction verifyFuzzyCellTextContains(String benchValue, String row, String col ) {

        if ( benchValue == null ) throw new IllegalArgumentException ( "verifyFuzzyCellTextContains.benchValue = null");
        return HTMLTableFunctions.verifyFuzzyCellTextContains(getWindow().getName(), getName(), benchValue, row, col);
    }

    /*********** <pre> 
                Attempts to verify a particular cell value.
               
                "Fuzzy" matches come into play when using header field text 
                or column1 row text to specify row and column identities.  The 
                specified text does NOT have to be an exact match--it is NOT 
                case-sensitive and can be just a substring of the desired value 
                in the table.
                The Benchmark comparison is NOT case-sensitive and can be a substring.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param benchValue  Optional:NO
                  The expected value for the specified cell.
              
     @param row  Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              
     @param col  Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification or column header text.
              
     **********/
    public void verifyFuzzyCellTextContains(StepTestTable table, String benchValue, String row, String col ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyFuzzyCellTextContains.table = null");

        if ( benchValue == null ) throw new IllegalArgumentException ( "verifyFuzzyCellTextContains.benchValue = null");
        table.add( HTMLTableFunctions.verifyFuzzyCellTextContains(getWindow().getName(), getName(), benchValue, row, col));
    }

    /*********** <pre> 
                Attempts to verify a particular cell value.
               
                "Fuzzy" matches come into play when using header field text 
                or column1 row text to specify row and column identities.  The 
                specified text does NOT have to be an exact match--it is NOT 
                case-sensitive and can be just a substring of the desired value 
                in the table.
                The Benchmark comparison is NOT case-sensitive and can be a substring.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         benchValue -- Optional:NO
                  The expected value for the specified cell.
              <BR/>         row -- Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              <BR/>         col -- Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification or column header text.
              
    </UL>

     **********/
    public ComponentFunction verifyFuzzyCellTextContains(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyFuzzyCellTextContains.parameters = null");
        return HTMLTableFunctions.verifyFuzzyCellTextContains(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                Attempts to verify a particular cell value.
               
                "Fuzzy" matches come into play when using header field text 
                or column1 row text to specify row and column identities.  The 
                specified text does NOT have to be an exact match--it is NOT 
                case-sensitive and can be just a substring of the desired value 
                in the table.
                The Benchmark comparison is NOT case-sensitive and can be a substring.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         benchValue -- Optional:NO
                  The expected value for the specified cell.
              <BR/>         row -- Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              <BR/>         col -- Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification or column header text.
              
    </UL>

     **********/
    public void verifyFuzzyCellTextContains(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyFuzzyCellTextContains.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyFuzzyCellTextContains.parameters = null");
        table.add( HTMLTableFunctions.verifyFuzzyCellTextContains(getWindow().getName(), getName(), parameters));
    }

    /*********** <pre> 
                Attempts to verify a particular cell by finding the row based on fuzzy cell values.
               
                "Fuzzy" matches come into play when using header field text 
                or column1 row text to specify row and column identities.  The 
                specified column/cell text does NOT have to be an exact match--it is NOT 
                case-sensitive and can be just a substring of the desired value 
                in the table.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param benchValue  Optional:NO
             The case-sensitive expected value for the specified cell.
              
     @param var  Optional:NO 
                The variable which gets assigned the row found.
              
     @param col  Optional:NO 
                The 1-based cell column # in the row/col specification or fuzzy column header text.
              
     @param colN  Optional:NO 
                A 1-based cell column # in the row/col specification or fuzzy column header text.
              
     @param valueN  Optional:NO 
                A Value to search for in a cell under the 'ColN' column
              
     **********/
    public ComponentFunction verifyFuzzyCellTextFind(String benchValue, String var, String col, String colN, String valueN ) {

        if ( benchValue == null ) throw new IllegalArgumentException ( "verifyFuzzyCellTextFind.benchValue = null");
        if ( col == null ) throw new IllegalArgumentException ( "verifyFuzzyCellTextFind.col = null");
        if ( colN == null ) throw new IllegalArgumentException ( "verifyFuzzyCellTextFind.colN = null");
        if ( valueN == null ) throw new IllegalArgumentException ( "verifyFuzzyCellTextFind.valueN = null");
        if ( var == null ) throw new IllegalArgumentException ( "verifyFuzzyCellTextFind.var = null");
        return HTMLTableFunctions.verifyFuzzyCellTextFind(getWindow().getName(), getName(), benchValue, var, col, colN, valueN);
    }

    /*********** <pre> 
                Attempts to verify a particular cell by finding the row based on fuzzy cell values.
               
                "Fuzzy" matches come into play when using header field text 
                or column1 row text to specify row and column identities.  The 
                specified column/cell text does NOT have to be an exact match--it is NOT 
                case-sensitive and can be just a substring of the desired value 
                in the table.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param benchValue  Optional:NO
             The case-sensitive expected value for the specified cell.
              
     @param var  Optional:NO 
                The variable which gets assigned the row found.
              
     @param col  Optional:NO 
                The 1-based cell column # in the row/col specification or fuzzy column header text.
              
     @param colN  Optional:NO 
                A 1-based cell column # in the row/col specification or fuzzy column header text.
              
     @param valueN  Optional:NO 
                A Value to search for in a cell under the 'ColN' column
              
     **********/
    public void verifyFuzzyCellTextFind(StepTestTable table, String benchValue, String var, String col, String colN, String valueN ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyFuzzyCellTextFind.table = null");

        if ( benchValue == null ) throw new IllegalArgumentException ( "verifyFuzzyCellTextFind.benchValue = null");
        if ( col == null ) throw new IllegalArgumentException ( "verifyFuzzyCellTextFind.col = null");
        if ( colN == null ) throw new IllegalArgumentException ( "verifyFuzzyCellTextFind.colN = null");
        if ( valueN == null ) throw new IllegalArgumentException ( "verifyFuzzyCellTextFind.valueN = null");
        if ( var == null ) throw new IllegalArgumentException ( "verifyFuzzyCellTextFind.var = null");
        table.add( HTMLTableFunctions.verifyFuzzyCellTextFind(getWindow().getName(), getName(), benchValue, var, col, colN, valueN));
    }

    /*********** <pre> 
                Attempts to verify a particular cell by finding the row based on fuzzy cell values.
               
                "Fuzzy" matches come into play when using header field text 
                or column1 row text to specify row and column identities.  The 
                specified column/cell text does NOT have to be an exact match--it is NOT 
                case-sensitive and can be just a substring of the desired value 
                in the table.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         benchValue -- Optional:NO
             The case-sensitive expected value for the specified cell.
              <BR/>         var -- Optional:NO 
                The variable which gets assigned the row found.
              <BR/>         col -- Optional:NO 
                The 1-based cell column # in the row/col specification or fuzzy column header text.
              <BR/>         colN -- Optional:NO 
                A 1-based cell column # in the row/col specification or fuzzy column header text.
              <BR/>         valueN -- Optional:NO 
                A Value to search for in a cell under the 'ColN' column
              
    </UL>

     **********/
    public ComponentFunction verifyFuzzyCellTextFind(String[] parameters ) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyFuzzyCellTextFind.parameters = null");
        return HTMLTableFunctions.verifyFuzzyCellTextFind(getWindow().getName(), getName(), parameters);
    }

    /*********** <pre> 
                Attempts to verify a particular cell by finding the row based on fuzzy cell values.
               
                "Fuzzy" matches come into play when using header field text 
                or column1 row text to specify row and column identities.  The 
                specified column/cell text does NOT have to be an exact match--it is NOT 
                case-sensitive and can be just a substring of the desired value 
                in the table.
                  </pre>    
    Supporting Engines:
    <P/><UL>
    <LI>Rational RobotJ</LI>
    <LI>OpenQA Selenium</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>         benchValue -- Optional:NO
             The case-sensitive expected value for the specified cell.
              <BR/>         var -- Optional:NO 
                The variable which gets assigned the row found.
              <BR/>         col -- Optional:NO 
                The 1-based cell column # in the row/col specification or fuzzy column header text.
              <BR/>         colN -- Optional:NO 
                A 1-based cell column # in the row/col specification or fuzzy column header text.
              <BR/>         valueN -- Optional:NO 
                A Value to search for in a cell under the 'ColN' column
              
    </UL>

     **********/
    public void verifyFuzzyCellTextFind(StepTestTable table, String[] parameters ) {

        if ( table == null ) throw new IllegalArgumentException ( "verifyFuzzyCellTextFind.table = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyFuzzyCellTextFind.parameters = null");
        table.add( HTMLTableFunctions.verifyFuzzyCellTextFind(getWindow().getName(), getName(), parameters));
    }

}
