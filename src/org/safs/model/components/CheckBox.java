
/******************************************************************************
 * CheckBox.java
 *
 * Copyright (c) by SAS Institute Inc., Cary, NC 27513
 * General Public License: http://www.opensource.org/licenses/gpl-license.php
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   CheckBoxFunctions.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaComponentModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe CheckBoxFunctions.xml XSLJavaComponentModel.xsl -o CheckBox.java
 *
 ******************************************************************************/ 
package org.safs.model.components;

import org.safs.model.commands.CheckBoxFunctions;
import org.safs.model.ComponentFunction;
import org.safs.model.components.UIComponent;
import org.safs.model.StepTestTable;

public class CheckBox extends GenericObject {

    /*****************
    Constructor 

    Create an instance of pseudo-component representing 
    a specific component in a specific window.
    
    @param window  Optional:NO 
           Specifies which Window this component is 'in'.
    @param compname Optional:NO 
           Specifies the AppMap name of the component in the Window.
    ****************/
    public CheckBox(Window window, String compname) {

        super(window, compname);
    }

    /*****************
    Constructor 

    Create an instance of pseudo-component representing 
    a specific component in a specific window.
    
    This convenience routine will create the requisite Window component.
    
    @param winname  Optional:NO 
           Specifies the AppMap name of the window.
    @param compname Optional:NO 
           Specifies the AppMap name of the component in the Window.
    ****************/
    public CheckBox(String winname, String compname) {

        this(new Window(winname), compname);
    }

    protected CheckBox(String compname) {

        super(compname);
    }



    /*********** <pre> 
                Tries to perform a Check on the Checkbox.
               
                Tries to perform a Check on the Checkbox.  If the Checkbox does not 
                have a checkmark, it will set the checkmark.  If the Checkbox already 
                has a checkmark, then it should leave it alone.
                Currently, this handles most generic checkboxes and HTMLCheckboxes.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    <LI>OpenQA Selenium</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    </UL>

     **********/
    public ComponentFunction check( ) {

        return CheckBoxFunctions.check(getWindow().getName(), getName());
    }

    /*********** <pre> 
                Tries to perform a Check on the Checkbox.
               
                Tries to perform a Check on the Checkbox.  If the Checkbox does not 
                have a checkmark, it will set the checkmark.  If the Checkbox already 
                has a checkmark, then it should leave it alone.
                Currently, this handles most generic checkboxes and HTMLCheckboxes.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    <LI>OpenQA Selenium</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     **********/
    public void check(StepTestTable table ) {

        if ( table == null ) throw new IllegalArgumentException ( "check.table = null");

        table.add( CheckBoxFunctions.check(getWindow().getName(), getName()));
    }

    /*********** <pre> 
                 Use Generic Object Click
               
                 Tries to perform a standard Click on the Checkbox which generally
                 toggles the current selection status.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     **********/
    public ComponentFunction click( ) {

        return CheckBoxFunctions.click(getWindow().getName(), getName());
    }

    /*********** <pre> 
                 Use Generic Object Click
               
                 Tries to perform a standard Click on the Checkbox which generally
                 toggles the current selection status.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     **********/
    public void click(StepTestTable table ) {

        if ( table == null ) throw new IllegalArgumentException ( "click.table = null");

        table.add( CheckBoxFunctions.click(getWindow().getName(), getName()));
    }

    /*********** <pre> 
                Tries to perform a UnCheck on the Checkbox.
               
                Tries to UnCheck the Checkbox.  If the Checkbox does not 
                have a checkmark, it will leave it alone.  If the Checkbox already 
                has a checkmark, then it should uncheck (deselect) it.
                Currently, this handles most generic Checkboxes and HTMLCheckboxes.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    <LI>OpenQA Selenium</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    </UL>

     **********/
    public ComponentFunction unCheck( ) {

        return CheckBoxFunctions.unCheck(getWindow().getName(), getName());
    }

    /*********** <pre> 
                Tries to perform a UnCheck on the Checkbox.
               
                Tries to UnCheck the Checkbox.  If the Checkbox does not 
                have a checkmark, it will leave it alone.  If the Checkbox already 
                has a checkmark, then it should uncheck (deselect) it.
                Currently, this handles most generic Checkboxes and HTMLCheckboxes.
                  </pre>    Supporting Engines:
    <P/><UL>
    <LI>Rational Robot</LI>
    <LI>Rational RobotJ</LI>
    <LI>Mercury Interactive WinRunner</LI>
    <LI>OpenQA Selenium</LI>
    <LI>OpenQA Selenium</LI>
    <LI>AutomatedQA TestComplete</LI>
    <LI>Google Android</LI>
    </UL>

     @param table  Optional:NO
            The table to add the record to.
     **********/
    public void unCheck(StepTestTable table ) {

        if ( table == null ) throw new IllegalArgumentException ( "unCheck.table = null");

        table.add( CheckBoxFunctions.unCheck(getWindow().getName(), getName()));
    }

}
