
/******************************************************************************
 * FPSpreadFunctions.java
 *
 * Copyright (c) by SAS Institute Inc., Cary, NC 27513
 * General Public License: http://www.opensource.org/licenses/gpl-license.php
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   FPSpreadFunctions.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaCommandModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe FPSpreadFunctions.xml XSLJavaCommandModel.xsl -o FPSpreadFunctions.java
 *
 ******************************************************************************/ 
package org.safs.model.commands;


import org.safs.model.ComponentFunction;


public class FPSpreadFunctions {

    /*****************
    Private Singleton Instance
    ****************/
    private static final FPSpreadFunctions singleton = new FPSpreadFunctions(); 

    /*****************
    Private Constructor
    Static class needing no instantiation.
    ****************/
    private FPSpreadFunctions() {}

    /*****************
    public Singleton to access class static methods via instance
    ****************/
    public static FPSpreadFunctions getInstance() { return singleton;}

    /** "CaptureRangeToFile" */
    static public final String CAPTURERANGETOFILE_KEYWORD = "CaptureRangeToFile";
    /** "ClickCell" */
    static public final String CLICKCELL_KEYWORD = "ClickCell";
    /** "CtrlClickCell" */
    static public final String CTRLCLICKCELL_KEYWORD = "CtrlClickCell";
    /** "DoubleClickCell" */
    static public final String DOUBLECLICKCELL_KEYWORD = "DoubleClickCell";
    /** "FindRowNumber" */
    static public final String FINDROWNUMBER_KEYWORD = "FindRowNumber";
    /** "RightClickCell" */
    static public final String RIGHTCLICKCELL_KEYWORD = "RightClickCell";
    /** "ShiftClickCell" */
    static public final String SHIFTCLICKCELL_KEYWORD = "ShiftClickCell";
    /** "VerifyCellText" */
    static public final String VERIFYCELLTEXT_KEYWORD = "VerifyCellText";


    /*********** <pre> 
             Capture the grid data to the specified file.  For now,
	     it can only be used to capture all of the grid data.
              
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param capturedFile  Optional:NO 
             The name of the file used to save the captured data.
              
     **********/
    static public ComponentFunction captureRangeToFile (String winname, String compname, String capturedFile) {

        if ( winname == null ) throw new IllegalArgumentException ( "captureRangeToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "captureRangeToFile.compname = null");

        if ( capturedFile == null ) throw new IllegalArgumentException ( "captureRangeToFile.capturedFile = null");
        ComponentFunction cf = new ComponentFunction(CAPTURERANGETOFILE_KEYWORD, winname, compname);
        cf.addParameter(capturedFile);
        return cf;
    }


    /*********** <pre> 
                 Attempts to perform a single click on a table cell.
               
                 The cell to click is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1. 
		 The row headers, whether visible or not, are considered
		 column 0.  The column headers, whether visible or not,
		 are considered row 0.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param row  Optional:YES  DefaultVal: 
             The 1-based logical row to click.
              
     @param col  Optional:YES  DefaultVal: 
             The 1-based logical col to click.
              
     **********/
    static public ComponentFunction clickCell (String winname, String compname, String row, String col) {

        if ( winname == null ) throw new IllegalArgumentException ( "clickCell.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "clickCell.compname = null");

        ComponentFunction cf = new ComponentFunction(CLICKCELL_KEYWORD, winname, compname);
        cf.addParameter(row);
        cf.addParameter(col);
        return cf;
    }


    /*********** <pre> 
                 Attempts to perform a single click on a table cell.
               
                 The cell to click is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1. 
		 The row headers, whether visible or not, are considered
		 column 0.  The column headers, whether visible or not,
		 are considered row 0.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        row -- Optional:YES  DefaultVal: 
             The 1-based logical row to click.
              <BR/>        col -- Optional:YES  DefaultVal: 
             The 1-based logical col to click.
              
    </UL>

     **********/
    static public ComponentFunction clickCell(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "clickCell.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "clickCell.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "clickCell.parameters = null");
        ComponentFunction cf = new ComponentFunction(CLICKCELL_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                 Attempts to perform a single Ctrl+Click on a table cell.
               
                 The cell to click is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1. 
		 The row headers, whether visible or not, are considered
		 column 0.  The column headers, whether visible or not,
		 are considered row 0.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param row  Optional:YES  DefaultVal: 
             The 1-based logical row to Ctrl+Click.
              
     @param col  Optional:YES  DefaultVal: 
             The 1-based logical col to Ctrl+Click.
              
     **********/
    static public ComponentFunction ctrlClickCell (String winname, String compname, String row, String col) {

        if ( winname == null ) throw new IllegalArgumentException ( "ctrlClickCell.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "ctrlClickCell.compname = null");

        ComponentFunction cf = new ComponentFunction(CTRLCLICKCELL_KEYWORD, winname, compname);
        cf.addParameter(row);
        cf.addParameter(col);
        return cf;
    }


    /*********** <pre> 
                 Attempts to perform a single Ctrl+Click on a table cell.
               
                 The cell to click is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1. 
		 The row headers, whether visible or not, are considered
		 column 0.  The column headers, whether visible or not,
		 are considered row 0.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        row -- Optional:YES  DefaultVal: 
             The 1-based logical row to Ctrl+Click.
              <BR/>        col -- Optional:YES  DefaultVal: 
             The 1-based logical col to Ctrl+Click.
              
    </UL>

     **********/
    static public ComponentFunction ctrlClickCell(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "ctrlClickCell.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "ctrlClickCell.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "ctrlClickCell.parameters = null");
        ComponentFunction cf = new ComponentFunction(CTRLCLICKCELL_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                 Attempts to perform a double click on a table cell.
              
                 The cell to double click is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1.
		 The row headers, whether visible or not, are considered
		 column 0.  The column headers, whether visible or not,
		 are considered row 0.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param row  Optional:YES  DefaultVal: 
             The 1-based logical row to double click.
              
     @param col  Optional:YES  DefaultVal: 
             The 1-based logical col to double click.
              
     **********/
    static public ComponentFunction doubleClickCell (String winname, String compname, String row, String col) {

        if ( winname == null ) throw new IllegalArgumentException ( "doubleClickCell.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "doubleClickCell.compname = null");

        ComponentFunction cf = new ComponentFunction(DOUBLECLICKCELL_KEYWORD, winname, compname);
        cf.addParameter(row);
        cf.addParameter(col);
        return cf;
    }


    /*********** <pre> 
                 Attempts to perform a double click on a table cell.
              
                 The cell to double click is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1.
		 The row headers, whether visible or not, are considered
		 column 0.  The column headers, whether visible or not,
		 are considered row 0.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        row -- Optional:YES  DefaultVal: 
             The 1-based logical row to double click.
              <BR/>        col -- Optional:YES  DefaultVal: 
             The 1-based logical col to double click.
              
    </UL>

     **********/
    static public ComponentFunction doubleClickCell(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "doubleClickCell.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "doubleClickCell.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "doubleClickCell.parameters = null");
        ComponentFunction cf = new ComponentFunction(DOUBLECLICKCELL_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
             Search specified columns for the specified text.  Assign the
	     matching row number to the given variable.
              
	     Multiple (column, search text) pairs can be used as parameters
	     to find the matching row.

             The search column and the search text parameters should have
	     the same number of parameters and are expected to work in
	     parallel (the first search text is looked for in the first
	     column listed).

	     The column name and search text parameters, if more than one,
	     use the delimiter specified to show the separation in the string.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param rowVarName  Optional:NO 
             The name of the variable to store the row number into.
              
     @param startingRow  Optional:NO 
             The row to use to begin the search.  Defaults to row 1.
              
     @param searchColumns  Optional:NO  DefaultVal: 
             The string of column names where you want to search.
              
     @param searchText  Optional:YES  DefaultVal: 
             The string of search strings used to search in each specified
	     column names.
              
     @param dELIMITER  Optional:NO  DefaultVal: 
             Delimiter used by the search columns and search text to separate
	     the different columns/text.
              
     **********/
    static public ComponentFunction findRowNumber (String winname, String compname, String rowVarName, String startingRow, String searchColumns, String searchText, String dELIMITER) {

        if ( winname == null ) throw new IllegalArgumentException ( "findRowNumber.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "findRowNumber.compname = null");

        if ( dELIMITER == null ) throw new IllegalArgumentException ( "findRowNumber.dELIMITER = null");
        if ( rowVarName == null ) throw new IllegalArgumentException ( "findRowNumber.rowVarName = null");
        if ( searchColumns == null ) throw new IllegalArgumentException ( "findRowNumber.searchColumns = null");
        if ( startingRow == null ) throw new IllegalArgumentException ( "findRowNumber.startingRow = null");
        ComponentFunction cf = new ComponentFunction(FINDROWNUMBER_KEYWORD, winname, compname);
        cf.addParameter(rowVarName);
        cf.addParameter(startingRow);
        cf.addParameter(searchColumns);
        cf.addParameter(searchText);
        cf.addParameter(dELIMITER);
        return cf;
    }


    /*********** <pre> 
             Search specified columns for the specified text.  Assign the
	     matching row number to the given variable.
              
	     Multiple (column, search text) pairs can be used as parameters
	     to find the matching row.

             The search column and the search text parameters should have
	     the same number of parameters and are expected to work in
	     parallel (the first search text is looked for in the first
	     column listed).

	     The column name and search text parameters, if more than one,
	     use the delimiter specified to show the separation in the string.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        rowVarName -- Optional:NO 
             The name of the variable to store the row number into.
              <BR/>        startingRow -- Optional:NO 
             The row to use to begin the search.  Defaults to row 1.
              <BR/>        searchColumns -- Optional:NO  DefaultVal: 
             The string of column names where you want to search.
              <BR/>        searchText -- Optional:YES  DefaultVal: 
             The string of search strings used to search in each specified
	     column names.
              <BR/>        dELIMITER -- Optional:NO  DefaultVal: 
             Delimiter used by the search columns and search text to separate
	     the different columns/text.
              
    </UL>

     **********/
    static public ComponentFunction findRowNumber(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "findRowNumber.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "findRowNumber.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "findRowNumber.parameters = null");
        ComponentFunction cf = new ComponentFunction(FINDROWNUMBER_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                 Attempts to perform a single right click on a table cell.
               
                 The cell to click is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1. 
		 The row headers, whether visible or not, are considered
		 column 0.  The column headers, whether visible or not,
		 are considered row 0.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param row  Optional:YES  DefaultVal: 
             The 1-based logical row to right click.
              
     @param col  Optional:YES  DefaultVal: 
             The 1-based logical col to right click.
              
     **********/
    static public ComponentFunction rightClickCell (String winname, String compname, String row, String col) {

        if ( winname == null ) throw new IllegalArgumentException ( "rightClickCell.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "rightClickCell.compname = null");

        ComponentFunction cf = new ComponentFunction(RIGHTCLICKCELL_KEYWORD, winname, compname);
        cf.addParameter(row);
        cf.addParameter(col);
        return cf;
    }


    /*********** <pre> 
                 Attempts to perform a single right click on a table cell.
               
                 The cell to click is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1. 
		 The row headers, whether visible or not, are considered
		 column 0.  The column headers, whether visible or not,
		 are considered row 0.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        row -- Optional:YES  DefaultVal: 
             The 1-based logical row to right click.
              <BR/>        col -- Optional:YES  DefaultVal: 
             The 1-based logical col to right click.
              
    </UL>

     **********/
    static public ComponentFunction rightClickCell(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "rightClickCell.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "rightClickCell.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "rightClickCell.parameters = null");
        ComponentFunction cf = new ComponentFunction(RIGHTCLICKCELL_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                 Attempts to perform a single SHIFT+Click on a table cell.
               
                 The cell to click is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1. 
		 The row headers, whether visible or not, are considered
		 column 0.  The column headers, whether visible or not,
		 are considered row 0.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param row  Optional:YES  DefaultVal: 
             The 1-based logical row to SHIFT+Click.
              
     @param col  Optional:YES  DefaultVal: 
             The 1-based logical col to SHIFT+Click.
              
     **********/
    static public ComponentFunction shiftClickCell (String winname, String compname, String row, String col) {

        if ( winname == null ) throw new IllegalArgumentException ( "shiftClickCell.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "shiftClickCell.compname = null");

        ComponentFunction cf = new ComponentFunction(SHIFTCLICKCELL_KEYWORD, winname, compname);
        cf.addParameter(row);
        cf.addParameter(col);
        return cf;
    }


    /*********** <pre> 
                 Attempts to perform a single SHIFT+Click on a table cell.
               
                 The cell to click is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1. 
		 The row headers, whether visible or not, are considered
		 column 0.  The column headers, whether visible or not,
		 are considered row 0.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        row -- Optional:YES  DefaultVal: 
             The 1-based logical row to SHIFT+Click.
              <BR/>        col -- Optional:YES  DefaultVal: 
             The 1-based logical col to SHIFT+Click.
              
    </UL>

     **********/
    static public ComponentFunction shiftClickCell(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "shiftClickCell.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "shiftClickCell.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "shiftClickCell.parameters = null");
        ComponentFunction cf = new ComponentFunction(SHIFTCLICKCELL_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
             Verify a specific cell's text.
              
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param expectedCellText  Optional:NO 
             The expected text value of the specified cell.
              
     @param row  Optional:YES  DefaultVal: 
             The 1-based logical row to verify.
              
     @param col  Optional:YES  DefaultVal: 
             The 1-based logical col to verify.
              
     **********/
    static public ComponentFunction verifyCellText (String winname, String compname, String expectedCellText, String row, String col) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyCellText.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyCellText.compname = null");

        if ( expectedCellText == null ) throw new IllegalArgumentException ( "verifyCellText.expectedCellText = null");
        ComponentFunction cf = new ComponentFunction(VERIFYCELLTEXT_KEYWORD, winname, compname);
        cf.addParameter(expectedCellText);
        cf.addParameter(row);
        cf.addParameter(col);
        return cf;
    }


    /*********** <pre> 
             Verify a specific cell's text.
              
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        expectedCellText -- Optional:NO 
             The expected text value of the specified cell.
              <BR/>        row -- Optional:YES  DefaultVal: 
             The 1-based logical row to verify.
              <BR/>        col -- Optional:YES  DefaultVal: 
             The 1-based logical col to verify.
              
    </UL>

     **********/
    static public ComponentFunction verifyCellText(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyCellText.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyCellText.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyCellText.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYCELLTEXT_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


}
