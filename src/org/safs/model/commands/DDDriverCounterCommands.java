
/******************************************************************************
 * DDDriverCounterCommands.java
 *
 * Copyright (C) SAS Institute, All rights reserved.
 * General Public License: https://www.gnu.org/licenses/gpl-3.0.en.html
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   DDDriverCounterCommands.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaCommandModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe DDDriverCounterCommands.xml XSLJavaCommandModel.xsl -o DDDriverCounterCommands.java
 *
 ******************************************************************************/ 
package org.safs.model.commands;


import org.safs.model.DriverCommand;


public class DDDriverCounterCommands {

    /*****************
    Private Singleton Instance
    ****************/
    private static final DDDriverCounterCommands singleton = new DDDriverCounterCommands(); 

    /*****************
    Private Constructor
    Static class needing no instantiation.
    ****************/
    private DDDriverCounterCommands() {}

    /*****************
    public Singleton to access class static methods via instance
    ****************/
    public static DDDriverCounterCommands getInstance() { return singleton;}

    /** "DeleteCounter" */
    static public final String DELETECOUNTER_KEYWORD = "DeleteCounter";
    /** "LogCounterInfo" */
    static public final String LOGCOUNTERINFO_KEYWORD = "LogCounterInfo";
    /** "ResetCounter" */
    static public final String RESETCOUNTER_KEYWORD = "ResetCounter";
    /** "ResumeStatusCounts" */
    static public final String RESUMESTATUSCOUNTS_KEYWORD = "ResumeStatusCounts";
    /** "SetCounterMode" */
    static public final String SETCOUNTERMODE_KEYWORD = "SetCounterMode";
    /** "StartCounter" */
    static public final String STARTCOUNTER_KEYWORD = "StartCounter";
    /** "StartCycle" */
    static public final String STARTCYCLE_KEYWORD = "StartCycle";
    /** "StartProcedure" */
    static public final String STARTPROCEDURE_KEYWORD = "StartProcedure";
    /** "StartRequirement" */
    static public final String STARTREQUIREMENT_KEYWORD = "StartRequirement";
    /** "StartSuite" */
    static public final String STARTSUITE_KEYWORD = "StartSuite";
    /** "StartTestcase" */
    static public final String STARTTESTCASE_KEYWORD = "StartTestcase";
    /** "StopCounter" */
    static public final String STOPCOUNTER_KEYWORD = "StopCounter";
    /** "StopCycle" */
    static public final String STOPCYCLE_KEYWORD = "StopCycle";
    /** "StopProcedure" */
    static public final String STOPPROCEDURE_KEYWORD = "StopProcedure";
    /** "StopRequirement" */
    static public final String STOPREQUIREMENT_KEYWORD = "StopRequirement";
    /** "StopSuite" */
    static public final String STOPSUITE_KEYWORD = "StopSuite";
    /** "StopTestcase" */
    static public final String STOPTESTCASE_KEYWORD = "StopTestcase";
    /** "StoreCounterInfo" */
    static public final String STORECOUNTERINFO_KEYWORD = "StoreCounterInfo";
    /** "SuspendStatusCounts" */
    static public final String SUSPENDSTATUSCOUNTS_KEYWORD = "SuspendStatusCounts";


    /*********** <pre> 
                 Delete any existing private counter with the provided counterID.
              
                 If counterID identifies an existing counter, then delete it.
                 See ApplicationUtilities for more information on private counters.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param counterID  Optional:NO  DefaultVal:Counter1 
                 The unique name used to identify this private counter.  
              
     @param description  Optional:YES
              Any additional information for deleting this counter.
     **********/
    static public DriverCommand deleteCounter (String counterID, String description) {

        if ( counterID == null ) throw new IllegalArgumentException ( "deleteCounter.counterID = null");
        DriverCommand dc = new DriverCommand(DELETECOUNTER_KEYWORD);
        dc.addParameter(counterID);
        dc.addParameter(description);
        return dc;
    }


    /*********** <pre> 
                 Delete any existing private counter with the provided counterID.
              
                 If counterID identifies an existing counter, then delete it.
                 See ApplicationUtilities for more information on private counters.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        counterID -- Optional:NO  DefaultVal:Counter1 
                 The unique name used to identify this private counter.  
              <BR/>        description -- Optional:YES
              Any additional information for deleting this counter.
    </UL>

     **********/
    static public DriverCommand deleteCounter (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "deleteCounter.parameters = null");
        DriverCommand dc = new DriverCommand(DELETECOUNTER_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Log the specified counter's info in the active log(s) of the current Log Facility.
              
                 Extracts a snapshot of the specified private counter and outputs a 
                 small, embedded Status Report in the active logs of the current Log Facility.
                 The Status Report will be identified by the name of the private counter.
                 (Future) We will allow you to optionally specify a different Log Facility by name.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param counterID  Optional:NO  DefaultVal:Counter1 
                 The unique name used to identify this private counter.  
              
     @param logName  Optional:YES  DefaultVal:MainLog 
                 (Future) The name of a Log Facility other than the "current" one.
              
     **********/
    static public DriverCommand logCounterInfo (String counterID, String logName) {

        if ( counterID == null ) throw new IllegalArgumentException ( "logCounterInfo.counterID = null");
        DriverCommand dc = new DriverCommand(LOGCOUNTERINFO_KEYWORD);
        dc.addParameter(counterID);
        dc.addParameter(logName);
        return dc;
    }


    /*********** <pre> 
                 Log the specified counter's info in the active log(s) of the current Log Facility.
              
                 Extracts a snapshot of the specified private counter and outputs a 
                 small, embedded Status Report in the active logs of the current Log Facility.
                 The Status Report will be identified by the name of the private counter.
                 (Future) We will allow you to optionally specify a different Log Facility by name.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        counterID -- Optional:NO  DefaultVal:Counter1 
                 The unique name used to identify this private counter.  
              <BR/>        logName -- Optional:YES  DefaultVal:MainLog 
                 (Future) The name of a Log Facility other than the "current" one.
              
    </UL>

     **********/
    static public DriverCommand logCounterInfo (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "logCounterInfo.parameters = null");
        DriverCommand dc = new DriverCommand(LOGCOUNTERINFO_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Create a new private counter or reset counts in an existing private counter.
              
                 If counterID is not already an active private counter, then 
                 this routine will create a new private counter with the provided 
                 counterID as its name.  The counter will be enabled for counting 
                 of all status information at all test levels.
                 If counterID identifies an existing counter, then this routine 
                 will reset all its counts to zero(0).
                 See ApplicationUtilities for more information on private counters.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param counterID  Optional:NO  DefaultVal:Counter1 
                 The unique name used to identify this private counter.  
              
     @param description  Optional:YES
              Any additional information for resetting this counter.
     **********/
    static public DriverCommand resetCounter (String counterID, String description) {

        if ( counterID == null ) throw new IllegalArgumentException ( "resetCounter.counterID = null");
        DriverCommand dc = new DriverCommand(RESETCOUNTER_KEYWORD);
        dc.addParameter(counterID);
        dc.addParameter(description);
        return dc;
    }


    /*********** <pre> 
                 Create a new private counter or reset counts in an existing private counter.
              
                 If counterID is not already an active private counter, then 
                 this routine will create a new private counter with the provided 
                 counterID as its name.  The counter will be enabled for counting 
                 of all status information at all test levels.
                 If counterID identifies an existing counter, then this routine 
                 will reset all its counts to zero(0).
                 See ApplicationUtilities for more information on private counters.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        counterID -- Optional:NO  DefaultVal:Counter1 
                 The unique name used to identify this private counter.  
              <BR/>        description -- Optional:YES
              Any additional information for resetting this counter.
    </UL>

     **********/
    static public DriverCommand resetCounter (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "resetCounter.parameters = null");
        DriverCommand dc = new DriverCommand(RESETCOUNTER_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Resume counting on ALL status counters--both public/global and private.
              
                 Resume all status counting that is triggered via ApplicationUtilities.
                 Only counters that are enabled--not independently "stopped"--will resume
                 counting.  Stopped counters are still stopped.
                 See ApplicationUtilities for more information on counters.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param description  Optional:YES
              Any additional information for resuming status counts.
     @param logName  Optional:YES  DefaultVal:MainLog 
                 (Future) The name of a Log Facility other than the "current" one.
              
     **********/
    static public DriverCommand resumeStatusCounts (String description, String logName) {

        DriverCommand dc = new DriverCommand(RESUMESTATUSCOUNTS_KEYWORD);
        dc.addParameter(description);
        dc.addParameter(logName);
        return dc;
    }


    /*********** <pre> 
                 Resume counting on ALL status counters--both public/global and private.
              
                 Resume all status counting that is triggered via ApplicationUtilities.
                 Only counters that are enabled--not independently "stopped"--will resume
                 counting.  Stopped counters are still stopped.
                 See ApplicationUtilities for more information on counters.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        description -- Optional:YES
              Any additional information for resuming status counts.<BR/>        logName -- Optional:YES  DefaultVal:MainLog 
                 (Future) The name of a Log Facility other than the "current" one.
              
    </UL>

     **********/
    static public DriverCommand resumeStatusCounts (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "resumeStatusCounts.parameters = null");
        DriverCommand dc = new DriverCommand(RESUMESTATUSCOUNTS_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Create a new private counter or modify the mode of an existing private counter.
              
                 If counterID is not already an active private counter, then 
                 this routine will create a new private counter with the provided 
                 counterID and counting mode.
                 If counterID identifies an existing counter, then this routine 
                 will modify the counting mode of the existing counter.
                 See AUSetStatusCounterMode for more information on private counters.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param counterID  Optional:NO  DefaultVal:Counter1 
                 The unique name used to identify this private counter.  
              
     @param mode  Optional:NO  DefaultVal:AllStatusInfo 
                 The counting mode to use for the specified counter.
              
     **********/
    static public DriverCommand setCounterMode (String counterID, String mode) {

        if ( counterID == null ) throw new IllegalArgumentException ( "setCounterMode.counterID = null");
        if ( mode == null ) throw new IllegalArgumentException ( "setCounterMode.mode = null");
        DriverCommand dc = new DriverCommand(SETCOUNTERMODE_KEYWORD);
        dc.addParameter(counterID);
        dc.addParameter(mode);
        return dc;
    }


    /*********** <pre> 
                 Create a new private counter or modify the mode of an existing private counter.
              
                 If counterID is not already an active private counter, then 
                 this routine will create a new private counter with the provided 
                 counterID and counting mode.
                 If counterID identifies an existing counter, then this routine 
                 will modify the counting mode of the existing counter.
                 See AUSetStatusCounterMode for more information on private counters.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        counterID -- Optional:NO  DefaultVal:Counter1 
                 The unique name used to identify this private counter.  
              <BR/>        mode -- Optional:NO  DefaultVal:AllStatusInfo 
                 The counting mode to use for the specified counter.
              
    </UL>

     **********/
    static public DriverCommand setCounterMode (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "setCounterMode.parameters = null");
        DriverCommand dc = new DriverCommand(SETCOUNTERMODE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Create a new private counter or start an existing stopped private counter.
              
                 If counterID is not already an active private counter, then 
                 this routine will create a new private counter with the provided 
                 counterID as its name.  The counter will be enabled for counting 
                 of all status information at all test levels.
                 If counterID identifies an existing counter, then this routine 
                 will enable the counter to resume counting--assuming it was stopped.
                 See ApplicationUtilities for more information on private counters.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param counterID  Optional:NO  DefaultVal:Counter1 
                 The unique name used to identify this private counter.  
              
     @param description  Optional:YES
              Any additional information such as the purpose of the counter.
     **********/
    static public DriverCommand startCounter (String counterID, String description) {

        if ( counterID == null ) throw new IllegalArgumentException ( "startCounter.counterID = null");
        DriverCommand dc = new DriverCommand(STARTCOUNTER_KEYWORD);
        dc.addParameter(counterID);
        dc.addParameter(description);
        return dc;
    }


    /*********** <pre> 
                 Create a new private counter or start an existing stopped private counter.
              
                 If counterID is not already an active private counter, then 
                 this routine will create a new private counter with the provided 
                 counterID as its name.  The counter will be enabled for counting 
                 of all status information at all test levels.
                 If counterID identifies an existing counter, then this routine 
                 will enable the counter to resume counting--assuming it was stopped.
                 See ApplicationUtilities for more information on private counters.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        counterID -- Optional:NO  DefaultVal:Counter1 
                 The unique name used to identify this private counter.  
              <BR/>        description -- Optional:YES
              Any additional information such as the purpose of the counter.
    </UL>

     **********/
    static public DriverCommand startCounter (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "startCounter.parameters = null");
        DriverCommand dc = new DriverCommand(STARTCOUNTER_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Begin tracking status on a user-defined item.
          Log/process the beginning of testing associated with this user-defined item.
          A private counter 
          will keep track of status for the item.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param cycleID  Optional:NO
              The user-defined ID of the item.
     @param description  Optional:YES
              A description of the item.
     **********/
    static public DriverCommand startCycle (String cycleID, String description) {

        if ( cycleID == null ) throw new IllegalArgumentException ( "startCycle.cycleID = null");
        DriverCommand dc = new DriverCommand(STARTCYCLE_KEYWORD);
        dc.addParameter(cycleID);
        dc.addParameter(description);
        return dc;
    }


    /*********** <pre>
          Begin tracking status on a user-defined item.
          Log/process the beginning of testing associated with this user-defined item.
          A private counter 
          will keep track of status for the item.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        cycleID -- Optional:NO
              The user-defined ID of the item.<BR/>        description -- Optional:YES
              A description of the item.
    </UL>

     **********/
    static public DriverCommand startCycle (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "startCycle.parameters = null");
        DriverCommand dc = new DriverCommand(STARTCYCLE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Begin tracking status on a user-defined item.
          Log/process the beginning of testing associated with this user-defined item.
          A private counter 
          will keep track of status for the item.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param procedureID  Optional:NO
              The user-defined ID of the item.
     @param description  Optional:YES
              A description of the item.
     **********/
    static public DriverCommand startProcedure (String procedureID, String description) {

        if ( procedureID == null ) throw new IllegalArgumentException ( "startProcedure.procedureID = null");
        DriverCommand dc = new DriverCommand(STARTPROCEDURE_KEYWORD);
        dc.addParameter(procedureID);
        dc.addParameter(description);
        return dc;
    }


    /*********** <pre>
          Begin tracking status on a user-defined item.
          Log/process the beginning of testing associated with this user-defined item.
          A private counter 
          will keep track of status for the item.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        procedureID -- Optional:NO
              The user-defined ID of the item.<BR/>        description -- Optional:YES
              A description of the item.
    </UL>

     **********/
    static public DriverCommand startProcedure (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "startProcedure.parameters = null");
        DriverCommand dc = new DriverCommand(STARTPROCEDURE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Begin tracking status on a user-defined item.
          Log/process the beginning of testing associated with this user-defined item.
          A private counter 
          will keep track of status for the item.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param requirementID  Optional:NO
              The user-defined ID of the item.
     @param description  Optional:YES
              A description of the item.
     **********/
    static public DriverCommand startRequirement (String requirementID, String description) {

        if ( requirementID == null ) throw new IllegalArgumentException ( "startRequirement.requirementID = null");
        DriverCommand dc = new DriverCommand(STARTREQUIREMENT_KEYWORD);
        dc.addParameter(requirementID);
        dc.addParameter(description);
        return dc;
    }


    /*********** <pre>
          Begin tracking status on a user-defined item.
          Log/process the beginning of testing associated with this user-defined item.
          A private counter 
          will keep track of status for the item.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        requirementID -- Optional:NO
              The user-defined ID of the item.<BR/>        description -- Optional:YES
              A description of the item.
    </UL>

     **********/
    static public DriverCommand startRequirement (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "startRequirement.parameters = null");
        DriverCommand dc = new DriverCommand(STARTREQUIREMENT_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Begin tracking status on a user-defined item.
          Log/process the beginning of testing associated with this user-defined item.
          A private counter 
          will keep track of status for the item.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param suiteID  Optional:NO
              The user-defined ID of the item.
     @param description  Optional:YES
              A description of the item.
     **********/
    static public DriverCommand startSuite (String suiteID, String description) {

        if ( suiteID == null ) throw new IllegalArgumentException ( "startSuite.suiteID = null");
        DriverCommand dc = new DriverCommand(STARTSUITE_KEYWORD);
        dc.addParameter(suiteID);
        dc.addParameter(description);
        return dc;
    }


    /*********** <pre>
          Begin tracking status on a user-defined item.
          Log/process the beginning of testing associated with this user-defined item.
          A private counter 
          will keep track of status for the item.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        suiteID -- Optional:NO
              The user-defined ID of the item.<BR/>        description -- Optional:YES
              A description of the item.
    </UL>

     **********/
    static public DriverCommand startSuite (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "startSuite.parameters = null");
        DriverCommand dc = new DriverCommand(STARTSUITE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Begin tracking status on a user-defined TestCase.
          Log/process the beginning of testing associated with a user-defined Testcase.
          A private counter 
          will keep track of status for the testcase.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param testCaseID  Optional:NO
              The user-defined ID of the Testcase.
     @param description  Optional:YES
              A description of the Testcase
     **********/
    static public DriverCommand startTestcase (String testCaseID, String description) {

        if ( testCaseID == null ) throw new IllegalArgumentException ( "startTestcase.testCaseID = null");
        DriverCommand dc = new DriverCommand(STARTTESTCASE_KEYWORD);
        dc.addParameter(testCaseID);
        dc.addParameter(description);
        return dc;
    }


    /*********** <pre>
          Begin tracking status on a user-defined TestCase.
          Log/process the beginning of testing associated with a user-defined Testcase.
          A private counter 
          will keep track of status for the testcase.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        testCaseID -- Optional:NO
              The user-defined ID of the Testcase.<BR/>        description -- Optional:YES
              A description of the Testcase
    </UL>

     **********/
    static public DriverCommand startTestcase (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "startTestcase.parameters = null");
        DriverCommand dc = new DriverCommand(STARTTESTCASE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Create a new private counter or suspend counts in an existing private counter.
              
                 If counterID is not already an active private counter, then 
                 this routine will create a new private counter with the provided 
                 counterID as its name.  The counter will be enabled for counting 
                 of all status information at all test levels but will be suspended 
                 from actually counting.
                 If counterID identifies an existing counter, then this routine 
                 will suspend counting within this counter.
                 See ApplicationUtilities for more information on private counters.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param counterID  Optional:NO  DefaultVal:Counter1 
                 The unique name used to identify this private counter.  
              
     @param description  Optional:YES
              Any additional information for stopping this counter.
     **********/
    static public DriverCommand stopCounter (String counterID, String description) {

        if ( counterID == null ) throw new IllegalArgumentException ( "stopCounter.counterID = null");
        DriverCommand dc = new DriverCommand(STOPCOUNTER_KEYWORD);
        dc.addParameter(counterID);
        dc.addParameter(description);
        return dc;
    }


    /*********** <pre> 
                 Create a new private counter or suspend counts in an existing private counter.
              
                 If counterID is not already an active private counter, then 
                 this routine will create a new private counter with the provided 
                 counterID as its name.  The counter will be enabled for counting 
                 of all status information at all test levels but will be suspended 
                 from actually counting.
                 If counterID identifies an existing counter, then this routine 
                 will suspend counting within this counter.
                 See ApplicationUtilities for more information on private counters.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        counterID -- Optional:NO  DefaultVal:Counter1 
                 The unique name used to identify this private counter.  
              <BR/>        description -- Optional:YES
              Any additional information for stopping this counter.
    </UL>

     **********/
    static public DriverCommand stopCounter (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "stopCounter.parameters = null");
        DriverCommand dc = new DriverCommand(STOPCOUNTER_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Stop tracking status on a user-defined item.
          Log/process the end of testing associated with a user-defined item.
          A private counter 
          will keep track of status for the item.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param cycleID  Optional:NO
              The user-defined ID of the item.
     @param description  Optional:YES
              A description of the item.
     **********/
    static public DriverCommand stopCycle (String cycleID, String description) {

        if ( cycleID == null ) throw new IllegalArgumentException ( "stopCycle.cycleID = null");
        DriverCommand dc = new DriverCommand(STOPCYCLE_KEYWORD);
        dc.addParameter(cycleID);
        dc.addParameter(description);
        return dc;
    }


    /*********** <pre>
          Stop tracking status on a user-defined item.
          Log/process the end of testing associated with a user-defined item.
          A private counter 
          will keep track of status for the item.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        cycleID -- Optional:NO
              The user-defined ID of the item.<BR/>        description -- Optional:YES
              A description of the item.
    </UL>

     **********/
    static public DriverCommand stopCycle (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "stopCycle.parameters = null");
        DriverCommand dc = new DriverCommand(STOPCYCLE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Stop tracking status on a user-defined item.
          Log/process the end of testing associated with a user-defined item.
          A private counter 
          will keep track of status for the item.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param procedureID  Optional:NO
              The user-defined ID of the item.
     @param description  Optional:YES
              A description of the item.
     **********/
    static public DriverCommand stopProcedure (String procedureID, String description) {

        if ( procedureID == null ) throw new IllegalArgumentException ( "stopProcedure.procedureID = null");
        DriverCommand dc = new DriverCommand(STOPPROCEDURE_KEYWORD);
        dc.addParameter(procedureID);
        dc.addParameter(description);
        return dc;
    }


    /*********** <pre>
          Stop tracking status on a user-defined item.
          Log/process the end of testing associated with a user-defined item.
          A private counter 
          will keep track of status for the item.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        procedureID -- Optional:NO
              The user-defined ID of the item.<BR/>        description -- Optional:YES
              A description of the item.
    </UL>

     **********/
    static public DriverCommand stopProcedure (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "stopProcedure.parameters = null");
        DriverCommand dc = new DriverCommand(STOPPROCEDURE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Stop tracking status on a user-defined item.
          Log/process the end of testing associated with a user-defined item.
          A private counter 
          will keep track of status for the item.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param requirementID  Optional:NO
              The user-defined ID of the item.
     @param description  Optional:YES
              A description of the item.
     **********/
    static public DriverCommand stopRequirement (String requirementID, String description) {

        if ( requirementID == null ) throw new IllegalArgumentException ( "stopRequirement.requirementID = null");
        DriverCommand dc = new DriverCommand(STOPREQUIREMENT_KEYWORD);
        dc.addParameter(requirementID);
        dc.addParameter(description);
        return dc;
    }


    /*********** <pre>
          Stop tracking status on a user-defined item.
          Log/process the end of testing associated with a user-defined item.
          A private counter 
          will keep track of status for the item.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        requirementID -- Optional:NO
              The user-defined ID of the item.<BR/>        description -- Optional:YES
              A description of the item.
    </UL>

     **********/
    static public DriverCommand stopRequirement (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "stopRequirement.parameters = null");
        DriverCommand dc = new DriverCommand(STOPREQUIREMENT_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Stop tracking status on a user-defined item.
          Log/process the end of testing associated with a user-defined item.
          A private counter 
          will keep track of status for the item.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param suiteID  Optional:NO
              The user-defined ID of the item.
     @param description  Optional:YES
              A description of the item.
     **********/
    static public DriverCommand stopSuite (String suiteID, String description) {

        if ( suiteID == null ) throw new IllegalArgumentException ( "stopSuite.suiteID = null");
        DriverCommand dc = new DriverCommand(STOPSUITE_KEYWORD);
        dc.addParameter(suiteID);
        dc.addParameter(description);
        return dc;
    }


    /*********** <pre>
          Stop tracking status on a user-defined item.
          Log/process the end of testing associated with a user-defined item.
          A private counter 
          will keep track of status for the item.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        suiteID -- Optional:NO
              The user-defined ID of the item.<BR/>        description -- Optional:YES
              A description of the item.
    </UL>

     **********/
    static public DriverCommand stopSuite (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "stopSuite.parameters = null");
        DriverCommand dc = new DriverCommand(STOPSUITE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Stop tracking status on a user-defined TestCase.
          Log/process the end of testing associated with a user-defined Testcase.
          A private counter 
          will keep track of status for the testcase.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param testCaseID  Optional:NO
              The user-defined ID of the Testcase.
     @param description  Optional:YES
              A description of the Testcase
     **********/
    static public DriverCommand stopTestcase (String testCaseID, String description) {

        if ( testCaseID == null ) throw new IllegalArgumentException ( "stopTestcase.testCaseID = null");
        DriverCommand dc = new DriverCommand(STOPTESTCASE_KEYWORD);
        dc.addParameter(testCaseID);
        dc.addParameter(description);
        return dc;
    }


    /*********** <pre>
          Stop tracking status on a user-defined TestCase.
          Log/process the end of testing associated with a user-defined Testcase.
          A private counter 
          will keep track of status for the testcase.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        testCaseID -- Optional:NO
              The user-defined ID of the Testcase.<BR/>        description -- Optional:YES
              A description of the Testcase
    </UL>

     **********/
    static public DriverCommand stopTestcase (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "stopTestcase.parameters = null");
        DriverCommand dc = new DriverCommand(STOPTESTCASE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Store the current values of the named counter into unique DDVariables.
              
                 This enables the framework, scripts, and other applications to retrieve 
                 the values of these counters at runtime.
                 Consult ApplicationUtilities 
                 and Using DDVariables 
                 for more information on referencing these DDVariables in your tests.
                 You must adhere to DDVariable naming conventions when providing this 
                 DDVariable basename.  Note that no spaces are allowed in DDVariable names.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param counterID  Optional:NO  DefaultVal:Counter1 
                 The unique name used to identify the private counter.  
              
     @param varPrefix  Optional:NO  DefaultVal:Counter1 
                 The unique DDVariable prefix to use for storing counter values.  
              
     **********/
    static public DriverCommand storeCounterInfo (String counterID, String varPrefix) {

        if ( counterID == null ) throw new IllegalArgumentException ( "storeCounterInfo.counterID = null");
        if ( varPrefix == null ) throw new IllegalArgumentException ( "storeCounterInfo.varPrefix = null");
        DriverCommand dc = new DriverCommand(STORECOUNTERINFO_KEYWORD);
        dc.addParameter(counterID);
        dc.addParameter(varPrefix);
        return dc;
    }


    /*********** <pre> 
                 Store the current values of the named counter into unique DDVariables.
              
                 This enables the framework, scripts, and other applications to retrieve 
                 the values of these counters at runtime.
                 Consult ApplicationUtilities 
                 and Using DDVariables 
                 for more information on referencing these DDVariables in your tests.
                 You must adhere to DDVariable naming conventions when providing this 
                 DDVariable basename.  Note that no spaces are allowed in DDVariable names.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        counterID -- Optional:NO  DefaultVal:Counter1 
                 The unique name used to identify the private counter.  
              <BR/>        varPrefix -- Optional:NO  DefaultVal:Counter1 
                 The unique DDVariable prefix to use for storing counter values.  
              
    </UL>

     **********/
    static public DriverCommand storeCounterInfo (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "storeCounterInfo.parameters = null");
        DriverCommand dc = new DriverCommand(STORECOUNTERINFO_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Suspend counting on ALL status counters--both public/global and private.
              
                 Suspends all status counting that is triggered via ApplicationUtilities.
                 See ApplicationUtilities for more information on counters.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param description  Optional:YES
              Any additional information for suspending status counts.
     @param logName  Optional:YES  DefaultVal:MainLog 
                 (Future) The name of a Log Facility other than the "current" one.
              
     **********/
    static public DriverCommand suspendStatusCounts (String description, String logName) {

        DriverCommand dc = new DriverCommand(SUSPENDSTATUSCOUNTS_KEYWORD);
        dc.addParameter(description);
        dc.addParameter(logName);
        return dc;
    }


    /*********** <pre> 
                 Suspend counting on ALL status counters--both public/global and private.
              
                 Suspends all status counting that is triggered via ApplicationUtilities.
                 See ApplicationUtilities for more information on counters.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        description -- Optional:YES
              Any additional information for suspending status counts.<BR/>        logName -- Optional:YES  DefaultVal:MainLog 
                 (Future) The name of a Log Facility other than the "current" one.
              
    </UL>

     **********/
    static public DriverCommand suspendStatusCounts (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "suspendStatusCounts.parameters = null");
        DriverCommand dc = new DriverCommand(SUSPENDSTATUSCOUNTS_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


}
