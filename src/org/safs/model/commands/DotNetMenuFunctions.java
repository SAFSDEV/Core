
/******************************************************************************
 * DotNetMenuFunctions.java
 *
 * Copyright (c) by SAS Institute Inc., Cary, NC 27513
 * General Public License: http://www.opensource.org/licenses/gpl-license.php
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   DotNetMenuFunctions.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaCommandModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe DotNetMenuFunctions.xml XSLJavaCommandModel.xsl -o DotNetMenuFunctions.java
 *
 ******************************************************************************/ 
package org.safs.model.commands;


import org.safs.model.ComponentFunction;


public class DotNetMenuFunctions {

    /*****************
    Private Singleton Instance
    ****************/
    private static final DotNetMenuFunctions singleton = new DotNetMenuFunctions(); 

    /*****************
    Private Constructor
    Static class needing no instantiation.
    ****************/
    private DotNetMenuFunctions() {}

    /*****************
    public Singleton to access class static methods via instance
    ****************/
    public static DotNetMenuFunctions getInstance() { return singleton;}

    /** "SelectMenuItem" */
    static public final String SELECTMENUITEM_KEYWORD = "SelectMenuItem";
    /** "SelectMenuItemContains" */
    static public final String SELECTMENUITEMCONTAINS_KEYWORD = "SelectMenuItemContains";
    /** "VerifyMenuItem" */
    static public final String VERIFYMENUITEM_KEYWORD = "VerifyMenuItem";
    /** "VerifyMenuItemContains" */
    static public final String VERIFYMENUITEMCONTAINS_KEYWORD = "VerifyMenuItemContains";


    /*********** <pre> 
                 Action to select a menuItem according to its text value.
              
                 In RRAFS, this command will work on both JavaMenu items and 
                 JavaPopupMenu items.
				 For RJ implementation: When Field5 is provided,
									the routine first verifies that the specified menuitem exists and exits with error if it does not. 
									If it does exist then the select found menuitem. 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:YES 
                 Case-insensitive text of menuItem to select OR an App Map reference.
              
     **********/
    static public ComponentFunction selectMenuItem (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectMenuItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectMenuItem.compname = null");

        ComponentFunction cf = new ComponentFunction(SELECTMENUITEM_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                 Action to select a menuItem according to a partial match of its text value.
              
                 In RRAFS, this command will work on both JavaMenu items and 
                 JavaPopupMenu items.
				 For RJ implementation: When Field5 is provided,
									the routine first verifies that the specified menuitem exists and exits with error if it does not. 
									If it does exist then the select found menuitem. 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:YES 
                 Case-insensitive substring of menuItem to select OR an App Map reference.
              
     **********/
    static public ComponentFunction selectMenuItemContains (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectMenuItemContains.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectMenuItemContains.compname = null");

        ComponentFunction cf = new ComponentFunction(SELECTMENUITEMCONTAINS_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
               Attempts to verify the a particular menuitem exists in a menu.
               
                The menuitem should be specified in the form 
                "Menu->Menu->MenuItem   CTRL+V" with the full text (ampersands optional), 
                spaces(if any), and keyboard shortcut text (if any).  
                (The ampersands precede any character in the menuitem that is underlined.)
                
                This command differs from the WindowFunction.VerifyMenuItem command because 
                here we are actually seeking a JavaMenu component, not a Window that contains 
                a menu.  Also, we do not currently verify any state information like the 
                WindowFunctions.VerifyMenuItem command.
                
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param menuItemText  Optional:NO 
                Menu->MenuItem hierarchy string to identify which menuitem to find.
              
     @param expectedStatus  Optional:YES 
                Expected status string (or part thereof) of the menuitem. 
              
     **********/
    static public ComponentFunction verifyMenuItem (String winname, String compname, String menuItemText, String expectedStatus) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyMenuItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyMenuItem.compname = null");

        if ( menuItemText == null ) throw new IllegalArgumentException ( "verifyMenuItem.menuItemText = null");
        ComponentFunction cf = new ComponentFunction(VERIFYMENUITEM_KEYWORD, winname, compname);
        cf.addParameter(menuItemText);
        cf.addParameter(expectedStatus);
        return cf;
    }


    /*********** <pre> 
               Attempts to verify the a particular menuitem exists in a menu.
               
                The menuitem should be specified in the form 
                "Menu->Menu->MenuItem   CTRL+V" with the full text (ampersands optional), 
                spaces(if any), and keyboard shortcut text (if any).  
                (The ampersands precede any character in the menuitem that is underlined.)
                
                This command differs from the WindowFunction.VerifyMenuItem command because 
                here we are actually seeking a JavaMenu component, not a Window that contains 
                a menu.  Also, we do not currently verify any state information like the 
                WindowFunctions.VerifyMenuItem command.
                
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        menuItemText -- Optional:NO 
                Menu->MenuItem hierarchy string to identify which menuitem to find.
              <BR/>        expectedStatus -- Optional:YES 
                Expected status string (or part thereof) of the menuitem. 
              
    </UL>

     **********/
    static public ComponentFunction verifyMenuItem(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyMenuItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyMenuItem.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyMenuItem.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYMENUITEM_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
               Attempts to verify the existence of a menuitem found by partial text match.
               
                Attempts to verify the existence of a menuitem found by partial text match.
                The menuitem should be specified in the form "Menu->Menu->MenuItem".  
                (Optional ampersands precede any character in the menuitem that is underlined.)
                
                This command differs from the WindowFunction.VerifyMenuItemContains command because 
                here we are actually seeking a JavaMenu component, not a Window that contains 
                a menu.  Also, we do not currently verify any state information like the 
                WindowFunctions.VerifyMenuItemContains command.
                
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param menuItemText  Optional:NO 
                Menu->MenuItem hierarchy string to identify which menuitem to find.
              
     @param expectedStatus  Optional:YES 
                Expected status string (or part thereof) of the menuitem. 
              
     **********/
    static public ComponentFunction verifyMenuItemContains (String winname, String compname, String menuItemText, String expectedStatus) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyMenuItemContains.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyMenuItemContains.compname = null");

        if ( menuItemText == null ) throw new IllegalArgumentException ( "verifyMenuItemContains.menuItemText = null");
        ComponentFunction cf = new ComponentFunction(VERIFYMENUITEMCONTAINS_KEYWORD, winname, compname);
        cf.addParameter(menuItemText);
        cf.addParameter(expectedStatus);
        return cf;
    }


    /*********** <pre> 
               Attempts to verify the existence of a menuitem found by partial text match.
               
                Attempts to verify the existence of a menuitem found by partial text match.
                The menuitem should be specified in the form "Menu->Menu->MenuItem".  
                (Optional ampersands precede any character in the menuitem that is underlined.)
                
                This command differs from the WindowFunction.VerifyMenuItemContains command because 
                here we are actually seeking a JavaMenu component, not a Window that contains 
                a menu.  Also, we do not currently verify any state information like the 
                WindowFunctions.VerifyMenuItemContains command.
                
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        menuItemText -- Optional:NO 
                Menu->MenuItem hierarchy string to identify which menuitem to find.
              <BR/>        expectedStatus -- Optional:YES 
                Expected status string (or part thereof) of the menuitem. 
              
    </UL>

     **********/
    static public ComponentFunction verifyMenuItemContains(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyMenuItemContains.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyMenuItemContains.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyMenuItemContains.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYMENUITEMCONTAINS_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


}
