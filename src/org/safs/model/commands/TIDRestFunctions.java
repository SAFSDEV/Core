
/******************************************************************************
 * TIDRestFunctions.java
 *
 * Copyright (C) SAS Institute, All rights reserved.
 * General Public License: https://www.gnu.org/licenses/gpl-3.0.en.html
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   TIDRestFunctions.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaCommandModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe TIDRestFunctions.xml XSLJavaCommandModel.xsl -o TIDRestFunctions.java
 *
 ******************************************************************************/ 
package org.safs.model.commands;


import org.safs.model.ComponentFunction;


public class TIDRestFunctions {

    /*****************
    Private Singleton Instance
    ****************/
    private static final TIDRestFunctions singleton = new TIDRestFunctions(); 

    /*****************
    Private Constructor
    Static class needing no instantiation.
    ****************/
    private TIDRestFunctions() {}

    /*****************
    public Singleton to access class static methods via instance
    ****************/
    public static TIDRestFunctions getInstance() { return singleton;}

    /** "RestDeleteBinary" */
    static public final String RESTDELETEBINARY_KEYWORD = "RestDeleteBinary";
    /** "RestDeleteCSS" */
    static public final String RESTDELETECSS_KEYWORD = "RestDeleteCSS";
    /** "RestDeleteCustom" */
    static public final String RESTDELETECUSTOM_KEYWORD = "RestDeleteCustom";
    /** "RestDeleteHTML" */
    static public final String RESTDELETEHTML_KEYWORD = "RestDeleteHTML";
    /** "RestDeleteImage" */
    static public final String RESTDELETEIMAGE_KEYWORD = "RestDeleteImage";
    /** "RestDeleteJSON" */
    static public final String RESTDELETEJSON_KEYWORD = "RestDeleteJSON";
    /** "RestDeleteScript" */
    static public final String RESTDELETESCRIPT_KEYWORD = "RestDeleteScript";
    /** "RestDeleteText" */
    static public final String RESTDELETETEXT_KEYWORD = "RestDeleteText";
    /** "RestDeleteXML" */
    static public final String RESTDELETEXML_KEYWORD = "RestDeleteXML";
    /** "RestEndServiceSession" */
    static public final String RESTENDSERVICESESSION_KEYWORD = "RestEndServiceSession";
    /** "RestGetBinary" */
    static public final String RESTGETBINARY_KEYWORD = "RestGetBinary";
    /** "RestGetCSS" */
    static public final String RESTGETCSS_KEYWORD = "RestGetCSS";
    /** "RestGetCustom" */
    static public final String RESTGETCUSTOM_KEYWORD = "RestGetCustom";
    /** "RestGetHTML" */
    static public final String RESTGETHTML_KEYWORD = "RestGetHTML";
    /** "RestGetImage" */
    static public final String RESTGETIMAGE_KEYWORD = "RestGetImage";
    /** "RestGetJSON" */
    static public final String RESTGETJSON_KEYWORD = "RestGetJSON";
    /** "RestGetScript" */
    static public final String RESTGETSCRIPT_KEYWORD = "RestGetScript";
    /** "RestGetText" */
    static public final String RESTGETTEXT_KEYWORD = "RestGetText";
    /** "RestGetXML" */
    static public final String RESTGETXML_KEYWORD = "RestGetXML";
    /** "RestHeadBinary" */
    static public final String RESTHEADBINARY_KEYWORD = "RestHeadBinary";
    /** "RestHeadCSS" */
    static public final String RESTHEADCSS_KEYWORD = "RestHeadCSS";
    /** "RestHeadCustom" */
    static public final String RESTHEADCUSTOM_KEYWORD = "RestHeadCustom";
    /** "RestHeadHTML" */
    static public final String RESTHEADHTML_KEYWORD = "RestHeadHTML";
    /** "RestHeadImage" */
    static public final String RESTHEADIMAGE_KEYWORD = "RestHeadImage";
    /** "RestHeadJSON" */
    static public final String RESTHEADJSON_KEYWORD = "RestHeadJSON";
    /** "RestHeadScript" */
    static public final String RESTHEADSCRIPT_KEYWORD = "RestHeadScript";
    /** "RestHeadText" */
    static public final String RESTHEADTEXT_KEYWORD = "RestHeadText";
    /** "RestHeadXML" */
    static public final String RESTHEADXML_KEYWORD = "RestHeadXML";
    /** "RestPatchBinary" */
    static public final String RESTPATCHBINARY_KEYWORD = "RestPatchBinary";
    /** "RestPatchCSS" */
    static public final String RESTPATCHCSS_KEYWORD = "RestPatchCSS";
    /** "RestPatchCustom" */
    static public final String RESTPATCHCUSTOM_KEYWORD = "RestPatchCustom";
    /** "RestPatchHTML" */
    static public final String RESTPATCHHTML_KEYWORD = "RestPatchHTML";
    /** "RestPatchImage" */
    static public final String RESTPATCHIMAGE_KEYWORD = "RestPatchImage";
    /** "RestPatchJSON" */
    static public final String RESTPATCHJSON_KEYWORD = "RestPatchJSON";
    /** "RestPatchScript" */
    static public final String RESTPATCHSCRIPT_KEYWORD = "RestPatchScript";
    /** "RestPatchText" */
    static public final String RESTPATCHTEXT_KEYWORD = "RestPatchText";
    /** "RestPatchXML" */
    static public final String RESTPATCHXML_KEYWORD = "RestPatchXML";
    /** "RestPostBinary" */
    static public final String RESTPOSTBINARY_KEYWORD = "RestPostBinary";
    /** "RestPostCSS" */
    static public final String RESTPOSTCSS_KEYWORD = "RestPostCSS";
    /** "RestPostCustom" */
    static public final String RESTPOSTCUSTOM_KEYWORD = "RestPostCustom";
    /** "RestPostHTML" */
    static public final String RESTPOSTHTML_KEYWORD = "RestPostHTML";
    /** "RestPostImage" */
    static public final String RESTPOSTIMAGE_KEYWORD = "RestPostImage";
    /** "RestPostJSON" */
    static public final String RESTPOSTJSON_KEYWORD = "RestPostJSON";
    /** "RestPostScript" */
    static public final String RESTPOSTSCRIPT_KEYWORD = "RestPostScript";
    /** "RestPostText" */
    static public final String RESTPOSTTEXT_KEYWORD = "RestPostText";
    /** "RestPostXML" */
    static public final String RESTPOSTXML_KEYWORD = "RestPostXML";
    /** "RestPutBinary" */
    static public final String RESTPUTBINARY_KEYWORD = "RestPutBinary";
    /** "RestPutCSS" */
    static public final String RESTPUTCSS_KEYWORD = "RestPutCSS";
    /** "RestPutCustom" */
    static public final String RESTPUTCUSTOM_KEYWORD = "RestPutCustom";
    /** "RestPutHTML" */
    static public final String RESTPUTHTML_KEYWORD = "RestPutHTML";
    /** "RestPutImage" */
    static public final String RESTPUTIMAGE_KEYWORD = "RestPutImage";
    /** "RestPutJSON" */
    static public final String RESTPUTJSON_KEYWORD = "RestPutJSON";
    /** "RestPutScript" */
    static public final String RESTPUTSCRIPT_KEYWORD = "RestPutScript";
    /** "RestPutText" */
    static public final String RESTPUTTEXT_KEYWORD = "RestPutText";
    /** "RestPutXML" */
    static public final String RESTPUTXML_KEYWORD = "RestPutXML";
    /** "RestRequest" */
    static public final String RESTREQUEST_KEYWORD = "RestRequest";
    /** "RestStartServiceSession" */
    static public final String RESTSTARTSERVICESESSION_KEYWORD = "RestStartServiceSession";


    /*********** <pre>
                    Delete binary content. Not implemented yet.
                    </pre>    Supporting Engines:
    <P/><UL>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     **********/
    static public ComponentFunction restDeleteBinary (String winname, String compname) {

        if ( winname == null ) throw new IllegalArgumentException ( "restDeleteBinary.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restDeleteBinary.compname = null");
        ComponentFunction cf = new ComponentFunction(RESTDELETEBINARY_KEYWORD, winname, compname);
        return cf;
    }


    /*********** <pre>
                    Delete css content. Not implemented yet.
                    </pre>    Supporting Engines:
    <P/><UL>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     **********/
    static public ComponentFunction restDeleteCSS (String winname, String compname) {

        if ( winname == null ) throw new IllegalArgumentException ( "restDeleteCSS.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restDeleteCSS.compname = null");
        ComponentFunction cf = new ComponentFunction(RESTDELETECSS_KEYWORD, winname, compname);
        return cf;
    }


    /*********** <pre>
                    Perform the "DELETE" method on a REST service with headers defined by user.
                
                    
                        This action will send the "DELETE" method with Headers defined by user.
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param relativeURI  Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.
     @param responseIdVar  Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        
     @param body  Optional:YESThe body to send with this REST request.
     @param headers  Optional:YES
                           The custom headers to be included in this REST request.
                        
     @param authentication  Optional:YES
                           The custom authentication/authorization information.
                        
     **********/
    static public ComponentFunction restDeleteCustom (String winname, String compname, String relativeURI, String responseIdVar, String body, String headers, String authentication) {

        if ( winname == null ) throw new IllegalArgumentException ( "restDeleteCustom.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restDeleteCustom.compname = null");

        if ( relativeURI == null ) throw new IllegalArgumentException ( "restDeleteCustom.relativeURI = null");
        if ( responseIdVar == null ) throw new IllegalArgumentException ( "restDeleteCustom.responseIdVar = null");
        ComponentFunction cf = new ComponentFunction(RESTDELETECUSTOM_KEYWORD, winname, compname);
        cf.addParameter(relativeURI);
        cf.addParameter(responseIdVar);
        cf.addParameter(body);
        cf.addParameter(headers);
        cf.addParameter(authentication);
        return cf;
    }


    /*********** <pre>
                    Perform the "DELETE" method on a REST service with headers defined by user.
                
                    
                        This action will send the "DELETE" method with Headers defined by user.
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        relativeURI -- Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.<BR/>        responseIdVar -- Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        <BR/>        body -- Optional:YESThe body to send with this REST request.<BR/>        headers -- Optional:YES
                           The custom headers to be included in this REST request.
                        <BR/>        authentication -- Optional:YES
                           The custom authentication/authorization information.
                        
    </UL>

     **********/
    static public ComponentFunction restDeleteCustom(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "restDeleteCustom.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restDeleteCustom.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "restDeleteCustom.parameters = null");
        ComponentFunction cf = new ComponentFunction(RESTDELETECUSTOM_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>    </pre>    Supporting Engines:
    <P/><UL>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     **********/
    static public ComponentFunction restDeleteHTML (String winname, String compname) {

        if ( winname == null ) throw new IllegalArgumentException ( "restDeleteHTML.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restDeleteHTML.compname = null");
        ComponentFunction cf = new ComponentFunction(RESTDELETEHTML_KEYWORD, winname, compname);
        return cf;
    }


    /*********** <pre>
                    Delete image content. Not implemented yet.
                    </pre>    Supporting Engines:
    <P/><UL>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     **********/
    static public ComponentFunction restDeleteImage (String winname, String compname) {

        if ( winname == null ) throw new IllegalArgumentException ( "restDeleteImage.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restDeleteImage.compname = null");
        ComponentFunction cf = new ComponentFunction(RESTDELETEIMAGE_KEYWORD, winname, compname);
        return cf;
    }


    /*********** <pre>
                    Delete json content. Not implemented yet.
                    </pre>    Supporting Engines:
    <P/><UL>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     **********/
    static public ComponentFunction restDeleteJSON (String winname, String compname) {

        if ( winname == null ) throw new IllegalArgumentException ( "restDeleteJSON.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restDeleteJSON.compname = null");
        ComponentFunction cf = new ComponentFunction(RESTDELETEJSON_KEYWORD, winname, compname);
        return cf;
    }


    /*********** <pre>
                    Delete javascript content. Not implemented yet.
                    </pre>    Supporting Engines:
    <P/><UL>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     **********/
    static public ComponentFunction restDeleteScript (String winname, String compname) {

        if ( winname == null ) throw new IllegalArgumentException ( "restDeleteScript.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restDeleteScript.compname = null");
        ComponentFunction cf = new ComponentFunction(RESTDELETESCRIPT_KEYWORD, winname, compname);
        return cf;
    }


    /*********** <pre>
                    Delete text content. Not implemented yet.
                    </pre>    Supporting Engines:
    <P/><UL>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     **********/
    static public ComponentFunction restDeleteText (String winname, String compname) {

        if ( winname == null ) throw new IllegalArgumentException ( "restDeleteText.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restDeleteText.compname = null");
        ComponentFunction cf = new ComponentFunction(RESTDELETETEXT_KEYWORD, winname, compname);
        return cf;
    }


    /*********** <pre>
                    Delete xml content. Not implemented yet.
                    </pre>    Supporting Engines:
    <P/><UL>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     **********/
    static public ComponentFunction restDeleteXML (String winname, String compname) {

        if ( winname == null ) throw new IllegalArgumentException ( "restDeleteXML.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restDeleteXML.compname = null");
        ComponentFunction cf = new ComponentFunction(RESTDELETEXML_KEYWORD, winname, compname);
        return cf;
    }


    /*********** <pre>
                    Stop a session for a REST service.
                
                    Stop a session for a REST service.
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     **********/
    static public ComponentFunction restEndServiceSession (String winname, String compname) {

        if ( winname == null ) throw new IllegalArgumentException ( "restEndServiceSession.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restEndServiceSession.compname = null");

        ComponentFunction cf = new ComponentFunction(RESTENDSERVICESESSION_KEYWORD, winname, compname);
        return cf;
    }


    /*********** <pre>
					Perform the "GET" method on a REST service, and verify the returned content is binary before returning it.
				
				    
				        This action will send the "GET" method with Headers containing "Accept : application/octet-stream".
				        It only tells the server what type of content is expected, and it is not guarantee that the server will return it.
				        This action will verify the reponse's headers containing "Content-Type: application/octet-stream" to make sure the returned content is binary.
				    
					
						If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
						before executing this action, which will be handled within a session.
						Otherwise, it will be considered as a one-shot connection, 
						and NO RestStartServiceSession needs to be called and user may need to provide authentication information by keyword's parameter.
					
				    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param relativeURI  Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.
     @param responseIdVar  Optional:NO
                	      The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                	    
     @param body  Optional:YESThe body to send with this REST request.
     @param headers  Optional:YES
                	       The custom headers to be included in this REST request.
                	    
     @param authentication  Optional:YES
                           The custom authentication/authorization information.
                        
     **********/
    static public ComponentFunction restGetBinary (String winname, String compname, String relativeURI, String responseIdVar, String body, String headers, String authentication) {

        if ( winname == null ) throw new IllegalArgumentException ( "restGetBinary.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restGetBinary.compname = null");

        if ( relativeURI == null ) throw new IllegalArgumentException ( "restGetBinary.relativeURI = null");
        if ( responseIdVar == null ) throw new IllegalArgumentException ( "restGetBinary.responseIdVar = null");
        ComponentFunction cf = new ComponentFunction(RESTGETBINARY_KEYWORD, winname, compname);
        cf.addParameter(relativeURI);
        cf.addParameter(responseIdVar);
        cf.addParameter(body);
        cf.addParameter(headers);
        cf.addParameter(authentication);
        return cf;
    }


    /*********** <pre>
					Perform the "GET" method on a REST service, and verify the returned content is binary before returning it.
				
				    
				        This action will send the "GET" method with Headers containing "Accept : application/octet-stream".
				        It only tells the server what type of content is expected, and it is not guarantee that the server will return it.
				        This action will verify the reponse's headers containing "Content-Type: application/octet-stream" to make sure the returned content is binary.
				    
					
						If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
						before executing this action, which will be handled within a session.
						Otherwise, it will be considered as a one-shot connection, 
						and NO RestStartServiceSession needs to be called and user may need to provide authentication information by keyword's parameter.
					
				    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        relativeURI -- Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.<BR/>        responseIdVar -- Optional:NO
                	      The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                	    <BR/>        body -- Optional:YESThe body to send with this REST request.<BR/>        headers -- Optional:YES
                	       The custom headers to be included in this REST request.
                	    <BR/>        authentication -- Optional:YES
                           The custom authentication/authorization information.
                        
    </UL>

     **********/
    static public ComponentFunction restGetBinary(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "restGetBinary.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restGetBinary.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "restGetBinary.parameters = null");
        ComponentFunction cf = new ComponentFunction(RESTGETBINARY_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
                    Perform the "GET" method on a REST service, and verify the returned content is css before returning it.
                
                    
                        This action will send the "GET" method with Headers containing "Accept : text/css".
                        It only tells the server what type of content is expected, and it is not guarantee that the server will return it.
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param relativeURI  Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.
     @param responseIdVar  Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        
     @param body  Optional:YESThe body to send with this REST request.
     @param headers  Optional:YES
                           The custom headers to be included in this REST request.
                        
     @param authentication  Optional:YES
                           The custom authentication/authorization information.
                        
     **********/
    static public ComponentFunction restGetCSS (String winname, String compname, String relativeURI, String responseIdVar, String body, String headers, String authentication) {

        if ( winname == null ) throw new IllegalArgumentException ( "restGetCSS.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restGetCSS.compname = null");

        if ( relativeURI == null ) throw new IllegalArgumentException ( "restGetCSS.relativeURI = null");
        if ( responseIdVar == null ) throw new IllegalArgumentException ( "restGetCSS.responseIdVar = null");
        ComponentFunction cf = new ComponentFunction(RESTGETCSS_KEYWORD, winname, compname);
        cf.addParameter(relativeURI);
        cf.addParameter(responseIdVar);
        cf.addParameter(body);
        cf.addParameter(headers);
        cf.addParameter(authentication);
        return cf;
    }


    /*********** <pre>
                    Perform the "GET" method on a REST service, and verify the returned content is css before returning it.
                
                    
                        This action will send the "GET" method with Headers containing "Accept : text/css".
                        It only tells the server what type of content is expected, and it is not guarantee that the server will return it.
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        relativeURI -- Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.<BR/>        responseIdVar -- Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        <BR/>        body -- Optional:YESThe body to send with this REST request.<BR/>        headers -- Optional:YES
                           The custom headers to be included in this REST request.
                        <BR/>        authentication -- Optional:YES
                           The custom authentication/authorization information.
                        
    </UL>

     **********/
    static public ComponentFunction restGetCSS(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "restGetCSS.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restGetCSS.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "restGetCSS.parameters = null");
        ComponentFunction cf = new ComponentFunction(RESTGETCSS_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
                    Perform the "GET" method on a REST service with headers defined by user, and return the content.
                
                    
                        This action will send the "GET" method with Headers defined by user.
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param relativeURI  Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.
     @param responseIdVar  Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        
     @param body  Optional:YESThe body to send with this REST request.
     @param headers  Optional:NO
                           The custom headers to be included in this REST request.
                        
     @param authentication  Optional:YES
                           The custom authentication/authorization information.
                        
     **********/
    static public ComponentFunction restGetCustom (String winname, String compname, String relativeURI, String responseIdVar, String body, String headers, String authentication) {

        if ( winname == null ) throw new IllegalArgumentException ( "restGetCustom.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restGetCustom.compname = null");

        if ( headers == null ) throw new IllegalArgumentException ( "restGetCustom.headers = null");
        if ( relativeURI == null ) throw new IllegalArgumentException ( "restGetCustom.relativeURI = null");
        if ( responseIdVar == null ) throw new IllegalArgumentException ( "restGetCustom.responseIdVar = null");
        ComponentFunction cf = new ComponentFunction(RESTGETCUSTOM_KEYWORD, winname, compname);
        cf.addParameter(relativeURI);
        cf.addParameter(responseIdVar);
        cf.addParameter(body);
        cf.addParameter(headers);
        cf.addParameter(authentication);
        return cf;
    }


    /*********** <pre>
                    Perform the "GET" method on a REST service with headers defined by user, and return the content.
                
                    
                        This action will send the "GET" method with Headers defined by user.
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        relativeURI -- Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.<BR/>        responseIdVar -- Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        <BR/>        body -- Optional:YESThe body to send with this REST request.<BR/>        headers -- Optional:NO
                           The custom headers to be included in this REST request.
                        <BR/>        authentication -- Optional:YES
                           The custom authentication/authorization information.
                        
    </UL>

     **********/
    static public ComponentFunction restGetCustom(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "restGetCustom.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restGetCustom.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "restGetCustom.parameters = null");
        ComponentFunction cf = new ComponentFunction(RESTGETCUSTOM_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
                    Perform the "GET" method on a REST service, and verify the returned content is html before returning it.
                
                    
                        This action will send the "GET" method with Headers containing "Accept : text/html".
                        It only tells the server what type of content is expected, and it is not guarantee that the server will return it.
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param relativeURI  Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.
     @param responseIdVar  Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        
     @param body  Optional:YESThe body to send with this REST request.
     @param headers  Optional:YES
                           The custom headers to be included in this REST request.
                        
     @param authentication  Optional:YES
                           The custom authentication/authorization information.
                        
     **********/
    static public ComponentFunction restGetHTML (String winname, String compname, String relativeURI, String responseIdVar, String body, String headers, String authentication) {

        if ( winname == null ) throw new IllegalArgumentException ( "restGetHTML.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restGetHTML.compname = null");

        if ( relativeURI == null ) throw new IllegalArgumentException ( "restGetHTML.relativeURI = null");
        if ( responseIdVar == null ) throw new IllegalArgumentException ( "restGetHTML.responseIdVar = null");
        ComponentFunction cf = new ComponentFunction(RESTGETHTML_KEYWORD, winname, compname);
        cf.addParameter(relativeURI);
        cf.addParameter(responseIdVar);
        cf.addParameter(body);
        cf.addParameter(headers);
        cf.addParameter(authentication);
        return cf;
    }


    /*********** <pre>
                    Perform the "GET" method on a REST service, and verify the returned content is html before returning it.
                
                    
                        This action will send the "GET" method with Headers containing "Accept : text/html".
                        It only tells the server what type of content is expected, and it is not guarantee that the server will return it.
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        relativeURI -- Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.<BR/>        responseIdVar -- Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        <BR/>        body -- Optional:YESThe body to send with this REST request.<BR/>        headers -- Optional:YES
                           The custom headers to be included in this REST request.
                        <BR/>        authentication -- Optional:YES
                           The custom authentication/authorization information.
                        
    </UL>

     **********/
    static public ComponentFunction restGetHTML(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "restGetHTML.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restGetHTML.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "restGetHTML.parameters = null");
        ComponentFunction cf = new ComponentFunction(RESTGETHTML_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
                    Perform the "GET" method on a REST service, and verify the returned content is image before returning it.
                
                    
                        This action will send the "GET" method with Headers containing "Accept : image".
                        It only tells the server what type of content is expected, and it is not guarantee that the server will return it.
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param relativeURI  Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.
     @param responseIdVar  Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        
     @param body  Optional:YESThe body to send with this REST request.
     @param headers  Optional:YES
                           The custom headers to be included in this REST request.
                        
     @param authentication  Optional:YES
                           The custom authentication/authorization information.
                        
     **********/
    static public ComponentFunction restGetImage (String winname, String compname, String relativeURI, String responseIdVar, String body, String headers, String authentication) {

        if ( winname == null ) throw new IllegalArgumentException ( "restGetImage.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restGetImage.compname = null");

        if ( relativeURI == null ) throw new IllegalArgumentException ( "restGetImage.relativeURI = null");
        if ( responseIdVar == null ) throw new IllegalArgumentException ( "restGetImage.responseIdVar = null");
        ComponentFunction cf = new ComponentFunction(RESTGETIMAGE_KEYWORD, winname, compname);
        cf.addParameter(relativeURI);
        cf.addParameter(responseIdVar);
        cf.addParameter(body);
        cf.addParameter(headers);
        cf.addParameter(authentication);
        return cf;
    }


    /*********** <pre>
                    Perform the "GET" method on a REST service, and verify the returned content is image before returning it.
                
                    
                        This action will send the "GET" method with Headers containing "Accept : image".
                        It only tells the server what type of content is expected, and it is not guarantee that the server will return it.
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        relativeURI -- Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.<BR/>        responseIdVar -- Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        <BR/>        body -- Optional:YESThe body to send with this REST request.<BR/>        headers -- Optional:YES
                           The custom headers to be included in this REST request.
                        <BR/>        authentication -- Optional:YES
                           The custom authentication/authorization information.
                        
    </UL>

     **********/
    static public ComponentFunction restGetImage(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "restGetImage.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restGetImage.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "restGetImage.parameters = null");
        ComponentFunction cf = new ComponentFunction(RESTGETIMAGE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
                    Perform the "GET" method on a REST service, and verify the returned content is json before returning it.
                
                    
                        This action will send the "GET" method with Headers containing "Accept : application/json".
                        It only tells the server what type of content is expected, and it is not guarantee that the server will return it.
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param relativeURI  Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.
     @param responseIdVar  Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        
     @param body  Optional:YESThe body to send with this REST request.
     @param headers  Optional:YES
                           The custom headers to be included in this REST request.
                        
     @param authentication  Optional:YES
                           The custom authentication/authorization information.
                        
     **********/
    static public ComponentFunction restGetJSON (String winname, String compname, String relativeURI, String responseIdVar, String body, String headers, String authentication) {

        if ( winname == null ) throw new IllegalArgumentException ( "restGetJSON.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restGetJSON.compname = null");

        if ( relativeURI == null ) throw new IllegalArgumentException ( "restGetJSON.relativeURI = null");
        if ( responseIdVar == null ) throw new IllegalArgumentException ( "restGetJSON.responseIdVar = null");
        ComponentFunction cf = new ComponentFunction(RESTGETJSON_KEYWORD, winname, compname);
        cf.addParameter(relativeURI);
        cf.addParameter(responseIdVar);
        cf.addParameter(body);
        cf.addParameter(headers);
        cf.addParameter(authentication);
        return cf;
    }


    /*********** <pre>
                    Perform the "GET" method on a REST service, and verify the returned content is json before returning it.
                
                    
                        This action will send the "GET" method with Headers containing "Accept : application/json".
                        It only tells the server what type of content is expected, and it is not guarantee that the server will return it.
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        relativeURI -- Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.<BR/>        responseIdVar -- Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        <BR/>        body -- Optional:YESThe body to send with this REST request.<BR/>        headers -- Optional:YES
                           The custom headers to be included in this REST request.
                        <BR/>        authentication -- Optional:YES
                           The custom authentication/authorization information.
                        
    </UL>

     **********/
    static public ComponentFunction restGetJSON(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "restGetJSON.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restGetJSON.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "restGetJSON.parameters = null");
        ComponentFunction cf = new ComponentFunction(RESTGETJSON_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
                    Perform the "GET" method on a REST service, and verify the returned content is javascript before returning it.
                
                    
                        This action will send the "GET" method with Headers containing "Accept : application/javascript".
                        It only tells the server what type of content is expected, and it is not guarantee that the server will return it.
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param relativeURI  Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.
     @param responseIdVar  Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        
     @param body  Optional:YESThe body to send with this REST request.
     @param headers  Optional:YES
                           The custom headers to be included in this REST request.
                        
     @param authentication  Optional:YES
                           The custom authentication/authorization information.
                        
     **********/
    static public ComponentFunction restGetScript (String winname, String compname, String relativeURI, String responseIdVar, String body, String headers, String authentication) {

        if ( winname == null ) throw new IllegalArgumentException ( "restGetScript.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restGetScript.compname = null");

        if ( relativeURI == null ) throw new IllegalArgumentException ( "restGetScript.relativeURI = null");
        if ( responseIdVar == null ) throw new IllegalArgumentException ( "restGetScript.responseIdVar = null");
        ComponentFunction cf = new ComponentFunction(RESTGETSCRIPT_KEYWORD, winname, compname);
        cf.addParameter(relativeURI);
        cf.addParameter(responseIdVar);
        cf.addParameter(body);
        cf.addParameter(headers);
        cf.addParameter(authentication);
        return cf;
    }


    /*********** <pre>
                    Perform the "GET" method on a REST service, and verify the returned content is javascript before returning it.
                
                    
                        This action will send the "GET" method with Headers containing "Accept : application/javascript".
                        It only tells the server what type of content is expected, and it is not guarantee that the server will return it.
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        relativeURI -- Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.<BR/>        responseIdVar -- Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        <BR/>        body -- Optional:YESThe body to send with this REST request.<BR/>        headers -- Optional:YES
                           The custom headers to be included in this REST request.
                        <BR/>        authentication -- Optional:YES
                           The custom authentication/authorization information.
                        
    </UL>

     **********/
    static public ComponentFunction restGetScript(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "restGetScript.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restGetScript.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "restGetScript.parameters = null");
        ComponentFunction cf = new ComponentFunction(RESTGETSCRIPT_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
                    Perform the "GET" method on a REST service, and verify the returned content is text before returning it.
                
                    
                        This action will send the "GET" method with Headers containing "Accept : text/plain".
                        It only tells the server what type of content is expected, and it is not guarantee that the server will return it.
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param relativeURI  Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.
     @param responseIdVar  Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        
     @param body  Optional:YESThe body to send with this REST request.
     @param headers  Optional:YES
                           The custom headers to be included in this REST request.
                        
     @param authentication  Optional:YES
                           The custom authentication/authorization information.
                        
     **********/
    static public ComponentFunction restGetText (String winname, String compname, String relativeURI, String responseIdVar, String body, String headers, String authentication) {

        if ( winname == null ) throw new IllegalArgumentException ( "restGetText.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restGetText.compname = null");

        if ( relativeURI == null ) throw new IllegalArgumentException ( "restGetText.relativeURI = null");
        if ( responseIdVar == null ) throw new IllegalArgumentException ( "restGetText.responseIdVar = null");
        ComponentFunction cf = new ComponentFunction(RESTGETTEXT_KEYWORD, winname, compname);
        cf.addParameter(relativeURI);
        cf.addParameter(responseIdVar);
        cf.addParameter(body);
        cf.addParameter(headers);
        cf.addParameter(authentication);
        return cf;
    }


    /*********** <pre>
                    Perform the "GET" method on a REST service, and verify the returned content is text before returning it.
                
                    
                        This action will send the "GET" method with Headers containing "Accept : text/plain".
                        It only tells the server what type of content is expected, and it is not guarantee that the server will return it.
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        relativeURI -- Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.<BR/>        responseIdVar -- Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        <BR/>        body -- Optional:YESThe body to send with this REST request.<BR/>        headers -- Optional:YES
                           The custom headers to be included in this REST request.
                        <BR/>        authentication -- Optional:YES
                           The custom authentication/authorization information.
                        
    </UL>

     **********/
    static public ComponentFunction restGetText(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "restGetText.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restGetText.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "restGetText.parameters = null");
        ComponentFunction cf = new ComponentFunction(RESTGETTEXT_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
                    Perform the "GET" method on a REST service, and verify the returned content is xml before returning it.
                
                    
                        This action will send the "GET" method with Headers containing "Accept : text/xml".
                        It only tells the server what type of content is expected, and it is not guarantee that the server will return it.
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param relativeURI  Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.
     @param responseIdVar  Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        
     @param body  Optional:YESThe body to send with this REST request.
     @param headers  Optional:YES
                           The custom headers to be included in this REST request.
                        
     @param authentication  Optional:YES
                           The custom authentication/authorization information.
                        
     **********/
    static public ComponentFunction restGetXML (String winname, String compname, String relativeURI, String responseIdVar, String body, String headers, String authentication) {

        if ( winname == null ) throw new IllegalArgumentException ( "restGetXML.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restGetXML.compname = null");

        if ( relativeURI == null ) throw new IllegalArgumentException ( "restGetXML.relativeURI = null");
        if ( responseIdVar == null ) throw new IllegalArgumentException ( "restGetXML.responseIdVar = null");
        ComponentFunction cf = new ComponentFunction(RESTGETXML_KEYWORD, winname, compname);
        cf.addParameter(relativeURI);
        cf.addParameter(responseIdVar);
        cf.addParameter(body);
        cf.addParameter(headers);
        cf.addParameter(authentication);
        return cf;
    }


    /*********** <pre>
                    Perform the "GET" method on a REST service, and verify the returned content is xml before returning it.
                
                    
                        This action will send the "GET" method with Headers containing "Accept : text/xml".
                        It only tells the server what type of content is expected, and it is not guarantee that the server will return it.
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        relativeURI -- Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.<BR/>        responseIdVar -- Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        <BR/>        body -- Optional:YESThe body to send with this REST request.<BR/>        headers -- Optional:YES
                           The custom headers to be included in this REST request.
                        <BR/>        authentication -- Optional:YES
                           The custom authentication/authorization information.
                        
    </UL>

     **********/
    static public ComponentFunction restGetXML(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "restGetXML.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restGetXML.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "restGetXML.parameters = null");
        ComponentFunction cf = new ComponentFunction(RESTGETXML_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
                    Perform the "HEAD" method on a REST service, and verify the returned content is binary before returning the header part.
                
                    
                        This action will send the "HEAD" method with Headers containing "Accept : application/octet-stream".
                        It only tells the server what type of content is expected, and it is not guarantee that the server will return it.
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param relativeURI  Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.
     @param responseIdVar  Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        
     @param body  Optional:YESThe body to send with this REST request.
     @param headers  Optional:YES
                           The custom headers to be included in this REST request.
                        
     @param authentication  Optional:YES
                           The custom authentication/authorization information.
                        
     **********/
    static public ComponentFunction restHeadBinary (String winname, String compname, String relativeURI, String responseIdVar, String body, String headers, String authentication) {

        if ( winname == null ) throw new IllegalArgumentException ( "restHeadBinary.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restHeadBinary.compname = null");

        if ( relativeURI == null ) throw new IllegalArgumentException ( "restHeadBinary.relativeURI = null");
        if ( responseIdVar == null ) throw new IllegalArgumentException ( "restHeadBinary.responseIdVar = null");
        ComponentFunction cf = new ComponentFunction(RESTHEADBINARY_KEYWORD, winname, compname);
        cf.addParameter(relativeURI);
        cf.addParameter(responseIdVar);
        cf.addParameter(body);
        cf.addParameter(headers);
        cf.addParameter(authentication);
        return cf;
    }


    /*********** <pre>
                    Perform the "HEAD" method on a REST service, and verify the returned content is binary before returning the header part.
                
                    
                        This action will send the "HEAD" method with Headers containing "Accept : application/octet-stream".
                        It only tells the server what type of content is expected, and it is not guarantee that the server will return it.
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        relativeURI -- Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.<BR/>        responseIdVar -- Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        <BR/>        body -- Optional:YESThe body to send with this REST request.<BR/>        headers -- Optional:YES
                           The custom headers to be included in this REST request.
                        <BR/>        authentication -- Optional:YES
                           The custom authentication/authorization information.
                        
    </UL>

     **********/
    static public ComponentFunction restHeadBinary(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "restHeadBinary.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restHeadBinary.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "restHeadBinary.parameters = null");
        ComponentFunction cf = new ComponentFunction(RESTHEADBINARY_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
                    Perform the "HEAD" method on a REST service, and verify the returned content is css before returning the header part.
                
                    
                        This action will send the "HEAD" method with Headers containing "Accept : text/css".
                        It only tells the server what type of content is expected, and it is not guarantee that the server will return it.
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param relativeURI  Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.
     @param responseIdVar  Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        
     @param body  Optional:YESThe body to send with this REST request.
     @param headers  Optional:YES
                           The custom headers to be included in this REST request.
                        
     @param authentication  Optional:YES
                           The custom authentication/authorization information.
                        
     **********/
    static public ComponentFunction restHeadCSS (String winname, String compname, String relativeURI, String responseIdVar, String body, String headers, String authentication) {

        if ( winname == null ) throw new IllegalArgumentException ( "restHeadCSS.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restHeadCSS.compname = null");

        if ( relativeURI == null ) throw new IllegalArgumentException ( "restHeadCSS.relativeURI = null");
        if ( responseIdVar == null ) throw new IllegalArgumentException ( "restHeadCSS.responseIdVar = null");
        ComponentFunction cf = new ComponentFunction(RESTHEADCSS_KEYWORD, winname, compname);
        cf.addParameter(relativeURI);
        cf.addParameter(responseIdVar);
        cf.addParameter(body);
        cf.addParameter(headers);
        cf.addParameter(authentication);
        return cf;
    }


    /*********** <pre>
                    Perform the "HEAD" method on a REST service, and verify the returned content is css before returning the header part.
                
                    
                        This action will send the "HEAD" method with Headers containing "Accept : text/css".
                        It only tells the server what type of content is expected, and it is not guarantee that the server will return it.
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        relativeURI -- Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.<BR/>        responseIdVar -- Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        <BR/>        body -- Optional:YESThe body to send with this REST request.<BR/>        headers -- Optional:YES
                           The custom headers to be included in this REST request.
                        <BR/>        authentication -- Optional:YES
                           The custom authentication/authorization information.
                        
    </UL>

     **********/
    static public ComponentFunction restHeadCSS(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "restHeadCSS.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restHeadCSS.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "restHeadCSS.parameters = null");
        ComponentFunction cf = new ComponentFunction(RESTHEADCSS_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
                    Perform the "HEAD" method (with headers defined by user) on a REST service, and get back the header part.
                
                    
                        This action will send the "HEAD" method with Headers defined by user.
                        It only tells the server what type of content is expected, and it is not guarantee that the server will return it.
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param relativeURI  Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.
     @param responseIdVar  Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        
     @param body  Optional:YESThe body to send with this REST request.
     @param headers  Optional:YES
                           The custom headers to be included in this REST request.
                        
     @param authentication  Optional:YES
                           The custom authentication/authorization information.
                        
     **********/
    static public ComponentFunction restHeadCustom (String winname, String compname, String relativeURI, String responseIdVar, String body, String headers, String authentication) {

        if ( winname == null ) throw new IllegalArgumentException ( "restHeadCustom.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restHeadCustom.compname = null");

        if ( relativeURI == null ) throw new IllegalArgumentException ( "restHeadCustom.relativeURI = null");
        if ( responseIdVar == null ) throw new IllegalArgumentException ( "restHeadCustom.responseIdVar = null");
        ComponentFunction cf = new ComponentFunction(RESTHEADCUSTOM_KEYWORD, winname, compname);
        cf.addParameter(relativeURI);
        cf.addParameter(responseIdVar);
        cf.addParameter(body);
        cf.addParameter(headers);
        cf.addParameter(authentication);
        return cf;
    }


    /*********** <pre>
                    Perform the "HEAD" method (with headers defined by user) on a REST service, and get back the header part.
                
                    
                        This action will send the "HEAD" method with Headers defined by user.
                        It only tells the server what type of content is expected, and it is not guarantee that the server will return it.
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        relativeURI -- Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.<BR/>        responseIdVar -- Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        <BR/>        body -- Optional:YESThe body to send with this REST request.<BR/>        headers -- Optional:YES
                           The custom headers to be included in this REST request.
                        <BR/>        authentication -- Optional:YES
                           The custom authentication/authorization information.
                        
    </UL>

     **********/
    static public ComponentFunction restHeadCustom(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "restHeadCustom.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restHeadCustom.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "restHeadCustom.parameters = null");
        ComponentFunction cf = new ComponentFunction(RESTHEADCUSTOM_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
                    Perform the "HEAD" method on a REST service, and verify the returned content is html before returning the header part.
                
                    
                        This action will send the "HEAD" method with Headers containing "Accept : text/html".
                        It only tells the server what type of content is expected, and it is not guarantee that the server will return it.
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param relativeURI  Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.
     @param responseIdVar  Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        
     @param body  Optional:YESThe body to send with this REST request.
     @param headers  Optional:YES
                           The custom headers to be included in this REST request.
                        
     @param authentication  Optional:YES
                           The custom authentication/authorization information.
                        
     **********/
    static public ComponentFunction restHeadHTML (String winname, String compname, String relativeURI, String responseIdVar, String body, String headers, String authentication) {

        if ( winname == null ) throw new IllegalArgumentException ( "restHeadHTML.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restHeadHTML.compname = null");

        if ( relativeURI == null ) throw new IllegalArgumentException ( "restHeadHTML.relativeURI = null");
        if ( responseIdVar == null ) throw new IllegalArgumentException ( "restHeadHTML.responseIdVar = null");
        ComponentFunction cf = new ComponentFunction(RESTHEADHTML_KEYWORD, winname, compname);
        cf.addParameter(relativeURI);
        cf.addParameter(responseIdVar);
        cf.addParameter(body);
        cf.addParameter(headers);
        cf.addParameter(authentication);
        return cf;
    }


    /*********** <pre>
                    Perform the "HEAD" method on a REST service, and verify the returned content is html before returning the header part.
                
                    
                        This action will send the "HEAD" method with Headers containing "Accept : text/html".
                        It only tells the server what type of content is expected, and it is not guarantee that the server will return it.
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        relativeURI -- Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.<BR/>        responseIdVar -- Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        <BR/>        body -- Optional:YESThe body to send with this REST request.<BR/>        headers -- Optional:YES
                           The custom headers to be included in this REST request.
                        <BR/>        authentication -- Optional:YES
                           The custom authentication/authorization information.
                        
    </UL>

     **********/
    static public ComponentFunction restHeadHTML(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "restHeadHTML.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restHeadHTML.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "restHeadHTML.parameters = null");
        ComponentFunction cf = new ComponentFunction(RESTHEADHTML_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
                    Perform the "HEAD" method on a REST service, and verify the returned content is image before returning the header part.
                
                    
                        This action will send the "HEAD" method with Headers containing "Accept : image".
                        It only tells the server what type of content is expected, and it is not guarantee that the server will return it.
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param relativeURI  Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.
     @param responseIdVar  Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        
     @param body  Optional:YESThe body to send with this REST request.
     @param headers  Optional:YES
                           The custom headers to be included in this REST request.
                        
     @param authentication  Optional:YES
                           The custom authentication/authorization information.
                        
     **********/
    static public ComponentFunction restHeadImage (String winname, String compname, String relativeURI, String responseIdVar, String body, String headers, String authentication) {

        if ( winname == null ) throw new IllegalArgumentException ( "restHeadImage.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restHeadImage.compname = null");

        if ( relativeURI == null ) throw new IllegalArgumentException ( "restHeadImage.relativeURI = null");
        if ( responseIdVar == null ) throw new IllegalArgumentException ( "restHeadImage.responseIdVar = null");
        ComponentFunction cf = new ComponentFunction(RESTHEADIMAGE_KEYWORD, winname, compname);
        cf.addParameter(relativeURI);
        cf.addParameter(responseIdVar);
        cf.addParameter(body);
        cf.addParameter(headers);
        cf.addParameter(authentication);
        return cf;
    }


    /*********** <pre>
                    Perform the "HEAD" method on a REST service, and verify the returned content is image before returning the header part.
                
                    
                        This action will send the "HEAD" method with Headers containing "Accept : image".
                        It only tells the server what type of content is expected, and it is not guarantee that the server will return it.
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        relativeURI -- Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.<BR/>        responseIdVar -- Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        <BR/>        body -- Optional:YESThe body to send with this REST request.<BR/>        headers -- Optional:YES
                           The custom headers to be included in this REST request.
                        <BR/>        authentication -- Optional:YES
                           The custom authentication/authorization information.
                        
    </UL>

     **********/
    static public ComponentFunction restHeadImage(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "restHeadImage.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restHeadImage.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "restHeadImage.parameters = null");
        ComponentFunction cf = new ComponentFunction(RESTHEADIMAGE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
                    Perform the "HEAD" method on a REST service, and verify the returned content is json before returning the header part.
                
                    
                        This action will send the "HEAD" method with Headers containing "Accept : application/json".
                        It only tells the server what type of content is expected, and it is not guarantee that the server will return it.
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param relativeURI  Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.
     @param responseIdVar  Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        
     @param body  Optional:YESThe body to send with this REST request.
     @param headers  Optional:YES
                           The custom headers to be included in this REST request.
                        
     @param authentication  Optional:YES
                           The custom authentication/authorization information.
                        
     **********/
    static public ComponentFunction restHeadJSON (String winname, String compname, String relativeURI, String responseIdVar, String body, String headers, String authentication) {

        if ( winname == null ) throw new IllegalArgumentException ( "restHeadJSON.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restHeadJSON.compname = null");

        if ( relativeURI == null ) throw new IllegalArgumentException ( "restHeadJSON.relativeURI = null");
        if ( responseIdVar == null ) throw new IllegalArgumentException ( "restHeadJSON.responseIdVar = null");
        ComponentFunction cf = new ComponentFunction(RESTHEADJSON_KEYWORD, winname, compname);
        cf.addParameter(relativeURI);
        cf.addParameter(responseIdVar);
        cf.addParameter(body);
        cf.addParameter(headers);
        cf.addParameter(authentication);
        return cf;
    }


    /*********** <pre>
                    Perform the "HEAD" method on a REST service, and verify the returned content is json before returning the header part.
                
                    
                        This action will send the "HEAD" method with Headers containing "Accept : application/json".
                        It only tells the server what type of content is expected, and it is not guarantee that the server will return it.
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        relativeURI -- Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.<BR/>        responseIdVar -- Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        <BR/>        body -- Optional:YESThe body to send with this REST request.<BR/>        headers -- Optional:YES
                           The custom headers to be included in this REST request.
                        <BR/>        authentication -- Optional:YES
                           The custom authentication/authorization information.
                        
    </UL>

     **********/
    static public ComponentFunction restHeadJSON(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "restHeadJSON.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restHeadJSON.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "restHeadJSON.parameters = null");
        ComponentFunction cf = new ComponentFunction(RESTHEADJSON_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
                    Perform the "HEAD" method on a REST service, and verify the returned content is javascript before returning the header part.
                
                    
                        This action will send the "HEAD" method with Headers containing "Accept : application/javascript".
                        It only tells the server what type of content is expected, and it is not guarantee that the server will return it.
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param relativeURI  Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.
     @param responseIdVar  Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        
     @param body  Optional:YESThe body to send with this REST request.
     @param headers  Optional:YES
                           The custom headers to be included in this REST request.
                        
     @param authentication  Optional:YES
                           The custom authentication/authorization information.
                        
     **********/
    static public ComponentFunction restHeadScript (String winname, String compname, String relativeURI, String responseIdVar, String body, String headers, String authentication) {

        if ( winname == null ) throw new IllegalArgumentException ( "restHeadScript.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restHeadScript.compname = null");

        if ( relativeURI == null ) throw new IllegalArgumentException ( "restHeadScript.relativeURI = null");
        if ( responseIdVar == null ) throw new IllegalArgumentException ( "restHeadScript.responseIdVar = null");
        ComponentFunction cf = new ComponentFunction(RESTHEADSCRIPT_KEYWORD, winname, compname);
        cf.addParameter(relativeURI);
        cf.addParameter(responseIdVar);
        cf.addParameter(body);
        cf.addParameter(headers);
        cf.addParameter(authentication);
        return cf;
    }


    /*********** <pre>
                    Perform the "HEAD" method on a REST service, and verify the returned content is javascript before returning the header part.
                
                    
                        This action will send the "HEAD" method with Headers containing "Accept : application/javascript".
                        It only tells the server what type of content is expected, and it is not guarantee that the server will return it.
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        relativeURI -- Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.<BR/>        responseIdVar -- Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        <BR/>        body -- Optional:YESThe body to send with this REST request.<BR/>        headers -- Optional:YES
                           The custom headers to be included in this REST request.
                        <BR/>        authentication -- Optional:YES
                           The custom authentication/authorization information.
                        
    </UL>

     **********/
    static public ComponentFunction restHeadScript(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "restHeadScript.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restHeadScript.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "restHeadScript.parameters = null");
        ComponentFunction cf = new ComponentFunction(RESTHEADSCRIPT_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
                    Perform the "HEAD" method on a REST service, and verify the returned content is text before returning the header part.
                
                    
                        This action will send the "HEAD" method with Headers containing "Accept : text/plain".
                        It only tells the server what type of content is expected, and it is not guarantee that the server will return it.
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param relativeURI  Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.
     @param responseIdVar  Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        
     @param body  Optional:YESThe body to send with this REST request.
     @param headers  Optional:YES
                           The custom headers to be included in this REST request.
                        
     @param authentication  Optional:YES
                           The custom authentication/authorization information.
                        
     **********/
    static public ComponentFunction restHeadText (String winname, String compname, String relativeURI, String responseIdVar, String body, String headers, String authentication) {

        if ( winname == null ) throw new IllegalArgumentException ( "restHeadText.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restHeadText.compname = null");

        if ( relativeURI == null ) throw new IllegalArgumentException ( "restHeadText.relativeURI = null");
        if ( responseIdVar == null ) throw new IllegalArgumentException ( "restHeadText.responseIdVar = null");
        ComponentFunction cf = new ComponentFunction(RESTHEADTEXT_KEYWORD, winname, compname);
        cf.addParameter(relativeURI);
        cf.addParameter(responseIdVar);
        cf.addParameter(body);
        cf.addParameter(headers);
        cf.addParameter(authentication);
        return cf;
    }


    /*********** <pre>
                    Perform the "HEAD" method on a REST service, and verify the returned content is text before returning the header part.
                
                    
                        This action will send the "HEAD" method with Headers containing "Accept : text/plain".
                        It only tells the server what type of content is expected, and it is not guarantee that the server will return it.
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        relativeURI -- Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.<BR/>        responseIdVar -- Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        <BR/>        body -- Optional:YESThe body to send with this REST request.<BR/>        headers -- Optional:YES
                           The custom headers to be included in this REST request.
                        <BR/>        authentication -- Optional:YES
                           The custom authentication/authorization information.
                        
    </UL>

     **********/
    static public ComponentFunction restHeadText(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "restHeadText.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restHeadText.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "restHeadText.parameters = null");
        ComponentFunction cf = new ComponentFunction(RESTHEADTEXT_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
                    Perform the "HEAD" method on a REST service, and verify the returned content is xml before returning the header part.
                
                    
                        This action will send the "HEAD" method with Headers containing "Accept : text/xml".
                        It only tells the server what type of content is expected, and it is not guarantee that the server will return it.
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param relativeURI  Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.
     @param responseIdVar  Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        
     @param body  Optional:YESThe body to send with this REST request.
     @param headers  Optional:YES
                           The custom headers to be included in this REST request.
                        
     @param authentication  Optional:YES
                           The custom authentication/authorization information.
                        
     **********/
    static public ComponentFunction restHeadXML (String winname, String compname, String relativeURI, String responseIdVar, String body, String headers, String authentication) {

        if ( winname == null ) throw new IllegalArgumentException ( "restHeadXML.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restHeadXML.compname = null");

        if ( relativeURI == null ) throw new IllegalArgumentException ( "restHeadXML.relativeURI = null");
        if ( responseIdVar == null ) throw new IllegalArgumentException ( "restHeadXML.responseIdVar = null");
        ComponentFunction cf = new ComponentFunction(RESTHEADXML_KEYWORD, winname, compname);
        cf.addParameter(relativeURI);
        cf.addParameter(responseIdVar);
        cf.addParameter(body);
        cf.addParameter(headers);
        cf.addParameter(authentication);
        return cf;
    }


    /*********** <pre>
                    Perform the "HEAD" method on a REST service, and verify the returned content is xml before returning the header part.
                
                    
                        This action will send the "HEAD" method with Headers containing "Accept : text/xml".
                        It only tells the server what type of content is expected, and it is not guarantee that the server will return it.
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        relativeURI -- Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.<BR/>        responseIdVar -- Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        <BR/>        body -- Optional:YESThe body to send with this REST request.<BR/>        headers -- Optional:YES
                           The custom headers to be included in this REST request.
                        <BR/>        authentication -- Optional:YES
                           The custom authentication/authorization information.
                        
    </UL>

     **********/
    static public ComponentFunction restHeadXML(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "restHeadXML.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restHeadXML.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "restHeadXML.parameters = null");
        ComponentFunction cf = new ComponentFunction(RESTHEADXML_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>    </pre>    Supporting Engines:
    <P/><UL>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     **********/
    static public ComponentFunction restPatchBinary (String winname, String compname) {

        if ( winname == null ) throw new IllegalArgumentException ( "restPatchBinary.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restPatchBinary.compname = null");
        ComponentFunction cf = new ComponentFunction(RESTPATCHBINARY_KEYWORD, winname, compname);
        return cf;
    }


    /*********** <pre>    </pre>    Supporting Engines:
    <P/><UL>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     **********/
    static public ComponentFunction restPatchCSS (String winname, String compname) {

        if ( winname == null ) throw new IllegalArgumentException ( "restPatchCSS.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restPatchCSS.compname = null");
        ComponentFunction cf = new ComponentFunction(RESTPATCHCSS_KEYWORD, winname, compname);
        return cf;
    }


    /*********** <pre>    </pre>    Supporting Engines:
    <P/><UL>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     **********/
    static public ComponentFunction restPatchCustom (String winname, String compname) {

        if ( winname == null ) throw new IllegalArgumentException ( "restPatchCustom.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restPatchCustom.compname = null");
        ComponentFunction cf = new ComponentFunction(RESTPATCHCUSTOM_KEYWORD, winname, compname);
        return cf;
    }


    /*********** <pre>    </pre>    Supporting Engines:
    <P/><UL>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     **********/
    static public ComponentFunction restPatchHTML (String winname, String compname) {

        if ( winname == null ) throw new IllegalArgumentException ( "restPatchHTML.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restPatchHTML.compname = null");
        ComponentFunction cf = new ComponentFunction(RESTPATCHHTML_KEYWORD, winname, compname);
        return cf;
    }


    /*********** <pre>    </pre>    Supporting Engines:
    <P/><UL>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     **********/
    static public ComponentFunction restPatchImage (String winname, String compname) {

        if ( winname == null ) throw new IllegalArgumentException ( "restPatchImage.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restPatchImage.compname = null");
        ComponentFunction cf = new ComponentFunction(RESTPATCHIMAGE_KEYWORD, winname, compname);
        return cf;
    }


    /*********** <pre>    </pre>    Supporting Engines:
    <P/><UL>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     **********/
    static public ComponentFunction restPatchJSON (String winname, String compname) {

        if ( winname == null ) throw new IllegalArgumentException ( "restPatchJSON.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restPatchJSON.compname = null");
        ComponentFunction cf = new ComponentFunction(RESTPATCHJSON_KEYWORD, winname, compname);
        return cf;
    }


    /*********** <pre>    </pre>    Supporting Engines:
    <P/><UL>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     **********/
    static public ComponentFunction restPatchScript (String winname, String compname) {

        if ( winname == null ) throw new IllegalArgumentException ( "restPatchScript.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restPatchScript.compname = null");
        ComponentFunction cf = new ComponentFunction(RESTPATCHSCRIPT_KEYWORD, winname, compname);
        return cf;
    }


    /*********** <pre>    </pre>    Supporting Engines:
    <P/><UL>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     **********/
    static public ComponentFunction restPatchText (String winname, String compname) {

        if ( winname == null ) throw new IllegalArgumentException ( "restPatchText.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restPatchText.compname = null");
        ComponentFunction cf = new ComponentFunction(RESTPATCHTEXT_KEYWORD, winname, compname);
        return cf;
    }


    /*********** <pre>
                    Perform the "PATCH" method on a REST service, and verify the returned status code is 200 or 204.
                
                    
                        This action will send the "PATCH" method with Headers containing "Content-Type : text/xml".
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param relativeURI  Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.
     @param responseIdVar  Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        
     @param body  Optional:YESThe body to send with this REST request.
     @param headers  Optional:YES
                           The custom headers to be included in this REST request.
                        
     @param authentication  Optional:YES
                           The custom authentication/authorization information.
                        
     **********/
    static public ComponentFunction restPatchXML (String winname, String compname, String relativeURI, String responseIdVar, String body, String headers, String authentication) {

        if ( winname == null ) throw new IllegalArgumentException ( "restPatchXML.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restPatchXML.compname = null");

        if ( relativeURI == null ) throw new IllegalArgumentException ( "restPatchXML.relativeURI = null");
        if ( responseIdVar == null ) throw new IllegalArgumentException ( "restPatchXML.responseIdVar = null");
        ComponentFunction cf = new ComponentFunction(RESTPATCHXML_KEYWORD, winname, compname);
        cf.addParameter(relativeURI);
        cf.addParameter(responseIdVar);
        cf.addParameter(body);
        cf.addParameter(headers);
        cf.addParameter(authentication);
        return cf;
    }


    /*********** <pre>
                    Perform the "PATCH" method on a REST service, and verify the returned status code is 200 or 204.
                
                    
                        This action will send the "PATCH" method with Headers containing "Content-Type : text/xml".
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        relativeURI -- Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.<BR/>        responseIdVar -- Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        <BR/>        body -- Optional:YESThe body to send with this REST request.<BR/>        headers -- Optional:YES
                           The custom headers to be included in this REST request.
                        <BR/>        authentication -- Optional:YES
                           The custom authentication/authorization information.
                        
    </UL>

     **********/
    static public ComponentFunction restPatchXML(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "restPatchXML.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restPatchXML.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "restPatchXML.parameters = null");
        ComponentFunction cf = new ComponentFunction(RESTPATCHXML_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>    </pre>    Supporting Engines:
    <P/><UL>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     **********/
    static public ComponentFunction restPostBinary (String winname, String compname) {

        if ( winname == null ) throw new IllegalArgumentException ( "restPostBinary.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restPostBinary.compname = null");
        ComponentFunction cf = new ComponentFunction(RESTPOSTBINARY_KEYWORD, winname, compname);
        return cf;
    }


    /*********** <pre>    </pre>    Supporting Engines:
    <P/><UL>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     **********/
    static public ComponentFunction restPostCSS (String winname, String compname) {

        if ( winname == null ) throw new IllegalArgumentException ( "restPostCSS.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restPostCSS.compname = null");
        ComponentFunction cf = new ComponentFunction(RESTPOSTCSS_KEYWORD, winname, compname);
        return cf;
    }


    /*********** <pre>    </pre>    Supporting Engines:
    <P/><UL>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     **********/
    static public ComponentFunction restPostCustom (String winname, String compname) {

        if ( winname == null ) throw new IllegalArgumentException ( "restPostCustom.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restPostCustom.compname = null");
        ComponentFunction cf = new ComponentFunction(RESTPOSTCUSTOM_KEYWORD, winname, compname);
        return cf;
    }


    /*********** <pre>    </pre>    Supporting Engines:
    <P/><UL>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     **********/
    static public ComponentFunction restPostHTML (String winname, String compname) {

        if ( winname == null ) throw new IllegalArgumentException ( "restPostHTML.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restPostHTML.compname = null");
        ComponentFunction cf = new ComponentFunction(RESTPOSTHTML_KEYWORD, winname, compname);
        return cf;
    }


    /*********** <pre>    </pre>    Supporting Engines:
    <P/><UL>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     **********/
    static public ComponentFunction restPostImage (String winname, String compname) {

        if ( winname == null ) throw new IllegalArgumentException ( "restPostImage.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restPostImage.compname = null");
        ComponentFunction cf = new ComponentFunction(RESTPOSTIMAGE_KEYWORD, winname, compname);
        return cf;
    }


    /*********** <pre>    </pre>    Supporting Engines:
    <P/><UL>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     **********/
    static public ComponentFunction restPostJSON (String winname, String compname) {

        if ( winname == null ) throw new IllegalArgumentException ( "restPostJSON.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restPostJSON.compname = null");
        ComponentFunction cf = new ComponentFunction(RESTPOSTJSON_KEYWORD, winname, compname);
        return cf;
    }


    /*********** <pre>    </pre>    Supporting Engines:
    <P/><UL>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     **********/
    static public ComponentFunction restPostScript (String winname, String compname) {

        if ( winname == null ) throw new IllegalArgumentException ( "restPostScript.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restPostScript.compname = null");
        ComponentFunction cf = new ComponentFunction(RESTPOSTSCRIPT_KEYWORD, winname, compname);
        return cf;
    }


    /*********** <pre>    </pre>    Supporting Engines:
    <P/><UL>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     **********/
    static public ComponentFunction restPostText (String winname, String compname) {

        if ( winname == null ) throw new IllegalArgumentException ( "restPostText.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restPostText.compname = null");
        ComponentFunction cf = new ComponentFunction(RESTPOSTTEXT_KEYWORD, winname, compname);
        return cf;
    }


    /*********** <pre>
                    Perform the "POST" method on a REST service, and verify the returned status code is 201 ("created").
                
                    
                        This action will send the "POST" method with Headers containing "Content-Type : text/xml".
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param relativeURI  Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.
     @param responseIdVar  Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        
     @param body  Optional:YESThe body to send with this REST request.
     @param headers  Optional:YES
                           The custom headers to be included in this REST request.
                        
     @param authentication  Optional:YES
                           The custom authentication/authorization information.
                        
     **********/
    static public ComponentFunction restPostXML (String winname, String compname, String relativeURI, String responseIdVar, String body, String headers, String authentication) {

        if ( winname == null ) throw new IllegalArgumentException ( "restPostXML.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restPostXML.compname = null");

        if ( relativeURI == null ) throw new IllegalArgumentException ( "restPostXML.relativeURI = null");
        if ( responseIdVar == null ) throw new IllegalArgumentException ( "restPostXML.responseIdVar = null");
        ComponentFunction cf = new ComponentFunction(RESTPOSTXML_KEYWORD, winname, compname);
        cf.addParameter(relativeURI);
        cf.addParameter(responseIdVar);
        cf.addParameter(body);
        cf.addParameter(headers);
        cf.addParameter(authentication);
        return cf;
    }


    /*********** <pre>
                    Perform the "POST" method on a REST service, and verify the returned status code is 201 ("created").
                
                    
                        This action will send the "POST" method with Headers containing "Content-Type : text/xml".
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        relativeURI -- Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.<BR/>        responseIdVar -- Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        <BR/>        body -- Optional:YESThe body to send with this REST request.<BR/>        headers -- Optional:YES
                           The custom headers to be included in this REST request.
                        <BR/>        authentication -- Optional:YES
                           The custom authentication/authorization information.
                        
    </UL>

     **********/
    static public ComponentFunction restPostXML(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "restPostXML.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restPostXML.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "restPostXML.parameters = null");
        ComponentFunction cf = new ComponentFunction(RESTPOSTXML_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
                    Put binary content. Not implemented yet.
                    </pre>    Supporting Engines:
    <P/><UL>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     **********/
    static public ComponentFunction restPutBinary (String winname, String compname) {

        if ( winname == null ) throw new IllegalArgumentException ( "restPutBinary.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restPutBinary.compname = null");
        ComponentFunction cf = new ComponentFunction(RESTPUTBINARY_KEYWORD, winname, compname);
        return cf;
    }


    /*********** <pre>
                    Perform the "PUT" method on a REST service, and verify the returned status code is 201 ("created") or 200 or 204.
                
                    
                        This action will send the "PUT" method with Headers containing "Content-Type : text/css".
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param relativeURI  Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.
     @param responseIdVar  Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        
     @param body  Optional:YESThe body to send with this REST request.
     @param headers  Optional:YES
                           The custom headers to be included in this REST request.
                        
     @param authentication  Optional:YES
                           The custom authentication/authorization information.
                        
     **********/
    static public ComponentFunction restPutCSS (String winname, String compname, String relativeURI, String responseIdVar, String body, String headers, String authentication) {

        if ( winname == null ) throw new IllegalArgumentException ( "restPutCSS.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restPutCSS.compname = null");

        if ( relativeURI == null ) throw new IllegalArgumentException ( "restPutCSS.relativeURI = null");
        if ( responseIdVar == null ) throw new IllegalArgumentException ( "restPutCSS.responseIdVar = null");
        ComponentFunction cf = new ComponentFunction(RESTPUTCSS_KEYWORD, winname, compname);
        cf.addParameter(relativeURI);
        cf.addParameter(responseIdVar);
        cf.addParameter(body);
        cf.addParameter(headers);
        cf.addParameter(authentication);
        return cf;
    }


    /*********** <pre>
                    Perform the "PUT" method on a REST service, and verify the returned status code is 201 ("created") or 200 or 204.
                
                    
                        This action will send the "PUT" method with Headers containing "Content-Type : text/css".
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        relativeURI -- Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.<BR/>        responseIdVar -- Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        <BR/>        body -- Optional:YESThe body to send with this REST request.<BR/>        headers -- Optional:YES
                           The custom headers to be included in this REST request.
                        <BR/>        authentication -- Optional:YES
                           The custom authentication/authorization information.
                        
    </UL>

     **********/
    static public ComponentFunction restPutCSS(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "restPutCSS.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restPutCSS.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "restPutCSS.parameters = null");
        ComponentFunction cf = new ComponentFunction(RESTPUTCSS_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
                    Perform the "PUT" method on a REST service, and verify the returned status code is 201 ("created") or 200 or 204.
                
                    
                        This action will send the "PUT" method with Headers defined by user.
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param relativeURI  Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.
     @param responseIdVar  Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        
     @param body  Optional:YESThe body to send with this REST request.
     @param headers  Optional:YES
                           The custom headers to be included in this REST request.
                        
     @param authentication  Optional:YES
                           The custom authentication/authorization information.
                        
     **********/
    static public ComponentFunction restPutCustom (String winname, String compname, String relativeURI, String responseIdVar, String body, String headers, String authentication) {

        if ( winname == null ) throw new IllegalArgumentException ( "restPutCustom.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restPutCustom.compname = null");

        if ( relativeURI == null ) throw new IllegalArgumentException ( "restPutCustom.relativeURI = null");
        if ( responseIdVar == null ) throw new IllegalArgumentException ( "restPutCustom.responseIdVar = null");
        ComponentFunction cf = new ComponentFunction(RESTPUTCUSTOM_KEYWORD, winname, compname);
        cf.addParameter(relativeURI);
        cf.addParameter(responseIdVar);
        cf.addParameter(body);
        cf.addParameter(headers);
        cf.addParameter(authentication);
        return cf;
    }


    /*********** <pre>
                    Perform the "PUT" method on a REST service, and verify the returned status code is 201 ("created") or 200 or 204.
                
                    
                        This action will send the "PUT" method with Headers defined by user.
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        relativeURI -- Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.<BR/>        responseIdVar -- Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        <BR/>        body -- Optional:YESThe body to send with this REST request.<BR/>        headers -- Optional:YES
                           The custom headers to be included in this REST request.
                        <BR/>        authentication -- Optional:YES
                           The custom authentication/authorization information.
                        
    </UL>

     **********/
    static public ComponentFunction restPutCustom(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "restPutCustom.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restPutCustom.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "restPutCustom.parameters = null");
        ComponentFunction cf = new ComponentFunction(RESTPUTCUSTOM_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
                    Perform the "PUT" method on a REST service, and verify the returned status code is 201 ("created") or 200 or 204.
                
                    
                        This action will send the "PUT" method with Headers containing "Content-Type : text/html".
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param relativeURI  Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.
     @param responseIdVar  Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        
     @param body  Optional:YESThe body to send with this REST request.
     @param headers  Optional:YES
                           The custom headers to be included in this REST request.
                        
     @param authentication  Optional:YES
                           The custom authentication/authorization information.
                        
     **********/
    static public ComponentFunction restPutHTML (String winname, String compname, String relativeURI, String responseIdVar, String body, String headers, String authentication) {

        if ( winname == null ) throw new IllegalArgumentException ( "restPutHTML.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restPutHTML.compname = null");

        if ( relativeURI == null ) throw new IllegalArgumentException ( "restPutHTML.relativeURI = null");
        if ( responseIdVar == null ) throw new IllegalArgumentException ( "restPutHTML.responseIdVar = null");
        ComponentFunction cf = new ComponentFunction(RESTPUTHTML_KEYWORD, winname, compname);
        cf.addParameter(relativeURI);
        cf.addParameter(responseIdVar);
        cf.addParameter(body);
        cf.addParameter(headers);
        cf.addParameter(authentication);
        return cf;
    }


    /*********** <pre>
                    Perform the "PUT" method on a REST service, and verify the returned status code is 201 ("created") or 200 or 204.
                
                    
                        This action will send the "PUT" method with Headers containing "Content-Type : text/html".
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        relativeURI -- Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.<BR/>        responseIdVar -- Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        <BR/>        body -- Optional:YESThe body to send with this REST request.<BR/>        headers -- Optional:YES
                           The custom headers to be included in this REST request.
                        <BR/>        authentication -- Optional:YES
                           The custom authentication/authorization information.
                        
    </UL>

     **********/
    static public ComponentFunction restPutHTML(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "restPutHTML.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restPutHTML.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "restPutHTML.parameters = null");
        ComponentFunction cf = new ComponentFunction(RESTPUTHTML_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
                    Put image content. Not implemented yet.
                    </pre>    Supporting Engines:
    <P/><UL>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     **********/
    static public ComponentFunction restPutImage (String winname, String compname) {

        if ( winname == null ) throw new IllegalArgumentException ( "restPutImage.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restPutImage.compname = null");
        ComponentFunction cf = new ComponentFunction(RESTPUTIMAGE_KEYWORD, winname, compname);
        return cf;
    }


    /*********** <pre>
                    Perform the "PUT" method on a REST service, and verify the returned status code is 201 ("created") or 200 or 204.
                
                    
                        This action will send the "PUT" method with Headers containing "Content-Type : application/json".
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param relativeURI  Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.
     @param responseIdVar  Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        
     @param body  Optional:YESThe body to send with this REST request.
     @param headers  Optional:YES
                           The custom headers to be included in this REST request.
                        
     @param authentication  Optional:YES
                           The custom authentication/authorization information.
                        
     **********/
    static public ComponentFunction restPutJSON (String winname, String compname, String relativeURI, String responseIdVar, String body, String headers, String authentication) {

        if ( winname == null ) throw new IllegalArgumentException ( "restPutJSON.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restPutJSON.compname = null");

        if ( relativeURI == null ) throw new IllegalArgumentException ( "restPutJSON.relativeURI = null");
        if ( responseIdVar == null ) throw new IllegalArgumentException ( "restPutJSON.responseIdVar = null");
        ComponentFunction cf = new ComponentFunction(RESTPUTJSON_KEYWORD, winname, compname);
        cf.addParameter(relativeURI);
        cf.addParameter(responseIdVar);
        cf.addParameter(body);
        cf.addParameter(headers);
        cf.addParameter(authentication);
        return cf;
    }


    /*********** <pre>
                    Perform the "PUT" method on a REST service, and verify the returned status code is 201 ("created") or 200 or 204.
                
                    
                        This action will send the "PUT" method with Headers containing "Content-Type : application/json".
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        relativeURI -- Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.<BR/>        responseIdVar -- Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        <BR/>        body -- Optional:YESThe body to send with this REST request.<BR/>        headers -- Optional:YES
                           The custom headers to be included in this REST request.
                        <BR/>        authentication -- Optional:YES
                           The custom authentication/authorization information.
                        
    </UL>

     **********/
    static public ComponentFunction restPutJSON(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "restPutJSON.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restPutJSON.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "restPutJSON.parameters = null");
        ComponentFunction cf = new ComponentFunction(RESTPUTJSON_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
                    Perform the "PUT" method on a REST service, and verify the returned status code is 201 ("created") or 200 or 204.
                
                    
                        This action will send the "PUT" method with Headers containing "Content-Type : application/javascript".
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param relativeURI  Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.
     @param responseIdVar  Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        
     @param body  Optional:YESThe body to send with this REST request.
     @param headers  Optional:YES
                           The custom headers to be included in this REST request.
                        
     @param authentication  Optional:YES
                           The custom authentication/authorization information.
                        
     **********/
    static public ComponentFunction restPutScript (String winname, String compname, String relativeURI, String responseIdVar, String body, String headers, String authentication) {

        if ( winname == null ) throw new IllegalArgumentException ( "restPutScript.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restPutScript.compname = null");

        if ( relativeURI == null ) throw new IllegalArgumentException ( "restPutScript.relativeURI = null");
        if ( responseIdVar == null ) throw new IllegalArgumentException ( "restPutScript.responseIdVar = null");
        ComponentFunction cf = new ComponentFunction(RESTPUTSCRIPT_KEYWORD, winname, compname);
        cf.addParameter(relativeURI);
        cf.addParameter(responseIdVar);
        cf.addParameter(body);
        cf.addParameter(headers);
        cf.addParameter(authentication);
        return cf;
    }


    /*********** <pre>
                    Perform the "PUT" method on a REST service, and verify the returned status code is 201 ("created") or 200 or 204.
                
                    
                        This action will send the "PUT" method with Headers containing "Content-Type : application/javascript".
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        relativeURI -- Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.<BR/>        responseIdVar -- Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        <BR/>        body -- Optional:YESThe body to send with this REST request.<BR/>        headers -- Optional:YES
                           The custom headers to be included in this REST request.
                        <BR/>        authentication -- Optional:YES
                           The custom authentication/authorization information.
                        
    </UL>

     **********/
    static public ComponentFunction restPutScript(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "restPutScript.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restPutScript.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "restPutScript.parameters = null");
        ComponentFunction cf = new ComponentFunction(RESTPUTSCRIPT_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
                    Perform the "PUT" method on a REST service, and verify the returned status code is 201 ("created") or 200 or 204.
                
                    
                        This action will send the "PUT" method with Headers containing "Content-Type : text/plain".
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param relativeURI  Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.
     @param responseIdVar  Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        
     @param body  Optional:YESThe body to send with this REST request.
     @param headers  Optional:YES
                           The custom headers to be included in this REST request.
                        
     @param authentication  Optional:YES
                           The custom authentication/authorization information.
                        
     **********/
    static public ComponentFunction restPutText (String winname, String compname, String relativeURI, String responseIdVar, String body, String headers, String authentication) {

        if ( winname == null ) throw new IllegalArgumentException ( "restPutText.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restPutText.compname = null");

        if ( relativeURI == null ) throw new IllegalArgumentException ( "restPutText.relativeURI = null");
        if ( responseIdVar == null ) throw new IllegalArgumentException ( "restPutText.responseIdVar = null");
        ComponentFunction cf = new ComponentFunction(RESTPUTTEXT_KEYWORD, winname, compname);
        cf.addParameter(relativeURI);
        cf.addParameter(responseIdVar);
        cf.addParameter(body);
        cf.addParameter(headers);
        cf.addParameter(authentication);
        return cf;
    }


    /*********** <pre>
                    Perform the "PUT" method on a REST service, and verify the returned status code is 201 ("created") or 200 or 204.
                
                    
                        This action will send the "PUT" method with Headers containing "Content-Type : text/plain".
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        relativeURI -- Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.<BR/>        responseIdVar -- Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        <BR/>        body -- Optional:YESThe body to send with this REST request.<BR/>        headers -- Optional:YES
                           The custom headers to be included in this REST request.
                        <BR/>        authentication -- Optional:YES
                           The custom authentication/authorization information.
                        
    </UL>

     **********/
    static public ComponentFunction restPutText(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "restPutText.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restPutText.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "restPutText.parameters = null");
        ComponentFunction cf = new ComponentFunction(RESTPUTTEXT_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
                    Perform the "PUT" method on a REST service, and verify the returned status code is 201 ("created") or 200 or 204.
                
                    
                        This action will send the "PUT" method with Headers containing "Content-Type : text/xml".
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param relativeURI  Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.
     @param responseIdVar  Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        
     @param body  Optional:YESThe body to send with this REST request.
     @param headers  Optional:YES
                           The custom headers to be included in this REST request.
                        
     @param authentication  Optional:YES
                           The custom authentication/authorization information.
                        
     **********/
    static public ComponentFunction restPutXML (String winname, String compname, String relativeURI, String responseIdVar, String body, String headers, String authentication) {

        if ( winname == null ) throw new IllegalArgumentException ( "restPutXML.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restPutXML.compname = null");

        if ( relativeURI == null ) throw new IllegalArgumentException ( "restPutXML.relativeURI = null");
        if ( responseIdVar == null ) throw new IllegalArgumentException ( "restPutXML.responseIdVar = null");
        ComponentFunction cf = new ComponentFunction(RESTPUTXML_KEYWORD, winname, compname);
        cf.addParameter(relativeURI);
        cf.addParameter(responseIdVar);
        cf.addParameter(body);
        cf.addParameter(headers);
        cf.addParameter(authentication);
        return cf;
    }


    /*********** <pre>
                    Perform the "PUT" method on a REST service, and verify the returned status code is 201 ("created") or 200 or 204.
                
                    
                        This action will send the "PUT" method with Headers containing "Content-Type : text/xml".
                    
                    
                        If the field SessionIDItem is provided in the map, the keyword RestStartServiceSession SHOULD be executed 
                        before executing this action, which will be handled within a session.
                        Otherwise, it will be considered as a one-shot connection, 
                        and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        relativeURI -- Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.<BR/>        responseIdVar -- Optional:NO
                          The name of the variable holding "response ID", which is used by rest driver commands to verify/delete response.  
                        <BR/>        body -- Optional:YESThe body to send with this REST request.<BR/>        headers -- Optional:YES
                           The custom headers to be included in this REST request.
                        <BR/>        authentication -- Optional:YES
                           The custom authentication/authorization information.
                        
    </UL>

     **********/
    static public ComponentFunction restPutXML(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "restPutXML.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restPutXML.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "restPutXML.parameters = null");
        ComponentFunction cf = new ComponentFunction(RESTPUTXML_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
                    Perform an HTTP method on a REST service.
                
                    If the test field SessionIDItem is provided, the keyword RestStartServiceSession SHOULD be executed 
                    before executing this action, which will be handled within a session.
                    Otherwise, it will be considered as a one-shot connection, 
                    and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param hTTPMethod  Optional:NOThe HTTP method to execute.
     @param relativeURI  Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.
     @param responseIdVar  Optional:NO
                           The name of the variable holding the ID (generated internally), which is used to
                           get the Response Object from the internal Map.
                        
     @param body  Optional:YESThe body to send with this REST request.
     @param headers  Optional:YES
                           The custom headers to be included in this REST request.
                        
     @param authentication  Optional:YES
                           The custom authentication/authorization information.
                        
     **********/
    static public ComponentFunction restRequest (String winname, String compname, String hTTPMethod, String relativeURI, String responseIdVar, String body, String headers, String authentication) {

        if ( winname == null ) throw new IllegalArgumentException ( "restRequest.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restRequest.compname = null");

        if ( hTTPMethod == null ) throw new IllegalArgumentException ( "restRequest.hTTPMethod = null");
        if ( relativeURI == null ) throw new IllegalArgumentException ( "restRequest.relativeURI = null");
        if ( responseIdVar == null ) throw new IllegalArgumentException ( "restRequest.responseIdVar = null");
        ComponentFunction cf = new ComponentFunction(RESTREQUEST_KEYWORD, winname, compname);
        cf.addParameter(hTTPMethod);
        cf.addParameter(relativeURI);
        cf.addParameter(responseIdVar);
        cf.addParameter(body);
        cf.addParameter(headers);
        cf.addParameter(authentication);
        return cf;
    }


    /*********** <pre>
                    Perform an HTTP method on a REST service.
                
                    If the test field SessionIDItem is provided, the keyword RestStartServiceSession SHOULD be executed 
                    before executing this action, which will be handled within a session.
                    Otherwise, it will be considered as a one-shot connection, 
                    and NO RestStartServiceSession needs to be called and user may need to provide authentication information.
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        hTTPMethod -- Optional:NOThe HTTP method to execute.<BR/>        relativeURI -- Optional:NOThe relative URI combined with a base-URL (stored in a session) to form a REST service URL.<BR/>        responseIdVar -- Optional:NO
                           The name of the variable holding the ID (generated internally), which is used to
                           get the Response Object from the internal Map.
                        <BR/>        body -- Optional:YESThe body to send with this REST request.<BR/>        headers -- Optional:YES
                           The custom headers to be included in this REST request.
                        <BR/>        authentication -- Optional:YES
                           The custom authentication/authorization information.
                        
    </UL>

     **********/
    static public ComponentFunction restRequest(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "restRequest.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restRequest.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "restRequest.parameters = null");
        ComponentFunction cf = new ComponentFunction(RESTREQUEST_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
                    Start a session for a REST service.
                
                    Currently the "base URL" and "authentication information" will be stored for the opened session.
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param baseURL  Optional:NOThe base URL to be stored with a session.
     @param authentication  Optional:YES
                           The file holding authentication information to be used during this session.
                        
     **********/
    static public ComponentFunction restStartServiceSession (String winname, String compname, String baseURL, String authentication) {

        if ( winname == null ) throw new IllegalArgumentException ( "restStartServiceSession.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restStartServiceSession.compname = null");

        if ( baseURL == null ) throw new IllegalArgumentException ( "restStartServiceSession.baseURL = null");
        ComponentFunction cf = new ComponentFunction(RESTSTARTSERVICESESSION_KEYWORD, winname, compname);
        cf.addParameter(baseURL);
        cf.addParameter(authentication);
        return cf;
    }


    /*********** <pre>
                    Start a session for a REST service.
                
                    Currently the "base URL" and "authentication information" will be stored for the opened session.
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        baseURL -- Optional:NOThe base URL to be stored with a session.<BR/>        authentication -- Optional:YES
                           The file holding authentication information to be used during this session.
                        
    </UL>

     **********/
    static public ComponentFunction restStartServiceSession(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "restStartServiceSession.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "restStartServiceSession.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "restStartServiceSession.parameters = null");
        ComponentFunction cf = new ComponentFunction(RESTSTARTSERVICESESSION_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


}
