
/******************************************************************************
 * JavaTreeFunctions.java
 *
 * Copyright (c) by SAS Institute Inc., Cary, NC 27513
 * General Public License: http://www.opensource.org/licenses/gpl-license.php
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   JavaTreeFunctions.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaCommandModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe JavaTreeFunctions.xml XSLJavaCommandModel.xsl -o JavaTreeFunctions.java
 *
 ******************************************************************************/ 
package org.safs.model.commands;


import org.safs.model.ComponentFunction;


public class JavaTreeFunctions {

    /*****************
    Private Singleton Instance
    ****************/
    private static final JavaTreeFunctions singleton = new JavaTreeFunctions(); 

    /*****************
    Private Constructor
    Static class needing no instantiation.
    ****************/
    private JavaTreeFunctions() {}

    /*****************
    public Singleton to access class static methods via instance
    ****************/
    public static JavaTreeFunctions getInstance() { return singleton;}

    /** "CaptureTreeDataToFile" */
    static public final String CAPTURETREEDATATOFILE_KEYWORD = "CaptureTreeDataToFile";
    /** "ClickTextNode" */
    static public final String CLICKTEXTNODE_KEYWORD = "ClickTextNode";
    /** "ClickUnverifiedTextNode" */
    static public final String CLICKUNVERIFIEDTEXTNODE_KEYWORD = "ClickUnverifiedTextNode";
    /** "Collapse" */
    static public final String COLLAPSE_KEYWORD = "Collapse";
    /** "CollapsePartialTextNode" */
    static public final String COLLAPSEPARTIALTEXTNODE_KEYWORD = "CollapsePartialTextNode";
    /** "CollapseTextNode" */
    static public final String COLLAPSETEXTNODE_KEYWORD = "CollapseTextNode";
    /** "CollapseUnverifiedTextNode" */
    static public final String COLLAPSEUNVERIFIEDTEXTNODE_KEYWORD = "CollapseUnverifiedTextNode";
    /** "CtrlClickUnverifiedTextNode" */
    static public final String CTRLCLICKUNVERIFIEDTEXTNODE_KEYWORD = "CtrlClickUnverifiedTextNode";
    /** "DoubleClickTextNode" */
    static public final String DOUBLECLICKTEXTNODE_KEYWORD = "DoubleClickTextNode";
    /** "DoubleClickUnverifiedTextNode" */
    static public final String DOUBLECLICKUNVERIFIEDTEXTNODE_KEYWORD = "DoubleClickUnverifiedTextNode";
    /** "Expand" */
    static public final String EXPAND_KEYWORD = "Expand";
    /** "ExpandPartialTextNode" */
    static public final String EXPANDPARTIALTEXTNODE_KEYWORD = "ExpandPartialTextNode";
    /** "ExpandTextNode" */
    static public final String EXPANDTEXTNODE_KEYWORD = "ExpandTextNode";
    /** "ExpandUnverifiedTextNode" */
    static public final String EXPANDUNVERIFIEDTEXTNODE_KEYWORD = "ExpandUnverifiedTextNode";
    /** "MakeSelection" */
    static public final String MAKESELECTION_KEYWORD = "MakeSelection";
    /** "PartialMatchTreeDataToFile" */
    static public final String PARTIALMATCHTREEDATATOFILE_KEYWORD = "PartialMatchTreeDataToFile";
    /** "RightClickTextNode" */
    static public final String RIGHTCLICKTEXTNODE_KEYWORD = "RightClickTextNode";
    /** "RightClickUnverifiedTextNode" */
    static public final String RIGHTCLICKUNVERIFIEDTEXTNODE_KEYWORD = "RightClickUnverifiedTextNode";
    /** "SelectAnotherPartialTextNode" */
    static public final String SELECTANOTHERPARTIALTEXTNODE_KEYWORD = "SelectAnotherPartialTextNode";
    /** "SelectAnotherTextNode" */
    static public final String SELECTANOTHERTEXTNODE_KEYWORD = "SelectAnotherTextNode";
    /** "SelectAnotherUnverifiedTextNode" */
    static public final String SELECTANOTHERUNVERIFIEDTEXTNODE_KEYWORD = "SelectAnotherUnverifiedTextNode";
    /** "SelectPartialTextNode" */
    static public final String SELECTPARTIALTEXTNODE_KEYWORD = "SelectPartialTextNode";
    /** "SelectTextNode" */
    static public final String SELECTTEXTNODE_KEYWORD = "SelectTextNode";
    /** "SelectUnverifiedTextNode" */
    static public final String SELECTUNVERIFIEDTEXTNODE_KEYWORD = "SelectUnverifiedTextNode";
    /** "SetTreeContainsNode" */
    static public final String SETTREECONTAINSNODE_KEYWORD = "SetTreeContainsNode";
    /** "SetTreeContainsPartialMatch" */
    static public final String SETTREECONTAINSPARTIALMATCH_KEYWORD = "SetTreeContainsPartialMatch";
    /** "ShiftClickUnverifiedTextNode" */
    static public final String SHIFTCLICKUNVERIFIEDTEXTNODE_KEYWORD = "ShiftClickUnverifiedTextNode";
    /** "VerifyTreeContainsNode" */
    static public final String VERIFYTREECONTAINSNODE_KEYWORD = "VerifyTreeContainsNode";
    /** "VerifyTreeContainsPartialMatch" */
    static public final String VERIFYTREECONTAINSPARTIALMATCH_KEYWORD = "VerifyTreeContainsPartialMatch";


    /*********** <pre>
             Copy the current contents of a tree[branch] to a file.
             
             The search of the path to the node is expected to be a case-sensitive 
             exact match of each node.  Use 'PartialMatchTreeDataToFile' if you 
             wish to specify case-insensitive substring matches for tree nodes.             
             
             By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param file  Optional:NO
             The name of the file used to store the tree data.
              
     @param branch  Optional:YES
	                	The full name of the tree branch to capture.
	                
     @param indentMark  Optional:YES
		        	The character(s) to use in the output file to indent the tree nodes from the 
		        	parent tree branches.
		        
     @param fileEncoding  Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
     @param filterMode  Optional:YES  DefaultVal:
             (Future) Specify a file filter to use to process the text before comparison.
              
     @param filterOptions  Optional:YES  DefaultVal:
             (Future) Specify filter options to use with the file filter.
              
     **********/
    static public ComponentFunction captureTreeDataToFile (String winname, String compname, String file, String branch, String indentMark, String fileEncoding, String filterMode, String filterOptions) {

        if ( winname == null ) throw new IllegalArgumentException ( "captureTreeDataToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "captureTreeDataToFile.compname = null");

        if ( file == null ) throw new IllegalArgumentException ( "captureTreeDataToFile.file = null");
        ComponentFunction cf = new ComponentFunction(CAPTURETREEDATATOFILE_KEYWORD, winname, compname);
        cf.addParameter(file);
        cf.addParameter(branch);
        cf.addParameter(indentMark);
        cf.addParameter(fileEncoding);
        cf.addParameter(filterMode);
        cf.addParameter(filterOptions);
        return cf;
    }


    /*********** <pre>
             Copy the current contents of a tree[branch] to a file.
             
             The search of the path to the node is expected to be a case-sensitive 
             exact match of each node.  Use 'PartialMatchTreeDataToFile' if you 
             wish to specify case-insensitive substring matches for tree nodes.             
             
             By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        file -- Optional:NO
             The name of the file used to store the tree data.
              <BR/>        branch -- Optional:YES
	                	The full name of the tree branch to capture.
	                <BR/>        indentMark -- Optional:YES
		        	The character(s) to use in the output file to indent the tree nodes from the 
		        	parent tree branches.
		        <BR/>        fileEncoding -- Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            <BR/>        filterMode -- Optional:YES  DefaultVal:
             (Future) Specify a file filter to use to process the text before comparison.
              <BR/>        filterOptions -- Optional:YES  DefaultVal:
             (Future) Specify filter options to use with the file filter.
              
    </UL>

     **********/
    static public ComponentFunction captureTreeDataToFile(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "captureTreeDataToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "captureTreeDataToFile.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "captureTreeDataToFile.parameters = null");
        ComponentFunction cf = new ComponentFunction(CAPTURETREEDATATOFILE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                 Action to click a node according to its text value.  Currently, this component function 
                 is for JavaTrees and works differently than documented in TreeViewFunctions (though that 
                 functionality may be added in the near future).
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to click.
              
     **********/
    static public ComponentFunction clickTextNode (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "clickTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "clickTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "clickTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(CLICKTEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                 Action to blindly click a node according to its text value.  Currently, this component function 
                 is for JavaTrees and may work differently than documented in TreeViewFunctions.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive full path text of node to click.
              
     **********/
    static public ComponentFunction clickUnverifiedTextNode (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "clickUnverifiedTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "clickUnverifiedTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "clickUnverifiedTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(CLICKUNVERIFIEDTEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                 Use CollapseTextNode instead.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to collapse
              
     **********/
    static public ComponentFunction collapse (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "collapse.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "collapse.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "collapse.textValue = null");
        ComponentFunction cf = new ComponentFunction(COLLAPSE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                 Action to collapse a node according to a partial match of its text value.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-Insensitive text of node to collapse
              
     **********/
    static public ComponentFunction collapsePartialTextNode (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "collapsePartialTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "collapsePartialTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "collapsePartialTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(COLLAPSEPARTIALTEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                 Action to collapse a node according to its text value.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to collapse
              
     **********/
    static public ComponentFunction collapseTextNode (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "collapseTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "collapseTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "collapseTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(COLLAPSETEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                 Action to blindly collapse a node according to its text value.
              
                 Generally, no pre- or post- node checks are done. If the tree contains 
                 hidden root nodes the user must provide these.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive full path text of node to collapse
              
     **********/
    static public ComponentFunction collapseUnverifiedTextNode (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "collapseUnverifiedTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "collapseUnverifiedTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "collapseUnverifiedTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(COLLAPSEUNVERIFIEDTEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                 Action to blindly CTRL-click a node according to its text value.  Currently, this component function is for JavaTrees only.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to CTRL-click.
              
     **********/
    static public ComponentFunction ctrlClickUnverifiedTextNode (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "ctrlClickUnverifiedTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "ctrlClickUnverifiedTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "ctrlClickUnverifiedTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(CTRLCLICKUNVERIFIEDTEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                 Action to double-click a node according to its text value.  Currently, this component function 
                 is for JavaTrees and works differently than documented in TreeViewFunctions (though that 
                 functionality may be added in the near future).
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to double-click.
              
     **********/
    static public ComponentFunction doubleClickTextNode (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "doubleClickTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "doubleClickTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "doubleClickTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(DOUBLECLICKTEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                 Action to blindly double-click a node according to its text value.  Currently, this component function 
                 is for JavaTrees and may work differently than documented in TreeViewFunctions.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive full path text of node to double-click.
              
     **********/
    static public ComponentFunction doubleClickUnverifiedTextNode (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "doubleClickUnverifiedTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "doubleClickUnverifiedTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "doubleClickUnverifiedTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(DOUBLECLICKUNVERIFIEDTEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                 Use ExpandTextNode instead.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to expand
              
     **********/
    static public ComponentFunction expand (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "expand.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "expand.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "expand.textValue = null");
        ComponentFunction cf = new ComponentFunction(EXPAND_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                 Action to expand a node according to a partial match of text value.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-Insensitive text of node to match.
              
     **********/
    static public ComponentFunction expandPartialTextNode (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "expandPartialTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "expandPartialTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "expandPartialTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(EXPANDPARTIALTEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                 Action to expand a node according to its text value.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to expand
              
     **********/
    static public ComponentFunction expandTextNode (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "expandTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "expandTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "expandTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(EXPANDTEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                 Action to blindly expand a node according to its text value.
              
                 Generally, no pre- or post- node checks are done. If the tree contains 
                 hidden root nodes the user must provide these.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive full path text of node to expand
              
     **********/
    static public ComponentFunction expandUnverifiedTextNode (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "expandUnverifiedTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "expandUnverifiedTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "expandUnverifiedTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(EXPANDUNVERIFIEDTEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                 Use SelectTextNode instead.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to select
              
     **********/
    static public ComponentFunction makeSelection (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "makeSelection.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "makeSelection.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "makeSelection.textValue = null");
        ComponentFunction cf = new ComponentFunction(MAKESELECTION_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre>
             Copy the current contents of a tree[branch] to a file according to a partial match of its text value.
             
             The search of the path to the node is a case-insensitive 
             substring match of each node.  Use 'CaptureTreeDataToFile' if you 
             wish to specify case-sensitive exact matches for tree nodes.             
             
             By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param file  Optional:NO
             The name of the file used to store the tree data.
              
     @param branch  Optional:YES
	             The full name of the tree branch to capture.
	              
     @param indentMark  Optional:YES
			        	The character(s) to use in the output file to indent the tree nodes from the 
			        	parent tree branches.
			        
     @param filterMode  Optional:YES  DefaultVal:
             (Future) Specify a file filter to use to process the text before comparison.
              
     @param filterOptions  Optional:YES  DefaultVal:
             (Future) Specify filter options to use with the file filter.
              
     **********/
    static public ComponentFunction partialMatchTreeDataToFile (String winname, String compname, String file, String branch, String indentMark, String filterMode, String filterOptions) {

        if ( winname == null ) throw new IllegalArgumentException ( "partialMatchTreeDataToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "partialMatchTreeDataToFile.compname = null");

        if ( file == null ) throw new IllegalArgumentException ( "partialMatchTreeDataToFile.file = null");
        ComponentFunction cf = new ComponentFunction(PARTIALMATCHTREEDATATOFILE_KEYWORD, winname, compname);
        cf.addParameter(file);
        cf.addParameter(branch);
        cf.addParameter(indentMark);
        cf.addParameter(filterMode);
        cf.addParameter(filterOptions);
        return cf;
    }


    /*********** <pre>
             Copy the current contents of a tree[branch] to a file according to a partial match of its text value.
             
             The search of the path to the node is a case-insensitive 
             substring match of each node.  Use 'CaptureTreeDataToFile' if you 
             wish to specify case-sensitive exact matches for tree nodes.             
             
             By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        file -- Optional:NO
             The name of the file used to store the tree data.
              <BR/>        branch -- Optional:YES
	             The full name of the tree branch to capture.
	              <BR/>        indentMark -- Optional:YES
			        	The character(s) to use in the output file to indent the tree nodes from the 
			        	parent tree branches.
			        <BR/>        filterMode -- Optional:YES  DefaultVal:
             (Future) Specify a file filter to use to process the text before comparison.
              <BR/>        filterOptions -- Optional:YES  DefaultVal:
             (Future) Specify filter options to use with the file filter.
              
    </UL>

     **********/
    static public ComponentFunction partialMatchTreeDataToFile(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "partialMatchTreeDataToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "partialMatchTreeDataToFile.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "partialMatchTreeDataToFile.parameters = null");
        ComponentFunction cf = new ComponentFunction(PARTIALMATCHTREEDATATOFILE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                 Action to right-click a node according to its text value.  Currently, this component function 
                 is for JavaTrees and works differently than documented in TreeViewFunctions (though that 
                 functionality may be added in the near future).
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to right-click.
              
     **********/
    static public ComponentFunction rightClickTextNode (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "rightClickTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "rightClickTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "rightClickTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(RIGHTCLICKTEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                 Action to blindly right-click a node according to its text value.  Currently, this component function 
                 is for JavaTrees and may work differently than documented in TreeViewFunctions.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive full path text of node to right-click.
              
     **********/
    static public ComponentFunction rightClickUnverifiedTextNode (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(RIGHTCLICKUNVERIFIEDTEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                 Action to select a node according to a partial match of its text value, in addition to any nodes already selected.
                 Performs selection as if CTRL key were held down during selection.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-Insensitive text of node to select.
              
     **********/
    static public ComponentFunction selectAnotherPartialTextNode (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectAnotherPartialTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectAnotherPartialTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectAnotherPartialTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(SELECTANOTHERPARTIALTEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                 Action to select a node according to its text value, in addition to any nodes already selected.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to select.
              
     **********/
    static public ComponentFunction selectAnotherTextNode (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectAnotherTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectAnotherTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectAnotherTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(SELECTANOTHERTEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                 Action to blindly select a node according to its text value, in addition to any nodes already selected.
              
                 Generally, no pre- or post- node checks are done. If the tree contains 
                 hidden root nodes the user must provide these.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive full path text of node to select.
              
     **********/
    static public ComponentFunction selectAnotherUnverifiedTextNode (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectAnotherUnverifiedTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectAnotherUnverifiedTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectAnotherUnverifiedTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(SELECTANOTHERUNVERIFIEDTEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                 Action to select a node according to a partial match of its text value.
                 Performs selection as if CTRL key were held down during selection.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-Insensitive text of node to select.
              
     **********/
    static public ComponentFunction selectPartialTextNode (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectPartialTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectPartialTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectPartialTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(SELECTPARTIALTEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                 Action to select a node according to its text value.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to select.
              
     **********/
    static public ComponentFunction selectTextNode (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(SELECTTEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                 Action to blindly select a node according to its text value.
              
                 Generally, no pre- or post- node checks are done. If the tree contains 
                 hidden root nodes the user must provide these.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive full path text of node to select.
              
     **********/
    static public ComponentFunction selectUnverifiedTextNode (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectUnverifiedTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectUnverifiedTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectUnverifiedTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(SELECTUNVERIFIEDTEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre>
             		Sets a user-defined variable with the result of whether a tree contains the provided node.
             	
             		The search of the path to the node is expected to be a case-sensitive 
             		exact match of each node.  Use 'SetTreeContainsPartialMatch' if you 
             		wish to specify case-insensitive substring matches for tree nodes.
              	    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param node  Optional:NO
             				The name of the node to verify.
              			
     @param resultVar  Optional:NO
	             			The name of the variable which gets assigned the result.
	              		
     **********/
    static public ComponentFunction setTreeContainsNode (String winname, String compname, String node, String resultVar) {

        if ( winname == null ) throw new IllegalArgumentException ( "setTreeContainsNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "setTreeContainsNode.compname = null");

        if ( node == null ) throw new IllegalArgumentException ( "setTreeContainsNode.node = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "setTreeContainsNode.resultVar = null");
        ComponentFunction cf = new ComponentFunction(SETTREECONTAINSNODE_KEYWORD, winname, compname);
        cf.addParameter(node);
        cf.addParameter(resultVar);
        return cf;
    }


    /*********** <pre>
             		Sets a user-defined variable with the result of whether a tree contains the provided node.
             	
             		The search of the path to the node is expected to be a case-sensitive 
             		exact match of each node.  Use 'SetTreeContainsPartialMatch' if you 
             		wish to specify case-insensitive substring matches for tree nodes.
              	    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        node -- Optional:NO
             				The name of the node to verify.
              			<BR/>        resultVar -- Optional:NO
	             			The name of the variable which gets assigned the result.
	              		
    </UL>

     **********/
    static public ComponentFunction setTreeContainsNode(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "setTreeContainsNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "setTreeContainsNode.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "setTreeContainsNode.parameters = null");
        ComponentFunction cf = new ComponentFunction(SETTREECONTAINSNODE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
             		Sets a user-defined variable with the result of whether a tree contains the provided node
             		according to a partial match of the node's text value.
             	
             		The search of the path to the node is expected to be a case-insensitive 
			substring match of each node.  Use 'SetTreeContainsNode' if you 
             		wish to specify case-sensitive substring matches for tree nodes.
              	    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param node  Optional:NO
             				The name of the node to verify.
              			
     @param resultVar  Optional:NO
	             			The name of the variable which gets assigned the result.
	              		
     **********/
    static public ComponentFunction setTreeContainsPartialMatch (String winname, String compname, String node, String resultVar) {

        if ( winname == null ) throw new IllegalArgumentException ( "setTreeContainsPartialMatch.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "setTreeContainsPartialMatch.compname = null");

        if ( node == null ) throw new IllegalArgumentException ( "setTreeContainsPartialMatch.node = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "setTreeContainsPartialMatch.resultVar = null");
        ComponentFunction cf = new ComponentFunction(SETTREECONTAINSPARTIALMATCH_KEYWORD, winname, compname);
        cf.addParameter(node);
        cf.addParameter(resultVar);
        return cf;
    }


    /*********** <pre>
             		Sets a user-defined variable with the result of whether a tree contains the provided node
             		according to a partial match of the node's text value.
             	
             		The search of the path to the node is expected to be a case-insensitive 
			substring match of each node.  Use 'SetTreeContainsNode' if you 
             		wish to specify case-sensitive substring matches for tree nodes.
              	    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        node -- Optional:NO
             				The name of the node to verify.
              			<BR/>        resultVar -- Optional:NO
	             			The name of the variable which gets assigned the result.
	              		
    </UL>

     **********/
    static public ComponentFunction setTreeContainsPartialMatch(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "setTreeContainsPartialMatch.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "setTreeContainsPartialMatch.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "setTreeContainsPartialMatch.parameters = null");
        ComponentFunction cf = new ComponentFunction(SETTREECONTAINSPARTIALMATCH_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                 Action to blindly SHIFT-click a node according to its text value. Currently, this component function is for JavaTrees only.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to SHIFT-click.
              
     **********/
    static public ComponentFunction shiftClickUnverifiedTextNode (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "shiftClickUnverifiedTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "shiftClickUnverifiedTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "shiftClickUnverifiedTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(SHIFTCLICKUNVERIFIEDTEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre>
             		Verify that a tree contains the provided node.
             	
             		The search of the path to the node is expected to be a case-sensitive 
             		exact match of each node.  Use 'VerifyTreeContainsPartialMatch' if you 
             		wish to specify case-insensitive substring matches for tree nodes.
              	    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param node  Optional:NO
             		The name of the node to verify.
              	
     **********/
    static public ComponentFunction verifyTreeContainsNode (String winname, String compname, String node) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyTreeContainsNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyTreeContainsNode.compname = null");

        if ( node == null ) throw new IllegalArgumentException ( "verifyTreeContainsNode.node = null");
        ComponentFunction cf = new ComponentFunction(VERIFYTREECONTAINSNODE_KEYWORD, winname, compname);
        cf.addParameter(node);
        return cf;
    }


    /*********** <pre>
             	Verify that a tree contains the provided node according to a partial match of the node's text value.
             	
             		The search of the path to the node is expected to be a case-insensitive 
             		substring match of each node.  Use 'VerifyTreeContainsNode' if you 
             		wish to specify case-sensitive substring matches for tree nodes.
              	    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param node  Optional:NO
             		The name of the node to verify.
              	
     **********/
    static public ComponentFunction verifyTreeContainsPartialMatch (String winname, String compname, String node) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyTreeContainsPartialMatch.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyTreeContainsPartialMatch.compname = null");

        if ( node == null ) throw new IllegalArgumentException ( "verifyTreeContainsPartialMatch.node = null");
        ComponentFunction cf = new ComponentFunction(VERIFYTREECONTAINSPARTIALMATCH_KEYWORD, winname, compname);
        cf.addParameter(node);
        return cf;
    }


}
