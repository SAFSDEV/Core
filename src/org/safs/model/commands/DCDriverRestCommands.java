
/******************************************************************************
 * DCDriverRestCommands.java
 *
 * Copyright (c) by SAS Institute Inc., Cary, NC 27513
 * General Public License: http://www.opensource.org/licenses/gpl-license.php
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   DCDriverRestCommands.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaCommandModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe DCDriverRestCommands.xml XSLJavaCommandModel.xsl -o DCDriverRestCommands.java
 *
 ******************************************************************************/ 
package org.safs.model.commands;


import org.safs.model.DriverCommand;


public class DCDriverRestCommands {

    /*****************
    Private Singleton Instance
    ****************/
    private static final DCDriverRestCommands singleton = new DCDriverRestCommands(); 

    /*****************
    Private Constructor
    Static class needing no instantiation.
    ****************/
    private DCDriverRestCommands() {}

    /*****************
    public Singleton to access class static methods via instance
    ****************/
    public static DCDriverRestCommands getInstance() { return singleton;}

    /** "RestDeleteResponse" */
    static public final String RESTDELETERESPONSE_KEYWORD = "RestDeleteResponse";
    /** "RestDeleteResponseStore" */
    static public final String RESTDELETERESPONSESTORE_KEYWORD = "RestDeleteResponseStore";
    /** "RestStoreResponse" */
    static public final String RESTSTORERESPONSE_KEYWORD = "RestStoreResponse";


    /*********** <pre>
					Delete a REST response (and request if it is stored) from the variable storage.
				
					Delete a REST response (and request if it is stored) from the variable storage. 
					The REST response/request is supposed to store in a series of variables (refer to explanation of parameter variablePrefix).
					So these variables will be deleted from the variable storage.
				    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param variablePrefix  Optional:NO
							The prefix of the variables (storing the information of a REST response/request) to be deleted.
						
     **********/
    static public DriverCommand restDeleteResponse (String variablePrefix) {

        if ( variablePrefix == null ) throw new IllegalArgumentException ( "restDeleteResponse.variablePrefix = null");
        DriverCommand dc = new DriverCommand(RESTDELETERESPONSE_KEYWORD);
        dc.addParameter(variablePrefix);
        return dc;
    }


    /*********** <pre>
                    Delete ALL REST responses (and requests if stored) from the variable storage.
                
                    Delete ALL REST responses (and requests if stored) from the variable storage. 
                    The REST response/request is supposed to store in a series of variables (refer to explanation of parameter variablePrefix).
                    So these variables related to all responses/requests will be deleted, which
                    means the variable storage will be cleaned up for all REST responses/requests.
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS SDCommands</LI>
    </UL>

     **********/
    static public DriverCommand restDeleteResponseStore () {

        DriverCommand dc = new DriverCommand(RESTDELETERESPONSESTORE_KEYWORD);
        return dc;
    }


    /*********** <pre>Store a REST response into a series of variables.
                    Retrieve a REST response according to the responseID, and store the response into
                    a series of variables (refer to explanation of parameter variablePrefix).
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param responseID  Optional:NO
                            The ID used to retrieve Response Object from internal Map.
                        
     @param variablePrefix  Optional:NO
                            The prefix of the variables to store the information of a REST response.
                        
     @param storeRequest  Optional:YES  DefaultVal:FalseStore the originating Request information if this parameter is true. The default value is false.
     **********/
    static public DriverCommand restStoreResponse (String responseID, String variablePrefix, String storeRequest) {

        if ( responseID == null ) throw new IllegalArgumentException ( "restStoreResponse.responseID = null");
        if ( variablePrefix == null ) throw new IllegalArgumentException ( "restStoreResponse.variablePrefix = null");
        DriverCommand dc = new DriverCommand(RESTSTORERESPONSE_KEYWORD);
        dc.addParameter(responseID);
        dc.addParameter(variablePrefix);
        dc.addParameter(storeRequest);
        return dc;
    }


    /*********** <pre>Store a REST response into a series of variables.
                    Retrieve a REST response according to the responseID, and store the response into
                    a series of variables (refer to explanation of parameter variablePrefix).
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        responseID -- Optional:NO
                            The ID used to retrieve Response Object from internal Map.
                        <BR/>        variablePrefix -- Optional:NO
                            The prefix of the variables to store the information of a REST response.
                        <BR/>        storeRequest -- Optional:YES  DefaultVal:FalseStore the originating Request information if this parameter is true. The default value is false.
    </UL>

     **********/
    static public DriverCommand restStoreResponse (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "restStoreResponse.parameters = null");
        DriverCommand dc = new DriverCommand(RESTSTORERESPONSE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


}
