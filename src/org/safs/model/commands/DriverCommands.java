
/******************************************************************************
 * DriverCommands.java
 *
 * Copyright (C) SAS Institute, All rights reserved.
 * General Public License: https://www.gnu.org/licenses/gpl-3.0.en.html
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   XSLDriverCommands.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaDriverCommandsClass.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe XSLDriverCommands.xml XSLJavaDriverCommandsClass.xsl -o DriverCommands.java
 *
 ******************************************************************************/ 
package org.safs.model.commands;


import org.safs.model.DriverCommand;


public class DriverCommands {

    /** "AppMapChaining" */
    static public final String APPMAPCHAINING_KEYWORD = "AppMapChaining";
    /** "AppMapResolve" */
    static public final String APPMAPRESOLVE_KEYWORD = "AppMapResolve";
    /** "AssignClipboardVariable" */
    static public final String ASSIGNCLIPBOARDVARIABLE_KEYWORD = "AssignClipboardVariable";
    /** "CallRemote" */
    static public final String CALLREMOTE_KEYWORD = "CallRemote";
    /** "CaptureMousePositionOnScreen" */
    static public final String CAPTUREMOUSEPOSITIONONSCREEN_KEYWORD = "CaptureMousePositionOnScreen";
    /** "ClearAllVariables" */
    static public final String CLEARALLVARIABLES_KEYWORD = "ClearAllVariables";
    /** "ClearAppMapCache" */
    static public final String CLEARAPPMAPCACHE_KEYWORD = "ClearAppMapCache";
    /** "ClearArrayVariables" */
    static public final String CLEARARRAYVARIABLES_KEYWORD = "ClearArrayVariables";
    /** "ClearClipboard" */
    static public final String CLEARCLIPBOARD_KEYWORD = "ClearClipboard";
    /** "CloseApplication" */
    static public final String CLOSEAPPLICATION_KEYWORD = "CloseApplication";
    /** "CloseApplicationMap" */
    static public final String CLOSEAPPLICATIONMAP_KEYWORD = "CloseApplicationMap";
    /** "CopyVariableValueEx" */
    static public final String COPYVARIABLEVALUEEX_KEYWORD = "CopyVariableValueEx";
    /** "Delay" */
    static public final String DELAY_KEYWORD = "Delay";
    /** "DeleteNetworkConditions" */
    static public final String DELETENETWORKCONDITIONS_KEYWORD = "DeleteNetworkConditions";
    /** "DisableDomain" */
    static public final String DISABLEDOMAIN_KEYWORD = "DisableDomain";
    /** "EnableDomain" */
    static public final String ENABLEDOMAIN_KEYWORD = "EnableDomain";
    /** "Expressions" */
    static public final String EXPRESSIONS_KEYWORD = "Expressions";
    /** "GetSecsBeforeMouseDown" */
    static public final String GET_SECS_BEFORE_MOUSE_DOWN_KEYWORD = "GetSecsBeforeMouseDown";
    /** "GetSecsBeforeMouseUp" */
    static public final String GET_SECS_BEFORE_MOUSE_UP_KEYWORD = "GetSecsBeforeMouseUp";
    /** "GetAppMapValue" */
    static public final String GETAPPMAPVALUE_KEYWORD = "GetAppMapValue";
    /** "GetCompScreenResolution" */
    static public final String GETCOMPSCREENRESOLUTION_KEYWORD = "GetCompScreenResolution";
    /** "GetDeltaDate" */
    static public final String GETDELTADATE_KEYWORD = "GetDeltaDate";
    /** "GetMillisBetweenRecords" */
    static public final String GETMILLISBETWEENRECORDS_KEYWORD = "GetMillisBetweenRecords";
    /** "GetNetworkConditions" */
    static public final String GETNETWORKCONDITIONS_KEYWORD = "GetNetworkConditions";
    /** "GetRegistryKeyValue" */
    static public final String GETREGISTRYKEYVALUE_KEYWORD = "GetRegistryKeyValue";
    /** "GetSecsAfterWindowActive" */
    static public final String GETSECSAFTERWINDOWACTIVE_KEYWORD = "GetSecsAfterWindowActive";
    /** "GetSecsDelayRetryComponent" */
    static public final String GETSECSDELAYRETRYCOMPONENT_KEYWORD = "GetSecsDelayRetryComponent";
    /** "GetSecsSeekComponent" */
    static public final String GETSECSSEEKCOMPONENT_KEYWORD = "GetSecsSeekComponent";
    /** "GetSystemDate" */
    static public final String GETSYSTEMDATE_KEYWORD = "GetSystemDate";
    /** "GetSystemDateTime" */
    static public final String GETSYSTEMDATETIME_KEYWORD = "GetSystemDateTime";
    /** "GetSystemTime" */
    static public final String GETSYSTEMTIME_KEYWORD = "GetSystemTime";
    /** "GetURL" */
    static public final String GETURL_KEYWORD = "GetURL";
    /** "GetVersion" */
    static public final String GETVERSION_KEYWORD = "GetVersion";
    /** "HideSoftKeyboard" */
    static public final String HIDESOFTKEYBOARD_KEYWORD = "HideSoftKeyboard";
    /** "HighLight" */
    static public final String HIGHLIGHT_KEYWORD = "HighLight";
    /** "LaunchApplication" */
    static public final String LAUNCHAPPLICATION_KEYWORD = "LaunchApplication";
    /** "NotifyAndWait" */
    static public final String NOTIFYANDWAIT_KEYWORD = "NotifyAndWait";
    /** "Pause" */
    static public final String PAUSE_KEYWORD = "Pause";
    /** "SaveClipboardToFile" */
    static public final String SAVECLIPBOARDTOFILE_KEYWORD = "SaveClipboardToFile";
    /** "SaveURLToFile" */
    static public final String SAVEURLTOFILE_KEYWORD = "SaveURLToFile";
    /** "ScrollWheel" */
    static public final String SCROLLWHEEL_KEYWORD = "ScrollWheel";
    /** "SendEmail" */
    static public final String SENDEMAIL_KEYWORD = "SendEmail";
    /** "SetSecsBeforeMouseDown" */
    static public final String SET_SECS_BEFORE_MOUSE_DOWN_KEYWORD = "SetSecsBeforeMouseDown";
    /** "SetSecsBeforeMouseUp" */
    static public final String SET_SECS_BEFORE_MOUSE_UP_KEYWORD = "SetSecsBeforeMouseUp";
    /** "SetApplicationMap" */
    static public final String SETAPPLICATIONMAP_KEYWORD = "SetApplicationMap";
    /** "SetBenchDirectory" */
    static public final String SETBENCHDIRECTORY_KEYWORD = "SetBenchDirectory";
    /** "SetClipboard" */
    static public final String SETCLIPBOARD_KEYWORD = "SetClipboard";
    /** "SetContext" */
    static public final String SETCONTEXT_KEYWORD = "SetContext";
    /** "SetDifDirectory" */
    static public final String SETDIFDIRECTORY_KEYWORD = "SetDifDirectory";
    /** "SetFocus" */
    static public final String SETFOCUS_KEYWORD = "SetFocus";
    /** "SetImageDebug" */
    static public final String SETIMAGEDEBUG_KEYWORD = "SetImageDebug";
    /** "SetImageFuzzyMatching" */
    static public final String SETIMAGEFUZZYMATCHING_KEYWORD = "SetImageFuzzyMatching";
    /** "SetMillisBetweenRecords" */
    static public final String SETMILLISBETWEENRECORDS_KEYWORD = "SetMillisBetweenRecords";
    /** "SetMultipleThreadSearch" */
    static public final String SETMULTIPLETHREADSEARCH_KEYWORD = "SetMultipleThreadSearch";
    /** "SetNetworkConditions" */
    static public final String SETNETWORKCONDITIONS_KEYWORD = "SetNetworkConditions";
    /** "SetProjectDirectory" */
    static public final String SETPROJECTDIRECTORY_KEYWORD = "SetProjectDirectory";
    /** "SetRootVerifyDirectory" */
    static public final String SETROOTVERIFYDIRECTORY_KEYWORD = "SetRootVerifyDirectory";
    /** "SetSecsAfterWindowActive" */
    static public final String SETSECSAFTERWINDOWACTIVE_KEYWORD = "SetSecsAfterWindowActive";
    /** "SetSecsDelayRetryComponent" */
    static public final String SETSECSDELAYRETRYCOMPONENT_KEYWORD = "SetSecsDelayRetryComponent";
    /** "SetSecsSeekComponent" */
    static public final String SETSECSSEEKCOMPONENT_KEYWORD = "SetSecsSeekComponent";
    /** "SetTestDirectory" */
    static public final String SETTESTDIRECTORY_KEYWORD = "SetTestDirectory";
    /** "SetVariableValueEx" */
    static public final String SETVARIABLEVALUEEX_KEYWORD = "SetVariableValueEx";
    /** "SetVariableValues" */
    static public final String SETVARIABLEVALUES_KEYWORD = "SetVariableValues";
    /** "ShowSoftKeyboard" */
    static public final String SHOWSOFTKEYBOARD_KEYWORD = "ShowSoftKeyboard";
    /** "StartWebBrowser" */
    static public final String STARTWEBBROWSER_KEYWORD = "StartWebBrowser";
    /** "StopWebBrowser" */
    static public final String STOPWEBBROWSER_KEYWORD = "StopWebBrowser";
    /** "SwitchWindow" */
    static public final String SWITCHWINDOW_KEYWORD = "SwitchWindow";
    /** "TakeScreenShot" */
    static public final String TAKESCREENSHOT_KEYWORD = "TakeScreenShot";
    /** "UseAbbotFunctions" */
    static public final String USEABBOTFUNCTIONS_KEYWORD = "UseAbbotFunctions";
    /** "UseDroidFunctions" */
    static public final String USEDRIODFUNCTIONS_KEYWORD = "UseDroidFunctions";
    /** "UseIOSFunctions" */
    static public final String USEIOSFUNCTIONS_KEYWORD = "UseIOSFunctions";
    /** "UseQTPFunctions" */
    static public final String USEQTPFUNCTIONS_KEYWORD = "UseQTPFunctions";
    /** "UseRobotJFunctions" */
    static public final String USEROBOTJFUNCTIONS_KEYWORD = "UseRobotJFunctions";
    /** "UseSAFSFunctions" */
    static public final String USESAFSFUNCTIONS_KEYWORD = "UseSAFSFunctions";
    /** "UseSeleniumFunctions" */
    static public final String USESELENIUMFUNCTIONS_KEYWORD = "UseSeleniumFunctions";
    /** "UseTestCompleteFunctions" */
    static public final String USETESTCOMPLETEFUNCTIONS_KEYWORD = "UseTestCompleteFunctions";
    /** "UseWebBrowser" */
    static public final String USEWEBBROWSER_KEYWORD = "UseWebBrowser";
    /** "VerifyClipboardToFile" */
    static public final String VERIFYCLIPBOARDTOFILE_KEYWORD = "VerifyClipboardToFile";
    /** "VerifyURLContent" */
    static public final String VERIFYURLCONTENT_KEYWORD = "VerifyURLContent";
    /** "VerifyURLToFile" */
    static public final String VERIFYURLTOFILE_KEYWORD = "VerifyURLToFile";
    /** "Version" */
    static public final String VERSION_KEYWORD = "Version";
    /** "WaitForGUI" */
    static public final String WAITFORGUI_KEYWORD = "WaitForGUI";
    /** "WaitForGUIGone" */
    static public final String WAITFORGUIGONE_KEYWORD = "WaitForGUIGone";
    /** "WaitForPropertyValue" */
    static public final String WAITFORPROPERTYVALUE_KEYWORD = "WaitForPropertyValue";
    /** "WaitForPropertyValueGone" */
    static public final String WAITFORPROPERTYVALUEGONE_KEYWORD = "WaitForPropertyValueGone";
    /** "WaitForRegistryKeyExists" */
    static public final String WAITFORREGISTRYKEYEXISTS_KEYWORD = "WaitForRegistryKeyExists";
    /** "WaitForRegistryKeyValue" */
    static public final String WAITFORREGISTRYKEYVALUE_KEYWORD = "WaitForRegistryKeyValue";
    /** "WaitForWebPage" */
    static public final String WAITFORWEBPAGE_KEYWORD = "WaitForWebPage";
    /** "DeleteCounter" */
    static public final String DELETECOUNTER_KEYWORD = "DeleteCounter";
    /** "LogCounterInfo" */
    static public final String LOGCOUNTERINFO_KEYWORD = "LogCounterInfo";
    /** "ResetCounter" */
    static public final String RESETCOUNTER_KEYWORD = "ResetCounter";
    /** "ResumeStatusCounts" */
    static public final String RESUMESTATUSCOUNTS_KEYWORD = "ResumeStatusCounts";
    /** "SetCounterMode" */
    static public final String SETCOUNTERMODE_KEYWORD = "SetCounterMode";
    /** "StartCounter" */
    static public final String STARTCOUNTER_KEYWORD = "StartCounter";
    /** "StartCycle" */
    static public final String STARTCYCLE_KEYWORD = "StartCycle";
    /** "StartProcedure" */
    static public final String STARTPROCEDURE_KEYWORD = "StartProcedure";
    /** "StartRequirement" */
    static public final String STARTREQUIREMENT_KEYWORD = "StartRequirement";
    /** "StartSuite" */
    static public final String STARTSUITE_KEYWORD = "StartSuite";
    /** "StartTestcase" */
    static public final String STARTTESTCASE_KEYWORD = "StartTestcase";
    /** "StopCounter" */
    static public final String STOPCOUNTER_KEYWORD = "StopCounter";
    /** "StopCycle" */
    static public final String STOPCYCLE_KEYWORD = "StopCycle";
    /** "StopProcedure" */
    static public final String STOPPROCEDURE_KEYWORD = "StopProcedure";
    /** "StopRequirement" */
    static public final String STOPREQUIREMENT_KEYWORD = "StopRequirement";
    /** "StopSuite" */
    static public final String STOPSUITE_KEYWORD = "StopSuite";
    /** "StopTestcase" */
    static public final String STOPTESTCASE_KEYWORD = "StopTestcase";
    /** "StoreCounterInfo" */
    static public final String STORECOUNTERINFO_KEYWORD = "StoreCounterInfo";
    /** "SuspendStatusCounts" */
    static public final String SUSPENDSTATUSCOUNTS_KEYWORD = "SuspendStatusCounts";
    /** "CopyDBTableColumnToFile" */
    static public final String COPYDBTABLECOLUMNTOFILE_KEYWORD = "CopyDBTableColumnToFile";
    /** "CopyDBTableToFile" */
    static public final String COPYDBTABLETOFILE_KEYWORD = "CopyDBTableToFile";
    /** "DeleteDBTableRecords" */
    static public final String DELETEDBTABLERECORDS_KEYWORD = "DeleteDBTableRecords";
    /** "ExecSQLQuery" */
    static public final String EXECSQLQUERY_KEYWORD = "ExecSQLQuery";
    /** "GetDBTableColumnCount" */
    static public final String GETDBTABLECOLUMNCOUNT_KEYWORD = "GetDBTableColumnCount";
    /** "GetDBTableRowCount" */
    static public final String GETDBTABLEROWCOUNT_KEYWORD = "GetDBTableRowCount";
    /** "GetDBValue" */
    static public final String GETDBVALUE_KEYWORD = "GetDBValue";
    /** "SetJdbcDriver" */
    static public final String SETJDBCDRIVER_KEYWORD = "SetJdbcDriver";
    /** "VerifyDatabaseNullValue" */
    static public final String VERIFYDATABASENULLVALUE_KEYWORD = "VerifyDatabaseNullValue";
    /** "VerifyDatabaseValue" */
    static public final String VERIFYDATABASEVALUE_KEYWORD = "VerifyDatabaseValue";
    /** "VerifyDBNullValue" */
    static public final String VERIFYDBNULLVALUE_KEYWORD = "VerifyDBNullValue";
    /** "VerifyDBValue" */
    static public final String VERIFYDBVALUE_KEYWORD = "VerifyDBValue";
    /** "Breakpoints" */
    static public final String BREAKPOINTS_KEYWORD = "Breakpoints";
    /** "CommandDebug" */
    static public final String COMMANDDEBUG_KEYWORD = "CommandDebug";
    /** "RecordsDebug" */
    static public final String RECORDSDEBUG_KEYWORD = "RecordsDebug";
    /** "TestDebug" */
    static public final String TESTDEBUG_KEYWORD = "TestDebug";
    /** "CloseFile" */
    static public final String CLOSEFILE_KEYWORD = "CloseFile";
    /** "CopyFile" */
    static public final String COPYFILE_KEYWORD = "CopyFile";
    /** "CopyMatchingFiles" */
    static public final String COPYMATCHINGFILES_KEYWORD = "CopyMatchingFiles";
    /** "CreateDirectory" */
    static public final String CREATEDIRECTORY_KEYWORD = "CreateDirectory";
    /** "CreateFile" */
    static public final String CREATEFILE_KEYWORD = "CreateFile";
    /** "DeleteDirectory" */
    static public final String DELETEDIRECTORY_KEYWORD = "DeleteDirectory";
    /** "DeleteDirectoryContents" */
    static public final String DELETEDIRECTORYCONTENTS_KEYWORD = "DeleteDirectoryContents";
    /** "DeleteFile" */
    static public final String DELETEFILE_KEYWORD = "DeleteFile";
    /** "FilterImage" */
    static public final String FILTERIMAGE_KEYWORD = "FilterImage";
    /** "FilterTextFile" */
    static public final String FILTERTEXTFILE_KEYWORD = "FilterTextFile";
    /** "FindSqaFile" */
    static public final String FINDSQAFILE_KEYWORD = "FindSqaFile";
    /** "GetFileDateTime" */
    static public final String GETFILEDATETIME_KEYWORD = "GetFileDateTime";
    /** "GetFileProtections" */
    static public final String GETFILEPROTECTIONS_KEYWORD = "GetFileProtections";
    /** "GetFiles" */
    static public final String GETFILES_KEYWORD = "GetFiles";
    /** "GetFileSize" */
    static public final String GETFILESIZE_KEYWORD = "GetFileSize";
    /** "GetINIFileValue" */
    static public final String GETINIFILEVALUE_KEYWORD = "GetINIFileValue";
    /** "GetStringCountInFile" */
    static public final String GETSTRINGCOUNTINFILE_KEYWORD = "GetStringCountInFile";
    /** "GetSubstringsInFile" */
    static public final String GETSUBSTRINGSINFILE_KEYWORD = "GetSubstringsInFile";
    /** "GetTextFromImage" */
    static public final String GETTEXTFROMIMAGE_KEYWORD = "GetTextFromImage";
    /** "IfExistDir" */
    static public final String IFEXISTDIR_KEYWORD = "IfExistDir";
    /** "IfExistFile" */
    static public final String IFEXISTFILE_KEYWORD = "IfExistFile";
    /** "IsEndOfFile" */
    static public final String ISENDOFFILE_KEYWORD = "IsEndOfFile";
    /** "OpenFile" */
    static public final String OPENFILE_KEYWORD = "OpenFile";
    /** "OpenUTF8File" */
    static public final String OPENUTF8FILE_KEYWORD = "OpenUTF8File";
    /** "PrintToFile" */
    static public final String PRINTTOFILE_KEYWORD = "PrintToFile";
    /** "ReadFileChars" */
    static public final String READFILECHARS_KEYWORD = "ReadFileChars";
    /** "ReadFileLine" */
    static public final String READFILELINE_KEYWORD = "ReadFileLine";
    /** "ReadFileString" */
    static public final String READFILESTRING_KEYWORD = "ReadFileString";
    /** "RenameFile" */
    static public final String RENAMEFILE_KEYWORD = "RenameFile";
    /** "SaveTextFromImage" */
    static public final String SAVETEXTFROMIMAGE_KEYWORD = "SaveTextFromImage";
    /** "SetFileProtections" */
    static public final String SETFILEPROTECTIONS_KEYWORD = "SetFileProtections";
    /** "WriteFileChars" */
    static public final String WRITEFILECHARS_KEYWORD = "WriteFileChars";
    /** "CallCycle" */
    static public final String CALLCYCLE_KEYWORD = "CallCycle";
    /** "CallJUnit" */
    static public final String CALLJUNIT_KEYWORD = "CallJUnit";
    /** "CallScript" */
    static public final String CALLSCRIPT_KEYWORD = "CallScript";
    /** "CallStep" */
    static public final String CALLSTEP_KEYWORD = "CallStep";
    /** "CallSuite" */
    static public final String CALLSUITE_KEYWORD = "CallSuite";
    /** "CallTestNG" */
    static public final String CALLTESTNG_KEYWORD = "CallTestNG";
    /** "ExitCycle" */
    static public final String EXITCYCLE_KEYWORD = "ExitCycle";
    /** "ExitSuite" */
    static public final String EXITSUITE_KEYWORD = "ExitSuite";
    /** "ExitTable" */
    static public final String EXITTABLE_KEYWORD = "ExitTable";
    /** "GotoBlockID" */
    static public final String GOTOBLOCKID_KEYWORD = "GotoBlockID";
    /** "OnContainsGotoBlockID" */
    static public final String ONCONTAINSGOTOBLOCKID_KEYWORD = "OnContainsGotoBlockID";
    /** "OnDirectoryExistGotoBlockID" */
    static public final String OnDirectoryExistGotoBlockID_KEYWORD = "OnDirectoryExistGotoBlockID";
    /** "OnDirectoryNotExistGotoBlockID" */
    static public final String ONDIRECTORYNOTEXISTGOTOBLOCKID_KEYWORD = "OnDirectoryNotExistGotoBlockID";
    /** "OnEqualGotoBlockID" */
    static public final String ONEQUALGOTOBLOCKID_KEYWORD = "OnEqualGotoBlockID";
    /** "OnFileEOFGotoBlockID" */
    static public final String ONFILEEOFGOTOBLOCKID_KEYWORD = "OnFileEOFGotoBlockID";
    /** "OnFileExistGotoBlockID" */
    static public final String ONFILEEXISTGOTOBLOCKID_KEYWORD = "OnFileExistGotoBlockID";
    /** "OnFileNotExistGotoBlockID" */
    static public final String ONFILENOTEXISTGOTOBLOCKID_KEYWORD = "OnFileNotExistGotoBlockID";
    /** "OnGreaterThanGotoBlockID" */
    static public final String ONGREATERTHANGOTOBLOCKID_KEYWORD = "OnGreaterThanGotoBlockID";
    /** "OnGUIExistsGotoBlockID" */
    static public final String ONGUIEXISTSGOTOBLOCKID_KEYWORD = "OnGUIExistsGotoBlockID";
    /** "OnGUINotExistGotoBlockID" */
    static public final String ONGUINOTEXISTGOTOBLOCKID_KEYWORD = "OnGUINotExistGotoBlockID";
    /** "OnInRangeGotoBlockID" */
    static public final String ONINRANGEGOTOBLOCKID_KEYWORD = "OnInRangeGotoBlockID";
    /** "OnLessThanGotoBlockID" */
    static public final String ONLESSTHANGOTOBLOCKID_KEYWORD = "OnLessThanGotoBlockID";
    /** "OnMenuItemContainsStateGotoBlockID" */
    static public final String ONMENUITEMCONTAINSSTATEGOTOBLOCKID_KEYWORD = "OnMenuItemContainsStateGotoBlockID";
    /** "OnNotContainsGotoBlockID" */
    static public final String ONNOTCONTAINSGOTOBLOCKID_KEYWORD = "OnNotContainsGotoBlockID";
    /** "OnNotEqualGotoBlockID" */
    static public final String ONNOTEQUALGOTOBLOCKID_KEYWORD = "OnNotEqualGotoBlockID";
    /** "OnNotGreaterThanGotoBlockID" */
    static public final String ONNOTGREATERTHANGOTOBLOCKID_KEYWORD = "OnNotGreaterThanGotoBlockID";
    /** "OnNotInRangeGotoBlockID" */
    static public final String ONNOTINRANGEGOTOBLOCKID_KEYWORD = "OnNotInRangeGotoBlockID";
    /** "OnNotLessThanGotoBlockID" */
    static public final String ONNOTLESSTHANGOTOBLOCKID_KEYWORD = "OnNotLessThanGotoBlockID";
    /** "OnPartialMenuItemContainsStateGotoBlockID" */
    static public final String ONPARTIALMENUITEMCONTAINSSTATEGOTOBLOCKID_KEYWORD = "OnPartialMenuItemContainsStateGotoBlockID";
    /** "OnRegistryKeyExistGotoBlockID" */
    static public final String ONREGISTRYKEYEXISTGOTOBLOCKID_KEYWORD = "OnRegistryKeyExistGotoBlockID";
    /** "OnRegistryKeyNotExistGotoBlockID" */
    static public final String ONREGISTRYKEYNOTEXISTGOTOBLOCKID_KEYWORD = "OnRegistryKeyNotExistGotoBlockID";
    /** "SetExitTableBlock" */
    static public final String SETEXITTABLEBLOCK_KEYWORD = "SetExitTableBlock";
    /** "SetGeneralScriptFailureBlock" */
    static public final String SETGENERALSCRIPTFAILUREBLOCK_KEYWORD = "SetGeneralScriptFailureBlock";
    /** "SetInvalidFileIOBlock" */
    static public final String SETINVALIDFILEIOBLOCK_KEYWORD = "SetInvalidFileIOBlock";
    /** "SetNoScriptFailureBlock" */
    static public final String SETNOSCRIPTFAILUREBLOCK_KEYWORD = "SetNoScriptFailureBlock";
    /** "SetScriptNotExecutedBlock" */
    static public final String SETSCRIPTNOTEXECUTEDBLOCK_KEYWORD = "SetScriptNotExecutedBlock";
    /** "SetScriptWarningBlock" */
    static public final String SETSCRIPTWARNINGBLOCK_KEYWORD = "SetScriptWarningBlock";
    /** "UseLocalFlowControl" */
    static public final String USELOCALFLOWCONTROL_KEYWORD = "UseLocalFlowControl";
    /** "LogFailureOK" */
    static public final String LOGFAILUREOK_KEYWORD = "LogFailureOK";
    /** "LogMessage" */
    static public final String LOGMESSAGE_KEYWORD = "LogMessage";
    /** "LogTestFailure" */
    static public final String LOGTESTFAILURE_KEYWORD = "LogTestFailure";
    /** "LogTestSuccess" */
    static public final String LOGTESTSUCCESS_KEYWORD = "LogTestSuccess";
    /** "LogTestWarning" */
    static public final String LOGTESTWARNING_KEYWORD = "LogTestWarning";
    /** "LogWarningOK" */
    static public final String LOGWARNINGOK_KEYWORD = "LogWarningOK";
    /** "ResumeLogging" */
    static public final String RESUMELOGGING_KEYWORD = "ResumeLogging";
    /** "SuspendLogging" */
    static public final String SUSPENDLOGGING_KEYWORD = "SuspendLogging";
    /** "RestCleanResponseMap" */
    static public final String RESTCLEANRESPONSEMAP_KEYWORD = "RestCleanResponseMap";
    /** "RestDeleteResponse" */
    static public final String RESTDELETERESPONSE_KEYWORD = "RestDeleteResponse";
    /** "RestDeleteResponseStore" */
    static public final String RESTDELETERESPONSESTORE_KEYWORD = "RestDeleteResponseStore";
    /** "RestHeadersLoad" */
    static public final String RESTHEADERSLOAD_KEYWORD = "RestHeadersLoad";
    /** "RestStoreResponse" */
    static public final String RESTSTORERESPONSE_KEYWORD = "RestStoreResponse";
    /** "RestVerifyResponse" */
    static public final String RESTVERIFYRESPONSE_KEYWORD = "RestVerifyResponse";
    /** "RestVerifyResponseContains" */
    static public final String RESTVERIFYRESPONSECONTAINS_KEYWORD = "RestVerifyResponseContains";
    /** "CleanString" */
    static public final String CLEANSTRING_KEYWORD = "CleanString";
    /** "Compare" */
    static public final String COMPARE_KEYWORD = "Compare";
    /** "Concatenate" */
    static public final String CONCATENATE_KEYWORD = "Concatenate";
    /** "GetField" */
    static public final String GETFIELD_KEYWORD = "GetField";
    /** "GetFieldCount" */
    static public final String GETFIELDCOUNT_KEYWORD = "GetFieldCount";
    /** "GetFixedWidthField" */
    static public final String GETFIXEDWIDTHFIELD_KEYWORD = "GetFixedWidthField";
    /** "GetMultiDelimitedField" */
    static public final String GETMULTIDELIMITEDFIELD_KEYWORD = "GetMultiDelimitedField";
    /** "GetMultiDelimitedFieldCount" */
    static public final String GETMULTIDELIMITEDFIELDCOUNT_KEYWORD = "GetMultiDelimitedFieldCount";
    /** "GetNextDelimiterIndex" */
    static public final String GETNEXTDELIMITERINDEX_KEYWORD = "GetNextDelimiterIndex";
    /** "GetREDelimitedField" */
    static public final String GETREDELIMITEDFIELD_KEYWORD = "GetREDelimitedField";
    /** "GetREDelimitedFieldCount" */
    static public final String GETREDELIMITEDFIELDCOUNT_KEYWORD = "GetREDelimitedFieldCount";
    /** "GetSubstringsInString" */
    static public final String GETSUBSTRINGINSTRING_KEYWORD = "GetSubstringsInString";
    /** "GetSystemEnviron" */
    static public final String GETSYSTEMENVIRON_KEYWORD = "GetSystemEnviron";
    /** "GetSystemUser" */
    static public final String GETSYSTEMUSER_KEYWORD = "GetSystemUser";
    /** "GetTrimmedField" */
    static public final String GETTRIMMEDFIELD_KEYWORD = "GetTrimmedField";
    /** "Index" */
    static public final String INDEX_KEYWORD = "Index";
    /** "Left" */
    static public final String LEFT_KEYWORD = "Left";
    /** "LeftTrim" */
    static public final String LEFTTRIM_KEYWORD = "LeftTrim";
    /** "Length" */
    static public final String LENGTH_KEYWORD = "Length";
    /** "Replace" */
    static public final String REPLACE_KEYWORD = "Replace";
    /** "Right" */
    static public final String RIGHT_KEYWORD = "Right";
    /** "RightTrim" */
    static public final String RIGHTTRIM_KEYWORD = "RightTrim";
    /** "SubString" */
    static public final String SUBSTRING_KEYWORD = "SubString";
    /** "ToLowerCase" */
    static public final String TOLOWERCASE_KEYWORD = "ToLowerCase";
    /** "ToUpperCase" */
    static public final String TOUPPERCASE_KEYWORD = "ToUpperCase";
    /** "Trim" */
    static public final String TRIM_KEYWORD = "Trim";
    /** "ResetTimer" */
    static public final String RESETTIMER_KEYWORD = "ResetTimer";
    /** "StartTimer" */
    static public final String StartTimer_KEYWORD = "StartTimer";
    /** "StopTimer" */
    static public final String StopTimer_KEYWORD = "StopTimer";
    /** "StoreTimerInfo" */
    static public final String StoreTimerInfo_KEYWORD = "StoreTimerInfo";
    /** "StoreTimerInfoFile" */
    static public final String StoreTimerInfoFile_KEYWORD = "StoreTimerInfoFile";
    /** "VerifyElapsedTimeInRange" */
    static public final String VerifyElapsedTimeInRange_KEYWORD = "VerifyElapsedTimeInRange";
    /** "VerifyElapsedTimeIsLess" */
    static public final String VerifyElapsedTimeIsLess_KEYWORD = "VerifyElapsedTimeIsLess";
    /** "VerifyElapsedTimeIsMore" */
    static public final String VerifyElapsedTimeIsMore_KEYWORD = "VerifyElapsedTimeIsMore";
    /** "VerifyTimer" */
    static public final String VerifyTimer_KEYWORD = "VerifyTimer";
    /** "EndRequirement" */
    static public final String ENDREQUIREMENT_KEYWORD = "EndRequirement";
    /** "EndTestcase" */
    static public final String ENDTESTCASE_KEYWORD = "EndTestcase";
    /** "GetVariableValueEx" */
    static public final String GETVARIABLEVALUEEX_KEYWORD = "GetVariableValueEx";
    /** "SetRequirement" */
    static public final String SETREQUIREMENT_KEYWORD = "SetRequirement";
    /** "SetTestcase" */
    static public final String SETTESTCASE_KEYWORD = "SetTestcase";


    /*****************
    Private Constructor
    Static class needing no instantiation.
    ****************/
    private DriverCommands () {}


    /*************************************************************
     static reference to DDDriverCommands.class 

     
              Miscellaneous Driver Commands.
          

     
          
          This keyword library provides Driver Commands that can 
          be used in any keyword driven test table regardless 
          of the test tables level--Cycle, Suite, or Step.
          
          Each different driver command has different parameters 
          as described in its documentation.  For reference, the 
          first fields of ALL Driver Command test records are defined 
          below:
          
             Field #1
             The "C" = DRIVER COMMAND record type specifier.

             Field #2
             The Driver Command keyword.
          
          
          Example:

          C , SetApplicationMap , "AppMap.map"

          
          Driver Command parameters must be placed in the test record 
          in the field position specified in the documentation.  
          Some parameters are optional.  However, the field associated 
          with that parameter must be honored.  If you wish to skip an 
          optional parameter you must still provide an empty field for 
          that parameter.
          
          Example:

          C, LaunchApplication, NOTEPAD, NOTEPAD.EXE, , , "AppMap.map"

          
          The above example shows two optional fields after NOTEPAD.EXE 
          which are given no value(skipped).
          
          Note that the full availability of all Driver Commands is now 
          spread across several files.  Together, all of these files provide 
          all the Driver Commands available to the core framework.
          

     **************************************************************/
     public static DDDriverCommands _DDDriverCommands = DDDriverCommands.getInstance();

    /*************************************************************
     static reference to DDDriverCounterCommands.class 

     
              Driver Commands for the Cycle, Suite, and Step drivers
          

     
          This keyword library provides Driver Commands that 
          can be used by all three DDE Drivers--CycleDriver, 
          SuiteDriver, and StepDriver.  That means they can 
          be used in any keyword driven test tables regardless 
          of the test tables level--Cycle, Suite, or Step.
          
          Each different driver command has different parameters 
          as described in its documentation.  For reference, the 
          first fields of ALL Driver Command test records are defined 
          below:
          
             Field #1
             The "C" = DRIVER COMMAND record type specifier.

             Field #2
             The Driver Command keyword.
          
          
          Example:

          c , SetApplicationMap , "AppMap.map"

          
          Driver Command parameters must be placed in the test record 
          in the field position specified in the documentation.  
          Some parameters are optional.  However, the field associated 
          with that parameter must be honored.  If you wish to skip an 
          optional parameter you must still provide an empty field for 
          that parameter.
          
          Example:

          c, LaunchApplication, NOTEPAD, NOTEPAD.EXE, , , "AppMap.map"

          
          The above example shows two optional fields after NOTEPAD.EXE 
          which are given no value(skipped).
          
          Note that the full availablility of all Driver Commands is now 
          spread across several files.  Together, all of these files provide 
          all the Driver Commands available to the core framework.
          
             DDDriverCommands
             Miscellaneous and often used Commands.

             DDDriverLogCommands
             Commands focused on logging test execution.

             DDDriverFlowCommands
             Commands focused on Error Recovery and Flow Control.

             DDDriverCounterCommands
             Commands focused on status tracking.

             DDDriverDeprecatedCommands
             Commands that are still provided for backward compatibility, but are no longer supported.

             DDDriverDebugCommands
             Commands focused on debugging test execution.

          
          

     **************************************************************/
     public static DDDriverCounterCommands _DDDriverCounterCommands = DDDriverCounterCommands.getInstance();

    /*************************************************************
     static reference to DDDriverDatabaseCommands.class 

     
        Driver Database Commands for the Cycle, Suite, and Step drivers
      

     
        
          This keyword library provides Driver Database Commands that can be used by all three DDE Drivers--CycleDriver, SuiteDriver, and StepDriver.  That means they can be used in any keyword driven test tables regardless of the test tables level--Cycle, Suite, or Step.
        
        
          Each different driver command has different parameters as described in its documentation.  For reference, the first fields of ALL Driver Command test records are defined below:
        
        
          Most all commands here require a data source name, Since this driver
          uses jdbc, then a format like "jdbc:odbc:drivername" is
          usually supplied for that parameter.  Another examples could
          be: jdbc:oracle:thin:@machine:1111:DBNAME 
          If the jdbc:odbc: is omitted, then the 'drivername' is
          assumed to be Sun's jdbc-odbc bridge
          (sun.jdbc.odbc.JdbcOdbcDriver) and that string (jdbc:odbc:)
          is automatically prepended. 
        
        
          Notice that for all of the commands here which accept the ADBAlias and
          ATableAlias parameters, that they are not used.  They are
          only there because there for compatibility with the
          Component Function versions of these commands (CFDatabase).
        
        
          In order to specify the driver, a 'setJdbcDriver' command
          can be used once at the beginning
        
        
          
            Field #1
          
          
            The "C" = DRIVER COMMAND record type specifier.
          
          
            Field #2
          
          
            The Driver Command keyword.
          
        
        
          Examples:
        
        
          C, setJdbcDriver, "sun.jdbc.odbc.JdbcOdbcDriver"
          C, setJdbcDriver, "oracle.jdbc.driver.OracleDriver"
        
        
          Driver Command parameters must be placed in the test record in the field position specified in the documentation. Some parameters are optional and can be skipped.   Optional parameters can only be skipped if all subsequent optional paramaters are also skipped.
        
        
          Example:
        
        
          c, deleteDBTableRecords, ADBAlias, ATableAlias, DBTableName, DBQueryCond, DBSourceName
        
        
          The above example skips the UserId, Password, and SQLStatus (they are not even included)
        
        
          
            
              DDDriverCommands
            
          
        
      

     **************************************************************/
     public static DDDriverDatabaseCommands _DDDriverDatabaseCommands = DDDriverDatabaseCommands.getInstance();

    /*************************************************************
     static reference to DDDriverDebugCommands.class 

     
              Debug Driver Commands for the Cycle, Suite, and Step drivers
          

     
          This keyword library provides Driver Commands that 
          can be used by all three DDE Drivers--CycleDriver, 
          SuiteDriver, and StepDriver.  That means they can 
          be used in any keyword driven test tables regardless 
          of the test tables level--Cycle, Suite, or Step.
          
          Each different driver command has different parameters 
          as described in its documentation.  For reference, the 
          first fields of ALL Driver Command test records are defined 
          below:
          
             Field #1
             The "C" = DRIVER COMMAND record type specifier.

             Field #2
             The Driver Command keyword.
          
          
          Example:

          c , SetApplicationMap , "AppMap.map"

          
          Driver Command parameters must be placed in the test record 
          in the field position specified in the documentation.  
          Some parameters are optional.  However, the field associated 
          with that parameter must be honored.  If you wish to skip an 
          optional parameter you must still provide an empty field for 
          that parameter.
          
          Example:

          c, LaunchApplication, NOTEPAD, NOTEPAD.EXE, , , "AppMap.map"

          
          The above example shows two optional fields after NOTEPAD.EXE 
          which are given no value(skipped).
          
          Note that the full availablility of all Driver Commands is now 
          spread across several files.  Together, all of these files provide 
          all the Driver Commands available to the core framework.
          
             DDDriverCommands
             Miscellaneous and often used Commands.

             DDDriverLogCommands
             Commands focused on logging test execution.

             DDDriverFlowCommands
             Commands focused on Error Recovery and Flow Control.

             DDDriverCounterCommands
             Commands focused on status tracking.

             DDDriverDeprecatedCommands
             Commands that are still provided for backward compatibility, but are no longer supported.

             DDDriverDebugCommands
             Commands focused on debugging test execution.

          
          

     **************************************************************/
     public static DDDriverDebugCommands _DDDriverDebugCommands = DDDriverDebugCommands.getInstance();

    /*************************************************************
     static reference to DDDriverFileCommands.class 

     
        Driver Commands for File Manipulations
      

     
         It is important to note that file command usage cannot readily be mixed and matched across 
         different SAFS engines.  For example, Files opened by Robot(RC) are only known to RC.  So 
         attempting to use SDC or RJ commands on files opened by RC are not likely to work in this 
         scenario.  This will be fixed in future releases.
      

     **************************************************************/
     public static DDDriverFileCommands _DDDriverFileCommands = DDDriverFileCommands.getInstance();

    /*************************************************************
     static reference to DDDriverFlowCommands.class 

     
              Driver Commands for the Cycle, Suite, and Step drivers
          

     
          This keyword library provides Driver Commands that 
          can be used by all three DDE Drivers--CycleDriver, 
          SuiteDriver, and StepDriver.  That means they can 
          be used in any keyword driven test tables regardless 
          of the test tables level--Cycle, Suite, or Step.
          
          Each different driver command has different parameters 
          as described in its documentation.  For reference, the 
          first fields of ALL Driver Command test records are defined 
          below:
          
             Field #1
             The "C" = DRIVER COMMAND record type specifier.

             Field #2
             The Driver Command keyword.
          
          
          Example:

          c , SetApplicationMap , "AppMap.map"

          
          Driver Command parameters must be placed in the test record 
          in the field position specified in the documentation.  
          Some parameters are optional.  However, the field associated 
          with that parameter must be honored.  If you wish to skip an 
          optional parameter you must still provide an empty field for 
          that parameter.
          
          Example:

          c, LaunchApplication, NOTEPAD, NOTEPAD.EXE, , , "AppMap.map"

          
          The above example shows two optional fields after NOTEPAD.EXE 
          which are given no value(skipped).
          
          Note that the full availablility of all Driver Commands is now 
          spread across several files.  Together, all of these files provide 
          all the Driver Commands available to the core framework.
          
             DDDriverCommands
             Miscellaneous and often used Commands.

             DDDriverLogCommands
             Commands focused on logging test execution.

             DDDriverFlowCommands
             Commands focused on Error Recovery and Flow Control.

             DDDriverCounterCommands
             Commands focused on status tracking.

             DDDriverDeprecatedCommands
             Commands that are still provided for backward compatibility, but are no longer supported.

             DDDriverDebugCommands
             Commands focused on debugging test execution.

          
          

     **************************************************************/
     public static DDDriverFlowCommands _DDDriverFlowCommands = DDDriverFlowCommands.getInstance();

    /*************************************************************
     static reference to DDDriverLogCommands.class 

     
              Driver Commands for Logging
          

     
          This keyword library provides Driver Commands that 
          can be used by all three DDE Drivers--CycleDriver, 
          SuiteDriver, and StepDriver.  That means they can 
          be used in any keyword driven test tables regardless 
          of the test tables level--Cycle, Suite, or Step.
          
          Each different driver command has different parameters 
          as described in its documentation.  For reference, the 
          first fields of ALL Driver Command test records are defined 
          below:
          
             Field #1
             The "C" = DRIVER COMMAND record type specifier.

             Field #2
             The Driver Command keyword.
          
          
          Example:

          c , SetApplicationMap , "AppMap.map"

          
          Driver Command parameters must be placed in the test record 
          in the field position specified in the documentation.  
          Some parameters are optional.  However, the field associated 
          with that parameter must be honored.  If you wish to skip an 
          optional parameter you must still provide an empty field for 
          that parameter.
          
          Example:

          c, LaunchApplication, NOTEPAD, NOTEPAD.EXE, , , "AppMap.map"

          
          The above example shows two optional fields after NOTEPAD.EXE 
          which are given no value(skipped).
          
          Note that the full availablility of all Driver Commands is now 
          spread across several files.  Together, all of these files provide 
          all the Driver Commands available to the core framework.
          
             DDDriverCommands
             Miscellaneous and often used Commands.

             DDDriverLogCommands
             Commands focused on logging test execution.

             DDDriverFlowCommands
             Commands focused on Error Recovery and Flow Control.

             DDDriverCounterCommands
             Commands focused on status tracking.

             DDDriverDeprecatedCommands
             Commands that are still provided for backward compatibility, but are no longer supported.

             DDDriverDebugCommands
             Commands focused on debugging test execution.

          
          

     **************************************************************/
     public static DDDriverLogCommands _DDDriverLogCommands = DDDriverLogCommands.getInstance();

    /*************************************************************
     static reference to DDDriverRestCommands.class 

     
				REST Driver Commands for handling Response like store,
				delete etc.
			

     
				
					This keyword library provides Driver Commands that
					can be used by all three DDE Drivers--CycleDriver,
					SuiteDriver, and StepDriver. That means they can be
					used in any keyword driven test tables regardless of
					the test tables level--Cycle, Suite, or Step.
				
				
					Each different driver command has different
					parameters as described in its documentation. For
					reference, the first fields of ALL Driver Command
					test records are defined below:
				
				
					Field #1
					
						The "C" = DRIVER COMMAND record type specifier.
					

					Field #2
					The Driver Command keyword.
				
				Example:

				
					C, RestStoreResponse, responseId, varnamePrefix
				

				
					Driver Command parameters must be placed in the test
					record in the field position specified in the
					documentation. Some parameters are optional.
					However, the field associated with that parameter
					must be honored. If you wish to skip an optional
					parameter you must still provide an empty field for
					that parameter.
				
				Example:

				
					C, LaunchApplication, NOTEPAD, NOTEPAD.EXE, , , "AppMap.map"
				

				
					The above example shows two optional fields after
					NOTEPAD.EXE which are given no value(skipped).
				
			

     **************************************************************/
     public static DDDriverRestCommands _DDDriverRestCommands = DDDriverRestCommands.getInstance();

    /*************************************************************
     static reference to DDDriverStringCommands.class 

     
        Driver Commands for String Manipulations
      

     Driver Command record format:
        
          
            Field #1
          
          
            The "C" = DRIVER COMMAND record type specifier.
          
          
            Field #2
          
          
            The Driver Command keyword.
          
        
        
          Example:
        
        
          c , SetApplicationMap , "AppMap.map"
        
      

     **************************************************************/
     public static DDDriverStringCommands _DDDriverStringCommands = DDDriverStringCommands.getInstance();

    /*************************************************************
     static reference to DDDriverTimerCommands.class 

     Driver Commands for Timer functions

     Driver Command record format:
                
                  
                    Field #1
                  
                  
                    The "C" = DRIVER COMMAND record type specifier.
                  
                  
                    Field #2
                  
                  
                    The Driver Command keyword.
                  
                
                
                  Example:
                
                
                  c , SetApplicationMap , "AppMap.map"
                                
            

     **************************************************************/
     public static DDDriverTimerCommands _DDDriverTimerCommands = DDDriverTimerCommands.getInstance();

    /*************************************************************
     static reference to DDDriverDeprecatedCommands.class 

     
              Deprecated Driver Commands for the Cycle, Suite, and Step drivers
          

     
          This keyword library provides Driver Commands that 
          can be used by all three DDE Drivers--CycleDriver, 
          SuiteDriver, and StepDriver.  That means they can 
          be used in any keyword driven test tables regardless 
          of the test tables level--Cycle, Suite, or Step.
          
          Each different driver command has different parameters 
          as described in its documentation.  For reference, the 
          first fields of ALL Driver Command test records are defined 
          below:
          
             Field #1
             The "C" = DRIVER COMMAND record type specifier.

             Field #2
             The Driver Command keyword.
          
          
          Example:

          c , SetApplicationMap , "AppMap.map"

          
          Driver Command parameters must be placed in the test record 
          in the field position specified in the documentation.  
          Some parameters are optional.  However, the field associated 
          with that parameter must be honored.  If you wish to skip an 
          optional parameter you must still provide an empty field for 
          that parameter.
          
          Example:

          c, LaunchApplication, NOTEPAD, NOTEPAD.EXE, , , "AppMap.map"

          
          The above example shows two optional fields after NOTEPAD.EXE 
          which are given no value(skipped).
          
          Note that the full availablility of all Driver Commands is now 
          spread across several files.  Together, all of these files provide 
          all the Driver Commands available to the core framework.
          
             DDDriverCommands
             Miscellaneous and often used Commands.

             DDDriverLogCommands
             Commands focused on logging test execution.

             DDDriverFlowCommands
             Commands focused on Error Recovery and Flow Control.

             DDDriverCounterCommands
             Commands focused on status tracking.

             DDDriverDeprecatedCommands
             Commands that are still provided for backward compatibility, but are no longer supported.

             DDDriverDebugCommands
             Commands focused on debugging test execution.

          
          

     **************************************************************/
     public static DDDriverDeprecatedCommands _DDDriverDeprecatedCommands = DDDriverDeprecatedCommands.getInstance();

    /*********** <pre> 
                 Enable and Disable support for App Map chaining.
              
		 The SAFSMAPS service historically looked for values in the 'default' AppMap.  
		 This is typically the last AppMap that was OPENed.  This service will now lookup 
		 values in what is called the AppMap 'chain'.  This chain is simply a 
		 Last-In-First-Out (LIFO) buffer of open AppMaps.  As an AppMap is OPENed it is 
		 placed at the top of the search chain.  AppMaps already in the chain are moved 
		 down the chain and searched in a LIFO order.  This allows a primary AppMap to 
		 be OPENed that might contain many default and shared values while subsequently 
		 opened AppMaps might have overriding entries, entries that build upon the 
		 defaults, or contain locale-specific entries for things like NLS testing.
		 
		 Support is currently provided via the SAFSMAPS service.
		 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS SDCommands</LI>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param mode  Optional:NO  DefaultVal:ON 
                 Enable("ON") or Disable("OFF") this feature.
              
     **********/
    static public DriverCommand appMapChaining (String mode) {

        if ( mode == null ) throw new IllegalArgumentException ( "appMapChaining.mode = null");
        DriverCommand dc = new DriverCommand(APPMAPCHAINING_KEYWORD);
        dc.addParameter(mode);
        return dc;
    }


    /*********** <pre> 
                 Enable and Disable support for embedded DDVariables in App Map strings.
              
                 When enabled (ON), the App Map processor will resolve DDVariable references when 
                 they are wrapped in curly braces {^varName} anywhere in the value portion of an 
                 AppMap entry.  There should be no spaces anywhere between the curly braces or the 
                 variable will be considered literal text and will not be resolved.
                 
		 ;these two items have no section identifier
		 ;they are part of an initial, unnamed section
		 AnItem  = A normal static value
		 NewItem = Another static value
		 
		 [ASection]
		 AnItem = A normal static value
		 Item2  = Type=Component;Text={^text}
		 Item3  = Type=Window;Caption={^caption};\;Type=CheckBox;Text={^text}
		 
		 The syntax for Item2 specifies that the value of the DDVariable ^text should be 
		 retrieved and embedded in the value provided for Item2.
		 
		 The syntax for Item3 specifies that the value of the DDVariables ^caption and 
		 ^text should be retrieved and embedded in the value provided for Item3.
		 
		 
		 Support is currently provided via the SAFSMAPS service.
		 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS SDCommands</LI>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param mode  Optional:NO  DefaultVal:ON 
                 Enable("ON") or Disable("OFF") this feature.
              
     **********/
    static public DriverCommand appMapResolve (String mode) {

        if ( mode == null ) throw new IllegalArgumentException ( "appMapResolve.mode = null");
        DriverCommand dc = new DriverCommand(APPMAPRESOLVE_KEYWORD);
        dc.addParameter(mode);
        return dc;
    }


    /*********** <pre> 
                 Copy the clipboard contents to a DDVariable.
              
                 Copy the clipboard contents to a DDVariable. 
                 This command can only copy text contents of the clipboard.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
        <LI>Google Android</LI>
    </UL>

     @param varName  Optional:NO 
                 The variable to copy the clipboard text into.
              
     **********/
    static public DriverCommand assignClipboardVariable (String varName) {

        if ( varName == null ) throw new IllegalArgumentException ( "assignClipboardVariable.varName = null");
        DriverCommand dc = new DriverCommand(ASSIGNCLIPBOARDVARIABLE_KEYWORD);
        dc.addParameter(varName);
        return dc;
    }


    /*********** <pre>Execute a command on an external system / application.
               Execute a command on an external system / application. This command presently supports only the STAF protocol.
               Command syntax, parameters, and values will be dependent upon the protocol specified and 
               the command issued to the remote (or even local) system.
                </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param protocol  Optional:No
              The name of the protocol to use. Presently only 'STAF' is supported.
     @param systemName  Optional:No
			  The name of the system to send the command to.
     @param serviceName  Optional:No
              The service name to be called on the external system / application.
     @param command  Optional:No
              The service command to be issued to the external system / application.
     @param varName  Optional:Yes  DefaultVal:result
                 The DDVariable root name to receive the results.
              
     @param parameters  Optional:Yes
              Additional parameters to be passed to the service command.
     **********/
    static public DriverCommand callRemote (String protocol, String systemName, String serviceName, String command, String varName, String parameters) {

        if ( command == null ) throw new IllegalArgumentException ( "callRemote.command = null");
        if ( protocol == null ) throw new IllegalArgumentException ( "callRemote.protocol = null");
        if ( serviceName == null ) throw new IllegalArgumentException ( "callRemote.serviceName = null");
        if ( systemName == null ) throw new IllegalArgumentException ( "callRemote.systemName = null");
        DriverCommand dc = new DriverCommand(CALLREMOTE_KEYWORD);
        dc.addParameter(protocol);
        dc.addParameter(systemName);
        dc.addParameter(serviceName);
        dc.addParameter(command);
        dc.addParameter(varName);
        dc.addParameter(parameters);
        return dc;
    }


    /*********** <pre>Execute a command on an external system / application.
               Execute a command on an external system / application. This command presently supports only the STAF protocol.
               Command syntax, parameters, and values will be dependent upon the protocol specified and 
               the command issued to the remote (or even local) system.
                </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        protocol -- Optional:No
              The name of the protocol to use. Presently only 'STAF' is supported.<BR/>        systemName -- Optional:No
			  The name of the system to send the command to.<BR/>        serviceName -- Optional:No
              The service name to be called on the external system / application.<BR/>        command -- Optional:No
              The service command to be issued to the external system / application.<BR/>        varName -- Optional:Yes  DefaultVal:result
                 The DDVariable root name to receive the results.
              <BR/>        parameters -- Optional:Yes
              Additional parameters to be passed to the service command.
    </UL>

     **********/
    static public DriverCommand callRemote (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "callRemote.parameters = null");
        DriverCommand dc = new DriverCommand(CALLREMOTE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Capture the location of the mouse pointer relative to the screen and save the x and y components into variables.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS SDCommands</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>AutomatedQA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param x_VariableName  Optional:NO 
                 The name of the DDVariable to store the X component of the mouse position.
              
     @param y_VariableName  Optional:NO 
                 The name of the DDVariable to store the Y component of the mouse position.
              
     **********/
    static public DriverCommand captureMousePositionOnScreen (String x_VariableName, String y_VariableName) {

        if ( x_VariableName == null ) throw new IllegalArgumentException ( "captureMousePositionOnScreen.x_VariableName = null");
        if ( y_VariableName == null ) throw new IllegalArgumentException ( "captureMousePositionOnScreen.y_VariableName = null");
        DriverCommand dc = new DriverCommand(CAPTUREMOUSEPOSITIONONSCREEN_KEYWORD);
        dc.addParameter(x_VariableName);
        dc.addParameter(y_VariableName);
        return dc;
    }


    /*********** <pre> 
                 Capture the location of the mouse pointer relative to the screen and save the x and y components into variables.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS SDCommands</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>AutomatedQA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        x_VariableName -- Optional:NO 
                 The name of the DDVariable to store the X component of the mouse position.
              <BR/>        y_VariableName -- Optional:NO 
                 The name of the DDVariable to store the Y component of the mouse position.
              
    </UL>

     **********/
    static public DriverCommand captureMousePositionOnScreen (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "captureMousePositionOnScreen.parameters = null");
        DriverCommand dc = new DriverCommand(CAPTUREMOUSEPOSITIONONSCREEN_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Clear storage of all DDVariables.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     **********/
    static public DriverCommand clearAllVariables () {

        DriverCommand dc = new DriverCommand(CLEARALLVARIABLES_KEYWORD);
        return dc;
    }


    /*********** <pre>
             Clear the internal application map cache.
           
             Engines often maintain an internal cache for AppMap data.
             In RobotJ, there exists a cache of
             TestObject objects, that cache is cleared by this command
             so that the recognition string algorithm has to be re-run
             the next time a window or component is to be recognized.
             This is useful for cases when a dialog pops up, goes
             away, then pops up again.  The cached version of the
             dialog or it's components may not correspond to the new 
             instance.  This command lets a tester clear the cache when
             this kind of condition may arrise.
             (Future: instruct the safsmaps service
             to reload it's application map data)
              </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
        <LI>AutomatedQA TestComplete</LI>
        <LI>Google Android</LI>
    </UL>

     **********/
    static public DriverCommand clearAppMapCache () {

        DriverCommand dc = new DriverCommand(CLEARAPPMAPCACHE_KEYWORD);
        return dc;
    }


    /*********** <pre> 
              Clear storage of all SAFS variables containing a specific prefix.
              
              Users can use SAFSVARS to store pseudo-arrays simply by adding a numeric suffix to any vaiable name prefix.
              
              For example:
              
              TCAFS.UID.1
              TCAFS.UID.2
              TCAFS.UID.3
              
              This command allows you to clear/delete all such SAFSVARS array variables with a specific prefix.
              
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param arrayName  Optional:NO 
                 The variable name prefix to use for the delete.
              
     **********/
    static public DriverCommand clearArrayVariables (String arrayName) {

        if ( arrayName == null ) throw new IllegalArgumentException ( "clearArrayVariables.arrayName = null");
        DriverCommand dc = new DriverCommand(CLEARARRAYVARIABLES_KEYWORD);
        dc.addParameter(arrayName);
        return dc;
    }


    /*********** <pre> 
                 Clear the contents of the Window's clipboard.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>Google Android</LI>
    </UL>

     **********/
    static public DriverCommand clearClipboard () {

        DriverCommand dc = new DriverCommand(CLEARCLIPBOARD_KEYWORD);
        return dc;
    }


    /*********** <pre> 
                 Close a named application process launched with LaunchApplication.
               
                 Currently we can only TERMINATE processes successfully 
                 providing a TASKID during LaunchApplication.  If we were 
                 unable to get a TASKID, then we will not be able to 
                 terminate the task with this command.
                 For IOS: This simply tries to close any and all instances of the 
                 running XCode Instruments application that is driving the IOS tests.
                 For Android testing: The AUT information is configured via the test INI file and 
                 the installed APKs.  There are no parameters to provide to the CloseApplication call when 
                 closing the application under test.
              
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Apple IOS</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param applicationID  Optional:NO 
                 The Application ID or reference provided to LaunchApplication
              
     **********/
    static public DriverCommand closeApplication (String applicationID) {

        if ( applicationID == null ) throw new IllegalArgumentException ( "closeApplication.applicationID = null");
        DriverCommand dc = new DriverCommand(CLOSEAPPLICATION_KEYWORD);
        dc.addParameter(applicationID);
        return dc;
    }


    /*********** <pre> 
                 By map ID, Close a opened Application Map in map chain.
               
                 By map ID, Close a opened Application Map in map chain. Closing an App Map releases all resources 
                 used by the map and removes it from any active App Map chaining.  If the closed App Map 
                 was the "default" map then the next App Map in the chain becomes the "default" App Map.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param applicationMap  Optional:NO 
                 The path and/or filename (ID) of the Application Map to close.
              
     **********/
    static public DriverCommand closeApplicationMap (String applicationMap) {

        if ( applicationMap == null ) throw new IllegalArgumentException ( "closeApplicationMap.applicationMap = null");
        DriverCommand dc = new DriverCommand(CLOSEAPPLICATIONMAP_KEYWORD);
        dc.addParameter(applicationMap);
        return dc;
    }


    /*********** <pre> 
                 Copy the value of a (dynamic) DDVariable to another. 
                 Both fields can contain literal strings, DDVariables, or
                 any expression that evaluates to a valid variable name.  The primary 
                 purpose of this is to allow for dynamic variable creation via expressions.
                 That is something that "SetVariableValues" cannot do.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param sourceVariable  Optional:NO 
                 The name of the variable to copy.
              
     @param destinationVariable  Optional:NO 
                 The name of the variable to receive the copy
              
     **********/
    static public DriverCommand copyVariableValueEx (String sourceVariable, String destinationVariable) {

        if ( destinationVariable == null ) throw new IllegalArgumentException ( "copyVariableValueEx.destinationVariable = null");
        if ( sourceVariable == null ) throw new IllegalArgumentException ( "copyVariableValueEx.sourceVariable = null");
        DriverCommand dc = new DriverCommand(COPYVARIABLEVALUEEX_KEYWORD);
        dc.addParameter(sourceVariable);
        dc.addParameter(destinationVariable);
        return dc;
    }


    /*********** <pre> 
                 Copy the value of a (dynamic) DDVariable to another. 
                 Both fields can contain literal strings, DDVariables, or
                 any expression that evaluates to a valid variable name.  The primary 
                 purpose of this is to allow for dynamic variable creation via expressions.
                 That is something that "SetVariableValues" cannot do.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        sourceVariable -- Optional:NO 
                 The name of the variable to copy.
              <BR/>        destinationVariable -- Optional:NO 
                 The name of the variable to receive the copy
              
    </UL>

     **********/
    static public DriverCommand copyVariableValueEx (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "copyVariableValueEx.parameters = null");
        DriverCommand dc = new DriverCommand(COPYVARIABLEVALUEEX_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Delay for a specified number of milliseconds.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param timeout  Optional:NO 
                 The number of milliseconds to delay.
              
     **********/
    static public DriverCommand delay (String timeout) {

        if ( timeout == null ) throw new IllegalArgumentException ( "delay.timeout = null");
        DriverCommand dc = new DriverCommand(DELAY_KEYWORD);
        dc.addParameter(timeout);
        return dc;
    }


    /*********** <pre>Delete network conditions.    </pre>    Supporting Engines:
    <P/><UL>
        <LI>OpenQA Selenium</LI>
    </UL>

     **********/
    static public DriverCommand deleteNetworkConditions () {

        DriverCommand dc = new DriverCommand(DELETENETWORKCONDITIONS_KEYWORD);
        return dc;
    }


    /*********** <pre> 
               Disable a particular test domain for testing.
           
               Some tools support multiple test domains like Java, Html, Net, and Win domains.
               This command instructs the engine to dynamically disable a particular test domain. 
               This is the opposite of, and often used in conjunction with the command 'EnableDomain'.
               Disabling unnecessary domains may drastically improve test performance.
               </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param domain  Optional:NO 
                 The generic name of the domain to disable.
              
     **********/
    static public DriverCommand disableDomain (String domain) {

        if ( domain == null ) throw new IllegalArgumentException ( "disableDomain.domain = null");
        DriverCommand dc = new DriverCommand(DISABLEDOMAIN_KEYWORD);
        dc.addParameter(domain);
        return dc;
    }


    /*********** <pre> 
               Enable a particular test domain for testing.
           
               Some tools support multiple test domains like Java, Html, Net, and Win domains.
               This command instructs the engine to dynamically enable a particular test domain. 
               This is the opposite of, and often used in conjunction with the command 'DisableDomain'.
               Disabling unnecessary domains may drastically improve test performance.
               </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param domain  Optional:NO 
                 The generic name of the domain to enable.
              
     **********/
    static public DriverCommand enableDomain (String domain) {

        if ( domain == null ) throw new IllegalArgumentException ( "enableDomain.domain = null");
        DriverCommand dc = new DriverCommand(ENABLEDOMAIN_KEYWORD);
        dc.addParameter(domain);
        return dc;
    }


    /*********** <pre> 
                 Enable and Disable enhanced expressions.
              
                 Enable and Disable enhanced expressions. 
                 When enabled, records are pre-processed for advanced
                 expressions (math and string) conversions with DDVariables.
                 When disabled, records are pre-processed with 
                 standard DDVariable conversions for backwards compatibility.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param mode  Optional:NO  DefaultVal:OFF 
                 The status for enhanced expression handling.
              
     **********/
    static public DriverCommand expressions (String mode) {

        if ( mode == null ) throw new IllegalArgumentException ( "expressions.mode = null");
        DriverCommand dc = new DriverCommand(EXPRESSIONS_KEYWORD);
        dc.addParameter(mode);
        return dc;
    }


    /*********** <pre>Assign a DDVariable a value from an App Map.
        Allows the extraction of an App Map item value into a DDVariable.  The user can optionally 
        provide the App Map ID and Section from which the entry is sought.  The default is to 
        retrieve the value from the default section in the default App Map.
           </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param appMapID  Optional:YES  DefaultVal:
              The ID provided for the AppMap when OPENed.
     @param section  Optional:YES  DefaultVal:
              The Section within the App Map to locate the entry.
     @param item  Optional:NO  DefaultVal:
              The Item within the App Map to retrieve.
     @param varName  Optional:NO  DefaultVal:
              The name of the variable to receive the value.
     **********/
    static public DriverCommand getAppMapValue (String appMapID, String section, String item, String varName) {

        if ( item == null ) throw new IllegalArgumentException ( "getAppMapValue.item = null");
        if ( varName == null ) throw new IllegalArgumentException ( "getAppMapValue.varName = null");
        DriverCommand dc = new DriverCommand(GETAPPMAPVALUE_KEYWORD);
        dc.addParameter(appMapID);
        dc.addParameter(section);
        dc.addParameter(item);
        dc.addParameter(varName);
        return dc;
    }


    /*********** <pre>Assign a DDVariable a value from an App Map.
        Allows the extraction of an App Map item value into a DDVariable.  The user can optionally 
        provide the App Map ID and Section from which the entry is sought.  The default is to 
        retrieve the value from the default section in the default App Map.
           </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        appMapID -- Optional:YES  DefaultVal:
              The ID provided for the AppMap when OPENed.<BR/>        section -- Optional:YES  DefaultVal:
              The Section within the App Map to locate the entry.<BR/>        item -- Optional:NO  DefaultVal:
              The Item within the App Map to retrieve.<BR/>        varName -- Optional:NO  DefaultVal:
              The name of the variable to receive the value.
    </UL>

     **********/
    static public DriverCommand getAppMapValue (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getAppMapValue.parameters = null");
        DriverCommand dc = new DriverCommand(GETAPPMAPVALUE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>Gets the current computer screen resolution and returns x and y values.
        Gets the current computer screen resolution and returns x and y values.
           </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param xWidthVariable  Optional:NO
              SAFSVARS name to be used to store x screen resolution
     @param yHeightVariable  Optional:NO
              SAFSVARS name to be used to store y screen resolution
     **********/
    static public DriverCommand getCompScreenResolution (String xWidthVariable, String yHeightVariable) {

        if ( xWidthVariable == null ) throw new IllegalArgumentException ( "getCompScreenResolution.xWidthVariable = null");
        if ( yHeightVariable == null ) throw new IllegalArgumentException ( "getCompScreenResolution.yHeightVariable = null");
        DriverCommand dc = new DriverCommand(GETCOMPSCREENRESOLUTION_KEYWORD);
        dc.addParameter(xWidthVariable);
        dc.addParameter(yHeightVariable);
        return dc;
    }


    /*********** <pre>Gets the current computer screen resolution and returns x and y values.
        Gets the current computer screen resolution and returns x and y values.
           </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        xWidthVariable -- Optional:NO
              SAFSVARS name to be used to store x screen resolution<BR/>        yHeightVariable -- Optional:NO
              SAFSVARS name to be used to store y screen resolution
    </UL>

     **********/
    static public DriverCommand getCompScreenResolution (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getCompScreenResolution.parameters = null");
        DriverCommand dc = new DriverCommand(GETCOMPSCREENRESOLUTION_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>Calculates the delta date positive or negative delta days from the supplied date
        Calculates the delta date positive or negative delta days from the supplied date.
        The resulting date is in the "Short Date" format.
           </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param sourceDateString  Optional:NO
              String containing the date from which to calculate the delta date
     @param deltaDays  Optional:NO
              Positive or Negative number of days to calculate date from source date
     @param resultString  Optional:NO
              Variable name to receive the newly formatted date.
            
     **********/
    static public DriverCommand getDeltaDate (String sourceDateString, String deltaDays, String resultString) {

        if ( deltaDays == null ) throw new IllegalArgumentException ( "getDeltaDate.deltaDays = null");
        if ( resultString == null ) throw new IllegalArgumentException ( "getDeltaDate.resultString = null");
        if ( sourceDateString == null ) throw new IllegalArgumentException ( "getDeltaDate.sourceDateString = null");
        DriverCommand dc = new DriverCommand(GETDELTADATE_KEYWORD);
        dc.addParameter(sourceDateString);
        dc.addParameter(deltaDays);
        dc.addParameter(resultString);
        return dc;
    }


    /*********** <pre>Calculates the delta date positive or negative delta days from the supplied date
        Calculates the delta date positive or negative delta days from the supplied date.
        The resulting date is in the "Short Date" format.
           </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        sourceDateString -- Optional:NO
              String containing the date from which to calculate the delta date<BR/>        deltaDays -- Optional:NO
              Positive or Negative number of days to calculate date from source date<BR/>        resultString -- Optional:NO
              Variable name to receive the newly formatted date.
            
    </UL>

     **********/
    static public DriverCommand getDeltaDate (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getDeltaDate.parameters = null");
        DriverCommand dc = new DriverCommand(GETDELTADATE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                Get the pause between two records, and assigns the value to a DDVariable. 
              
                Get the pause between two records, and assigns the value to a DDVariable.
                This time is milli-seconds.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param variableName  Optional:NO 
                 The name of the variable to receive the pause between two records.
              
     **********/
    static public DriverCommand getMillisBetweenRecords (String variableName) {

        if ( variableName == null ) throw new IllegalArgumentException ( "getMillisBetweenRecords.variableName = null");
        DriverCommand dc = new DriverCommand(GETMILLISBETWEENRECORDS_KEYWORD);
        dc.addParameter(variableName);
        return dc;
    }


    /*********** <pre>Get network conditions.    </pre>    Supporting Engines:
    <P/><UL>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param networkConditionsVar  Optional:NO 
                 The variable to hold the network's conditions.
              
     **********/
    static public DriverCommand getNetworkConditions (String networkConditionsVar) {

        if ( networkConditionsVar == null ) throw new IllegalArgumentException ( "getNetworkConditions.networkConditionsVar = null");
        DriverCommand dc = new DriverCommand(GETNETWORKCONDITIONS_KEYWORD);
        dc.addParameter(networkConditionsVar);
        return dc;
    }


    /*********** <pre> 
                 Assign the value of the specified Registry Key to a variable.
              On Windows XP (and higher?) this is accomplished via 
              the REG.EXE provided by the operating system.  If this program is NOT available 
              then the Registry commands will not work until another means is implemented--possibly 
              Windows Scripting Host scripts, etc..
              If the registry key does not exist then a failure will be recorded and no value--an  
              empty string--will be assigned to the variable.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS SDCommands</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param key  Optional:NO 
                 The Registry Key name to seek.
              
     @param keyValue  Optional:NO 
                 The value name under the parent key to seek.
              
     @param varName  Optional:NO 
                 The name of the variable to receive the value of the registry key.
              
     **********/
    static public DriverCommand getRegistryKeyValue (String key, String keyValue, String varName) {

        if ( key == null ) throw new IllegalArgumentException ( "getRegistryKeyValue.key = null");
        if ( keyValue == null ) throw new IllegalArgumentException ( "getRegistryKeyValue.keyValue = null");
        if ( varName == null ) throw new IllegalArgumentException ( "getRegistryKeyValue.varName = null");
        DriverCommand dc = new DriverCommand(GETREGISTRYKEYVALUE_KEYWORD);
        dc.addParameter(key);
        dc.addParameter(keyValue);
        dc.addParameter(varName);
        return dc;
    }


    /*********** <pre> 
                 Assign the value of the specified Registry Key to a variable.
              On Windows XP (and higher?) this is accomplished via 
              the REG.EXE provided by the operating system.  If this program is NOT available 
              then the Registry commands will not work until another means is implemented--possibly 
              Windows Scripting Host scripts, etc..
              If the registry key does not exist then a failure will be recorded and no value--an  
              empty string--will be assigned to the variable.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS SDCommands</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        key -- Optional:NO 
                 The Registry Key name to seek.
              <BR/>        keyValue -- Optional:NO 
                 The value name under the parent key to seek.
              <BR/>        varName -- Optional:NO 
                 The name of the variable to receive the value of the registry key.
              
    </UL>

     **********/
    static public DriverCommand getRegistryKeyValue (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getRegistryKeyValue.parameters = null");
        DriverCommand dc = new DriverCommand(GETREGISTRYKEYVALUE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                Get the delay after window is activated, and assigns the value to a DDVariable. 
              
                Get the delay after window is activated, and assigns the value to a DDVariable.
                This time is seconds.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param variableName  Optional:NO 
                 The name of the variable to receive the delay after window is activated.
              
     **********/
    static public DriverCommand getSecsAfterWindowActive (String variableName) {

        if ( variableName == null ) throw new IllegalArgumentException ( "getSecsAfterWindowActive.variableName = null");
        DriverCommand dc = new DriverCommand(GETSECSAFTERWINDOWACTIVE_KEYWORD);
        dc.addParameter(variableName);
        return dc;
    }


    /*********** <pre> 
                Get the delay before mouse down, and assigns the value to a DDVariable. 
              
                Get the delay before mouse down, and assigns the value to a DDVariable.
                This time is seconds.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param variableName  Optional:NO 
                 The name of the variable to receive the delay before mouse down.
              
     **********/
    static public DriverCommand getSecsBeforeMouseDown (String variableName) {

        if ( variableName == null ) throw new IllegalArgumentException ( "getSecsBeforeMouseDown.variableName = null");
        DriverCommand dc = new DriverCommand(GET_SECS_BEFORE_MOUSE_DOWN_KEYWORD);
        dc.addParameter(variableName);
        return dc;
    }


    /*********** <pre> 
                Get the delay before mouse up, and assigns the value to a DDVariable. 
              
                Get the delay before mouse up, and assigns the value to a DDVariable.
                This time is seconds.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param variableName  Optional:NO 
                 The name of the variable to receive the delay before mouse up.
              
     **********/
    static public DriverCommand getSecsBeforeMouseUp (String variableName) {

        if ( variableName == null ) throw new IllegalArgumentException ( "getSecsBeforeMouseUp.variableName = null");
        DriverCommand dc = new DriverCommand(GET_SECS_BEFORE_MOUSE_UP_KEYWORD);
        dc.addParameter(variableName);
        return dc;
    }


    /*********** <pre> 
                Get the delay of re-finding object, and assigns the value to a DDVariable. 
              
                Get the delay of re-finding object, and assigns the value to a DDVariable.
                This time is seconds.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param variableName  Optional:NO 
                 The name of the variable to receive the delay of re-finding object.
              
     **********/
    static public DriverCommand getSecsDelayRetryComponent (String variableName) {

        if ( variableName == null ) throw new IllegalArgumentException ( "getSecsDelayRetryComponent.variableName = null");
        DriverCommand dc = new DriverCommand(GETSECSDELAYRETRYCOMPONENT_KEYWORD);
        dc.addParameter(variableName);
        return dc;
    }


    /*********** <pre> 
                Get the timeout of finding object, and assigns the value to a DDVariable. 
              
                Get the timeout of finding object, and assigns the value to a DDVariable.
                This time is seconds.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param variableName  Optional:NO 
                 The name of the variable to receive the timeout of finding object.
              
     **********/
    static public DriverCommand getSecsSeekComponent (String variableName) {

        if ( variableName == null ) throw new IllegalArgumentException ( "getSecsSeekComponent.variableName = null");
        DriverCommand dc = new DriverCommand(GETSECSSEEKCOMPONENT_KEYWORD);
        dc.addParameter(variableName);
        return dc;
    }


    /*********** <pre> 
                Assigns the string value of the system date to a DDVariable. 
              
                Assigns the string value of the system date to a DDVariable. 
                This date is in the format MM-DD-YYYY.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param variableName  Optional:NO 
                 The name of the variable to receive the System Date.
              
     **********/
    static public DriverCommand getSystemDate (String variableName) {

        if ( variableName == null ) throw new IllegalArgumentException ( "getSystemDate.variableName = null");
        DriverCommand dc = new DriverCommand(GETSYSTEMDATE_KEYWORD);
        dc.addParameter(variableName);
        return dc;
    }


    /*********** <pre> 
                Assigns the string value of the system datetime to a DDVariable. 
              
                Assigns the string value of the system datetime to a DDVariable. 
                This date is in the format MM-DD-YYYY HH:MM:SS, it is in AM-PM 12-hours
                format (1-12) be default; If you set the second parameter 'GetMilitaryTime'
                to True, the time will be 24-hours military format (0-23). Use military time
                is recommanded, as am-pm time has confusion without AM or PM
                (example: 18:00 and 06:00 will be both 06:00)
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param variableName  Optional:NO 
                 The name of the variable to receive the System DateTime.
              
     @param getMilitaryTime  Optional:YES 
                 If true, the converted time is in 24-hours military time format
              
     **********/
    static public DriverCommand getSystemDateTime (String variableName, String getMilitaryTime) {

        if ( variableName == null ) throw new IllegalArgumentException ( "getSystemDateTime.variableName = null");
        DriverCommand dc = new DriverCommand(GETSYSTEMDATETIME_KEYWORD);
        dc.addParameter(variableName);
        dc.addParameter(getMilitaryTime);
        return dc;
    }


    /*********** <pre> 
                Assigns the string value of the system datetime to a DDVariable. 
              
                Assigns the string value of the system datetime to a DDVariable. 
                This date is in the format MM-DD-YYYY HH:MM:SS, it is in AM-PM 12-hours
                format (1-12) be default; If you set the second parameter 'GetMilitaryTime'
                to True, the time will be 24-hours military format (0-23). Use military time
                is recommanded, as am-pm time has confusion without AM or PM
                (example: 18:00 and 06:00 will be both 06:00)
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        variableName -- Optional:NO 
                 The name of the variable to receive the System DateTime.
              <BR/>        getMilitaryTime -- Optional:YES 
                 If true, the converted time is in 24-hours military time format
              
    </UL>

     **********/
    static public DriverCommand getSystemDateTime (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getSystemDateTime.parameters = null");
        DriverCommand dc = new DriverCommand(GETSYSTEMDATETIME_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                Assigns the string value of the current system time to a DDVariable. 
              
                Assigns the string value of the current system time to a DDVariable. 
                This date is in the format HH:MM:SS, it is in AM-PM 12-hours
                format (1-12) be default; If you set the second parameter 'GetMilitaryTime'
                to True, the time will be 24-hours military format (0-23). Use military time
                is recommanded, as am-pm time has confusion without AM or PM
                (example: 18:00 and 06:00 will be both 06:00)                
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param variableName  Optional:NO 
                 The name of the variable to receive the System Time.
              
     @param getMilitaryTime  Optional:YES 
                 If true, the converted time is in 24-hours military time format
              
     **********/
    static public DriverCommand getSystemTime (String variableName, String getMilitaryTime) {

        if ( variableName == null ) throw new IllegalArgumentException ( "getSystemTime.variableName = null");
        DriverCommand dc = new DriverCommand(GETSYSTEMTIME_KEYWORD);
        dc.addParameter(variableName);
        dc.addParameter(getMilitaryTime);
        return dc;
    }


    /*********** <pre> 
                Assigns the string value of the current system time to a DDVariable. 
              
                Assigns the string value of the current system time to a DDVariable. 
                This date is in the format HH:MM:SS, it is in AM-PM 12-hours
                format (1-12) be default; If you set the second parameter 'GetMilitaryTime'
                to True, the time will be 24-hours military format (0-23). Use military time
                is recommanded, as am-pm time has confusion without AM or PM
                (example: 18:00 and 06:00 will be both 06:00)                
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        variableName -- Optional:NO 
                 The name of the variable to receive the System Time.
              <BR/>        getMilitaryTime -- Optional:YES 
                 If true, the converted time is in 24-hours military time format
              
    </UL>

     **********/
    static public DriverCommand getSystemTime (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getSystemTime.parameters = null");
        DriverCommand dc = new DriverCommand(GETSYSTEMTIME_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>Send an HTTP GET request, and get the response.    </pre>    Supporting Engines:
    <P/><UL>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param uRL  Optional:NoThe URL to request.
     @param variable  Optional:NoThe name of the variable holding the response sent back from the server.
     @param timeout  Optional:YesThe timeout (in seconds) waiting for the response from HTTP server. The default value is 120 seconds.
     @param headerName  Optional:YesThe HTTP request header name.
     @param headerValue  Optional:YesThe value to set for the HTTP request header.
     **********/
    static public DriverCommand getURL (String uRL, String variable, String timeout, String headerName, String headerValue) {

        if ( uRL == null ) throw new IllegalArgumentException ( "getURL.uRL = null");
        if ( variable == null ) throw new IllegalArgumentException ( "getURL.variable = null");
        DriverCommand dc = new DriverCommand(GETURL_KEYWORD);
        dc.addParameter(uRL);
        dc.addParameter(variable);
        dc.addParameter(timeout);
        dc.addParameter(headerName);
        dc.addParameter(headerValue);
        return dc;
    }


    /*********** <pre>Send an HTTP GET request, and get the response.    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        uRL -- Optional:NoThe URL to request.<BR/>        variable -- Optional:NoThe name of the variable holding the response sent back from the server.<BR/>        timeout -- Optional:YesThe timeout (in seconds) waiting for the response from HTTP server. The default value is 120 seconds.<BR/>        headerName -- Optional:YesThe HTTP request header name.<BR/>        headerValue -- Optional:YesThe value to set for the HTTP request header.
    </UL>

     **********/
    static public DriverCommand getURL (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getURL.parameters = null");
        DriverCommand dc = new DriverCommand(GETURL_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>Get the engine VERSION
        Used to specify the VERSION of the engine.
           </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param variable  Optional:NO  DefaultVal:1.0
              A variable to accept the VERSION
     **********/
    static public DriverCommand getVersion (String variable) {

        if ( variable == null ) throw new IllegalArgumentException ( "getVersion.variable = null");
        DriverCommand dc = new DriverCommand(GETVERSION_KEYWORD);
        dc.addParameter(variable);
        return dc;
    }


    /*********** <pre> 
                 Hide the soft keyboard.
              
                 Hide the soft keyboard. The soft keyboard will be shown if user click on an edit box, 
                 but the soft keyboard will show over the other components. User can use this keyword 
                 to make this soft keyboard disappear.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
    </UL>

     **********/
    static public DriverCommand hideSoftKeyboard () {

        DriverCommand dc = new DriverCommand(HIDESOFTKEYBOARD_KEYWORD);
        return dc;
    }


    /*********** <pre> 
                 Turn on or off the component highlight functionality.
              
		When enabled (ON) each call to a component function will temporarily highlight 
		the targeted component. The intent is to provide a design-time verification that the tool 
		is finding the desired target component. It is not recommended this command be used during 
		production runtime testing as there can be significant performance impact with some tools.
	       </pre>    Supporting Engines:
    <P/><UL>
        <LI>AutomatedQA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param mode  Optional:Yes 
                 The status for highlight functionality. It can be On or Off. The Default is OFF.
              
     **********/
    static public DriverCommand highLight (String mode) {

        DriverCommand dc = new DriverCommand(HIGHLIGHT_KEYWORD);
        dc.addParameter(mode);
        return dc;
    }


    /*********** <pre> 
                 Identify and Launch a specified application
              
              For IOS: This command is used to Launch the IOS Instruments testing tool.
              The user-defined Instrument's tracetemplate is used to launch the required application. 
              The tester must run the Driver Command UseIOSFunctions set to "ON" before 
              LaunchApplication or the IOS implementation of the command will not be invoked.
              For IOS Simulator testing: The Trace Template must be configured to hold all required 
              information such as:
              
              the application to be tested
              the IOS SDK Version to use/simulate
              the location for Instruments output logging
              
              For IOS Device testing: The Trace Template should be configured to hold the same 
              information. However, at runtime the user still has to (re)specify the device name and 
              application to run in the LaunchApplication CMDLineParams (see below). In addition, 
              the devicename and/or appname CANNOT contain certain special characters like an apostrophe or 
              single-quote (') since this will prevent AppleScript from making their proper selection.
              For Android testing: The AUT information is configured via the test INI file and 
              the installed APKs.  There are no parameters to provide to the LaunchApplication call when 
              launching the application to be tested.
              
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Apple IOS</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param applicationID  Optional:NO 
                 A text ID or name to reference the application
              
     @param executablePath  Optional:NO 
                 The path, filename, and parameters for the executable OR an ApplicationConstant.
              
     @param workDir  Optional:YES  DefaultVal: 
                 A Working Directory for the application (if required)
              
     @param cMDLineParam  Optional:YES  DefaultVal: 
                 Separate command line parameters for the application (if required).
              
     @param appMap  Optional:YES 
                 Filename to the Application Map for the application.
              
     **********/
    static public DriverCommand launchApplication (String applicationID, String executablePath, String workDir, String cMDLineParam, String appMap) {

        if ( applicationID == null ) throw new IllegalArgumentException ( "launchApplication.applicationID = null");
        if ( executablePath == null ) throw new IllegalArgumentException ( "launchApplication.executablePath = null");
        DriverCommand dc = new DriverCommand(LAUNCHAPPLICATION_KEYWORD);
        dc.addParameter(applicationID);
        dc.addParameter(executablePath);
        dc.addParameter(workDir);
        dc.addParameter(cMDLineParam);
        dc.addParameter(appMap);
        return dc;
    }


    /*********** <pre> 
                 Identify and Launch a specified application
              
              For IOS: This command is used to Launch the IOS Instruments testing tool.
              The user-defined Instrument's tracetemplate is used to launch the required application. 
              The tester must run the Driver Command UseIOSFunctions set to "ON" before 
              LaunchApplication or the IOS implementation of the command will not be invoked.
              For IOS Simulator testing: The Trace Template must be configured to hold all required 
              information such as:
              
              the application to be tested
              the IOS SDK Version to use/simulate
              the location for Instruments output logging
              
              For IOS Device testing: The Trace Template should be configured to hold the same 
              information. However, at runtime the user still has to (re)specify the device name and 
              application to run in the LaunchApplication CMDLineParams (see below). In addition, 
              the devicename and/or appname CANNOT contain certain special characters like an apostrophe or 
              single-quote (') since this will prevent AppleScript from making their proper selection.
              For Android testing: The AUT information is configured via the test INI file and 
              the installed APKs.  There are no parameters to provide to the LaunchApplication call when 
              launching the application to be tested.
              
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Apple IOS</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        applicationID -- Optional:NO 
                 A text ID or name to reference the application
              <BR/>        executablePath -- Optional:NO 
                 The path, filename, and parameters for the executable OR an ApplicationConstant.
              <BR/>        workDir -- Optional:YES  DefaultVal: 
                 A Working Directory for the application (if required)
              <BR/>        cMDLineParam -- Optional:YES  DefaultVal: 
                 Separate command line parameters for the application (if required).
              <BR/>        appMap -- Optional:YES 
                 Filename to the Application Map for the application.
              
    </UL>

     **********/
    static public DriverCommand launchApplication (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "launchApplication.parameters = null");
        DriverCommand dc = new DriverCommand(LAUNCHAPPLICATION_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Display a user-defined message dialog and wait until dismissed.
              
                 Display a user-defined message dialog and wait until dismissed.
                 If prompting the user to perform some action the message should indicate the action 
                 should be completed BEFORE the dialog is dismissed.  Once the dialog is dismissed 
                 automated test execution proceeds immediately.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param message  Optional:NO 
                 The text message to be displayed in the dialog.
              
     @param title  Optional:YES 
                 A short user-defined title for the dialog.
              
     **********/
    static public DriverCommand notifyAndWait (String message, String title) {

        if ( message == null ) throw new IllegalArgumentException ( "notifyAndWait.message = null");
        DriverCommand dc = new DriverCommand(NOTIFYANDWAIT_KEYWORD);
        dc.addParameter(message);
        dc.addParameter(title);
        return dc;
    }


    /*********** <pre> 
                 Display a user-defined message dialog and wait until dismissed.
              
                 Display a user-defined message dialog and wait until dismissed.
                 If prompting the user to perform some action the message should indicate the action 
                 should be completed BEFORE the dialog is dismissed.  Once the dialog is dismissed 
                 automated test execution proceeds immediately.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        message -- Optional:NO 
                 The text message to be displayed in the dialog.
              <BR/>        title -- Optional:YES 
                 A short user-defined title for the dialog.
              
    </UL>

     **********/
    static public DriverCommand notifyAndWait (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "notifyAndWait.parameters = null");
        DriverCommand dc = new DriverCommand(NOTIFYANDWAIT_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Pause for a specified number of seconds.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param timeout  Optional:NO 
                 The number of seconds to Pause.
              
     **********/
    static public DriverCommand pause (String timeout) {

        if ( timeout == null ) throw new IllegalArgumentException ( "pause.timeout = null");
        DriverCommand dc = new DriverCommand(PAUSE_KEYWORD);
        dc.addParameter(timeout);
        return dc;
    }


    /*********** <pre> 
                 Save the clipboard contents to a text file.
              
                 Save the clipboard contents to a text file.
                 
                 This command can only save text contents of the clipboard. The
                 length of the clipboard text should not exceed 32,767 characters
                 due to the inherent size limit of SQABasic's String data type.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Google Android</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param file  Optional:NO 
                 The file to save the clipboard contents to.
              
     @param encoding  Optional:Yes 
                 The encoding used to write a file.
              
     **********/
    static public DriverCommand saveClipboardToFile (String file, String encoding) {

        if ( file == null ) throw new IllegalArgumentException ( "saveClipboardToFile.file = null");
        DriverCommand dc = new DriverCommand(SAVECLIPBOARDTOFILE_KEYWORD);
        dc.addParameter(file);
        dc.addParameter(encoding);
        return dc;
    }


    /*********** <pre> 
                 Save the clipboard contents to a text file.
              
                 Save the clipboard contents to a text file.
                 
                 This command can only save text contents of the clipboard. The
                 length of the clipboard text should not exceed 32,767 characters
                 due to the inherent size limit of SQABasic's String data type.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Google Android</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        file -- Optional:NO 
                 The file to save the clipboard contents to.
              <BR/>        encoding -- Optional:Yes 
                 The encoding used to write a file.
              
    </UL>

     **********/
    static public DriverCommand saveClipboardToFile (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "saveClipboardToFile.parameters = null");
        DriverCommand dc = new DriverCommand(SAVECLIPBOARDTOFILE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>Send an HTTP GET request, and save the response into a file.    </pre>    Supporting Engines:
    <P/><UL>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param uRL  Optional:NoThe URL to request.
     @param file  Optional:NoThe name of the file holding the response sent back from the server.
     @param timeout  Optional:YesThe timeout (in seconds) waiting for the response from HTTP server. The default value is 120 seconds.
     @param headerName  Optional:YesThe HTTP request header name.
     @param headerValue  Optional:YesThe value to set for the HTTP request header.
     **********/
    static public DriverCommand saveURLToFile (String uRL, String file, String timeout, String headerName, String headerValue) {

        if ( file == null ) throw new IllegalArgumentException ( "saveURLToFile.file = null");
        if ( uRL == null ) throw new IllegalArgumentException ( "saveURLToFile.uRL = null");
        DriverCommand dc = new DriverCommand(SAVEURLTOFILE_KEYWORD);
        dc.addParameter(uRL);
        dc.addParameter(file);
        dc.addParameter(timeout);
        dc.addParameter(headerName);
        dc.addParameter(headerValue);
        return dc;
    }


    /*********** <pre>Send an HTTP GET request, and save the response into a file.    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        uRL -- Optional:NoThe URL to request.<BR/>        file -- Optional:NoThe name of the file holding the response sent back from the server.<BR/>        timeout -- Optional:YesThe timeout (in seconds) waiting for the response from HTTP server. The default value is 120 seconds.<BR/>        headerName -- Optional:YesThe HTTP request header name.<BR/>        headerValue -- Optional:YesThe value to set for the HTTP request header.
    </UL>

     **********/
    static public DriverCommand saveURLToFile (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "saveURLToFile.parameters = null");
        DriverCommand dc = new DriverCommand(SAVEURLTOFILE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                Move mouse wheel forward (up) or backward (down). 
              
                Move mouse wheel forward (up) or backward (down).
                A positive value indicates the wheel was moved forward (up) and a negative value indicates the wheel was moved backward (down).
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>AutomatedQA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param numClicks  Optional:NO 
                 The number of mouse wheel clicks to move.
.              
     **********/
    static public DriverCommand scrollWheel (String numClicks) {

        if ( numClicks == null ) throw new IllegalArgumentException ( "scrollWheel.numClicks = null");
        DriverCommand dc = new DriverCommand(SCROLLWHEEL_KEYWORD);
        dc.addParameter(numClicks);
        return dc;
    }


    /*********** <pre>Send email notification with attachments.Send email notification with attachments.
                      Mutiple TOs, custom subject line, custom message and attachment are allowed. 
                      HTML tag pass into message to display message into HTML format.
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param from  Optional:NOEmail address sending the Email.
     @param to  Optional:NOEmail addresses to receive the email.
     @param subject  Optional:NOThe Subject of the email.
     @param message  Optional:YESText or HTML message.
     @param attachment  Optional:YESEmail attachment file path
     **********/
    static public DriverCommand sendEmail (String from, String to, String subject, String message, String attachment) {

        if ( from == null ) throw new IllegalArgumentException ( "sendEmail.from = null");
        if ( subject == null ) throw new IllegalArgumentException ( "sendEmail.subject = null");
        if ( to == null ) throw new IllegalArgumentException ( "sendEmail.to = null");
        DriverCommand dc = new DriverCommand(SENDEMAIL_KEYWORD);
        dc.addParameter(from);
        dc.addParameter(to);
        dc.addParameter(subject);
        dc.addParameter(message);
        dc.addParameter(attachment);
        return dc;
    }


    /*********** <pre>Send email notification with attachments.Send email notification with attachments.
                      Mutiple TOs, custom subject line, custom message and attachment are allowed. 
                      HTML tag pass into message to display message into HTML format.
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        from -- Optional:NOEmail address sending the Email.<BR/>        to -- Optional:NOEmail addresses to receive the email.<BR/>        subject -- Optional:NOThe Subject of the email.<BR/>        message -- Optional:YESText or HTML message.<BR/>        attachment -- Optional:YESEmail attachment file path
    </UL>

     **********/
    static public DriverCommand sendEmail (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "sendEmail.parameters = null");
        DriverCommand dc = new DriverCommand(SENDEMAIL_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Provide the Application Map for the DDE to use
               
                 Provide the Application Map for the DDE to use.  This command must be used 
                 prior to ANY other command or script referencing the AppMap can be used.  The 
                 AppMap can also be set by the DDE initialization script or another script with 
                 the function AUSetCurrentAppMap.
              
              In addition to loading the Application Map, WRAFS will also load the GUI Map file
              in Winrunner. For this reason, the Application map and GUI Map File must have
              the same name.
              
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param applicationMap  Optional:NO 
                 The path and/or filename of the Application Map to use
              
     **********/
    static public DriverCommand setApplicationMap (String applicationMap) {

        if ( applicationMap == null ) throw new IllegalArgumentException ( "setApplicationMap.applicationMap = null");
        DriverCommand dc = new DriverCommand(SETAPPLICATIONMAP_KEYWORD);
        dc.addParameter(applicationMap);
        return dc;
    }


    /*********** <pre> 
                 Set/Change the directory in which the framework will find 
                 benchmark files by default.
              
                  The path must already exist.  If the path is invalid 
                  the previous setting will be retained (and logged).
                  Any incomplete path will be assumed to be relative 
                  to the current project directory.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param path  Optional:NO 
                 The full or project relative path to the new directory.
              
     **********/
    static public DriverCommand setBenchDirectory (String path) {

        if ( path == null ) throw new IllegalArgumentException ( "setBenchDirectory.path = null");
        DriverCommand dc = new DriverCommand(SETBENCHDIRECTORY_KEYWORD);
        dc.addParameter(path);
        return dc;
    }


    /*********** <pre> 
                 Set the clipboard contents to a string.
              
                 Set the clipboard contents to a string.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Google Android</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param str  Optional:NO 
                 The string to set the clipboard contents to.
              
     **********/
    static public DriverCommand setClipboard (String str) {

        if ( str == null ) throw new IllegalArgumentException ( "setClipboard.str = null");
        DriverCommand dc = new DriverCommand(SETCLIPBOARD_KEYWORD);
        dc.addParameter(str);
        return dc;
    }


    /*********** <pre> 
                 Set a Window or Window Component as the current Robot context.
              
                 Set a Window or Window Component as the current Robot context.
                 
                 Note, this does not SetFocus on the object.  This 
                 sets an object of reference for future Robot commands.  This may 
                 generate an ignored Script Command Failure if the object is not 
                 valid or visible.
                 
                 This command is not necessary for the normal operation of the DDE 
                 and the processing of Test records.  The DDE will automatically 
                 generate numerous SetContext commands during the normal processing 
                 of Test records.  This command is for other extraordinary cases not 
                 covered by normal Test record processing.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
        <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param windowID  Optional:NO 
                 A Window reference from the AppMap
              
     @param componentID  Optional:NO 
                 A reference from the AppMap for the Component within the Window.
              
     **********/
    static public DriverCommand setContext (String windowID, String componentID) {

        if ( componentID == null ) throw new IllegalArgumentException ( "setContext.componentID = null");
        if ( windowID == null ) throw new IllegalArgumentException ( "setContext.windowID = null");
        DriverCommand dc = new DriverCommand(SETCONTEXT_KEYWORD);
        dc.addParameter(windowID);
        dc.addParameter(componentID);
        return dc;
    }


    /*********** <pre> 
                 Set a Window or Window Component as the current Robot context.
              
                 Set a Window or Window Component as the current Robot context.
                 
                 Note, this does not SetFocus on the object.  This 
                 sets an object of reference for future Robot commands.  This may 
                 generate an ignored Script Command Failure if the object is not 
                 valid or visible.
                 
                 This command is not necessary for the normal operation of the DDE 
                 and the processing of Test records.  The DDE will automatically 
                 generate numerous SetContext commands during the normal processing 
                 of Test records.  This command is for other extraordinary cases not 
                 covered by normal Test record processing.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
        <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        windowID -- Optional:NO 
                 A Window reference from the AppMap
              <BR/>        componentID -- Optional:NO 
                 A reference from the AppMap for the Component within the Window.
              
    </UL>

     **********/
    static public DriverCommand setContext (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "setContext.parameters = null");
        DriverCommand dc = new DriverCommand(SETCONTEXT_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Set/Change the directory in which the framework will locate 
                 file compare differences.
              
                  The path must already exist.  If the path is invalid 
                  the previous setting will be retained (and logged).
                  Any incomplete path will be assumed to be relative 
                  to the current project directory.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param path  Optional:NO 
                 The full or project relative path to the new directory.
              
     **********/
    static public DriverCommand setDifDirectory (String path) {

        if ( path == null ) throw new IllegalArgumentException ( "setDifDirectory.path = null");
        DriverCommand dc = new DriverCommand(SETDIFDIRECTORY_KEYWORD);
        dc.addParameter(path);
        return dc;
    }


    /*********** <pre> 
                 Give a Window or Window Component input focus.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
        <LI>AutomatedQA TestComplete</LI>
        <LI>AUTOIT Team Autoit</LI>
    </UL>

     @param windowID  Optional:NO 
                 A Window reference from the AppMap
              
     @param componentID  Optional:NO 
                 A reference from the AppMap for the Component within the Window to get input focus.
              
     **********/
    static public DriverCommand setFocus (String windowID, String componentID) {

        if ( componentID == null ) throw new IllegalArgumentException ( "setFocus.componentID = null");
        if ( windowID == null ) throw new IllegalArgumentException ( "setFocus.windowID = null");
        DriverCommand dc = new DriverCommand(SETFOCUS_KEYWORD);
        dc.addParameter(windowID);
        dc.addParameter(componentID);
        return dc;
    }


    /*********** <pre> 
                 Give a Window or Window Component input focus.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
        <LI>AutomatedQA TestComplete</LI>
        <LI>AUTOIT Team Autoit</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        windowID -- Optional:NO 
                 A Window reference from the AppMap
              <BR/>        componentID -- Optional:NO 
                 A reference from the AppMap for the Component within the Window to get input focus.
              
    </UL>

     **********/
    static public DriverCommand setFocus (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "setFocus.parameters = null");
        DriverCommand dc = new DriverCommand(SETFOCUS_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Enable/Disable verbose debug log output and high-res failure snapshots.
              
                 By default the image-based testing algorithm writes JPG screenshots to the Datapool\Test 
                 directory when an image search fails to locate the desired image onscreen.  These images 
                 can help the user know the state of the system at the time of a specific test failure.
                 
                 However, these images are not suitable for more advanced debugging purposes such as finding 
                 out 'why' a target image was not found in the screenshot when it appears it should have been 
                 found.
                 
                 Enabling image debugging allows the system to output full-resolution BMP images into the 
                 Datapool\Test directory instead of JPG images.  It also writes more verbose debug information 
                 into the SAFS Debug Log if the user has the Debug Log running during the test. 
                 See: Debug Log Doc
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param mode  Optional:NO  DefaultVal:OFF 
                 The boolean status for enabling extended image debugging. 
              
     **********/
    static public DriverCommand setImageDebug (String mode) {

        if ( mode == null ) throw new IllegalArgumentException ( "setImageDebug.mode = null");
        DriverCommand dc = new DriverCommand(SETIMAGEDEBUG_KEYWORD);
        dc.addParameter(mode);
        return dc;
    }


    /*********** <pre> 
                 Enable/Disable Image-Based Testing Fuzzy Matching.
              
                 Allows more robust fuzzy matching on image comparisons during Image-Based Testing.  
                 Image-Based Testing recognition strings must have a BitTolerance (BT) of less than 
                 100% specified for an image that is intended to be found with the fuzzy matching algorithm.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param mode  Optional:NO  DefaultVal:OFF 
                 The boolean status for enabling extended image-based fuzzy matching. 
              
     **********/
    static public DriverCommand setImageFuzzyMatching (String mode) {

        if ( mode == null ) throw new IllegalArgumentException ( "setImageFuzzyMatching.mode = null");
        DriverCommand dc = new DriverCommand(SETIMAGEFUZZYMATCHING_KEYWORD);
        dc.addParameter(mode);
        return dc;
    }


    /*********** <pre> 
                Set the pause between two records. 
              
                Set the pause between two records.
                This time is milli-seconds.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param value  Optional:NO 
                 The value of the pause between two records.
              
     **********/
    static public DriverCommand setMillisBetweenRecords (String value) {

        if ( value == null ) throw new IllegalArgumentException ( "setMillisBetweenRecords.value = null");
        DriverCommand dc = new DriverCommand(SETMILLISBETWEENRECORDS_KEYWORD);
        dc.addParameter(value);
        return dc;
    }


    /*********** <pre> 
                 Turn on or trun off the multi-thread-search way to search an image.
              
                 Turn on or trun off the multi-thread-search way to search an image.
                 If set true, program will search an image by multi-thread; If false, program
                 will use single-thread to search.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param onOrOff  Optional:NO 
                 Turn on or turn off multi-thread-search. This parameter should be given as "On" or "Off".
              
     **********/
    static public DriverCommand setMultipleThreadSearch (String onOrOff) {

        if ( onOrOff == null ) throw new IllegalArgumentException ( "setMultipleThreadSearch.onOrOff = null");
        DriverCommand dc = new DriverCommand(SETMULTIPLETHREADSEARCH_KEYWORD);
        dc.addParameter(onOrOff);
        return dc;
    }


    /*********** <pre>Set network conditions.    </pre>    Supporting Engines:
    <P/><UL>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param networkConditions  Optional:NO 
                 The network's conditions to set.
              
     **********/
    static public DriverCommand setNetworkConditions (String networkConditions) {

        if ( networkConditions == null ) throw new IllegalArgumentException ( "setNetworkConditions.networkConditions = null");
        DriverCommand dc = new DriverCommand(SETNETWORKCONDITIONS_KEYWORD);
        dc.addParameter(networkConditions);
        return dc;
    }


    /*********** <pre> 
                 Set/Change the framework project directory.
              
                  The path must already exist.  If the path is invalid 
                  the previous setting will be retained (and logged).
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param path  Optional:NO 
                 The full path to the new directory.
              
     **********/
    static public DriverCommand setProjectDirectory (String path) {

        if ( path == null ) throw new IllegalArgumentException ( "setProjectDirectory.path = null");
        DriverCommand dc = new DriverCommand(SETPROJECTDIRECTORY_KEYWORD);
        dc.addParameter(path);
        return dc;
    }


    /*********** <pre> 
                 Set/Change the Bench, Test, and Dif directories 
                 to be subdirectories off of the provided path.
              
                 The path must already exist.  If the path is invalid 
                 the previous settings for Bench, Test, and Dif will
                 be retained and a FAILURE will be reported.  The Bench, 
                 Test, and Dif subdirectories must also exist.
                          
                 Any incomplete path will be assumed to be relative 
                 to the current project directory.  It is important 
                 to note that the provided path can be valid, yet 
                 the expected "Bench", "Test", and "Dif" subdirectories 
                 may not be valid.  In that scenario, no failure 
                 will be reported, and the previous settings for 
                 Bench, Test, and Dif will be retained (and logged).
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param path  Optional:NO 
                 The full or project relative path to the root directory for
                 Bench, Test, and Dif.
              
     **********/
    static public DriverCommand setRootVerifyDirectory (String path) {

        if ( path == null ) throw new IllegalArgumentException ( "setRootVerifyDirectory.path = null");
        DriverCommand dc = new DriverCommand(SETROOTVERIFYDIRECTORY_KEYWORD);
        dc.addParameter(path);
        return dc;
    }


    /*********** <pre> 
                Set the delay after window is activated. 
              
                Set the delay after window is activated.
                This time is seconds.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param value  Optional:NO 
                 The value of the delay after window is activated.
              
     **********/
    static public DriverCommand setSecsAfterWindowActive (String value) {

        if ( value == null ) throw new IllegalArgumentException ( "setSecsAfterWindowActive.value = null");
        DriverCommand dc = new DriverCommand(SETSECSAFTERWINDOWACTIVE_KEYWORD);
        dc.addParameter(value);
        return dc;
    }


    /*********** <pre> 
                Set the delay before mouse down. 
              
                Set the delay before mouse down.
                This time is seconds.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param value  Optional:NO 
                 The value of the delay before mouse down.
              
     **********/
    static public DriverCommand setSecsBeforeMouseDown (String value) {

        if ( value == null ) throw new IllegalArgumentException ( "setSecsBeforeMouseDown.value = null");
        DriverCommand dc = new DriverCommand(SET_SECS_BEFORE_MOUSE_DOWN_KEYWORD);
        dc.addParameter(value);
        return dc;
    }


    /*********** <pre> 
                Set the delay before mouse up. 
              
                Set the delay before mouse up.
                This time is seconds.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param value  Optional:NO 
                 The value of the delay before mouse up.
              
     **********/
    static public DriverCommand setSecsBeforeMouseUp (String value) {

        if ( value == null ) throw new IllegalArgumentException ( "setSecsBeforeMouseUp.value = null");
        DriverCommand dc = new DriverCommand(SET_SECS_BEFORE_MOUSE_UP_KEYWORD);
        dc.addParameter(value);
        return dc;
    }


    /*********** <pre> 
                Set the delay of re-finding object. 
              
                Set the delay of re-finding object.
                This time is seconds.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param value  Optional:NO 
                 The value of the delay of re-finding object.
              
     **********/
    static public DriverCommand setSecsDelayRetryComponent (String value) {

        if ( value == null ) throw new IllegalArgumentException ( "setSecsDelayRetryComponent.value = null");
        DriverCommand dc = new DriverCommand(SETSECSDELAYRETRYCOMPONENT_KEYWORD);
        dc.addParameter(value);
        return dc;
    }


    /*********** <pre> 
                Set the timeout of finding object. 
              
                Set the timeout of finding object.
                This time is seconds.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param variableName  Optional:NO 
                 The value of the timeout of finding object.
              
     **********/
    static public DriverCommand setSecsSeekComponent (String variableName) {

        if ( variableName == null ) throw new IllegalArgumentException ( "setSecsSeekComponent.variableName = null");
        DriverCommand dc = new DriverCommand(SETSECSSEEKCOMPONENT_KEYWORD);
        dc.addParameter(variableName);
        return dc;
    }


    /*********** <pre> 
                 Set/Change the directory in which the framework will find 
                 test files (captured "actuals") by default.
              
                  The path must already exist.  If the path is invalid 
                  the previous setting will be retained (and logged).
                  Any incomplete path will be assumed to be relative 
                  to the current project directory.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param path  Optional:NO 
                 The full or project relative path to the new directory.
              
     **********/
    static public DriverCommand setTestDirectory (String path) {

        if ( path == null ) throw new IllegalArgumentException ( "setTestDirectory.path = null");
        DriverCommand dc = new DriverCommand(SETTESTDIRECTORY_KEYWORD);
        dc.addParameter(path);
        return dc;
    }


    /*********** <pre> 
                 Set the value of a DDVariable  
                 The name field can contain literal string, DDVariable, or
                 any expression that evaluates to a valid variable name.     </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param variableName  Optional:NO 
                 The name of the variable
              
     @param variableValue  Optional:NO 
                 The value to assign to the variable
              
     **********/
    static public DriverCommand setVariableValueEx (String variableName, String variableValue) {

        if ( variableName == null ) throw new IllegalArgumentException ( "setVariableValueEx.variableName = null");
        if ( variableValue == null ) throw new IllegalArgumentException ( "setVariableValueEx.variableValue = null");
        DriverCommand dc = new DriverCommand(SETVARIABLEVALUEEX_KEYWORD);
        dc.addParameter(variableName);
        dc.addParameter(variableValue);
        return dc;
    }


    /*********** <pre> 
                 Set the value of a DDVariable  
                 The name field can contain literal string, DDVariable, or
                 any expression that evaluates to a valid variable name.     </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        variableName -- Optional:NO 
                 The name of the variable
              <BR/>        variableValue -- Optional:NO 
                 The value to assign to the variable
              
    </UL>

     **********/
    static public DriverCommand setVariableValueEx (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "setVariableValueEx.parameters = null");
        DriverCommand dc = new DriverCommand(SETVARIABLEVALUEEX_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Preset the value of one or more DDVariables  
                 Preset the value of one or more DDVariables.
                 Each subsequent field can contain one variable expression. 
                 Note: SAFS/DriverCommands and RobotJ actually implement an incompatible 
                 version of this command.  However, that version is normally never called by 
                 standard SAFS Drivers.
                 The variable handling is actually already done before Driver Commands can 
                 be called, and true Drivers or Processors do nothing but log success and return "NoScriptFailure".
                 The command remains for RobotJ and SAFS/DriverCommands for those people using 
                 not standard Drivers that do not process expressions before this call.  These are a rare breed, indeed!
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param variableName  Optional:NO 
                 The name of the variable along with its value assignment
              
     **********/
    static public DriverCommand setVariableValues (String variableName) {

        if ( variableName == null ) throw new IllegalArgumentException ( "setVariableValues.variableName = null");
        DriverCommand dc = new DriverCommand(SETVARIABLEVALUES_KEYWORD);
        dc.addParameter(variableName);
        return dc;
    }


    /*********** <pre> 
                 Show the soft keyboard.
              
                 Show the soft keyboard.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
    </UL>

     **********/
    static public DriverCommand showSoftKeyboard () {

        DriverCommand dc = new DriverCommand(SHOWSOFTKEYBOARD_KEYWORD);
        return dc;
    }


    /*********** <pre> 
                 Launch a new web browser and optionally load a document into it.
              
              Windows TID, SDC, and RFT Support:
              This command in the above engines now supports using the System default browser. 
              By default, the System default browser will be used to launch the URL.  (Previous 
              versions of this command were unfortunately hardcoded to use Internet Explorer only.)
              
              In addition, the tester can set a SAFS variable directly or through ApplicationConstants 
              to provide the full path to an alternate browser executable.  By setting and clearing 
              this variable the tester can switch between using the System default browser and an 
              alternate browser dynamically during runtime.
              
              Variable Name: SAFSWebBrowserPath
              
			
Sample SAFS variable usage:	

;Set an alternate browser to use:
C, SetVariableValues, ^SAFSWebBrowserPath="C:\Program Files\Mozilla Firefox\firefox.exe"
			
;Clear to return to System default browser:
C, SetVariableValues, ^SAFSWebBrowserPath=""
			
Sample ApplicationConstants usage:
			
;provide a value used for all browser launches
[ApplicationConstants]
...
SAFSWebBrowserPath="C:\Program Files\Mozilla Firefox\firefox.exe"


		(Note: if the tester ever "sets" or clears the SAFS variable then 
		     any ApplicationConstants setting is no longer used.)
		 Selenium Note:The parameters from 4 are specially for Selenium 2.0 (WebDriver) for now.
		 					 The parameters from 8 are extra parameter settings for Selenium 2.0 (WebDriver), they appear as pair(key, value),
		 					 for example #8 is the key, #9 is the value; #10 is the key, #11 is the value; and so on.
		 					 you can specify extra parameters as many as wanted if they are supported.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param uRL  Optional:YES  DefaultVal: 
                 URL of a web resource to load in the new browser instance.
             
     @param windowTag  Optional:YES  DefaultVal: 
                 A WindowTag or Browser ID to call the new browser instance. 
     @param browserName  Optional:YES  DefaultVal:firefox 
				SE2The browser to open. It can be "explorer", "chrome" or "firefox". "firefox" is default.
             
     @param timeout  Optional:YES  DefaultVal:15 
				SE2Specifies the amount of time the selenium web driver should wait 
				when searching for an element if it is not immediately present.
             
     @param isRemoteBrowser  Optional:YES  DefaultVal:true 
		SE2True = use Selenium RemoteDriver.
     @param extraParamKey  Optional:YES 
				SE2The extra parameter key. You can use one of 
				Extra parameter keys.
             
     @param extraParamValue  Optional:YES 
				SE2The value of the extra parameter indicated by ExtraParamKey above.
             
     **********/
    static public DriverCommand startWebBrowser (String uRL, String windowTag, String browserName, String timeout, String isRemoteBrowser, String extraParamKey, String extraParamValue) {

        DriverCommand dc = new DriverCommand(STARTWEBBROWSER_KEYWORD);
        dc.addParameter(uRL);
        dc.addParameter(windowTag);
        dc.addParameter(browserName);
        dc.addParameter(timeout);
        dc.addParameter(isRemoteBrowser);
        dc.addParameter(extraParamKey);
        dc.addParameter(extraParamValue);
        return dc;
    }


    /*********** <pre> 
                 Launch a new web browser and optionally load a document into it.
              
              Windows TID, SDC, and RFT Support:
              This command in the above engines now supports using the System default browser. 
              By default, the System default browser will be used to launch the URL.  (Previous 
              versions of this command were unfortunately hardcoded to use Internet Explorer only.)
              
              In addition, the tester can set a SAFS variable directly or through ApplicationConstants 
              to provide the full path to an alternate browser executable.  By setting and clearing 
              this variable the tester can switch between using the System default browser and an 
              alternate browser dynamically during runtime.
              
              Variable Name: SAFSWebBrowserPath
              
			
Sample SAFS variable usage:	

;Set an alternate browser to use:
C, SetVariableValues, ^SAFSWebBrowserPath="C:\Program Files\Mozilla Firefox\firefox.exe"
			
;Clear to return to System default browser:
C, SetVariableValues, ^SAFSWebBrowserPath=""
			
Sample ApplicationConstants usage:
			
;provide a value used for all browser launches
[ApplicationConstants]
...
SAFSWebBrowserPath="C:\Program Files\Mozilla Firefox\firefox.exe"


		(Note: if the tester ever "sets" or clears the SAFS variable then 
		     any ApplicationConstants setting is no longer used.)
		 Selenium Note:The parameters from 4 are specially for Selenium 2.0 (WebDriver) for now.
		 					 The parameters from 8 are extra parameter settings for Selenium 2.0 (WebDriver), they appear as pair(key, value),
		 					 for example #8 is the key, #9 is the value; #10 is the key, #11 is the value; and so on.
		 					 you can specify extra parameters as many as wanted if they are supported.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        uRL -- Optional:YES  DefaultVal: 
                 URL of a web resource to load in the new browser instance.
             <BR/>        windowTag -- Optional:YES  DefaultVal: 
                 A WindowTag or Browser ID to call the new browser instance. <BR/>        browserName -- Optional:YES  DefaultVal:firefox 
				SE2The browser to open. It can be "explorer", "chrome" or "firefox". "firefox" is default.
             <BR/>        timeout -- Optional:YES  DefaultVal:15 
				SE2Specifies the amount of time the selenium web driver should wait 
				when searching for an element if it is not immediately present.
             <BR/>        isRemoteBrowser -- Optional:YES  DefaultVal:true 
		SE2True = use Selenium RemoteDriver.<BR/>        extraParamKey -- Optional:YES 
				SE2The extra parameter key. You can use one of 
				Extra parameter keys.
             <BR/>        extraParamValue -- Optional:YES 
				SE2The value of the extra parameter indicated by ExtraParamKey above.
             
    </UL>

     **********/
    static public DriverCommand startWebBrowser (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "startWebBrowser.parameters = null");
        DriverCommand dc = new DriverCommand(STARTWEBBROWSER_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Stop an opened web browser indicated by ID.
              
             	Stop an opened web browser indicated by ID. This ID is assigned by user
             	during calling keyword StartWebBrowser.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param browserID  Optional:YES  DefaultVal:MainApp 
				The identifier used to get the webdriver for the opened browser. This ID is assigned by user
             	during calling keyword StartWebBrowser.
             
     **********/
    static public DriverCommand stopWebBrowser (String browserID) {

        DriverCommand dc = new DriverCommand(STOPWEBBROWSER_KEYWORD);
        dc.addParameter(browserID);
        return dc;
    }


    /*********** <pre>Switch between multiple windows according to its title.    </pre>    Supporting Engines:
    <P/><UL>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param title  Optional:NoThe Title of the window to switch to.
     @param browserID  Optional:YesThe ID representing the opened browser from where to search the window.
     @param expectedMatchIndex  Optional:YesIf more than one windows can be found according to the title, then this parameter
		               will decide which one to return, the index is 1 based.
		     
     @param partialMatch  Optional:YesIf the parameter 'title' will match partially (be sub-string) with
                          the title of the existing windows.
              
     @param ignoreCase  Optional:YesIf the parameter 'title' will match case-insentitively with
                          the title of the existing windows.
              
     **********/
    static public DriverCommand switchWindow (String title, String browserID, String expectedMatchIndex, String partialMatch, String ignoreCase) {

        if ( title == null ) throw new IllegalArgumentException ( "switchWindow.title = null");
        DriverCommand dc = new DriverCommand(SWITCHWINDOW_KEYWORD);
        dc.addParameter(title);
        dc.addParameter(browserID);
        dc.addParameter(expectedMatchIndex);
        dc.addParameter(partialMatch);
        dc.addParameter(ignoreCase);
        return dc;
    }


    /*********** <pre>Switch between multiple windows according to its title.    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        title -- Optional:NoThe Title of the window to switch to.<BR/>        browserID -- Optional:YesThe ID representing the opened browser from where to search the window.<BR/>        expectedMatchIndex -- Optional:YesIf more than one windows can be found according to the title, then this parameter
		               will decide which one to return, the index is 1 based.
		     <BR/>        partialMatch -- Optional:YesIf the parameter 'title' will match partially (be sub-string) with
                          the title of the existing windows.
              <BR/>        ignoreCase -- Optional:YesIf the parameter 'title' will match case-insentitively with
                          the title of the existing windows.
              
    </UL>

     **********/
    static public DriverCommand switchWindow (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "switchWindow.parameters = null");
        DriverCommand dc = new DriverCommand(SWITCHWINDOW_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Take screenshot and save it to a file on test machine.
              
                 Take screenshot and save it to a file on test machine.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param fileName  Optional:NO 
                 The file to store the screeshot. (For Android Engine, the screenshot is device/emulator's)
              
     @param rotatable  Optional:YES 
                 For other Engine, this parameter will be ignored.
                 For Android Engine, if the android application is rotatable, you set this parameter to True. The default is True.
              
     @param subArea  Optional:YES
             Optional sbuarea indicating partial image of the screen to capture.
              
     **********/
    static public DriverCommand takeScreenShot (String fileName, String rotatable, String subArea) {

        if ( fileName == null ) throw new IllegalArgumentException ( "takeScreenShot.fileName = null");
        DriverCommand dc = new DriverCommand(TAKESCREENSHOT_KEYWORD);
        dc.addParameter(fileName);
        dc.addParameter(rotatable);
        dc.addParameter(subArea);
        return dc;
    }


    /*********** <pre> 
                 Take screenshot and save it to a file on test machine.
              
                 Take screenshot and save it to a file on test machine.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fileName -- Optional:NO 
                 The file to store the screeshot. (For Android Engine, the screenshot is device/emulator's)
              <BR/>        rotatable -- Optional:YES 
                 For other Engine, this parameter will be ignored.
                 For Android Engine, if the android application is rotatable, you set this parameter to True. The default is True.
              <BR/>        subArea -- Optional:YES
             Optional sbuarea indicating partial image of the screen to capture.
              
    </UL>

     **********/
    static public DriverCommand takeScreenShot (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "takeScreenShot.parameters = null");
        DriverCommand dc = new DriverCommand(TAKESCREENSHOT_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Enable/Disable the switch to "prefer" ABBOT Functions over 
                 any other engine functions.
              
                 If enabled, and the ABBOT engine is up and running, the Driver 
                 will always attempt to execute test records through Abbot first before 
                 any other.
                 
                 If the ABBOT engine is not fully available, this command will generate and 
                 log a WARNING.  If the record type contains the "W" (Warning allowed) 
                 modifier then we will issue an appropriate log message, but no WARNING 
                 will be counted.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param mode  Optional:NO  DefaultVal:OFF 
                 The switch status for enabling the preference of the engine.
                 Valid values are "ON" and "OFF".
              
     **********/
    static public DriverCommand useAbbotFunctions (String mode) {

        if ( mode == null ) throw new IllegalArgumentException ( "useAbbotFunctions.mode = null");
        DriverCommand dc = new DriverCommand(USEABBOTFUNCTIONS_KEYWORD);
        dc.addParameter(mode);
        return dc;
    }


    /*********** <pre> 
                 Enable/Disable the switch to "prefer" Droid Functions over 
                 the current engine functions (like Robot Classic).
              
                 If enabled and the Droid hooking mechanism is up and running the Driver 
                 will always attempt to execute test records through Droid first before 
                 defaulting to the current engine (like Robot Classic).
                 
                 If the Droid hook is not fully available, this command will generate and 
                 log a WARNING.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param mode  Optional:NO  DefaultVal:OFF 
                 The switch status for enabling the use of the Droid hook.
                 Valid values are "ON" and "OFF".
              
     **********/
    static public DriverCommand useDroidFunctions (String mode) {

        if ( mode == null ) throw new IllegalArgumentException ( "useDroidFunctions.mode = null");
        DriverCommand dc = new DriverCommand(USEDRIODFUNCTIONS_KEYWORD);
        dc.addParameter(mode);
        return dc;
    }


    /*********** <pre> 
                 Enable/Disable the switch to "prefer" IOS Functions over 
                 any other engine functions.
              
                 If enabled, and the IOS engine is up and running, the Driver 
                 will always attempt to execute test records through IOS first before 
                 any other.
                 
                 If the IOS engine is not fully available, this command will generate and 
                 log a WARNING.  If the record type contains the "W" (Warning allowed) 
                 modifier then we will issue an appropriate log message, but no WARNING 
                 will be counted.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param mode  Optional:NO  DefaultVal:OFF 
                 The switch status for enabling the preference of the engine.
                 Valid values are "ON" and "OFF".
              
     **********/
    static public DriverCommand useIOSFunctions (String mode) {

        if ( mode == null ) throw new IllegalArgumentException ( "useIOSFunctions.mode = null");
        DriverCommand dc = new DriverCommand(USEIOSFUNCTIONS_KEYWORD);
        dc.addParameter(mode);
        return dc;
    }


    /*********** <pre> 
                 Enable/Disable the switch to "prefer" QTP Functions over 
                 any other engine functions.
              
                 If enabled, and the QTP engine is up and running, the Driver 
                 will always attempt to execute test records through QTP first before 
                 any other.
                 
                 If the QTP engine is not fully available, this command will generate and 
                 log a WARNING.  If the record type contains the "W" (Warning allowed) 
                 modifier then we will issue an appropriate log message, but no WARNING 
                 will be counted.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param mode  Optional:NO  DefaultVal:OFF 
                 The switch status for enabling the preference of the engine.
                 Valid values are "ON" and "OFF".
              
     **********/
    static public DriverCommand useQTPFunctions (String mode) {

        if ( mode == null ) throw new IllegalArgumentException ( "useQTPFunctions.mode = null");
        DriverCommand dc = new DriverCommand(USEQTPFUNCTIONS_KEYWORD);
        dc.addParameter(mode);
        return dc;
    }


    /*********** <pre> 
                 Enable/Disable the switch to "prefer" RobotJ Hook Component Functions over 
                 Robot Classic Component Functions.
              
                 If enabled and the RobotJ hooking mechanism is up and running then StepDriver 
                 will always attempt to execute test records (T) through RobotJ first before 
                 defaulting to Robot Classic.
                 
                 If the RobotJ hook is not fully available, this command will generate and 
                 log a WARNING.  If the record type is "CW" (Warning allowed), then we 
                 will issue an appropriate log message, but no WARNING will be counted.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param mode  Optional:NO  DefaultVal:OFF 
                 The switch status for enabling the use of the RobotJ hook.
                 Valid values are "ON" and "OFF".
              
     **********/
    static public DriverCommand useRobotJFunctions (String mode) {

        if ( mode == null ) throw new IllegalArgumentException ( "useRobotJFunctions.mode = null");
        DriverCommand dc = new DriverCommand(USEROBOTJFUNCTIONS_KEYWORD);
        dc.addParameter(mode);
        return dc;
    }


    /*********** <pre> 
                 Enable/Disable the switch to "prefer" SAFS (SDC) Functions over 
                 the current engine functions (like Robot Classic).
              
                 If enabled and the SAFS hooking mechanism is up and running the Driver 
                 will always attempt to execute test records through SAFS first before 
                 defaulting to the current engine (like Robot Classic).
                 
                 If the SAFS hook is not fully available, this command will generate and 
                 log a WARNING.  If the record type contains the "W" (Warning allowed) 
                 modifier then we will issue an appropriate log message, but no WARNING 
                 will be counted.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param mode  Optional:NO  DefaultVal:OFF 
                 The switch status for enabling the use of the SAFS hook.
                 Valid values are "ON" and "OFF".
              
     **********/
    static public DriverCommand useSAFSFunctions (String mode) {

        if ( mode == null ) throw new IllegalArgumentException ( "useSAFSFunctions.mode = null");
        DriverCommand dc = new DriverCommand(USESAFSFUNCTIONS_KEYWORD);
        dc.addParameter(mode);
        return dc;
    }


    /*********** <pre> 
                 Enable/Disable the switch to "prefer" Selenium Functions over 
                 the current engine functions (like Robot Classic).
              
                 If enabled and the Selenium hooking mechanism is up and running the Driver 
                 will always attempt to execute test records through Selenium first before 
                 defaulting to the current engine (like Robot Classic).
                 
                 If the Selenium hook is not fully available, this command will generate and 
                 log a WARNING.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param mode  Optional:NO  DefaultVal:OFF 
                 The switch status for enabling the use of the Selenium hook.
                 Valid values are "ON" and "OFF".
              
     **********/
    static public DriverCommand useSeleniumFunctions (String mode) {

        if ( mode == null ) throw new IllegalArgumentException ( "useSeleniumFunctions.mode = null");
        DriverCommand dc = new DriverCommand(USESELENIUMFUNCTIONS_KEYWORD);
        dc.addParameter(mode);
        return dc;
    }


    /*********** <pre> 
                 Enable/Disable the switch to "prefer" TestComplete (TCAFS) Functions over 
                 any other engine functions.
              
                 If enabled, and the TCAFS engine is up and running, the Driver 
                 will always attempt to execute test records through TCAFS first before 
                 any other.
                 
                 If the TCAFS engine is not fully available, this command will generate and 
                 log a WARNING.  If the record type contains the "W" (Warning allowed) 
                 modifier then we will issue an appropriate log message, but no WARNING 
                 will be counted.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param mode  Optional:NO  DefaultVal:OFF 
                 The switch status for enabling the preference of the engine.
                 Valid values are "ON" and "OFF".
              
     **********/
    static public DriverCommand useTestCompleteFunctions (String mode) {

        if ( mode == null ) throw new IllegalArgumentException ( "useTestCompleteFunctions.mode = null");
        DriverCommand dc = new DriverCommand(USETESTCOMPLETEFUNCTIONS_KEYWORD);
        dc.addParameter(mode);
        return dc;
    }


    /*********** <pre> 
                 Switch to use an opened web browser indicated by ID.
              
             	Switch to use an opened web browser indicated by ID. This ID is assigned by user
             	during calling keyword StartWebBrowser.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param browserID  Optional:YES  DefaultVal:MainApp 
				The identifier used to get the webdriver for the opened browser. This ID is assigned by user
             	during calling keyword StartWebBrowser.
             
     **********/
    static public DriverCommand useWebBrowser (String browserID) {

        DriverCommand dc = new DriverCommand(USEWEBBROWSER_KEYWORD);
        dc.addParameter(browserID);
        return dc;
    }


    /*********** <pre> 
             Verify the current contents of the Windows clipboard with a benchmark file.
              
             Verify the current contents of the Windows clipboard with a benchmark file.
             Typically, benchmarks are stored in the Datapool\Bench directory.
             In that event, only the filename.ext is needed.  There is currently
             a limit of 32K allowed for this type of comparison.  
             The Window and Component objects are not validated and have no role.
             The Window and Component strings can be any text, but they cannot be blank.
             
             The command will produce a TEST WARNING if the user has configured an 
             alternate DIFF tool for which we have no means to compare the diff results.
             If this WARNING is expected, the user should use the "TW" test record type.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Google Android</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param benchmarkFile  Optional:NO
             The name of the file used as the comparison benchmark.
              
     @param encoding  Optional:Yes 
                 The encoding used to read a file.
              
     **********/
    static public DriverCommand verifyClipboardToFile (String benchmarkFile, String encoding) {

        if ( benchmarkFile == null ) throw new IllegalArgumentException ( "verifyClipboardToFile.benchmarkFile = null");
        DriverCommand dc = new DriverCommand(VERIFYCLIPBOARDTOFILE_KEYWORD);
        dc.addParameter(benchmarkFile);
        dc.addParameter(encoding);
        return dc;
    }


    /*********** <pre> 
             Verify the current contents of the Windows clipboard with a benchmark file.
              
             Verify the current contents of the Windows clipboard with a benchmark file.
             Typically, benchmarks are stored in the Datapool\Bench directory.
             In that event, only the filename.ext is needed.  There is currently
             a limit of 32K allowed for this type of comparison.  
             The Window and Component objects are not validated and have no role.
             The Window and Component strings can be any text, but they cannot be blank.
             
             The command will produce a TEST WARNING if the user has configured an 
             alternate DIFF tool for which we have no means to compare the diff results.
             If this WARNING is expected, the user should use the "TW" test record type.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Google Android</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        benchmarkFile -- Optional:NO
             The name of the file used as the comparison benchmark.
              <BR/>        encoding -- Optional:Yes 
                 The encoding used to read a file.
              
    </UL>

     **********/
    static public DriverCommand verifyClipboardToFile (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyClipboardToFile.parameters = null");
        DriverCommand dc = new DriverCommand(VERIFYCLIPBOARDTOFILE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>Send an HTTP GET request, and verify the response with the content provided as parameter.    </pre>    Supporting Engines:
    <P/><UL>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param uRL  Optional:NoThe URL to request.
     @param benchContent  Optional:NoThe bench content to be compared with the response sent back from the server.
     @param timeout  Optional:YesThe timeout (in seconds) waiting for the response from HTTP server. The default value is 120 seconds.
     @param headerName  Optional:YesThe HTTP request header name.
     @param headerValue  Optional:YesThe value to set for the HTTP request header.
     **********/
    static public DriverCommand verifyURLContent (String uRL, String benchContent, String timeout, String headerName, String headerValue) {

        if ( benchContent == null ) throw new IllegalArgumentException ( "verifyURLContent.benchContent = null");
        if ( uRL == null ) throw new IllegalArgumentException ( "verifyURLContent.uRL = null");
        DriverCommand dc = new DriverCommand(VERIFYURLCONTENT_KEYWORD);
        dc.addParameter(uRL);
        dc.addParameter(benchContent);
        dc.addParameter(timeout);
        dc.addParameter(headerName);
        dc.addParameter(headerValue);
        return dc;
    }


    /*********** <pre>Send an HTTP GET request, and verify the response with the content provided as parameter.    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        uRL -- Optional:NoThe URL to request.<BR/>        benchContent -- Optional:NoThe bench content to be compared with the response sent back from the server.<BR/>        timeout -- Optional:YesThe timeout (in seconds) waiting for the response from HTTP server. The default value is 120 seconds.<BR/>        headerName -- Optional:YesThe HTTP request header name.<BR/>        headerValue -- Optional:YesThe value to set for the HTTP request header.
    </UL>

     **********/
    static public DriverCommand verifyURLContent (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyURLContent.parameters = null");
        DriverCommand dc = new DriverCommand(VERIFYURLCONTENT_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>Send an HTTP GET request, and verify the response with the content of a file.    </pre>    Supporting Engines:
    <P/><UL>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param uRL  Optional:NoThe URL to request.
     @param benchFile  Optional:NoThe name of the bench file holding the content to be compared with the response sent back from the server.
     @param timeout  Optional:YesThe timeout (in seconds) waiting for the response from HTTP server. The default value is 120 seconds.
     @param headerName  Optional:YesThe HTTP request header name.
     @param headerValue  Optional:YesThe value to set for the HTTP request header.
     **********/
    static public DriverCommand verifyURLToFile (String uRL, String benchFile, String timeout, String headerName, String headerValue) {

        if ( benchFile == null ) throw new IllegalArgumentException ( "verifyURLToFile.benchFile = null");
        if ( uRL == null ) throw new IllegalArgumentException ( "verifyURLToFile.uRL = null");
        DriverCommand dc = new DriverCommand(VERIFYURLTOFILE_KEYWORD);
        dc.addParameter(uRL);
        dc.addParameter(benchFile);
        dc.addParameter(timeout);
        dc.addParameter(headerName);
        dc.addParameter(headerValue);
        return dc;
    }


    /*********** <pre>Send an HTTP GET request, and verify the response with the content of a file.    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        uRL -- Optional:NoThe URL to request.<BR/>        benchFile -- Optional:NoThe name of the bench file holding the content to be compared with the response sent back from the server.<BR/>        timeout -- Optional:YesThe timeout (in seconds) waiting for the response from HTTP server. The default value is 120 seconds.<BR/>        headerName -- Optional:YesThe HTTP request header name.<BR/>        headerValue -- Optional:YesThe value to set for the HTTP request header.
    </UL>

     **********/
    static public DriverCommand verifyURLToFile (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyURLToFile.parameters = null");
        DriverCommand dc = new DriverCommand(VERIFYURLTOFILE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>Specify the table format VERSION
        Used to specify the VERSION of the table format.  
        This is currently not required since there is only one 
        current version of the table format--1.0.
           </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param version  Optional:NO  DefaultVal:1.0
              The VERSION of the table format. Initially "1.0"
     **********/
    static public DriverCommand version (String version) {

        if ( version == null ) throw new IllegalArgumentException ( "version.version = null");
        DriverCommand dc = new DriverCommand(VERSION_KEYWORD);
        dc.addParameter(version);
        return dc;
    }


    /*********** <pre> 
                 Wait for a Window or Window Component to become valid.
              
		
		Note: the TID supports this command using 
		Image-Based Testing 
		techniques and App Map entries.
		    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
        <LI>AutomatedQA TestComplete</LI>
        <LI>AUTOIT Team Autoit</LI>
    </UL>

     @param windowID  Optional:NO 
                 A Window reference from the AppMap
              
     @param componentID  Optional:NO 
                 A reference from the AppMap for the Component within the Window to wait for.
              
     @param timeout  Optional:YES  DefaultVal:15 
                 Timeout value in seconds before exiting automatically.
              
     **********/
    static public DriverCommand waitForGUI (String windowID, String componentID, String timeout) {

        if ( componentID == null ) throw new IllegalArgumentException ( "waitForGUI.componentID = null");
        if ( windowID == null ) throw new IllegalArgumentException ( "waitForGUI.windowID = null");
        DriverCommand dc = new DriverCommand(WAITFORGUI_KEYWORD);
        dc.addParameter(windowID);
        dc.addParameter(componentID);
        dc.addParameter(timeout);
        return dc;
    }


    /*********** <pre> 
                 Wait for a Window or Window Component to become valid.
              
		
		Note: the TID supports this command using 
		Image-Based Testing 
		techniques and App Map entries.
		    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
        <LI>AutomatedQA TestComplete</LI>
        <LI>AUTOIT Team Autoit</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        windowID -- Optional:NO 
                 A Window reference from the AppMap
              <BR/>        componentID -- Optional:NO 
                 A reference from the AppMap for the Component within the Window to wait for.
              <BR/>        timeout -- Optional:YES  DefaultVal:15 
                 Timeout value in seconds before exiting automatically.
              
    </UL>

     **********/
    static public DriverCommand waitForGUI (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "waitForGUI.parameters = null");
        DriverCommand dc = new DriverCommand(WAITFORGUI_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Wait for a Window or Window Component to become invalid.
              
		
		Note: the TID supports this command using 
		Image-Based Testing 
		techniques and App Map entries.
		    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>AutomatedQA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
        <LI>AUTOIT Team Autoit</LI>
    </UL>

     @param windowID  Optional:NO 
                 A Window reference from the AppMap
              
     @param componentID  Optional:NO 
                 A reference from the AppMap for the Component within the Window to watch.
              
     @param timeout  Optional:YES  DefaultVal:15 
                 Timeout value in seconds before exiting automatically.
              
     **********/
    static public DriverCommand waitForGUIGone (String windowID, String componentID, String timeout) {

        if ( componentID == null ) throw new IllegalArgumentException ( "waitForGUIGone.componentID = null");
        if ( windowID == null ) throw new IllegalArgumentException ( "waitForGUIGone.windowID = null");
        DriverCommand dc = new DriverCommand(WAITFORGUIGONE_KEYWORD);
        dc.addParameter(windowID);
        dc.addParameter(componentID);
        dc.addParameter(timeout);
        return dc;
    }


    /*********** <pre> 
                 Wait for a Window or Window Component to become invalid.
              
		
		Note: the TID supports this command using 
		Image-Based Testing 
		techniques and App Map entries.
		    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>AutomatedQA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
        <LI>AUTOIT Team Autoit</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        windowID -- Optional:NO 
                 A Window reference from the AppMap
              <BR/>        componentID -- Optional:NO 
                 A reference from the AppMap for the Component within the Window to watch.
              <BR/>        timeout -- Optional:YES  DefaultVal:15 
                 Timeout value in seconds before exiting automatically.
              
    </UL>

     **********/
    static public DriverCommand waitForGUIGone (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "waitForGUIGone.parameters = null");
        DriverCommand dc = new DriverCommand(WAITFORGUIGONE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Wait for a specific Window or Component property value to match an expected value.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param windowID  Optional:NO 
                 A Window reference from the AppMap
              
     @param componentID  Optional:NO 
                 A reference from the AppMap for the Component within the Window.
              
     @param propertyName  Optional:NO 
                 Case-sensitive name of the object property to watch.
              
     @param expectedValue  Optional:NO 
                 Case-sensitive value of the object property to match.
              
     @param timeout  Optional:YES  DefaultVal:15 
                 Timeout value in seconds before exiting automatically.
              
     @param caseInsensitive  Optional:YES
             Values of "CASE-INSENSITIVE", "CASEINSENSITIVE", and "FALSE" will cause the 
             comparison of the property value and the expected value to ignore case.
              
     **********/
    static public DriverCommand waitForPropertyValue (String windowID, String componentID, String propertyName, String expectedValue, String timeout, String caseInsensitive) {

        if ( componentID == null ) throw new IllegalArgumentException ( "waitForPropertyValue.componentID = null");
        if ( expectedValue == null ) throw new IllegalArgumentException ( "waitForPropertyValue.expectedValue = null");
        if ( propertyName == null ) throw new IllegalArgumentException ( "waitForPropertyValue.propertyName = null");
        if ( windowID == null ) throw new IllegalArgumentException ( "waitForPropertyValue.windowID = null");
        DriverCommand dc = new DriverCommand(WAITFORPROPERTYVALUE_KEYWORD);
        dc.addParameter(windowID);
        dc.addParameter(componentID);
        dc.addParameter(propertyName);
        dc.addParameter(expectedValue);
        dc.addParameter(timeout);
        dc.addParameter(caseInsensitive);
        return dc;
    }


    /*********** <pre> 
                 Wait for a specific Window or Component property value to match an expected value.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        windowID -- Optional:NO 
                 A Window reference from the AppMap
              <BR/>        componentID -- Optional:NO 
                 A reference from the AppMap for the Component within the Window.
              <BR/>        propertyName -- Optional:NO 
                 Case-sensitive name of the object property to watch.
              <BR/>        expectedValue -- Optional:NO 
                 Case-sensitive value of the object property to match.
              <BR/>        timeout -- Optional:YES  DefaultVal:15 
                 Timeout value in seconds before exiting automatically.
              <BR/>        caseInsensitive -- Optional:YES
             Values of "CASE-INSENSITIVE", "CASEINSENSITIVE", and "FALSE" will cause the 
             comparison of the property value and the expected value to ignore case.
              
    </UL>

     **********/
    static public DriverCommand waitForPropertyValue (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "waitForPropertyValue.parameters = null");
        DriverCommand dc = new DriverCommand(WAITFORPROPERTYVALUE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Wait for a specific Window or Component property value to change from a known value.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param windowID  Optional:NO 
                 A Window reference from the AppMap
              
     @param componentID  Optional:NO 
                 A reference from the AppMap for the Component within the Window.
              
     @param propertyName  Optional:NO 
                 Case-sensitive name of the object property to watch.
              
     @param expectedValue  Optional:NO 
                 Case-sensitive known value of the property to change to something else.
              
     @param timeout  Optional:YES  DefaultVal:15 
                 Timeout value in seconds before exiting automatically.
              
     @param caseInsensitive  Optional:YES
             Values of "CASE-INSENSITIVE", "CASEINSENSITIVE", and "FALSE" will cause the 
             comparison of the property value and the expected value to ignore case.
              
     **********/
    static public DriverCommand waitForPropertyValueGone (String windowID, String componentID, String propertyName, String expectedValue, String timeout, String caseInsensitive) {

        if ( componentID == null ) throw new IllegalArgumentException ( "waitForPropertyValueGone.componentID = null");
        if ( expectedValue == null ) throw new IllegalArgumentException ( "waitForPropertyValueGone.expectedValue = null");
        if ( propertyName == null ) throw new IllegalArgumentException ( "waitForPropertyValueGone.propertyName = null");
        if ( windowID == null ) throw new IllegalArgumentException ( "waitForPropertyValueGone.windowID = null");
        DriverCommand dc = new DriverCommand(WAITFORPROPERTYVALUEGONE_KEYWORD);
        dc.addParameter(windowID);
        dc.addParameter(componentID);
        dc.addParameter(propertyName);
        dc.addParameter(expectedValue);
        dc.addParameter(timeout);
        dc.addParameter(caseInsensitive);
        return dc;
    }


    /*********** <pre> 
                 Wait for a specific Window or Component property value to change from a known value.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        windowID -- Optional:NO 
                 A Window reference from the AppMap
              <BR/>        componentID -- Optional:NO 
                 A reference from the AppMap for the Component within the Window.
              <BR/>        propertyName -- Optional:NO 
                 Case-sensitive name of the object property to watch.
              <BR/>        expectedValue -- Optional:NO 
                 Case-sensitive known value of the property to change to something else.
              <BR/>        timeout -- Optional:YES  DefaultVal:15 
                 Timeout value in seconds before exiting automatically.
              <BR/>        caseInsensitive -- Optional:YES
             Values of "CASE-INSENSITIVE", "CASEINSENSITIVE", and "FALSE" will cause the 
             comparison of the property value and the expected value to ignore case.
              
    </UL>

     **********/
    static public DriverCommand waitForPropertyValueGone (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "waitForPropertyValueGone.parameters = null");
        DriverCommand dc = new DriverCommand(WAITFORPROPERTYVALUEGONE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Wait for a Registry Key to become valid.
              On Windows XP (and higher?) this is accomplished via 
              the REG.EXE provided by the operating system.  If this program is NOT available 
              then the Registry commands will not work until another means is implemented--possibly 
              Windows Scripting Host scripts, etc..
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS SDCommands</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param key  Optional:NO 
                 The Registry Key name to seek.
              
     @param keyValue  Optional:YES 
                 The value name under the parent key to seek.
              
     @param timeout  Optional:YES  DefaultVal:15 
                 Timeout value in seconds before exiting automatically.
              
     **********/
    static public DriverCommand waitForRegistryKeyExists (String key, String keyValue, String timeout) {

        if ( key == null ) throw new IllegalArgumentException ( "waitForRegistryKeyExists.key = null");
        DriverCommand dc = new DriverCommand(WAITFORREGISTRYKEYEXISTS_KEYWORD);
        dc.addParameter(key);
        dc.addParameter(keyValue);
        dc.addParameter(timeout);
        return dc;
    }


    /*********** <pre> 
                 Wait for a Registry Key to become valid.
              On Windows XP (and higher?) this is accomplished via 
              the REG.EXE provided by the operating system.  If this program is NOT available 
              then the Registry commands will not work until another means is implemented--possibly 
              Windows Scripting Host scripts, etc..
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS SDCommands</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        key -- Optional:NO 
                 The Registry Key name to seek.
              <BR/>        keyValue -- Optional:YES 
                 The value name under the parent key to seek.
              <BR/>        timeout -- Optional:YES  DefaultVal:15 
                 Timeout value in seconds before exiting automatically.
              
    </UL>

     **********/
    static public DriverCommand waitForRegistryKeyExists (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "waitForRegistryKeyExists.parameters = null");
        DriverCommand dc = new DriverCommand(WAITFORREGISTRYKEYEXISTS_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Wait for a specific Registry KeyValue to match an expected value.
              On Windows XP (and higher?) this is accomplished via 
              the REG.EXE provided by the operating system.  If this program is NOT available 
              then the Registry commands will not work until another means is implemented--possibly 
              Windows Scripting Host scripts, etc..
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS SDCommands</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param key  Optional:NO 
                 The Registry Key name to seek
              
     @param keyValue  Optional:NO 
                 The value name under the parent key to seek.
              
     @param expectedValue  Optional:NO 
                 Case-sensitive value to match with the key value.
              
     @param timeout  Optional:YES  DefaultVal:15 
                 Timeout value in seconds before exiting automatically.
              
     @param caseInsensitive  Optional:YES
             Values of "CASE-INSENSITIVE", "CASEINSENSITIVE", and "FALSE" will cause the 
             comparison of the key value and the expected value to ignore case.
              
     **********/
    static public DriverCommand waitForRegistryKeyValue (String key, String keyValue, String expectedValue, String timeout, String caseInsensitive) {

        if ( expectedValue == null ) throw new IllegalArgumentException ( "waitForRegistryKeyValue.expectedValue = null");
        if ( key == null ) throw new IllegalArgumentException ( "waitForRegistryKeyValue.key = null");
        if ( keyValue == null ) throw new IllegalArgumentException ( "waitForRegistryKeyValue.keyValue = null");
        DriverCommand dc = new DriverCommand(WAITFORREGISTRYKEYVALUE_KEYWORD);
        dc.addParameter(key);
        dc.addParameter(keyValue);
        dc.addParameter(expectedValue);
        dc.addParameter(timeout);
        dc.addParameter(caseInsensitive);
        return dc;
    }


    /*********** <pre> 
                 Wait for a specific Registry KeyValue to match an expected value.
              On Windows XP (and higher?) this is accomplished via 
              the REG.EXE provided by the operating system.  If this program is NOT available 
              then the Registry commands will not work until another means is implemented--possibly 
              Windows Scripting Host scripts, etc..
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS SDCommands</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        key -- Optional:NO 
                 The Registry Key name to seek
              <BR/>        keyValue -- Optional:NO 
                 The value name under the parent key to seek.
              <BR/>        expectedValue -- Optional:NO 
                 Case-sensitive value to match with the key value.
              <BR/>        timeout -- Optional:YES  DefaultVal:15 
                 Timeout value in seconds before exiting automatically.
              <BR/>        caseInsensitive -- Optional:YES
             Values of "CASE-INSENSITIVE", "CASEINSENSITIVE", and "FALSE" will cause the 
             comparison of the key value and the expected value to ignore case.
              
    </UL>

     **********/
    static public DriverCommand waitForRegistryKeyValue (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "waitForRegistryKeyValue.parameters = null");
        DriverCommand dc = new DriverCommand(WAITFORREGISTRYKEYVALUE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Wait for a web document to finish loading within a timeout period.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param windowID  Optional:YES  DefaultVal: 
                 A Window reference from the AppMap
              
     @param componentID  Optional:YES  DefaultVal: 
                 A reference from the AppMap for the Frame/HTMLDocument within WindowID to wait for.
              
     @param timeout  Optional:YES  DefaultVal:30 
                 Timeout value in seconds before exiting automatically.
              
     **********/
    static public DriverCommand waitForWebPage (String windowID, String componentID, String timeout) {

        DriverCommand dc = new DriverCommand(WAITFORWEBPAGE_KEYWORD);
        dc.addParameter(windowID);
        dc.addParameter(componentID);
        dc.addParameter(timeout);
        return dc;
    }


    /*********** <pre> 
                 Wait for a web document to finish loading within a timeout period.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        windowID -- Optional:YES  DefaultVal: 
                 A Window reference from the AppMap
              <BR/>        componentID -- Optional:YES  DefaultVal: 
                 A reference from the AppMap for the Frame/HTMLDocument within WindowID to wait for.
              <BR/>        timeout -- Optional:YES  DefaultVal:30 
                 Timeout value in seconds before exiting automatically.
              
    </UL>

     **********/
    static public DriverCommand waitForWebPage (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "waitForWebPage.parameters = null");
        DriverCommand dc = new DriverCommand(WAITFORWEBPAGE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Delete any existing private counter with the provided counterID.
              
                 If counterID identifies an existing counter, then delete it.
                 See ApplicationUtilities for more information on private counters.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param counterID  Optional:NO  DefaultVal:Counter1 
                 The unique name used to identify this private counter.  
              
     @param description  Optional:YES
              Any additional information for deleting this counter.
     **********/
    static public DriverCommand deleteCounter (String counterID, String description) {

        if ( counterID == null ) throw new IllegalArgumentException ( "deleteCounter.counterID = null");
        DriverCommand dc = new DriverCommand(DELETECOUNTER_KEYWORD);
        dc.addParameter(counterID);
        dc.addParameter(description);
        return dc;
    }


    /*********** <pre> 
                 Delete any existing private counter with the provided counterID.
              
                 If counterID identifies an existing counter, then delete it.
                 See ApplicationUtilities for more information on private counters.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        counterID -- Optional:NO  DefaultVal:Counter1 
                 The unique name used to identify this private counter.  
              <BR/>        description -- Optional:YES
              Any additional information for deleting this counter.
    </UL>

     **********/
    static public DriverCommand deleteCounter (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "deleteCounter.parameters = null");
        DriverCommand dc = new DriverCommand(DELETECOUNTER_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Log the specified counter's info in the active log(s) of the current Log Facility.
              
                 Extracts a snapshot of the specified private counter and outputs a 
                 small, embedded Status Report in the active logs of the current Log Facility.
                 The Status Report will be identified by the name of the private counter.
                 (Future) We will allow you to optionally specify a different Log Facility by name.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param counterID  Optional:NO  DefaultVal:Counter1 
                 The unique name used to identify this private counter.  
              
     @param logName  Optional:YES  DefaultVal:MainLog 
                 (Future) The name of a Log Facility other than the "current" one.
              
     **********/
    static public DriverCommand logCounterInfo (String counterID, String logName) {

        if ( counterID == null ) throw new IllegalArgumentException ( "logCounterInfo.counterID = null");
        DriverCommand dc = new DriverCommand(LOGCOUNTERINFO_KEYWORD);
        dc.addParameter(counterID);
        dc.addParameter(logName);
        return dc;
    }


    /*********** <pre> 
                 Log the specified counter's info in the active log(s) of the current Log Facility.
              
                 Extracts a snapshot of the specified private counter and outputs a 
                 small, embedded Status Report in the active logs of the current Log Facility.
                 The Status Report will be identified by the name of the private counter.
                 (Future) We will allow you to optionally specify a different Log Facility by name.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        counterID -- Optional:NO  DefaultVal:Counter1 
                 The unique name used to identify this private counter.  
              <BR/>        logName -- Optional:YES  DefaultVal:MainLog 
                 (Future) The name of a Log Facility other than the "current" one.
              
    </UL>

     **********/
    static public DriverCommand logCounterInfo (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "logCounterInfo.parameters = null");
        DriverCommand dc = new DriverCommand(LOGCOUNTERINFO_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Create a new private counter or reset counts in an existing private counter.
              
                 If counterID is not already an active private counter, then 
                 this routine will create a new private counter with the provided 
                 counterID as its name.  The counter will be enabled for counting 
                 of all status information at all test levels.
                 If counterID identifies an existing counter, then this routine 
                 will reset all its counts to zero(0).
                 See ApplicationUtilities for more information on private counters.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param counterID  Optional:NO  DefaultVal:Counter1 
                 The unique name used to identify this private counter.  
              
     @param description  Optional:YES
              Any additional information for resetting this counter.
     **********/
    static public DriverCommand resetCounter (String counterID, String description) {

        if ( counterID == null ) throw new IllegalArgumentException ( "resetCounter.counterID = null");
        DriverCommand dc = new DriverCommand(RESETCOUNTER_KEYWORD);
        dc.addParameter(counterID);
        dc.addParameter(description);
        return dc;
    }


    /*********** <pre> 
                 Create a new private counter or reset counts in an existing private counter.
              
                 If counterID is not already an active private counter, then 
                 this routine will create a new private counter with the provided 
                 counterID as its name.  The counter will be enabled for counting 
                 of all status information at all test levels.
                 If counterID identifies an existing counter, then this routine 
                 will reset all its counts to zero(0).
                 See ApplicationUtilities for more information on private counters.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        counterID -- Optional:NO  DefaultVal:Counter1 
                 The unique name used to identify this private counter.  
              <BR/>        description -- Optional:YES
              Any additional information for resetting this counter.
    </UL>

     **********/
    static public DriverCommand resetCounter (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "resetCounter.parameters = null");
        DriverCommand dc = new DriverCommand(RESETCOUNTER_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Resume counting on ALL status counters--both public/global and private.
              
                 Resume all status counting that is triggered via ApplicationUtilities.
                 Only counters that are enabled--not independently "stopped"--will resume
                 counting.  Stopped counters are still stopped.
                 See ApplicationUtilities for more information on counters.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param description  Optional:YES
              Any additional information for resuming status counts.
     @param logName  Optional:YES  DefaultVal:MainLog 
                 (Future) The name of a Log Facility other than the "current" one.
              
     **********/
    static public DriverCommand resumeStatusCounts (String description, String logName) {

        DriverCommand dc = new DriverCommand(RESUMESTATUSCOUNTS_KEYWORD);
        dc.addParameter(description);
        dc.addParameter(logName);
        return dc;
    }


    /*********** <pre> 
                 Resume counting on ALL status counters--both public/global and private.
              
                 Resume all status counting that is triggered via ApplicationUtilities.
                 Only counters that are enabled--not independently "stopped"--will resume
                 counting.  Stopped counters are still stopped.
                 See ApplicationUtilities for more information on counters.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        description -- Optional:YES
              Any additional information for resuming status counts.<BR/>        logName -- Optional:YES  DefaultVal:MainLog 
                 (Future) The name of a Log Facility other than the "current" one.
              
    </UL>

     **********/
    static public DriverCommand resumeStatusCounts (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "resumeStatusCounts.parameters = null");
        DriverCommand dc = new DriverCommand(RESUMESTATUSCOUNTS_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Create a new private counter or modify the mode of an existing private counter.
              
                 If counterID is not already an active private counter, then 
                 this routine will create a new private counter with the provided 
                 counterID and counting mode.
                 If counterID identifies an existing counter, then this routine 
                 will modify the counting mode of the existing counter.
                 See AUSetStatusCounterMode for more information on private counters.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param counterID  Optional:NO  DefaultVal:Counter1 
                 The unique name used to identify this private counter.  
              
     @param mode  Optional:NO  DefaultVal:AllStatusInfo 
                 The counting mode to use for the specified counter.
              
     **********/
    static public DriverCommand setCounterMode (String counterID, String mode) {

        if ( counterID == null ) throw new IllegalArgumentException ( "setCounterMode.counterID = null");
        if ( mode == null ) throw new IllegalArgumentException ( "setCounterMode.mode = null");
        DriverCommand dc = new DriverCommand(SETCOUNTERMODE_KEYWORD);
        dc.addParameter(counterID);
        dc.addParameter(mode);
        return dc;
    }


    /*********** <pre> 
                 Create a new private counter or modify the mode of an existing private counter.
              
                 If counterID is not already an active private counter, then 
                 this routine will create a new private counter with the provided 
                 counterID and counting mode.
                 If counterID identifies an existing counter, then this routine 
                 will modify the counting mode of the existing counter.
                 See AUSetStatusCounterMode for more information on private counters.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        counterID -- Optional:NO  DefaultVal:Counter1 
                 The unique name used to identify this private counter.  
              <BR/>        mode -- Optional:NO  DefaultVal:AllStatusInfo 
                 The counting mode to use for the specified counter.
              
    </UL>

     **********/
    static public DriverCommand setCounterMode (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "setCounterMode.parameters = null");
        DriverCommand dc = new DriverCommand(SETCOUNTERMODE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Create a new private counter or start an existing stopped private counter.
              
                 If counterID is not already an active private counter, then 
                 this routine will create a new private counter with the provided 
                 counterID as its name.  The counter will be enabled for counting 
                 of all status information at all test levels.
                 If counterID identifies an existing counter, then this routine 
                 will enable the counter to resume counting--assuming it was stopped.
                 See ApplicationUtilities for more information on private counters.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param counterID  Optional:NO  DefaultVal:Counter1 
                 The unique name used to identify this private counter.  
              
     @param description  Optional:YES
              Any additional information such as the purpose of the counter.
     **********/
    static public DriverCommand startCounter (String counterID, String description) {

        if ( counterID == null ) throw new IllegalArgumentException ( "startCounter.counterID = null");
        DriverCommand dc = new DriverCommand(STARTCOUNTER_KEYWORD);
        dc.addParameter(counterID);
        dc.addParameter(description);
        return dc;
    }


    /*********** <pre> 
                 Create a new private counter or start an existing stopped private counter.
              
                 If counterID is not already an active private counter, then 
                 this routine will create a new private counter with the provided 
                 counterID as its name.  The counter will be enabled for counting 
                 of all status information at all test levels.
                 If counterID identifies an existing counter, then this routine 
                 will enable the counter to resume counting--assuming it was stopped.
                 See ApplicationUtilities for more information on private counters.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        counterID -- Optional:NO  DefaultVal:Counter1 
                 The unique name used to identify this private counter.  
              <BR/>        description -- Optional:YES
              Any additional information such as the purpose of the counter.
    </UL>

     **********/
    static public DriverCommand startCounter (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "startCounter.parameters = null");
        DriverCommand dc = new DriverCommand(STARTCOUNTER_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Begin tracking status on a user-defined item.
          Log/process the beginning of testing associated with this user-defined item.
          A private counter 
          will keep track of status for the item.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param cycleID  Optional:NO
              The user-defined ID of the item.
     @param description  Optional:YES
              A description of the item.
     **********/
    static public DriverCommand startCycle (String cycleID, String description) {

        if ( cycleID == null ) throw new IllegalArgumentException ( "startCycle.cycleID = null");
        DriverCommand dc = new DriverCommand(STARTCYCLE_KEYWORD);
        dc.addParameter(cycleID);
        dc.addParameter(description);
        return dc;
    }


    /*********** <pre>
          Begin tracking status on a user-defined item.
          Log/process the beginning of testing associated with this user-defined item.
          A private counter 
          will keep track of status for the item.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        cycleID -- Optional:NO
              The user-defined ID of the item.<BR/>        description -- Optional:YES
              A description of the item.
    </UL>

     **********/
    static public DriverCommand startCycle (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "startCycle.parameters = null");
        DriverCommand dc = new DriverCommand(STARTCYCLE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Begin tracking status on a user-defined item.
          Log/process the beginning of testing associated with this user-defined item.
          A private counter 
          will keep track of status for the item.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param procedureID  Optional:NO
              The user-defined ID of the item.
     @param description  Optional:YES
              A description of the item.
     **********/
    static public DriverCommand startProcedure (String procedureID, String description) {

        if ( procedureID == null ) throw new IllegalArgumentException ( "startProcedure.procedureID = null");
        DriverCommand dc = new DriverCommand(STARTPROCEDURE_KEYWORD);
        dc.addParameter(procedureID);
        dc.addParameter(description);
        return dc;
    }


    /*********** <pre>
          Begin tracking status on a user-defined item.
          Log/process the beginning of testing associated with this user-defined item.
          A private counter 
          will keep track of status for the item.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        procedureID -- Optional:NO
              The user-defined ID of the item.<BR/>        description -- Optional:YES
              A description of the item.
    </UL>

     **********/
    static public DriverCommand startProcedure (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "startProcedure.parameters = null");
        DriverCommand dc = new DriverCommand(STARTPROCEDURE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Begin tracking status on a user-defined item.
          Log/process the beginning of testing associated with this user-defined item.
          A private counter 
          will keep track of status for the item.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param requirementID  Optional:NO
              The user-defined ID of the item.
     @param description  Optional:YES
              A description of the item.
     **********/
    static public DriverCommand startRequirement (String requirementID, String description) {

        if ( requirementID == null ) throw new IllegalArgumentException ( "startRequirement.requirementID = null");
        DriverCommand dc = new DriverCommand(STARTREQUIREMENT_KEYWORD);
        dc.addParameter(requirementID);
        dc.addParameter(description);
        return dc;
    }


    /*********** <pre>
          Begin tracking status on a user-defined item.
          Log/process the beginning of testing associated with this user-defined item.
          A private counter 
          will keep track of status for the item.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        requirementID -- Optional:NO
              The user-defined ID of the item.<BR/>        description -- Optional:YES
              A description of the item.
    </UL>

     **********/
    static public DriverCommand startRequirement (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "startRequirement.parameters = null");
        DriverCommand dc = new DriverCommand(STARTREQUIREMENT_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Begin tracking status on a user-defined item.
          Log/process the beginning of testing associated with this user-defined item.
          A private counter 
          will keep track of status for the item.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param suiteID  Optional:NO
              The user-defined ID of the item.
     @param description  Optional:YES
              A description of the item.
     **********/
    static public DriverCommand startSuite (String suiteID, String description) {

        if ( suiteID == null ) throw new IllegalArgumentException ( "startSuite.suiteID = null");
        DriverCommand dc = new DriverCommand(STARTSUITE_KEYWORD);
        dc.addParameter(suiteID);
        dc.addParameter(description);
        return dc;
    }


    /*********** <pre>
          Begin tracking status on a user-defined item.
          Log/process the beginning of testing associated with this user-defined item.
          A private counter 
          will keep track of status for the item.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        suiteID -- Optional:NO
              The user-defined ID of the item.<BR/>        description -- Optional:YES
              A description of the item.
    </UL>

     **********/
    static public DriverCommand startSuite (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "startSuite.parameters = null");
        DriverCommand dc = new DriverCommand(STARTSUITE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Begin tracking status on a user-defined TestCase.
          Log/process the beginning of testing associated with a user-defined Testcase.
          A private counter 
          will keep track of status for the testcase.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param testCaseID  Optional:NO
              The user-defined ID of the Testcase.
     @param description  Optional:YES
              A description of the Testcase
     **********/
    static public DriverCommand startTestcase (String testCaseID, String description) {

        if ( testCaseID == null ) throw new IllegalArgumentException ( "startTestcase.testCaseID = null");
        DriverCommand dc = new DriverCommand(STARTTESTCASE_KEYWORD);
        dc.addParameter(testCaseID);
        dc.addParameter(description);
        return dc;
    }


    /*********** <pre>
          Begin tracking status on a user-defined TestCase.
          Log/process the beginning of testing associated with a user-defined Testcase.
          A private counter 
          will keep track of status for the testcase.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        testCaseID -- Optional:NO
              The user-defined ID of the Testcase.<BR/>        description -- Optional:YES
              A description of the Testcase
    </UL>

     **********/
    static public DriverCommand startTestcase (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "startTestcase.parameters = null");
        DriverCommand dc = new DriverCommand(STARTTESTCASE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Create a new private counter or suspend counts in an existing private counter.
              
                 If counterID is not already an active private counter, then 
                 this routine will create a new private counter with the provided 
                 counterID as its name.  The counter will be enabled for counting 
                 of all status information at all test levels but will be suspended 
                 from actually counting.
                 If counterID identifies an existing counter, then this routine 
                 will suspend counting within this counter.
                 See ApplicationUtilities for more information on private counters.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param counterID  Optional:NO  DefaultVal:Counter1 
                 The unique name used to identify this private counter.  
              
     @param description  Optional:YES
              Any additional information for stopping this counter.
     **********/
    static public DriverCommand stopCounter (String counterID, String description) {

        if ( counterID == null ) throw new IllegalArgumentException ( "stopCounter.counterID = null");
        DriverCommand dc = new DriverCommand(STOPCOUNTER_KEYWORD);
        dc.addParameter(counterID);
        dc.addParameter(description);
        return dc;
    }


    /*********** <pre> 
                 Create a new private counter or suspend counts in an existing private counter.
              
                 If counterID is not already an active private counter, then 
                 this routine will create a new private counter with the provided 
                 counterID as its name.  The counter will be enabled for counting 
                 of all status information at all test levels but will be suspended 
                 from actually counting.
                 If counterID identifies an existing counter, then this routine 
                 will suspend counting within this counter.
                 See ApplicationUtilities for more information on private counters.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        counterID -- Optional:NO  DefaultVal:Counter1 
                 The unique name used to identify this private counter.  
              <BR/>        description -- Optional:YES
              Any additional information for stopping this counter.
    </UL>

     **********/
    static public DriverCommand stopCounter (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "stopCounter.parameters = null");
        DriverCommand dc = new DriverCommand(STOPCOUNTER_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Stop tracking status on a user-defined item.
          Log/process the end of testing associated with a user-defined item.
          A private counter 
          will keep track of status for the item.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param cycleID  Optional:NO
              The user-defined ID of the item.
     @param description  Optional:YES
              A description of the item.
     **********/
    static public DriverCommand stopCycle (String cycleID, String description) {

        if ( cycleID == null ) throw new IllegalArgumentException ( "stopCycle.cycleID = null");
        DriverCommand dc = new DriverCommand(STOPCYCLE_KEYWORD);
        dc.addParameter(cycleID);
        dc.addParameter(description);
        return dc;
    }


    /*********** <pre>
          Stop tracking status on a user-defined item.
          Log/process the end of testing associated with a user-defined item.
          A private counter 
          will keep track of status for the item.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        cycleID -- Optional:NO
              The user-defined ID of the item.<BR/>        description -- Optional:YES
              A description of the item.
    </UL>

     **********/
    static public DriverCommand stopCycle (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "stopCycle.parameters = null");
        DriverCommand dc = new DriverCommand(STOPCYCLE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Stop tracking status on a user-defined item.
          Log/process the end of testing associated with a user-defined item.
          A private counter 
          will keep track of status for the item.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param procedureID  Optional:NO
              The user-defined ID of the item.
     @param description  Optional:YES
              A description of the item.
     **********/
    static public DriverCommand stopProcedure (String procedureID, String description) {

        if ( procedureID == null ) throw new IllegalArgumentException ( "stopProcedure.procedureID = null");
        DriverCommand dc = new DriverCommand(STOPPROCEDURE_KEYWORD);
        dc.addParameter(procedureID);
        dc.addParameter(description);
        return dc;
    }


    /*********** <pre>
          Stop tracking status on a user-defined item.
          Log/process the end of testing associated with a user-defined item.
          A private counter 
          will keep track of status for the item.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        procedureID -- Optional:NO
              The user-defined ID of the item.<BR/>        description -- Optional:YES
              A description of the item.
    </UL>

     **********/
    static public DriverCommand stopProcedure (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "stopProcedure.parameters = null");
        DriverCommand dc = new DriverCommand(STOPPROCEDURE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Stop tracking status on a user-defined item.
          Log/process the end of testing associated with a user-defined item.
          A private counter 
          will keep track of status for the item.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param requirementID  Optional:NO
              The user-defined ID of the item.
     @param description  Optional:YES
              A description of the item.
     **********/
    static public DriverCommand stopRequirement (String requirementID, String description) {

        if ( requirementID == null ) throw new IllegalArgumentException ( "stopRequirement.requirementID = null");
        DriverCommand dc = new DriverCommand(STOPREQUIREMENT_KEYWORD);
        dc.addParameter(requirementID);
        dc.addParameter(description);
        return dc;
    }


    /*********** <pre>
          Stop tracking status on a user-defined item.
          Log/process the end of testing associated with a user-defined item.
          A private counter 
          will keep track of status for the item.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        requirementID -- Optional:NO
              The user-defined ID of the item.<BR/>        description -- Optional:YES
              A description of the item.
    </UL>

     **********/
    static public DriverCommand stopRequirement (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "stopRequirement.parameters = null");
        DriverCommand dc = new DriverCommand(STOPREQUIREMENT_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Stop tracking status on a user-defined item.
          Log/process the end of testing associated with a user-defined item.
          A private counter 
          will keep track of status for the item.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param suiteID  Optional:NO
              The user-defined ID of the item.
     @param description  Optional:YES
              A description of the item.
     **********/
    static public DriverCommand stopSuite (String suiteID, String description) {

        if ( suiteID == null ) throw new IllegalArgumentException ( "stopSuite.suiteID = null");
        DriverCommand dc = new DriverCommand(STOPSUITE_KEYWORD);
        dc.addParameter(suiteID);
        dc.addParameter(description);
        return dc;
    }


    /*********** <pre>
          Stop tracking status on a user-defined item.
          Log/process the end of testing associated with a user-defined item.
          A private counter 
          will keep track of status for the item.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        suiteID -- Optional:NO
              The user-defined ID of the item.<BR/>        description -- Optional:YES
              A description of the item.
    </UL>

     **********/
    static public DriverCommand stopSuite (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "stopSuite.parameters = null");
        DriverCommand dc = new DriverCommand(STOPSUITE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Stop tracking status on a user-defined TestCase.
          Log/process the end of testing associated with a user-defined Testcase.
          A private counter 
          will keep track of status for the testcase.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param testCaseID  Optional:NO
              The user-defined ID of the Testcase.
     @param description  Optional:YES
              A description of the Testcase
     **********/
    static public DriverCommand stopTestcase (String testCaseID, String description) {

        if ( testCaseID == null ) throw new IllegalArgumentException ( "stopTestcase.testCaseID = null");
        DriverCommand dc = new DriverCommand(STOPTESTCASE_KEYWORD);
        dc.addParameter(testCaseID);
        dc.addParameter(description);
        return dc;
    }


    /*********** <pre>
          Stop tracking status on a user-defined TestCase.
          Log/process the end of testing associated with a user-defined Testcase.
          A private counter 
          will keep track of status for the testcase.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        testCaseID -- Optional:NO
              The user-defined ID of the Testcase.<BR/>        description -- Optional:YES
              A description of the Testcase
    </UL>

     **********/
    static public DriverCommand stopTestcase (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "stopTestcase.parameters = null");
        DriverCommand dc = new DriverCommand(STOPTESTCASE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Store the current values of the named counter into unique DDVariables.
              
                 This enables the framework, scripts, and other applications to retrieve 
                 the values of these counters at runtime.
                 Consult ApplicationUtilities 
                 and Using DDVariables 
                 for more information on referencing these DDVariables in your tests.
                 You must adhere to DDVariable naming conventions when providing this 
                 DDVariable basename.  Note that no spaces are allowed in DDVariable names.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param counterID  Optional:NO  DefaultVal:Counter1 
                 The unique name used to identify the private counter.  
              
     @param varPrefix  Optional:NO  DefaultVal:Counter1 
                 The unique DDVariable prefix to use for storing counter values.  
              
     **********/
    static public DriverCommand storeCounterInfo (String counterID, String varPrefix) {

        if ( counterID == null ) throw new IllegalArgumentException ( "storeCounterInfo.counterID = null");
        if ( varPrefix == null ) throw new IllegalArgumentException ( "storeCounterInfo.varPrefix = null");
        DriverCommand dc = new DriverCommand(STORECOUNTERINFO_KEYWORD);
        dc.addParameter(counterID);
        dc.addParameter(varPrefix);
        return dc;
    }


    /*********** <pre> 
                 Store the current values of the named counter into unique DDVariables.
              
                 This enables the framework, scripts, and other applications to retrieve 
                 the values of these counters at runtime.
                 Consult ApplicationUtilities 
                 and Using DDVariables 
                 for more information on referencing these DDVariables in your tests.
                 You must adhere to DDVariable naming conventions when providing this 
                 DDVariable basename.  Note that no spaces are allowed in DDVariable names.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        counterID -- Optional:NO  DefaultVal:Counter1 
                 The unique name used to identify the private counter.  
              <BR/>        varPrefix -- Optional:NO  DefaultVal:Counter1 
                 The unique DDVariable prefix to use for storing counter values.  
              
    </UL>

     **********/
    static public DriverCommand storeCounterInfo (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "storeCounterInfo.parameters = null");
        DriverCommand dc = new DriverCommand(STORECOUNTERINFO_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Suspend counting on ALL status counters--both public/global and private.
              
                 Suspends all status counting that is triggered via ApplicationUtilities.
                 See ApplicationUtilities for more information on counters.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param description  Optional:YES
              Any additional information for suspending status counts.
     @param logName  Optional:YES  DefaultVal:MainLog 
                 (Future) The name of a Log Facility other than the "current" one.
              
     **********/
    static public DriverCommand suspendStatusCounts (String description, String logName) {

        DriverCommand dc = new DriverCommand(SUSPENDSTATUSCOUNTS_KEYWORD);
        dc.addParameter(description);
        dc.addParameter(logName);
        return dc;
    }


    /*********** <pre> 
                 Suspend counting on ALL status counters--both public/global and private.
              
                 Suspends all status counting that is triggered via ApplicationUtilities.
                 See ApplicationUtilities for more information on counters.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        description -- Optional:YES
              Any additional information for suspending status counts.<BR/>        logName -- Optional:YES  DefaultVal:MainLog 
                 (Future) The name of a Log Facility other than the "current" one.
              
    </UL>

     **********/
    static public DriverCommand suspendStatusCounts (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "suspendStatusCounts.parameters = null");
        DriverCommand dc = new DriverCommand(SUSPENDSTATUSCOUNTS_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
              This routine will copy the contents of one or more DBTable column(s) to a file.
              
                 This routine will export the contents of one or more DBTable column(s) to
                 a delimeted file. If columnDelimiter is omitted, a horizontal tab is used
                 to delimit fields.
                 
                 A data source name  and Query String is required. You also have to specify
                 a variable to get the status code.  And optionally user id and password (this is
                 because some drivers don't need a user/password).
                 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param aDBAlias  Optional:NO 
                 not used
              
     @param aTableAlias  Optional:NO 
                 not used
              
     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param fileOut  Optional:NO 
                 Name of the output file. 
              
     @param sQLQuery  Optional:NO 
                 The file will contain the results of the executed Query. The query is NOT validated 
                 by this function.
              
     @param directoryOut  Optional:YES 
                 OPTIONAL parameter. If not specified the file will be stored in the default 
                 test directory
              
     @param sQLStatus  Optional:YES 
                 A variable which holds the current SQL run status.
              
     @param delimiter  Optional:YES 
                 Optional Delimiter to be used between columns written to file.
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     **********/
    static public DriverCommand copyDBTableColumnToFile (String aDBAlias, String aTableAlias, String dBSourceName, String fileOut, String sQLQuery, String directoryOut, String sQLStatus, String delimiter, String userID, String password) {

        if ( aDBAlias == null ) throw new IllegalArgumentException ( "copyDBTableColumnToFile.aDBAlias = null");
        if ( aTableAlias == null ) throw new IllegalArgumentException ( "copyDBTableColumnToFile.aTableAlias = null");
        if ( dBSourceName == null ) throw new IllegalArgumentException ( "copyDBTableColumnToFile.dBSourceName = null");
        if ( fileOut == null ) throw new IllegalArgumentException ( "copyDBTableColumnToFile.fileOut = null");
        if ( sQLQuery == null ) throw new IllegalArgumentException ( "copyDBTableColumnToFile.sQLQuery = null");
        DriverCommand dc = new DriverCommand(COPYDBTABLECOLUMNTOFILE_KEYWORD);
        dc.addParameter(aDBAlias);
        dc.addParameter(aTableAlias);
        dc.addParameter(dBSourceName);
        dc.addParameter(fileOut);
        dc.addParameter(sQLQuery);
        dc.addParameter(directoryOut);
        dc.addParameter(sQLStatus);
        dc.addParameter(delimiter);
        dc.addParameter(userID);
        dc.addParameter(password);
        return dc;
    }


    /*********** <pre> 
              This routine will copy the contents of one or more DBTable column(s) to a file.
              
                 This routine will export the contents of one or more DBTable column(s) to
                 a delimeted file. If columnDelimiter is omitted, a horizontal tab is used
                 to delimit fields.
                 
                 A data source name  and Query String is required. You also have to specify
                 a variable to get the status code.  And optionally user id and password (this is
                 because some drivers don't need a user/password).
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        aDBAlias -- Optional:NO 
                 not used
              <BR/>        aTableAlias -- Optional:NO 
                 not used
              <BR/>        dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>        fileOut -- Optional:NO 
                 Name of the output file. 
              <BR/>        sQLQuery -- Optional:NO 
                 The file will contain the results of the executed Query. The query is NOT validated 
                 by this function.
              <BR/>        directoryOut -- Optional:YES 
                 OPTIONAL parameter. If not specified the file will be stored in the default 
                 test directory
              <BR/>        sQLStatus -- Optional:YES 
                 A variable which holds the current SQL run status.
              <BR/>        delimiter -- Optional:YES 
                 Optional Delimiter to be used between columns written to file.
              <BR/>        userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>        password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              
    </UL>

     **********/
    static public DriverCommand copyDBTableColumnToFile (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "copyDBTableColumnToFile.parameters = null");
        DriverCommand dc = new DriverCommand(COPYDBTABLECOLUMNTOFILE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
              This routine will copy the contents of a DBTable  to a file.
              
                 This routine will export the contents of a DBTable  to a delimeted file.
                 
                 A data source name  and Query String is required. You also have to specify
                 a variable to get the status code.  And optionally user id and password (this is
                 because some drivers don't need a user/password).
                 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param aDBAlias  Optional:NO 
                 not used
              
     @param aTableAlias  Optional:NO 
                 not used
              
     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param fileOut  Optional:NO 
                 Name of the output file. 
              
     @param dBTableName  Optional:NO 
                 Name of the TABLE to access within the DBSourceName
           
     @param columnCount  Optional:YES 
                 If specified the output file will contain only the number of columns specified.
              
     @param rowCount  Optional:YES 
                 If specified the output file will contain only the number of rows specified. 
              
     @param sQLQuery  Optional:YES 
                 OPTIONAL parameter. If specified, the file will contain the results of the
                 executed Query. The query is NOT validated by this
                 function. If this is provided, the the DBTableName
                 must be ""
              
     @param delimiter  Optional:YES 
                 OPTIONAL parameter. If not specified the default ',' seperator will be used.
              
     @param directoryOut  Optional:YES 
                 OPTIONAL parameter. If not specified the file will be stored in the default 
                 test directory
              
     @param sQLStatus  Optional:YES 
                 A variable which holds the current SQL run status.
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     **********/
    static public DriverCommand copyDBTableToFile (String aDBAlias, String aTableAlias, String dBSourceName, String fileOut, String dBTableName, String columnCount, String rowCount, String sQLQuery, String delimiter, String directoryOut, String sQLStatus, String userID, String password) {

        if ( aDBAlias == null ) throw new IllegalArgumentException ( "copyDBTableToFile.aDBAlias = null");
        if ( aTableAlias == null ) throw new IllegalArgumentException ( "copyDBTableToFile.aTableAlias = null");
        if ( dBSourceName == null ) throw new IllegalArgumentException ( "copyDBTableToFile.dBSourceName = null");
        if ( dBTableName == null ) throw new IllegalArgumentException ( "copyDBTableToFile.dBTableName = null");
        if ( fileOut == null ) throw new IllegalArgumentException ( "copyDBTableToFile.fileOut = null");
        DriverCommand dc = new DriverCommand(COPYDBTABLETOFILE_KEYWORD);
        dc.addParameter(aDBAlias);
        dc.addParameter(aTableAlias);
        dc.addParameter(dBSourceName);
        dc.addParameter(fileOut);
        dc.addParameter(dBTableName);
        dc.addParameter(columnCount);
        dc.addParameter(rowCount);
        dc.addParameter(sQLQuery);
        dc.addParameter(delimiter);
        dc.addParameter(directoryOut);
        dc.addParameter(sQLStatus);
        dc.addParameter(userID);
        dc.addParameter(password);
        return dc;
    }


    /*********** <pre> 
              This routine will copy the contents of a DBTable  to a file.
              
                 This routine will export the contents of a DBTable  to a delimeted file.
                 
                 A data source name  and Query String is required. You also have to specify
                 a variable to get the status code.  And optionally user id and password (this is
                 because some drivers don't need a user/password).
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        aDBAlias -- Optional:NO 
                 not used
              <BR/>        aTableAlias -- Optional:NO 
                 not used
              <BR/>        dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>        fileOut -- Optional:NO 
                 Name of the output file. 
              <BR/>        dBTableName -- Optional:NO 
                 Name of the TABLE to access within the DBSourceName
           <BR/>        columnCount -- Optional:YES 
                 If specified the output file will contain only the number of columns specified.
              <BR/>        rowCount -- Optional:YES 
                 If specified the output file will contain only the number of rows specified. 
              <BR/>        sQLQuery -- Optional:YES 
                 OPTIONAL parameter. If specified, the file will contain the results of the
                 executed Query. The query is NOT validated by this
                 function. If this is provided, the the DBTableName
                 must be ""
              <BR/>        delimiter -- Optional:YES 
                 OPTIONAL parameter. If not specified the default ',' seperator will be used.
              <BR/>        directoryOut -- Optional:YES 
                 OPTIONAL parameter. If not specified the file will be stored in the default 
                 test directory
              <BR/>        sQLStatus -- Optional:YES 
                 A variable which holds the current SQL run status.
              <BR/>        userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>        password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              
    </UL>

     **********/
    static public DriverCommand copyDBTableToFile (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "copyDBTableToFile.parameters = null");
        DriverCommand dc = new DriverCommand(COPYDBTABLETOFILE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Deletes records in a database table
              
                 Deletes records in a database table.
                 
                 A table name is required. You also have to specify data source name,
                 and optionally user id and password (this is because some drivers
                 don't need a user/password).
                 
                 A query condition can be included. It can be any 
                 valid expression allowed by the WHERE clause of the DELETE FROM sentence of the SQL driver
                 you are using. For example: "CliBal > 100000 and CliCat = 'C'". 
                 Including "where" in the expression itself is optional.  It will 
                 be prefixed to the expression if it is not provided.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param aDBAlias  Optional:NO 
                 not used
              
     @param aTableAlias  Optional:NO 
                 not used
              
     @param dBTableName  Optional:NO 
                 Name of the TABLE to access within the DBSourceName
     @param dBQueryCond  Optional:NO 
                 Expression allowed by the WHERE clause of the DELETE FROM sentence of the SQL driver
              
     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     @param sQLStatus  Optional:YES 
                 SQL status code as a result of executing the query gets stored in this variable
              
     **********/
    static public DriverCommand deleteDBTableRecords (String aDBAlias, String aTableAlias, String dBTableName, String dBQueryCond, String dBSourceName, String userID, String password, String sQLStatus) {

        if ( aDBAlias == null ) throw new IllegalArgumentException ( "deleteDBTableRecords.aDBAlias = null");
        if ( aTableAlias == null ) throw new IllegalArgumentException ( "deleteDBTableRecords.aTableAlias = null");
        if ( dBQueryCond == null ) throw new IllegalArgumentException ( "deleteDBTableRecords.dBQueryCond = null");
        if ( dBSourceName == null ) throw new IllegalArgumentException ( "deleteDBTableRecords.dBSourceName = null");
        if ( dBTableName == null ) throw new IllegalArgumentException ( "deleteDBTableRecords.dBTableName = null");
        DriverCommand dc = new DriverCommand(DELETEDBTABLERECORDS_KEYWORD);
        dc.addParameter(aDBAlias);
        dc.addParameter(aTableAlias);
        dc.addParameter(dBTableName);
        dc.addParameter(dBQueryCond);
        dc.addParameter(dBSourceName);
        dc.addParameter(userID);
        dc.addParameter(password);
        dc.addParameter(sQLStatus);
        return dc;
    }


    /*********** <pre> 
                 Deletes records in a database table
              
                 Deletes records in a database table.
                 
                 A table name is required. You also have to specify data source name,
                 and optionally user id and password (this is because some drivers
                 don't need a user/password).
                 
                 A query condition can be included. It can be any 
                 valid expression allowed by the WHERE clause of the DELETE FROM sentence of the SQL driver
                 you are using. For example: "CliBal > 100000 and CliCat = 'C'". 
                 Including "where" in the expression itself is optional.  It will 
                 be prefixed to the expression if it is not provided.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        aDBAlias -- Optional:NO 
                 not used
              <BR/>        aTableAlias -- Optional:NO 
                 not used
              <BR/>        dBTableName -- Optional:NO 
                 Name of the TABLE to access within the DBSourceName<BR/>        dBQueryCond -- Optional:NO 
                 Expression allowed by the WHERE clause of the DELETE FROM sentence of the SQL driver
              <BR/>        dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>        userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>        password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              <BR/>        sQLStatus -- Optional:YES 
                 SQL status code as a result of executing the query gets stored in this variable
              
    </UL>

     **********/
    static public DriverCommand deleteDBTableRecords (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "deleteDBTableRecords.parameters = null");
        DriverCommand dc = new DriverCommand(DELETEDBTABLERECORDS_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Executes the query provided in a queryStr on the database table.
              
                 Executes the query in a database table.
                 
                 A data source name  and Query String is required. You also have to specify
                 a variable to get the status code.  And optionally user id and password (this is
                 because some drivers don't need a user/password).
                 
                 Use this command with caution.  It doesn't return any value back other than the
                 SQL Status code.  So, remember not to use 'SELECT' command inside the queryStr.
                 It should rather be used to do an 'UPDATE', 'INSERT' or 'DELETE'.
                  
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param aDBAlias  Optional:NO 
                 not used
              
     @param aTableAlias  Optional:NO 
                 not used
              
     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param queryStr  Optional:NO 
                 Actual query stored in a queryStr.
              
     @param sQLStatusCode  Optional:NO 
                 SQL status code as a result of executing the query.
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     **********/
    static public DriverCommand execSQLQuery (String aDBAlias, String aTableAlias, String dBSourceName, String queryStr, String sQLStatusCode, String userID, String password) {

        if ( aDBAlias == null ) throw new IllegalArgumentException ( "execSQLQuery.aDBAlias = null");
        if ( aTableAlias == null ) throw new IllegalArgumentException ( "execSQLQuery.aTableAlias = null");
        if ( dBSourceName == null ) throw new IllegalArgumentException ( "execSQLQuery.dBSourceName = null");
        if ( queryStr == null ) throw new IllegalArgumentException ( "execSQLQuery.queryStr = null");
        if ( sQLStatusCode == null ) throw new IllegalArgumentException ( "execSQLQuery.sQLStatusCode = null");
        DriverCommand dc = new DriverCommand(EXECSQLQUERY_KEYWORD);
        dc.addParameter(aDBAlias);
        dc.addParameter(aTableAlias);
        dc.addParameter(dBSourceName);
        dc.addParameter(queryStr);
        dc.addParameter(sQLStatusCode);
        dc.addParameter(userID);
        dc.addParameter(password);
        return dc;
    }


    /*********** <pre> 
                 Executes the query provided in a queryStr on the database table.
              
                 Executes the query in a database table.
                 
                 A data source name  and Query String is required. You also have to specify
                 a variable to get the status code.  And optionally user id and password (this is
                 because some drivers don't need a user/password).
                 
                 Use this command with caution.  It doesn't return any value back other than the
                 SQL Status code.  So, remember not to use 'SELECT' command inside the queryStr.
                 It should rather be used to do an 'UPDATE', 'INSERT' or 'DELETE'.
                  
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        aDBAlias -- Optional:NO 
                 not used
              <BR/>        aTableAlias -- Optional:NO 
                 not used
              <BR/>        dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>        queryStr -- Optional:NO 
                 Actual query stored in a queryStr.
              <BR/>        sQLStatusCode -- Optional:NO 
                 SQL status code as a result of executing the query.
              <BR/>        userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>        password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              
    </UL>

     **********/
    static public DriverCommand execSQLQuery (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "execSQLQuery.parameters = null");
        DriverCommand dc = new DriverCommand(EXECSQLQUERY_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Executes the query in a specified database table and returns the total column count.
              
                 Executes the query in a specified database table and returns the total column count.
                 
                 A data source name  and Table name are required. You also have to specify a 
                 variable to get the result of the SQL and status code.  And optionally user id 
                 and password (this is because some drivers don't need a user/password).
                 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param aDBAlias  Optional:NO 
                 not used
              
     @param aTableAlias  Optional:NO 
                 not used
              
     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param dBTableName  Optional:NO 
                 Name of the TABLE to access within the DBSourceName
           
     @param columnCount  Optional:NO 
                 SQL result get stored in this return variable.
              
     @param sQLStatusCode  Optional:NO 
                 SQL status code as a result of executing the query.
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     **********/
    static public DriverCommand getDBTableColumnCount (String aDBAlias, String aTableAlias, String dBSourceName, String dBTableName, String columnCount, String sQLStatusCode, String userID, String password) {

        if ( aDBAlias == null ) throw new IllegalArgumentException ( "getDBTableColumnCount.aDBAlias = null");
        if ( aTableAlias == null ) throw new IllegalArgumentException ( "getDBTableColumnCount.aTableAlias = null");
        if ( columnCount == null ) throw new IllegalArgumentException ( "getDBTableColumnCount.columnCount = null");
        if ( dBSourceName == null ) throw new IllegalArgumentException ( "getDBTableColumnCount.dBSourceName = null");
        if ( dBTableName == null ) throw new IllegalArgumentException ( "getDBTableColumnCount.dBTableName = null");
        if ( sQLStatusCode == null ) throw new IllegalArgumentException ( "getDBTableColumnCount.sQLStatusCode = null");
        DriverCommand dc = new DriverCommand(GETDBTABLECOLUMNCOUNT_KEYWORD);
        dc.addParameter(aDBAlias);
        dc.addParameter(aTableAlias);
        dc.addParameter(dBSourceName);
        dc.addParameter(dBTableName);
        dc.addParameter(columnCount);
        dc.addParameter(sQLStatusCode);
        dc.addParameter(userID);
        dc.addParameter(password);
        return dc;
    }


    /*********** <pre> 
                 Executes the query in a specified database table and returns the total column count.
              
                 Executes the query in a specified database table and returns the total column count.
                 
                 A data source name  and Table name are required. You also have to specify a 
                 variable to get the result of the SQL and status code.  And optionally user id 
                 and password (this is because some drivers don't need a user/password).
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        aDBAlias -- Optional:NO 
                 not used
              <BR/>        aTableAlias -- Optional:NO 
                 not used
              <BR/>        dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>        dBTableName -- Optional:NO 
                 Name of the TABLE to access within the DBSourceName
           <BR/>        columnCount -- Optional:NO 
                 SQL result get stored in this return variable.
              <BR/>        sQLStatusCode -- Optional:NO 
                 SQL status code as a result of executing the query.
              <BR/>        userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>        password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              
    </UL>

     **********/
    static public DriverCommand getDBTableColumnCount (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getDBTableColumnCount.parameters = null");
        DriverCommand dc = new DriverCommand(GETDBTABLECOLUMNCOUNT_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Executes the query in a database table.
              
                 Executes the query in a database table.
                 
                 A data source name  and Query String is required. You also have to specify
                 a variable to get the status code.  And optionally user id and password (this is
                 because some drivers don't need a user/password).
                 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param aDBAlias  Optional:NO 
                 not used
              
     @param aTableAlias  Optional:NO 
                 not used
              
     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param dBTableName  Optional:NO 
                 Name of the TABLE to access within the DBSourceName
           
     @param rowCount  Optional:NO 
                 SQL result get stored in this return variable.
              
     @param sQLStatusCode  Optional:NO 
                 SQL status code as a result of executing the query.
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     **********/
    static public DriverCommand getDBTableRowCount (String aDBAlias, String aTableAlias, String dBSourceName, String dBTableName, String rowCount, String sQLStatusCode, String userID, String password) {

        if ( aDBAlias == null ) throw new IllegalArgumentException ( "getDBTableRowCount.aDBAlias = null");
        if ( aTableAlias == null ) throw new IllegalArgumentException ( "getDBTableRowCount.aTableAlias = null");
        if ( dBSourceName == null ) throw new IllegalArgumentException ( "getDBTableRowCount.dBSourceName = null");
        if ( dBTableName == null ) throw new IllegalArgumentException ( "getDBTableRowCount.dBTableName = null");
        if ( rowCount == null ) throw new IllegalArgumentException ( "getDBTableRowCount.rowCount = null");
        if ( sQLStatusCode == null ) throw new IllegalArgumentException ( "getDBTableRowCount.sQLStatusCode = null");
        DriverCommand dc = new DriverCommand(GETDBTABLEROWCOUNT_KEYWORD);
        dc.addParameter(aDBAlias);
        dc.addParameter(aTableAlias);
        dc.addParameter(dBSourceName);
        dc.addParameter(dBTableName);
        dc.addParameter(rowCount);
        dc.addParameter(sQLStatusCode);
        dc.addParameter(userID);
        dc.addParameter(password);
        return dc;
    }


    /*********** <pre> 
                 Executes the query in a database table.
              
                 Executes the query in a database table.
                 
                 A data source name  and Query String is required. You also have to specify
                 a variable to get the status code.  And optionally user id and password (this is
                 because some drivers don't need a user/password).
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        aDBAlias -- Optional:NO 
                 not used
              <BR/>        aTableAlias -- Optional:NO 
                 not used
              <BR/>        dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>        dBTableName -- Optional:NO 
                 Name of the TABLE to access within the DBSourceName
           <BR/>        rowCount -- Optional:NO 
                 SQL result get stored in this return variable.
              <BR/>        sQLStatusCode -- Optional:NO 
                 SQL status code as a result of executing the query.
              <BR/>        userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>        password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              
    </UL>

     **********/
    static public DriverCommand getDBTableRowCount (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getDBTableRowCount.parameters = null");
        DriverCommand dc = new DriverCommand(GETDBTABLEROWCOUNT_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Executes the query and returns the case-sensitive value as result of the execution.
              
                 Executes the query specified in the queryStr and returns the case-sensitive value
                 as result of the execution.
                 
                 To return the value, it executes a SQL query sentence using a data source to 
                 connect to the data base (using a 'SELECT').
                 
                 A queryStr and the two return variables to store the query result and SQL Status code
                 are required.  You also have to specify data source name and optionally user id and
                 password (this is because some drivers don't need a user/password).
                 
                 If the query returns more than one record, the returned value is the corresponding to the
                 first one, unless the field name be something like COUNT(*) or SUM(InvoiceTot).
                 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param aDBAlias  Optional:NO 
                 not used
              
     @param aTableAlias  Optional:NO 
                 not used
              
     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param queryStr  Optional:NO
                 Actual query stored in a queryStr.
              
     @param queryResult  Optional:NO 
                 SQL result get stored in this return variable.
              
     @param sQLStatusCode  Optional:NO 
                 SQL status code as a result of executing the query.
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     **********/
    static public DriverCommand getDBValue (String aDBAlias, String aTableAlias, String dBSourceName, String queryStr, String queryResult, String sQLStatusCode, String userID, String password) {

        if ( aDBAlias == null ) throw new IllegalArgumentException ( "getDBValue.aDBAlias = null");
        if ( aTableAlias == null ) throw new IllegalArgumentException ( "getDBValue.aTableAlias = null");
        if ( dBSourceName == null ) throw new IllegalArgumentException ( "getDBValue.dBSourceName = null");
        if ( queryResult == null ) throw new IllegalArgumentException ( "getDBValue.queryResult = null");
        if ( queryStr == null ) throw new IllegalArgumentException ( "getDBValue.queryStr = null");
        if ( sQLStatusCode == null ) throw new IllegalArgumentException ( "getDBValue.sQLStatusCode = null");
        DriverCommand dc = new DriverCommand(GETDBVALUE_KEYWORD);
        dc.addParameter(aDBAlias);
        dc.addParameter(aTableAlias);
        dc.addParameter(dBSourceName);
        dc.addParameter(queryStr);
        dc.addParameter(queryResult);
        dc.addParameter(sQLStatusCode);
        dc.addParameter(userID);
        dc.addParameter(password);
        return dc;
    }


    /*********** <pre> 
                 Executes the query and returns the case-sensitive value as result of the execution.
              
                 Executes the query specified in the queryStr and returns the case-sensitive value
                 as result of the execution.
                 
                 To return the value, it executes a SQL query sentence using a data source to 
                 connect to the data base (using a 'SELECT').
                 
                 A queryStr and the two return variables to store the query result and SQL Status code
                 are required.  You also have to specify data source name and optionally user id and
                 password (this is because some drivers don't need a user/password).
                 
                 If the query returns more than one record, the returned value is the corresponding to the
                 first one, unless the field name be something like COUNT(*) or SUM(InvoiceTot).
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        aDBAlias -- Optional:NO 
                 not used
              <BR/>        aTableAlias -- Optional:NO 
                 not used
              <BR/>        dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>        queryStr -- Optional:NO
                 Actual query stored in a queryStr.
              <BR/>        queryResult -- Optional:NO 
                 SQL result get stored in this return variable.
              <BR/>        sQLStatusCode -- Optional:NO 
                 SQL status code as a result of executing the query.
              <BR/>        userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>        password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              
    </UL>

     **********/
    static public DriverCommand getDBValue (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getDBValue.parameters = null");
        DriverCommand dc = new DriverCommand(GETDBVALUE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 set Jdbc Driver
              
                 sets a JDBC driver, can be called more than once with
                 multiple drivers.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param driverClassName  Optional:NO 
                 Name of the driver class
              
     **********/
    static public DriverCommand setJdbcDriver (String driverClassName) {

        if ( driverClassName == null ) throw new IllegalArgumentException ( "setJdbcDriver.driverClassName = null");
        DriverCommand dc = new DriverCommand(SETJDBCDRIVER_KEYWORD);
        dc.addParameter(driverClassName);
        return dc;
    }


    /*********** <pre> 
                 Verifies the value of a field in a database table is NULL
              
                 Verifies the value of a field in a database table is NULL.
                 
                 Sometimes you have to check if a field's value is NULL. This
                 NULL value is different from any other (even zero for numerics
                 and null string for characters), so if you try to check it
                 using VerifyDBValue() function, if will fail.
                 
                 A table and field name are required. You also have to specify data source name,
                 user id and password (the user id and password can be "" meaning not required).
                 
                 A query condition can be included. It can be any 
                 valid expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
                 you are using. For example: "CliBal > 100000 and CliCat = 'C'". 
                 Including "where" in the expression itself is optional.  It will 
                 be prefixed to the expression if it is not provided.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param aDBAlias  Optional:NO 
                 not used
              
     @param aTableAlias  Optional:NO 
                 not used
              
     @param dBFieldName  Optional:NO 
                 Name of the FIELD within DBTableName used in the verification
              
     @param dBTableName  Optional:NO 
                 Name of the TABLE to access within the DBSourceName
     @param dBQueryCond  Optional:NO 
                 Expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
              
     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     @param sQLStatus  Optional:YES 
                 SQL status code as a result of executing the query gets stored in this variable
              
     **********/
    static public DriverCommand verifyDatabaseNullValue (String aDBAlias, String aTableAlias, String dBFieldName, String dBTableName, String dBQueryCond, String dBSourceName, String userID, String password, String sQLStatus) {

        if ( aDBAlias == null ) throw new IllegalArgumentException ( "verifyDatabaseNullValue.aDBAlias = null");
        if ( aTableAlias == null ) throw new IllegalArgumentException ( "verifyDatabaseNullValue.aTableAlias = null");
        if ( dBFieldName == null ) throw new IllegalArgumentException ( "verifyDatabaseNullValue.dBFieldName = null");
        if ( dBQueryCond == null ) throw new IllegalArgumentException ( "verifyDatabaseNullValue.dBQueryCond = null");
        if ( dBSourceName == null ) throw new IllegalArgumentException ( "verifyDatabaseNullValue.dBSourceName = null");
        if ( dBTableName == null ) throw new IllegalArgumentException ( "verifyDatabaseNullValue.dBTableName = null");
        DriverCommand dc = new DriverCommand(VERIFYDATABASENULLVALUE_KEYWORD);
        dc.addParameter(aDBAlias);
        dc.addParameter(aTableAlias);
        dc.addParameter(dBFieldName);
        dc.addParameter(dBTableName);
        dc.addParameter(dBQueryCond);
        dc.addParameter(dBSourceName);
        dc.addParameter(userID);
        dc.addParameter(password);
        dc.addParameter(sQLStatus);
        return dc;
    }


    /*********** <pre> 
                 Verifies the value of a field in a database table is NULL
              
                 Verifies the value of a field in a database table is NULL.
                 
                 Sometimes you have to check if a field's value is NULL. This
                 NULL value is different from any other (even zero for numerics
                 and null string for characters), so if you try to check it
                 using VerifyDBValue() function, if will fail.
                 
                 A table and field name are required. You also have to specify data source name,
                 user id and password (the user id and password can be "" meaning not required).
                 
                 A query condition can be included. It can be any 
                 valid expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
                 you are using. For example: "CliBal > 100000 and CliCat = 'C'". 
                 Including "where" in the expression itself is optional.  It will 
                 be prefixed to the expression if it is not provided.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        aDBAlias -- Optional:NO 
                 not used
              <BR/>        aTableAlias -- Optional:NO 
                 not used
              <BR/>        dBFieldName -- Optional:NO 
                 Name of the FIELD within DBTableName used in the verification
              <BR/>        dBTableName -- Optional:NO 
                 Name of the TABLE to access within the DBSourceName<BR/>        dBQueryCond -- Optional:NO 
                 Expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
              <BR/>        dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>        userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>        password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              <BR/>        sQLStatus -- Optional:YES 
                 SQL status code as a result of executing the query gets stored in this variable
              
    </UL>

     **********/
    static public DriverCommand verifyDatabaseNullValue (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyDatabaseNullValue.parameters = null");
        DriverCommand dc = new DriverCommand(VERIFYDATABASENULLVALUE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Verifies the case-sensitive value of a field in a database table
              
                 Verifies the case-sensitive value of a field in a database table.
                 
                 To return the value, it executes a SQL query sentence using a
                 data source to connect to the data base (using a 'SELECT'). 
                 
                 A table and field name are required. You also have to specify data source name,
                 user id, password, and the expected value.
                 
                 If the query returns more than one record, the returned value
                 is the corresponding to the first one, unless the field name
                 be something like COUNT(*) or SUM(InvoiceTot).
                 
                 A query condition can be included. It can be any 
                 valid expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
                 you are using. For example: "CliBal > 100000 and CliCat = 'C'". 
                 Including "where" in the expression itself is optional.  It will 
                 be prefixed to the expression if it is not provided.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param aDBAlias  Optional:NO 
                 not used
              
     @param aTableAlias  Optional:NO 
                 not used
              
     @param dBFieldName  Optional:NO 
                 Name of the FIELD within DBTableName used in the verification
              
     @param dBTableName  Optional:NO 
                 Name of the TABLE to access within the DBSourceName
     @param dBQueryCond  Optional:NO 
                 Expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
              
     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param userID  Optional:NO 
                 UserID for accessing the Datasource (if required, if
                 not then "" must be supplied).
              
     @param password  Optional:NO 
                 Password for accessing the Datasource (if required, if
                 not then "" must be supplied).
              
     @param expectedValue  Optional:NO 
                 Benchmark value to compare against retrieved DBFieldName value
              
     @param sQLStatus  Optional:YES 
                 SQL status code as a result of executing the query gets stored in this variable
              
     **********/
    static public DriverCommand verifyDatabaseValue (String aDBAlias, String aTableAlias, String dBFieldName, String dBTableName, String dBQueryCond, String dBSourceName, String userID, String password, String expectedValue, String sQLStatus) {

        if ( aDBAlias == null ) throw new IllegalArgumentException ( "verifyDatabaseValue.aDBAlias = null");
        if ( aTableAlias == null ) throw new IllegalArgumentException ( "verifyDatabaseValue.aTableAlias = null");
        if ( dBFieldName == null ) throw new IllegalArgumentException ( "verifyDatabaseValue.dBFieldName = null");
        if ( dBQueryCond == null ) throw new IllegalArgumentException ( "verifyDatabaseValue.dBQueryCond = null");
        if ( dBSourceName == null ) throw new IllegalArgumentException ( "verifyDatabaseValue.dBSourceName = null");
        if ( dBTableName == null ) throw new IllegalArgumentException ( "verifyDatabaseValue.dBTableName = null");
        if ( expectedValue == null ) throw new IllegalArgumentException ( "verifyDatabaseValue.expectedValue = null");
        if ( password == null ) throw new IllegalArgumentException ( "verifyDatabaseValue.password = null");
        if ( userID == null ) throw new IllegalArgumentException ( "verifyDatabaseValue.userID = null");
        DriverCommand dc = new DriverCommand(VERIFYDATABASEVALUE_KEYWORD);
        dc.addParameter(aDBAlias);
        dc.addParameter(aTableAlias);
        dc.addParameter(dBFieldName);
        dc.addParameter(dBTableName);
        dc.addParameter(dBQueryCond);
        dc.addParameter(dBSourceName);
        dc.addParameter(userID);
        dc.addParameter(password);
        dc.addParameter(expectedValue);
        dc.addParameter(sQLStatus);
        return dc;
    }


    /*********** <pre> 
                 Verifies the case-sensitive value of a field in a database table
              
                 Verifies the case-sensitive value of a field in a database table.
                 
                 To return the value, it executes a SQL query sentence using a
                 data source to connect to the data base (using a 'SELECT'). 
                 
                 A table and field name are required. You also have to specify data source name,
                 user id, password, and the expected value.
                 
                 If the query returns more than one record, the returned value
                 is the corresponding to the first one, unless the field name
                 be something like COUNT(*) or SUM(InvoiceTot).
                 
                 A query condition can be included. It can be any 
                 valid expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
                 you are using. For example: "CliBal > 100000 and CliCat = 'C'". 
                 Including "where" in the expression itself is optional.  It will 
                 be prefixed to the expression if it is not provided.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        aDBAlias -- Optional:NO 
                 not used
              <BR/>        aTableAlias -- Optional:NO 
                 not used
              <BR/>        dBFieldName -- Optional:NO 
                 Name of the FIELD within DBTableName used in the verification
              <BR/>        dBTableName -- Optional:NO 
                 Name of the TABLE to access within the DBSourceName<BR/>        dBQueryCond -- Optional:NO 
                 Expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
              <BR/>        dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>        userID -- Optional:NO 
                 UserID for accessing the Datasource (if required, if
                 not then "" must be supplied).
              <BR/>        password -- Optional:NO 
                 Password for accessing the Datasource (if required, if
                 not then "" must be supplied).
              <BR/>        expectedValue -- Optional:NO 
                 Benchmark value to compare against retrieved DBFieldName value
              <BR/>        sQLStatus -- Optional:YES 
                 SQL status code as a result of executing the query gets stored in this variable
              
    </UL>

     **********/
    static public DriverCommand verifyDatabaseValue (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyDatabaseValue.parameters = null");
        DriverCommand dc = new DriverCommand(VERIFYDATABASEVALUE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Verifies the value of a field in a database table is NULL
              
                 Verifies the value of a field in a database table is NULL.
                 
                 Sometimes you have to check if a field's value is NULL. This
                 NULL value is different from any other (even zero for numerics
                 and null string for characters), so if you try to check it
                 using VerifyDBValue() function, if will fail.
                 
                 A table and field name are required. You also have to specify data source name,
                 user id and password (the user id and password can be "" meaning not required).
                 
                 A query condition can be included. It can be any 
                 valid expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
                 you are using. For example: "CliBal > 100000 and CliCat = 'C'". 
                 Including "where" in the expression itself is optional.  It will 
                 be prefixed to the expression if it is not provided.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param aDBAlias  Optional:NO 
                 not used
              
     @param aTableAlias  Optional:NO 
                 not used
              
     @param dBFieldName  Optional:NO 
                 Name of the FIELD within DBTableName used in the verification
              
     @param dBTableName  Optional:NO 
                 Name of the TABLE to access within the DBSourceName
     @param dBQueryCond  Optional:NO 
                 Expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
              
     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     @param sQLStatus  Optional:YES 
                 SQL status code as a result of executing the query gets stored in this variable
              
     **********/
    static public DriverCommand verifyDBNullValue (String aDBAlias, String aTableAlias, String dBFieldName, String dBTableName, String dBQueryCond, String dBSourceName, String userID, String password, String sQLStatus) {

        if ( aDBAlias == null ) throw new IllegalArgumentException ( "verifyDBNullValue.aDBAlias = null");
        if ( aTableAlias == null ) throw new IllegalArgumentException ( "verifyDBNullValue.aTableAlias = null");
        if ( dBFieldName == null ) throw new IllegalArgumentException ( "verifyDBNullValue.dBFieldName = null");
        if ( dBQueryCond == null ) throw new IllegalArgumentException ( "verifyDBNullValue.dBQueryCond = null");
        if ( dBSourceName == null ) throw new IllegalArgumentException ( "verifyDBNullValue.dBSourceName = null");
        if ( dBTableName == null ) throw new IllegalArgumentException ( "verifyDBNullValue.dBTableName = null");
        DriverCommand dc = new DriverCommand(VERIFYDBNULLVALUE_KEYWORD);
        dc.addParameter(aDBAlias);
        dc.addParameter(aTableAlias);
        dc.addParameter(dBFieldName);
        dc.addParameter(dBTableName);
        dc.addParameter(dBQueryCond);
        dc.addParameter(dBSourceName);
        dc.addParameter(userID);
        dc.addParameter(password);
        dc.addParameter(sQLStatus);
        return dc;
    }


    /*********** <pre> 
                 Verifies the value of a field in a database table is NULL
              
                 Verifies the value of a field in a database table is NULL.
                 
                 Sometimes you have to check if a field's value is NULL. This
                 NULL value is different from any other (even zero for numerics
                 and null string for characters), so if you try to check it
                 using VerifyDBValue() function, if will fail.
                 
                 A table and field name are required. You also have to specify data source name,
                 user id and password (the user id and password can be "" meaning not required).
                 
                 A query condition can be included. It can be any 
                 valid expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
                 you are using. For example: "CliBal > 100000 and CliCat = 'C'". 
                 Including "where" in the expression itself is optional.  It will 
                 be prefixed to the expression if it is not provided.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        aDBAlias -- Optional:NO 
                 not used
              <BR/>        aTableAlias -- Optional:NO 
                 not used
              <BR/>        dBFieldName -- Optional:NO 
                 Name of the FIELD within DBTableName used in the verification
              <BR/>        dBTableName -- Optional:NO 
                 Name of the TABLE to access within the DBSourceName<BR/>        dBQueryCond -- Optional:NO 
                 Expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
              <BR/>        dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>        userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>        password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              <BR/>        sQLStatus -- Optional:YES 
                 SQL status code as a result of executing the query gets stored in this variable
              
    </UL>

     **********/
    static public DriverCommand verifyDBNullValue (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyDBNullValue.parameters = null");
        DriverCommand dc = new DriverCommand(VERIFYDBNULLVALUE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Verifies the case-sensitive value of a field in a database table
              
                 Verifies the case-sensitive value of a field in a database table.
                 
                 To return the value, it executes a SQL query sentence using a
                 data source to connect to the data base (using a 'SELECT').
                 
                 A table and field name are required. You also have to specify data source name,
                 user id, password, and the expected value.
                 
                 If the query returns more than one record, the returned value
                 is the corresponding to the first one, unless the field name
                 be something like COUNT(*) or SUM(InvoiceTot).
                 
                 A query condition can be included. It can be any 
                 valid expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
                 you are using. For example: "CliBal > 100000 and CliCat = 'C'". 
                 Including "where" in the expression itself is optional.  It will 
                 be prefixed to the expression if it is not provided.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param aDBAlias  Optional:NO 
                 not used
              
     @param aTableAlias  Optional:NO 
                 not used
              
     @param dBFieldName  Optional:NO 
                 Name of the FIELD within DBTableName used in the verification
              
     @param dBTableName  Optional:NO 
                 Name of the TABLE to access within the DBSourceName
     @param dBQueryCond  Optional:NO 
                 Expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
              
     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param userID  Optional:NO 
                 UserID for accessing the Datasource (if required, if
                 not then "" must be supplied).
              
     @param password  Optional:NO 
                 Password for accessing the Datasource (if required, if
                 not then "" must be supplied).
              
     @param expectedValue  Optional:NO 
                 Benchmark value to compare against retrieved DBFieldName value
              
     @param sQLStatus  Optional:YES 
                 SQL status code as a result of executing the query gets stored in this variable
              
     **********/
    static public DriverCommand verifyDBValue (String aDBAlias, String aTableAlias, String dBFieldName, String dBTableName, String dBQueryCond, String dBSourceName, String userID, String password, String expectedValue, String sQLStatus) {

        if ( aDBAlias == null ) throw new IllegalArgumentException ( "verifyDBValue.aDBAlias = null");
        if ( aTableAlias == null ) throw new IllegalArgumentException ( "verifyDBValue.aTableAlias = null");
        if ( dBFieldName == null ) throw new IllegalArgumentException ( "verifyDBValue.dBFieldName = null");
        if ( dBQueryCond == null ) throw new IllegalArgumentException ( "verifyDBValue.dBQueryCond = null");
        if ( dBSourceName == null ) throw new IllegalArgumentException ( "verifyDBValue.dBSourceName = null");
        if ( dBTableName == null ) throw new IllegalArgumentException ( "verifyDBValue.dBTableName = null");
        if ( expectedValue == null ) throw new IllegalArgumentException ( "verifyDBValue.expectedValue = null");
        if ( password == null ) throw new IllegalArgumentException ( "verifyDBValue.password = null");
        if ( userID == null ) throw new IllegalArgumentException ( "verifyDBValue.userID = null");
        DriverCommand dc = new DriverCommand(VERIFYDBVALUE_KEYWORD);
        dc.addParameter(aDBAlias);
        dc.addParameter(aTableAlias);
        dc.addParameter(dBFieldName);
        dc.addParameter(dBTableName);
        dc.addParameter(dBQueryCond);
        dc.addParameter(dBSourceName);
        dc.addParameter(userID);
        dc.addParameter(password);
        dc.addParameter(expectedValue);
        dc.addParameter(sQLStatus);
        return dc;
    }


    /*********** <pre> 
                 Verifies the case-sensitive value of a field in a database table
              
                 Verifies the case-sensitive value of a field in a database table.
                 
                 To return the value, it executes a SQL query sentence using a
                 data source to connect to the data base (using a 'SELECT').
                 
                 A table and field name are required. You also have to specify data source name,
                 user id, password, and the expected value.
                 
                 If the query returns more than one record, the returned value
                 is the corresponding to the first one, unless the field name
                 be something like COUNT(*) or SUM(InvoiceTot).
                 
                 A query condition can be included. It can be any 
                 valid expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
                 you are using. For example: "CliBal > 100000 and CliCat = 'C'". 
                 Including "where" in the expression itself is optional.  It will 
                 be prefixed to the expression if it is not provided.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        aDBAlias -- Optional:NO 
                 not used
              <BR/>        aTableAlias -- Optional:NO 
                 not used
              <BR/>        dBFieldName -- Optional:NO 
                 Name of the FIELD within DBTableName used in the verification
              <BR/>        dBTableName -- Optional:NO 
                 Name of the TABLE to access within the DBSourceName<BR/>        dBQueryCond -- Optional:NO 
                 Expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
              <BR/>        dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>        userID -- Optional:NO 
                 UserID for accessing the Datasource (if required, if
                 not then "" must be supplied).
              <BR/>        password -- Optional:NO 
                 Password for accessing the Datasource (if required, if
                 not then "" must be supplied).
              <BR/>        expectedValue -- Optional:NO 
                 Benchmark value to compare against retrieved DBFieldName value
              <BR/>        sQLStatus -- Optional:YES 
                 SQL status code as a result of executing the query gets stored in this variable
              
    </UL>

     **********/
    static public DriverCommand verifyDBValue (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyDBValue.parameters = null");
        DriverCommand dc = new DriverCommand(VERIFYDBVALUE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Enable and Disable Breakpoint Debugging.
              
                 Enable and Disable Breakpoint Debugging.  This means that 
                 debugging will stop at each record following a 
                 (BP) Breakpoint record.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param mode  Optional:NO  DefaultVal:OFF 
                 The status for this debug mode.
              
     **********/
    static public DriverCommand breakpoints (String mode) {

        if ( mode == null ) throw new IllegalArgumentException ( "breakpoints.mode = null");
        DriverCommand dc = new DriverCommand(BREAKPOINTS_KEYWORD);
        dc.addParameter(mode);
        return dc;
    }


    /*********** <pre> 
                 Enable and Disable (C)Command Debugging.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param mode  Optional:NO  DefaultVal:OFF 
                 The status for this debug mode.
              
     **********/
    static public DriverCommand commandDebug (String mode) {

        if ( mode == null ) throw new IllegalArgumentException ( "commandDebug.mode = null");
        DriverCommand dc = new DriverCommand(COMMANDDEBUG_KEYWORD);
        dc.addParameter(mode);
        return dc;
    }


    /*********** <pre> 
                 Enable and Disable debugging of ALL record types.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param mode  Optional:NO  DefaultVal:OFF 
                 The status for this debug mode.
              
     **********/
    static public DriverCommand recordsDebug (String mode) {

        if ( mode == null ) throw new IllegalArgumentException ( "recordsDebug.mode = null");
        DriverCommand dc = new DriverCommand(RECORDSDEBUG_KEYWORD);
        dc.addParameter(mode);
        return dc;
    }


    /*********** <pre> 
                 Enable and Disable (T)Test Record Debugging.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param mode  Optional:NO  DefaultVal:OFF 
                 The status for this debug mode.
              
     **********/
    static public DriverCommand testDebug (String mode) {

        if ( mode == null ) throw new IllegalArgumentException ( "testDebug.mode = null");
        DriverCommand dc = new DriverCommand(TESTDEBUG_KEYWORD);
        dc.addParameter(mode);
        return dc;
    }


    /*********** <pre>
          Close the open file with the file number provided
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param fileNumber  Optional:NO
              The file number for the file to be closed.
            
     **********/
    static public DriverCommand closeFile (String fileNumber) {

        if ( fileNumber == null ) throw new IllegalArgumentException ( "closeFile.fileNumber = null");
        DriverCommand dc = new DriverCommand(CLOSEFILE_KEYWORD);
        dc.addParameter(fileNumber);
        return dc;
    }


    /*********** <pre>
          Copy the specified filename to the target filename.          
        
           For the Java-based engines--RJ, TID, and SDC:
           
	   If the filenames provided are not full absolute paths then we will attempt to deduce a full Project-relative or Datapool\Test-relative path from the relative path provided. If the relative path already contains path separators (ex: "\subpath\filename.ext") then we attempt to deduce a fullpath relative to the SAFS Project.  If no path separators exist (ex: "filename.txt") then we attempt to deduce a fullpath relative to the project's Datapool\Test directory.  We do not actually attempt to see if the directories or files exists before executing the command.
	   
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param fromFileName  Optional:NO
              The file path and file name for the file to be copied.
            
     @param toFileName  Optional:NO
              The file path and file name to copy the file to.
            
     **********/
    static public DriverCommand copyFile (String fromFileName, String toFileName) {

        if ( fromFileName == null ) throw new IllegalArgumentException ( "copyFile.fromFileName = null");
        if ( toFileName == null ) throw new IllegalArgumentException ( "copyFile.toFileName = null");
        DriverCommand dc = new DriverCommand(COPYFILE_KEYWORD);
        dc.addParameter(fromFileName);
        dc.addParameter(toFileName);
        return dc;
    }


    /*********** <pre>
          Copy the specified filename to the target filename.          
        
           For the Java-based engines--RJ, TID, and SDC:
           
	   If the filenames provided are not full absolute paths then we will attempt to deduce a full Project-relative or Datapool\Test-relative path from the relative path provided. If the relative path already contains path separators (ex: "\subpath\filename.ext") then we attempt to deduce a fullpath relative to the SAFS Project.  If no path separators exist (ex: "filename.txt") then we attempt to deduce a fullpath relative to the project's Datapool\Test directory.  We do not actually attempt to see if the directories or files exists before executing the command.
	   
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fromFileName -- Optional:NO
              The file path and file name for the file to be copied.
            <BR/>        toFileName -- Optional:NO
              The file path and file name to copy the file to.
            
    </UL>

     **********/
    static public DriverCommand copyFile (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "copyFile.parameters = null");
        DriverCommand dc = new DriverCommand(COPYFILE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
            		Copy multiple files/sub-directories, based on matching the provided pattern, from one directory to another.
            	
            		Note: This is a very powerful DriverCommand, please use with caution!
            	    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param fromDirectoryName  Optional:NO
                  			The directory name where the files are located.
                		
     @param toDirectoryName  Optional:NO
		                	The directory name where the files are copied.
		                
     @param pattern  Optional:NO
					The pattern used to distinguish the files/sub-directories to be copied.
				
     @param filterMode  Optional:YES 
		                 	The filter mode used for matching the files/sub-directories to be copied.  
		                 	Default is WILDCARD.
		              	
     **********/
    static public DriverCommand copyMatchingFiles (String fromDirectoryName, String toDirectoryName, String pattern, String filterMode) {

        if ( fromDirectoryName == null ) throw new IllegalArgumentException ( "copyMatchingFiles.fromDirectoryName = null");
        if ( pattern == null ) throw new IllegalArgumentException ( "copyMatchingFiles.pattern = null");
        if ( toDirectoryName == null ) throw new IllegalArgumentException ( "copyMatchingFiles.toDirectoryName = null");
        DriverCommand dc = new DriverCommand(COPYMATCHINGFILES_KEYWORD);
        dc.addParameter(fromDirectoryName);
        dc.addParameter(toDirectoryName);
        dc.addParameter(pattern);
        dc.addParameter(filterMode);
        return dc;
    }


    /*********** <pre>
            		Copy multiple files/sub-directories, based on matching the provided pattern, from one directory to another.
            	
            		Note: This is a very powerful DriverCommand, please use with caution!
            	    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fromDirectoryName -- Optional:NO
                  			The directory name where the files are located.
                		<BR/>        toDirectoryName -- Optional:NO
		                	The directory name where the files are copied.
		                <BR/>        pattern -- Optional:NO
					The pattern used to distinguish the files/sub-directories to be copied.
				<BR/>        filterMode -- Optional:YES 
		                 	The filter mode used for matching the files/sub-directories to be copied.  
		                 	Default is WILDCARD.
		              	
    </UL>

     **********/
    static public DriverCommand copyMatchingFiles (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "copyMatchingFiles.parameters = null");
        DriverCommand dc = new DriverCommand(COPYMATCHINGFILES_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Create the directory for the provided directory pathname
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param directoryName  Optional:NO
              The full directory path name for the directory to be created.
            
     **********/
    static public DriverCommand createDirectory (String directoryName) {

        if ( directoryName == null ) throw new IllegalArgumentException ( "createDirectory.directoryName = null");
        DriverCommand dc = new DriverCommand(CREATEDIRECTORY_KEYWORD);
        dc.addParameter(directoryName);
        return dc;
    }


    /*********** <pre>
          Open a new file with the filename, mode and access provided.
          TID Note: Three ways to create a file:
			
				Mode=Input, Access=Read
				Mode=Output, Access=Write
				Mode=Append, Access=Write
				
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param fileName  Optional:NO
              The full path file name of the file to be opened.
            
     @param mode  Optional:NO
              Mode to be used to create and open the file, Input, Output or Append.                    Random and Binary not supported
            
     @param access  Optional:NO
              Access to be used to create and open the file. Read, Write or Read Write.
            
     @param fileNumberVariable  Optional:NO
              DDE Variable name of the variable to store the file number.
            
     @param fileNumber  Optional:Yes
              Optional File number to be used to open the file                       Otherwise next available file number is used
            
     **********/
    static public DriverCommand createFile (String fileName, String mode, String access, String fileNumberVariable, String fileNumber) {

        if ( access == null ) throw new IllegalArgumentException ( "createFile.access = null");
        if ( fileName == null ) throw new IllegalArgumentException ( "createFile.fileName = null");
        if ( fileNumberVariable == null ) throw new IllegalArgumentException ( "createFile.fileNumberVariable = null");
        if ( mode == null ) throw new IllegalArgumentException ( "createFile.mode = null");
        DriverCommand dc = new DriverCommand(CREATEFILE_KEYWORD);
        dc.addParameter(fileName);
        dc.addParameter(mode);
        dc.addParameter(access);
        dc.addParameter(fileNumberVariable);
        dc.addParameter(fileNumber);
        return dc;
    }


    /*********** <pre>
          Open a new file with the filename, mode and access provided.
          TID Note: Three ways to create a file:
			
				Mode=Input, Access=Read
				Mode=Output, Access=Write
				Mode=Append, Access=Write
				
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fileName -- Optional:NO
              The full path file name of the file to be opened.
            <BR/>        mode -- Optional:NO
              Mode to be used to create and open the file, Input, Output or Append.                    Random and Binary not supported
            <BR/>        access -- Optional:NO
              Access to be used to create and open the file. Read, Write or Read Write.
            <BR/>        fileNumberVariable -- Optional:NO
              DDE Variable name of the variable to store the file number.
            <BR/>        fileNumber -- Optional:Yes
              Optional File number to be used to open the file                       Otherwise next available file number is used
            
    </UL>

     **********/
    static public DriverCommand createFile (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "createFile.parameters = null");
        DriverCommand dc = new DriverCommand(CREATEFILE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Delete the directory for the provided directory pathname
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param directoryName  Optional:NO
              The full directory path name for the directory to be deleted.
            
     **********/
    static public DriverCommand deleteDirectory (String directoryName) {

        if ( directoryName == null ) throw new IllegalArgumentException ( "deleteDirectory.directoryName = null");
        DriverCommand dc = new DriverCommand(DELETEDIRECTORY_KEYWORD);
        dc.addParameter(directoryName);
        return dc;
    }


    /*********** <pre>
            		Delete the contents (files and sub-directories) of a provided directory and optionally, 
            		the directory itself.
            	
			Note: This is a very powerful DriverCommand, please use with caution!
            	    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param directoryName  Optional:NO
                  			The directory name in which the contents will be deleted.
                		
     @param deleteDir  Optional:YES
		                	Indicate whether you want to also delete the directory with true or false.  Default is false.
		                
     **********/
    static public DriverCommand deleteDirectoryContents (String directoryName, String deleteDir) {

        if ( directoryName == null ) throw new IllegalArgumentException ( "deleteDirectoryContents.directoryName = null");
        DriverCommand dc = new DriverCommand(DELETEDIRECTORYCONTENTS_KEYWORD);
        dc.addParameter(directoryName);
        dc.addParameter(deleteDir);
        return dc;
    }


    /*********** <pre>
            		Delete the contents (files and sub-directories) of a provided directory and optionally, 
            		the directory itself.
            	
			Note: This is a very powerful DriverCommand, please use with caution!
            	    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        directoryName -- Optional:NO
                  			The directory name in which the contents will be deleted.
                		<BR/>        deleteDir -- Optional:YES
		                	Indicate whether you want to also delete the directory with true or false.  Default is false.
		                
    </UL>

     **********/
    static public DriverCommand deleteDirectoryContents (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "deleteDirectoryContents.parameters = null");
        DriverCommand dc = new DriverCommand(DELETEDIRECTORYCONTENTS_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Delete the file for the file name provided
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param fileName  Optional:NO
              The file name for the file to be deleted.  Normally, the full file path is specified. 
              If a relative path is specified, it is relative to the project directory. 
            
     @param noVerify  Optional:Yes
              String Equal to "NOVERIFY" if file is not verified prior to deleting.
            
     **********/
    static public DriverCommand deleteFile (String fileName, String noVerify) {

        if ( fileName == null ) throw new IllegalArgumentException ( "deleteFile.fileName = null");
        DriverCommand dc = new DriverCommand(DELETEFILE_KEYWORD);
        dc.addParameter(fileName);
        dc.addParameter(noVerify);
        return dc;
    }


    /*********** <pre>
          Delete the file for the file name provided
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fileName -- Optional:NO
              The file name for the file to be deleted.  Normally, the full file path is specified. 
              If a relative path is specified, it is relative to the project directory. 
            <BR/>        noVerify -- Optional:Yes
              String Equal to "NOVERIFY" if file is not verified prior to deleting.
            
    </UL>

     **********/
    static public DriverCommand deleteFile (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "deleteFile.parameters = null");
        DriverCommand dc = new DriverCommand(DELETEFILE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
              	Filter out specific parts of an image.
            
	        Filter out specific parts of an image and save to a new or existing image file.
	        The filtered portions of the image are blacked out so as to remove dynamic visible
	        content from the image.
	        The available formats for the input and output files are BITMAP (*.bmp) and JPEG
	        (*.jpg).
	        
	        Specific Notes:
	        	This command requires that Java Advanced Imaging (JAI) be installed
	                on the test machine.
	        
       	        </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param inputFilename  Optional:NO
                  The input image file (FULL PATH)
                
     @param outputFilename  Optional:NO
                  The output image file after filtering (FULL PATH)
                
     @param filterMode  Optional:NO
                  Mode by which the image is filtered
                
     @param coords  Optional:NO
	      		Required parameter for the COORD FilterMode that defines the rectangle(s) of the input image that are to be filtered out.
	        
     **********/
    static public DriverCommand filterImage (String inputFilename, String outputFilename, String filterMode, String coords) {

        if ( coords == null ) throw new IllegalArgumentException ( "filterImage.coords = null");
        if ( filterMode == null ) throw new IllegalArgumentException ( "filterImage.filterMode = null");
        if ( inputFilename == null ) throw new IllegalArgumentException ( "filterImage.inputFilename = null");
        if ( outputFilename == null ) throw new IllegalArgumentException ( "filterImage.outputFilename = null");
        DriverCommand dc = new DriverCommand(FILTERIMAGE_KEYWORD);
        dc.addParameter(inputFilename);
        dc.addParameter(outputFilename);
        dc.addParameter(filterMode);
        dc.addParameter(coords);
        return dc;
    }


    /*********** <pre>
              	Filter out specific parts of an image.
            
	        Filter out specific parts of an image and save to a new or existing image file.
	        The filtered portions of the image are blacked out so as to remove dynamic visible
	        content from the image.
	        The available formats for the input and output files are BITMAP (*.bmp) and JPEG
	        (*.jpg).
	        
	        Specific Notes:
	        	This command requires that Java Advanced Imaging (JAI) be installed
	                on the test machine.
	        
       	        </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        inputFilename -- Optional:NO
                  The input image file (FULL PATH)
                <BR/>        outputFilename -- Optional:NO
                  The output image file after filtering (FULL PATH)
                <BR/>        filterMode -- Optional:NO
                  Mode by which the image is filtered
                <BR/>        coords -- Optional:NO
	      		Required parameter for the COORD FilterMode that defines the rectangle(s) of the input image that are to be filtered out.
	        
    </UL>

     **********/
    static public DriverCommand filterImage (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "filterImage.parameters = null");
        DriverCommand dc = new DriverCommand(FILTERIMAGE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Filter a text file based on the given parameters.
              
                 Filter a text file based on the given parameters.
                 
                 This command can be used to process a text file based on the
                 provided parameters, such as replacing text in a file that
                 matches a specific pattern. This command is experimental.
                 command name/parameters are subject to change without notice.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param file  Optional:NO 
                 The file to be filtered.
              
     @param filterMode  Optional:NO 
                 The filter mode.
              
     @param filterOptions  Optional:YES 
                 Additional filter options.
              
     @param encoding  Optional:YES 
                 The encoding to use to read and write file.
              
     **********/
    static public DriverCommand filterTextFile (String file, String filterMode, String filterOptions, String encoding) {

        if ( file == null ) throw new IllegalArgumentException ( "filterTextFile.file = null");
        if ( filterMode == null ) throw new IllegalArgumentException ( "filterTextFile.filterMode = null");
        DriverCommand dc = new DriverCommand(FILTERTEXTFILE_KEYWORD);
        dc.addParameter(file);
        dc.addParameter(filterMode);
        dc.addParameter(filterOptions);
        dc.addParameter(encoding);
        return dc;
    }


    /*********** <pre> 
                 Filter a text file based on the given parameters.
              
                 Filter a text file based on the given parameters.
                 
                 This command can be used to process a text file based on the
                 provided parameters, such as replacing text in a file that
                 matches a specific pattern. This command is experimental.
                 command name/parameters are subject to change without notice.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        file -- Optional:NO 
                 The file to be filtered.
              <BR/>        filterMode -- Optional:NO 
                 The filter mode.
              <BR/>        filterOptions -- Optional:YES 
                 Additional filter options.
              <BR/>        encoding -- Optional:YES 
                 The encoding to use to read and write file.
              
    </UL>

     **********/
    static public DriverCommand filterTextFile (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "filterTextFile.parameters = null");
        DriverCommand dc = new DriverCommand(FILTERTEXTFILE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Find the file for the SQA relative path and file name provided.  If a                 full file path is provided the file will be located using the full                 file path and name.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param fileName  Optional:NO
              The file path and file name of the file to be found.
            
     @param filePathVariable  Optional:NO
              Name of the DDV variable to be used to store the full file path of the                 found file. If file not found blank string is assigned to variable
            
     **********/
    static public DriverCommand findSqaFile (String fileName, String filePathVariable) {

        if ( fileName == null ) throw new IllegalArgumentException ( "findSqaFile.fileName = null");
        if ( filePathVariable == null ) throw new IllegalArgumentException ( "findSqaFile.filePathVariable = null");
        DriverCommand dc = new DriverCommand(FINDSQAFILE_KEYWORD);
        dc.addParameter(fileName);
        dc.addParameter(filePathVariable);
        return dc;
    }


    /*********** <pre>
          Find the file for the SQA relative path and file name provided.  If a                 full file path is provided the file will be located using the full                 file path and name.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fileName -- Optional:NO
              The file path and file name of the file to be found.
            <BR/>        filePathVariable -- Optional:NO
              Name of the DDV variable to be used to store the full file path of the                 found file. If file not found blank string is assigned to variable
            
    </UL>

     **********/
    static public DriverCommand findSqaFile (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "findSqaFile.parameters = null");
        DriverCommand dc = new DriverCommand(FINDSQAFILE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Determine the date and time the file created/last changed/last accessed for file name provided and assign it to a DDV variable.
        
                Determine the date and time the file created/last changed/last accessed 
                for file name provided and assign it to a DDV variable.
                This date is in the format MM-DD-YYYY HH:MM:SS, it is in AM-PM 12-hours
                format (1-12) be default; If you set the third parameter 'GetMilitaryTime'
                to True, the time will be 24-hours military format (0-23). Use military time
                is recommanded, as am-pm time has confusion without AM or PM
                (example: 18:00 and 06:00 will be both 06:00)
                You can get different date and time by providing a different value to the fourth
                optional parameter DateTimeType.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param fileName  Optional:NO
              The file path and file name of the file to get the file date and time.
            
     @param fileDateVariable  Optional:NO
              Name of the DDV variable to be used to store the file date and time
            
     @param getMilitaryTime  Optional:YES 
                 If true, the converted time is in 24-hours military time format
              
     @param dateTimeType  Optional:YES 
                 You can get different date and time by providing a different value.
              
     **********/
    static public DriverCommand getFileDateTime (String fileName, String fileDateVariable, String getMilitaryTime, String dateTimeType) {

        if ( fileDateVariable == null ) throw new IllegalArgumentException ( "getFileDateTime.fileDateVariable = null");
        if ( fileName == null ) throw new IllegalArgumentException ( "getFileDateTime.fileName = null");
        DriverCommand dc = new DriverCommand(GETFILEDATETIME_KEYWORD);
        dc.addParameter(fileName);
        dc.addParameter(fileDateVariable);
        dc.addParameter(getMilitaryTime);
        dc.addParameter(dateTimeType);
        return dc;
    }


    /*********** <pre>
          Determine the date and time the file created/last changed/last accessed for file name provided and assign it to a DDV variable.
        
                Determine the date and time the file created/last changed/last accessed 
                for file name provided and assign it to a DDV variable.
                This date is in the format MM-DD-YYYY HH:MM:SS, it is in AM-PM 12-hours
                format (1-12) be default; If you set the third parameter 'GetMilitaryTime'
                to True, the time will be 24-hours military format (0-23). Use military time
                is recommanded, as am-pm time has confusion without AM or PM
                (example: 18:00 and 06:00 will be both 06:00)
                You can get different date and time by providing a different value to the fourth
                optional parameter DateTimeType.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fileName -- Optional:NO
              The file path and file name of the file to get the file date and time.
            <BR/>        fileDateVariable -- Optional:NO
              Name of the DDV variable to be used to store the file date and time
            <BR/>        getMilitaryTime -- Optional:YES 
                 If true, the converted time is in 24-hours military time format
              <BR/>        dateTimeType -- Optional:YES 
                 You can get different date and time by providing a different value.
              
    </UL>

     **********/
    static public DriverCommand getFileDateTime (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getFileDateTime.parameters = null");
        DriverCommand dc = new DriverCommand(GETFILEDATETIME_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Save the file attributes for the file name to the variable provided.
        
          Save the file attributes for the file name to the variable provided. 
          The variable will be an integer containing the attributes for the file, it may be any combination of them.
          Here is a description of attributes:
          0  - Normal file
          1  - Read Only file
          2  - Hidden file
          4  - System file (Windows OS Only)
          16 - Directory
          32 - Archive file (Windows OS: attrib with 'A'; Other OS: file suffix is .jar, .tar, .rar, .gz etc.)
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param fileName  Optional:NO
              The file path and file name of the file to get the file attribute.
            
     @param varName  Optional:NO
              variable name to place the attributes in
            
     **********/
    static public DriverCommand getFileProtections (String fileName, String varName) {

        if ( fileName == null ) throw new IllegalArgumentException ( "getFileProtections.fileName = null");
        if ( varName == null ) throw new IllegalArgumentException ( "getFileProtections.varName = null");
        DriverCommand dc = new DriverCommand(GETFILEPROTECTIONS_KEYWORD);
        dc.addParameter(fileName);
        dc.addParameter(varName);
        return dc;
    }


    /*********** <pre>
          Save the file attributes for the file name to the variable provided.
        
          Save the file attributes for the file name to the variable provided. 
          The variable will be an integer containing the attributes for the file, it may be any combination of them.
          Here is a description of attributes:
          0  - Normal file
          1  - Read Only file
          2  - Hidden file
          4  - System file (Windows OS Only)
          16 - Directory
          32 - Archive file (Windows OS: attrib with 'A'; Other OS: file suffix is .jar, .tar, .rar, .gz etc.)
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fileName -- Optional:NO
              The file path and file name of the file to get the file attribute.
            <BR/>        varName -- Optional:NO
              variable name to place the attributes in
            
    </UL>

     **********/
    static public DriverCommand getFileProtections (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getFileProtections.parameters = null");
        DriverCommand dc = new DriverCommand(GETFILEPROTECTIONS_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Search the directory provided for files according to possible attribute and write the list of filenames found into the output file.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param directory  Optional:NO
              The full name of the directory to be searched for files.
            
     @param fileName  Optional:NO
              Full file path and name of the file to store list of                  files found in the directory
            
     @param fileAttributes  Optional:YES
              Optional File Attributes parameter specifying file attributes to select with Dir directory 
              search command. Default if unspecified is normal files. It may be any combination of them.
            
     **********/
    static public DriverCommand getFiles (String directory, String fileName, String fileAttributes) {

        if ( directory == null ) throw new IllegalArgumentException ( "getFiles.directory = null");
        if ( fileName == null ) throw new IllegalArgumentException ( "getFiles.fileName = null");
        DriverCommand dc = new DriverCommand(GETFILES_KEYWORD);
        dc.addParameter(directory);
        dc.addParameter(fileName);
        dc.addParameter(fileAttributes);
        return dc;
    }


    /*********** <pre>
          Search the directory provided for files according to possible attribute and write the list of filenames found into the output file.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        directory -- Optional:NO
              The full name of the directory to be searched for files.
            <BR/>        fileName -- Optional:NO
              Full file path and name of the file to store list of                  files found in the directory
            <BR/>        fileAttributes -- Optional:YES
              Optional File Attributes parameter specifying file attributes to select with Dir directory 
              search command. Default if unspecified is normal files. It may be any combination of them.
            
    </UL>

     **********/
    static public DriverCommand getFiles (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getFiles.parameters = null");
        DriverCommand dc = new DriverCommand(GETFILES_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Determine the file size for file name provided and assign it to a DDV variable.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param fileName  Optional:NO
              The file path and file name of the file to get file size.
            
     @param fileSizeVariable  Optional:NO
              Name of the DDV variable to be used to store the file size of the file.
            
     **********/
    static public DriverCommand getFileSize (String fileName, String fileSizeVariable) {

        if ( fileName == null ) throw new IllegalArgumentException ( "getFileSize.fileName = null");
        if ( fileSizeVariable == null ) throw new IllegalArgumentException ( "getFileSize.fileSizeVariable = null");
        DriverCommand dc = new DriverCommand(GETFILESIZE_KEYWORD);
        dc.addParameter(fileName);
        dc.addParameter(fileSizeVariable);
        return dc;
    }


    /*********** <pre>
          Determine the file size for file name provided and assign it to a DDV variable.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fileName -- Optional:NO
              The file path and file name of the file to get file size.
            <BR/>        fileSizeVariable -- Optional:NO
              Name of the DDV variable to be used to store the file size of the file.
            
    </UL>

     **********/
    static public DriverCommand getFileSize (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getFileSize.parameters = null");
        DriverCommand dc = new DriverCommand(GETFILESIZE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Get value from INI file.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param fileName  Optional:NO
              The name of the file.
            
     @param section  Optional:NO
              The Section of the file to look in.
            
     @param item  Optional:NO
              The item to look for.
            
     @param variable  Optional:NO
              Name of the DDV variable to be used to store the file date and time
            
     **********/
    static public DriverCommand getINIFileValue (String fileName, String section, String item, String variable) {

        if ( fileName == null ) throw new IllegalArgumentException ( "getINIFileValue.fileName = null");
        if ( item == null ) throw new IllegalArgumentException ( "getINIFileValue.item = null");
        if ( section == null ) throw new IllegalArgumentException ( "getINIFileValue.section = null");
        if ( variable == null ) throw new IllegalArgumentException ( "getINIFileValue.variable = null");
        DriverCommand dc = new DriverCommand(GETINIFILEVALUE_KEYWORD);
        dc.addParameter(fileName);
        dc.addParameter(section);
        dc.addParameter(item);
        dc.addParameter(variable);
        return dc;
    }


    /*********** <pre>
          Get value from INI file.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fileName -- Optional:NO
              The name of the file.
            <BR/>        section -- Optional:NO
              The Section of the file to look in.
            <BR/>        item -- Optional:NO
              The item to look for.
            <BR/>        variable -- Optional:NO
              Name of the DDV variable to be used to store the file date and time
            
    </UL>

     **********/
    static public DriverCommand getINIFileValue (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getINIFileValue.parameters = null");
        DriverCommand dc = new DriverCommand(GETINIFILEVALUE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                  Count the number of occurrences of a target string in a File.
                
                  This command opens and reads a file line by line, then sets a specified DDVariable to the number of times the target string is found in the file. 
                  String comparisons are case-sensitive by default. The file is assumed to be in the system default encoding unless specified otherwise.
                   </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param file  Optional:NO 
                  The File to be searched.
               
     @param string  Optional:NO 
                  The string to match and count in the file.
               
     @param varName  Optional:YES  DefaultVal:GetStringCountInFile 
                  The name of the variable to receive the count.
               
     @param caseSensitive  Optional:YES 
                  Set to 'CaseInsensitive' so comparisons are NOT case-sensitive.  
               
     @param encoding  Optional:YES 
                  Charset encoding string like "UTF-8", etc...
               
     **********/
    static public DriverCommand getStringCountInFile (String file, String string, String varName, String caseSensitive, String encoding) {

        if ( file == null ) throw new IllegalArgumentException ( "getStringCountInFile.file = null");
        if ( string == null ) throw new IllegalArgumentException ( "getStringCountInFile.string = null");
        DriverCommand dc = new DriverCommand(GETSTRINGCOUNTINFILE_KEYWORD);
        dc.addParameter(file);
        dc.addParameter(string);
        dc.addParameter(varName);
        dc.addParameter(caseSensitive);
        dc.addParameter(encoding);
        return dc;
    }


    /*********** <pre> 
                  Count the number of occurrences of a target string in a File.
                
                  This command opens and reads a file line by line, then sets a specified DDVariable to the number of times the target string is found in the file. 
                  String comparisons are case-sensitive by default. The file is assumed to be in the system default encoding unless specified otherwise.
                   </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        file -- Optional:NO 
                  The File to be searched.
               <BR/>        string -- Optional:NO 
                  The string to match and count in the file.
               <BR/>        varName -- Optional:YES  DefaultVal:GetStringCountInFile 
                  The name of the variable to receive the count.
               <BR/>        caseSensitive -- Optional:YES 
                  Set to 'CaseInsensitive' so comparisons are NOT case-sensitive.  
               <BR/>        encoding -- Optional:YES 
                  Charset encoding string like "UTF-8", etc...
               
    </UL>

     **********/
    static public DriverCommand getStringCountInFile (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getStringCountInFile.parameters = null");
        DriverCommand dc = new DriverCommand(GETSTRINGCOUNTINFILE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                  Extract dynamic substrings from a file using regular expressions.
                
                  
                  This command opens the file, reads it line by line, and sets DDVariables (based on rootname) for each occurrence of string identified by the substring formed between regexstart and regexstop (1 match per line, currently).  regexstart and regexstop must both be valid, non-empty strings or no matching substrings will be found.
                  
                  Fully qualified filename is opened and read line by line.  
                  Each line is parsed, searching for a match to the substring formed between regexstart and regexstop.
                  
                  When a match is found, the string between regexstart and regexstop is saved in a newly created DDVariable based on rootname and the number of occurrences.  There will be one DDVariable for each match found and a unique "Count" variable specifying how many matches were found.
                  
                  The rootname is used as a base to build the DDVariable names which contain the located substring(s) and Count.  For example, if rootname is "Chart" and two substring matches are found, then 2 DDVariables are created to store those substrings and another is created to store the count of matches: 
                  
                  
                     DDVariable Chart1 contains the first substring, and
                     DDVariable Chart2 contains the second substring. 
                     DDVariable ChartCount contains the number of matches found. 
                  
                   </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param file  Optional:NO 
                  Fully-qualified filename
               
     @param regexstart  Optional:NO 
                  The starting regular expression.  Should not be empty.
               
     @param regexstop  Optional:NO 
                  The stopping regular expression.  Should not be empty.
               
     @param rootname  Optional:NO 
                  The root name of the returned variable(s).  
               
     **********/
    static public DriverCommand getSubstringsInFile (String file, String regexstart, String regexstop, String rootname) {

        if ( file == null ) throw new IllegalArgumentException ( "getSubstringsInFile.file = null");
        if ( regexstart == null ) throw new IllegalArgumentException ( "getSubstringsInFile.regexstart = null");
        if ( regexstop == null ) throw new IllegalArgumentException ( "getSubstringsInFile.regexstop = null");
        if ( rootname == null ) throw new IllegalArgumentException ( "getSubstringsInFile.rootname = null");
        DriverCommand dc = new DriverCommand(GETSUBSTRINGSINFILE_KEYWORD);
        dc.addParameter(file);
        dc.addParameter(regexstart);
        dc.addParameter(regexstop);
        dc.addParameter(rootname);
        return dc;
    }


    /*********** <pre> 
                  Extract dynamic substrings from a file using regular expressions.
                
                  
                  This command opens the file, reads it line by line, and sets DDVariables (based on rootname) for each occurrence of string identified by the substring formed between regexstart and regexstop (1 match per line, currently).  regexstart and regexstop must both be valid, non-empty strings or no matching substrings will be found.
                  
                  Fully qualified filename is opened and read line by line.  
                  Each line is parsed, searching for a match to the substring formed between regexstart and regexstop.
                  
                  When a match is found, the string between regexstart and regexstop is saved in a newly created DDVariable based on rootname and the number of occurrences.  There will be one DDVariable for each match found and a unique "Count" variable specifying how many matches were found.
                  
                  The rootname is used as a base to build the DDVariable names which contain the located substring(s) and Count.  For example, if rootname is "Chart" and two substring matches are found, then 2 DDVariables are created to store those substrings and another is created to store the count of matches: 
                  
                  
                     DDVariable Chart1 contains the first substring, and
                     DDVariable Chart2 contains the second substring. 
                     DDVariable ChartCount contains the number of matches found. 
                  
                   </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        file -- Optional:NO 
                  Fully-qualified filename
               <BR/>        regexstart -- Optional:NO 
                  The starting regular expression.  Should not be empty.
               <BR/>        regexstop -- Optional:NO 
                  The stopping regular expression.  Should not be empty.
               <BR/>        rootname -- Optional:NO 
                  The root name of the returned variable(s).  
               
    </UL>

     **********/
    static public DriverCommand getSubstringsInFile (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getSubstringsInFile.parameters = null");
        DriverCommand dc = new DriverCommand(GETSUBSTRINGSINFILE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
             Incorporate OCR technology to detect the text in an image file and save the text to a variable.
          
             Two open-source OCRs are integrated into SAFS. One is TesseractOCR (TOCR) at 
             http://code.google.com/p/tesseract-ocr; the other GOCR at http://jocr.sourceforge.net. 
             
             TOCR 2.0.4 and GOCR 0.48 are the latest release. They are available in SAFS and only 
             support English. Both two OCR owners claim to support more languages in next release. Chinese, 
             Japanese, and Korean are going to be supported in TOCR's next release 3.00.
			
       	      </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS SDCommands</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param imageFile  Optional:NO
               The name of the image file used to detect text in it.
             
     @param variableName  Optional:NO
             The name of the variable to receive detected text.
              
     @param oCRId  Optional:YES
             OCRId indicating the OCR used to recognize text.
             
     @param langId  Optional:YES
             Optional LangId representing the language in use for selected OCR to recognize text. 
             
     @param scaleRatio  Optional:YES
             Optional ScaleRatio indicating the scale ratio for resizing the original image.
             
     **********/
    static public DriverCommand getTextFromImage (String imageFile, String variableName, String oCRId, String langId, String scaleRatio) {

        if ( imageFile == null ) throw new IllegalArgumentException ( "getTextFromImage.imageFile = null");
        if ( variableName == null ) throw new IllegalArgumentException ( "getTextFromImage.variableName = null");
        DriverCommand dc = new DriverCommand(GETTEXTFROMIMAGE_KEYWORD);
        dc.addParameter(imageFile);
        dc.addParameter(variableName);
        dc.addParameter(oCRId);
        dc.addParameter(langId);
        dc.addParameter(scaleRatio);
        return dc;
    }


    /*********** <pre>
             Incorporate OCR technology to detect the text in an image file and save the text to a variable.
          
             Two open-source OCRs are integrated into SAFS. One is TesseractOCR (TOCR) at 
             http://code.google.com/p/tesseract-ocr; the other GOCR at http://jocr.sourceforge.net. 
             
             TOCR 2.0.4 and GOCR 0.48 are the latest release. They are available in SAFS and only 
             support English. Both two OCR owners claim to support more languages in next release. Chinese, 
             Japanese, and Korean are going to be supported in TOCR's next release 3.00.
			
       	      </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS SDCommands</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        imageFile -- Optional:NO
               The name of the image file used to detect text in it.
             <BR/>        variableName -- Optional:NO
             The name of the variable to receive detected text.
              <BR/>        oCRId -- Optional:YES
             OCRId indicating the OCR used to recognize text.
             <BR/>        langId -- Optional:YES
             Optional LangId representing the language in use for selected OCR to recognize text. 
             <BR/>        scaleRatio -- Optional:YES
             Optional ScaleRatio indicating the scale ratio for resizing the original image.
             
    </UL>

     **********/
    static public DriverCommand getTextFromImage (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getTextFromImage.parameters = null");
        DriverCommand dc = new DriverCommand(GETTEXTFROMIMAGE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          If the specified directory exists, then execute the following driver command.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param directoryName  Optional:NO
              The full path name of directory to test for
            
     @param thenDriverCommand  Optional:NO
              Actually, the rest of the parameters include this,                     which is the driver command to execute if the                     directory exists, followed by the remaining driver                     parameters for that command
            
     **********/
    static public DriverCommand ifExistDir (String directoryName, String thenDriverCommand) {

        if ( directoryName == null ) throw new IllegalArgumentException ( "ifExistDir.directoryName = null");
        if ( thenDriverCommand == null ) throw new IllegalArgumentException ( "ifExistDir.thenDriverCommand = null");
        DriverCommand dc = new DriverCommand(IFEXISTDIR_KEYWORD);
        dc.addParameter(directoryName);
        dc.addParameter(thenDriverCommand);
        return dc;
    }


    /*********** <pre>
          If the specified directory exists, then execute the following driver command.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        directoryName -- Optional:NO
              The full path name of directory to test for
            <BR/>        thenDriverCommand -- Optional:NO
              Actually, the rest of the parameters include this,                     which is the driver command to execute if the                     directory exists, followed by the remaining driver                     parameters for that command
            
    </UL>

     **********/
    static public DriverCommand ifExistDir (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "ifExistDir.parameters = null");
        DriverCommand dc = new DriverCommand(IFEXISTDIR_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          If the specified file exists, then execute the following driver command.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param fileName  Optional:NO
              The full path name of file to test for
            
     @param thenDriverCommand  Optional:NO
              Actually, the rest of the parameters include this,                     which is the driver command to execute if the                     file exists, followed by the remaining driver                     parameters for that command
            
     **********/
    static public DriverCommand ifExistFile (String fileName, String thenDriverCommand) {

        if ( fileName == null ) throw new IllegalArgumentException ( "ifExistFile.fileName = null");
        if ( thenDriverCommand == null ) throw new IllegalArgumentException ( "ifExistFile.thenDriverCommand = null");
        DriverCommand dc = new DriverCommand(IFEXISTFILE_KEYWORD);
        dc.addParameter(fileName);
        dc.addParameter(thenDriverCommand);
        return dc;
    }


    /*********** <pre>
          If the specified file exists, then execute the following driver command.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fileName -- Optional:NO
              The full path name of file to test for
            <BR/>        thenDriverCommand -- Optional:NO
              Actually, the rest of the parameters include this,                     which is the driver command to execute if the                     file exists, followed by the remaining driver                     parameters for that command
            
    </UL>

     **********/
    static public DriverCommand ifExistFile (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "ifExistFile.parameters = null");
        DriverCommand dc = new DriverCommand(IFEXISTFILE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
           If the specified file is at the end of file, a 'variable' gets true assigned, otherwise it gets false
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param fileNumber  Optional:NO
              The file number for the file to be closed.
            
     @param variable  Optional:NO
              Variable to assign true or false
            
     **********/
    static public DriverCommand isEndOfFile (String fileNumber, String variable) {

        if ( fileNumber == null ) throw new IllegalArgumentException ( "isEndOfFile.fileNumber = null");
        if ( variable == null ) throw new IllegalArgumentException ( "isEndOfFile.variable = null");
        DriverCommand dc = new DriverCommand(ISENDOFFILE_KEYWORD);
        dc.addParameter(fileNumber);
        dc.addParameter(variable);
        return dc;
    }


    /*********** <pre>
           If the specified file is at the end of file, a 'variable' gets true assigned, otherwise it gets false
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fileNumber -- Optional:NO
              The file number for the file to be closed.
            <BR/>        variable -- Optional:NO
              Variable to assign true or false
            
    </UL>

     **********/
    static public DriverCommand isEndOfFile (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "isEndOfFile.parameters = null");
        DriverCommand dc = new DriverCommand(ISENDOFFILE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Open an existing file with the filename, mode and access provided.
		  TID Note: Multiple ways to open a file:
			
				Mode=Input, Access=Read
				Mode=Output, Access=Write
				Mode=Append, Access=Write
				Mode=AppendRaw, Access=Write
				
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param fileName  Optional:NO
              The full path file name of the file to be opened.
            
     @param mode  Optional:NOMode to be used to open the file, Input, Output, Append, and AppendRaw.
     @param access  Optional:NO
              Access to be used to open the file. Read, Write or Read Write.
            
     @param fileNumberVariable  Optional:NO
              DDE Variable name of the variable to store the file number.
            
     @param fileNumber  Optional:Yes
              Optional File number to be used to open the file                       Otherwise next available file number is used
            
     **********/
    static public DriverCommand openFile (String fileName, String mode, String access, String fileNumberVariable, String fileNumber) {

        if ( access == null ) throw new IllegalArgumentException ( "openFile.access = null");
        if ( fileName == null ) throw new IllegalArgumentException ( "openFile.fileName = null");
        if ( fileNumberVariable == null ) throw new IllegalArgumentException ( "openFile.fileNumberVariable = null");
        if ( mode == null ) throw new IllegalArgumentException ( "openFile.mode = null");
        DriverCommand dc = new DriverCommand(OPENFILE_KEYWORD);
        dc.addParameter(fileName);
        dc.addParameter(mode);
        dc.addParameter(access);
        dc.addParameter(fileNumberVariable);
        dc.addParameter(fileNumber);
        return dc;
    }


    /*********** <pre>
          Open an existing file with the filename, mode and access provided.
		  TID Note: Multiple ways to open a file:
			
				Mode=Input, Access=Read
				Mode=Output, Access=Write
				Mode=Append, Access=Write
				Mode=AppendRaw, Access=Write
				
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fileName -- Optional:NO
              The full path file name of the file to be opened.
            <BR/>        mode -- Optional:NOMode to be used to open the file, Input, Output, Append, and AppendRaw.<BR/>        access -- Optional:NO
              Access to be used to open the file. Read, Write or Read Write.
            <BR/>        fileNumberVariable -- Optional:NO
              DDE Variable name of the variable to store the file number.
            <BR/>        fileNumber -- Optional:Yes
              Optional File number to be used to open the file                       Otherwise next available file number is used
            
    </UL>

     **********/
    static public DriverCommand openFile (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "openFile.parameters = null");
        DriverCommand dc = new DriverCommand(OPENFILE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Open an existing UTF-8 file with the filename, mode and access provided.
	      TID Note: Multiple ways to open a file:
			
				Mode=Input, Access=Read
				Mode=Output, Access=Write
				Mode=Append, Access=Write
				Mode=AppendRaw, Access=Write
			
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param fileName  Optional:NO
              The full path file name of the UTF-8 file to be opened.
            
     @param mode  Optional:NOMode to be used to open the file, Input, Output, Append, and AppendRaw.
     @param access  Optional:NO
              Access to be used to open the UTF-8 file. Read, Write or Read Write.
            
     @param fileNumberVariable  Optional:NO
              DDE Variable name of the variable to store the file number.
            
     @param fileNumber  Optional:Yes
              Optional File number to be used to open the UTF-8 file, 
              otherwise, next available file number is used.
            
     **********/
    static public DriverCommand openUTF8File (String fileName, String mode, String access, String fileNumberVariable, String fileNumber) {

        if ( access == null ) throw new IllegalArgumentException ( "openUTF8File.access = null");
        if ( fileName == null ) throw new IllegalArgumentException ( "openUTF8File.fileName = null");
        if ( fileNumberVariable == null ) throw new IllegalArgumentException ( "openUTF8File.fileNumberVariable = null");
        if ( mode == null ) throw new IllegalArgumentException ( "openUTF8File.mode = null");
        DriverCommand dc = new DriverCommand(OPENUTF8FILE_KEYWORD);
        dc.addParameter(fileName);
        dc.addParameter(mode);
        dc.addParameter(access);
        dc.addParameter(fileNumberVariable);
        dc.addParameter(fileNumber);
        return dc;
    }


    /*********** <pre>
          Open an existing UTF-8 file with the filename, mode and access provided.
	      TID Note: Multiple ways to open a file:
			
				Mode=Input, Access=Read
				Mode=Output, Access=Write
				Mode=Append, Access=Write
				Mode=AppendRaw, Access=Write
			
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fileName -- Optional:NO
              The full path file name of the UTF-8 file to be opened.
            <BR/>        mode -- Optional:NOMode to be used to open the file, Input, Output, Append, and AppendRaw.<BR/>        access -- Optional:NO
              Access to be used to open the UTF-8 file. Read, Write or Read Write.
            <BR/>        fileNumberVariable -- Optional:NO
              DDE Variable name of the variable to store the file number.
            <BR/>        fileNumber -- Optional:Yes
              Optional File number to be used to open the UTF-8 file, 
              otherwise, next available file number is used.
            
    </UL>

     **********/
    static public DriverCommand openUTF8File (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "openUTF8File.parameters = null");
        DriverCommand dc = new DriverCommand(OPENUTF8FILE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Write output to a sequential file already opened for writing.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param fileNumber  Optional:NO
              The file number of the file to be written to.
            
     @param expressionListVariable  Optional:NO
              DDV variable name of the variable that contains the "Expression List";                 NOTE: for RobotJ it is the Expression List, if it                 begins with ^ then it is treated as a variable.
            
     @param printOutputPlacement  Optional:YES
              Print Output Placement Parameter determines where the next output to the same file should begin
              
			  ; will place the output immediately following this print output
              , will start output at the next print zone on the same line
              Absence of this parameter (Default) will place the next output at the beginning of a new line following a carriage return line feed.
              
            
     **********/
    static public DriverCommand printToFile (String fileNumber, String expressionListVariable, String printOutputPlacement) {

        if ( expressionListVariable == null ) throw new IllegalArgumentException ( "printToFile.expressionListVariable = null");
        if ( fileNumber == null ) throw new IllegalArgumentException ( "printToFile.fileNumber = null");
        DriverCommand dc = new DriverCommand(PRINTTOFILE_KEYWORD);
        dc.addParameter(fileNumber);
        dc.addParameter(expressionListVariable);
        dc.addParameter(printOutputPlacement);
        return dc;
    }


    /*********** <pre>
          Write output to a sequential file already opened for writing.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fileNumber -- Optional:NO
              The file number of the file to be written to.
            <BR/>        expressionListVariable -- Optional:NO
              DDV variable name of the variable that contains the "Expression List";                 NOTE: for RobotJ it is the Expression List, if it                 begins with ^ then it is treated as a variable.
            <BR/>        printOutputPlacement -- Optional:YES
              Print Output Placement Parameter determines where the next output to the same file should begin
              
			  ; will place the output immediately following this print output
              , will start output at the next print zone on the same line
              Absence of this parameter (Default) will place the next output at the beginning of a new line following a carriage return line feed.
              
            
    </UL>

     **********/
    static public DriverCommand printToFile (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "printToFile.parameters = null");
        DriverCommand dc = new DriverCommand(PRINTTOFILE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Read the number of characters from the file defined by file number 
          and assign a string containing the characters read to a DDV variable.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param fileNumber  Optional:NO
              The file number of the file to be read from.
            
     @param numberOfChar  Optional:NO
              Number of characters to be read from the file
              If the number is -1, then the whole content will be read .
            
     @param variableName  Optional:NO
              Name of the DDV variable in which to store the characters read from the file
            
     **********/
    static public DriverCommand readFileChars (String fileNumber, String numberOfChar, String variableName) {

        if ( fileNumber == null ) throw new IllegalArgumentException ( "readFileChars.fileNumber = null");
        if ( numberOfChar == null ) throw new IllegalArgumentException ( "readFileChars.numberOfChar = null");
        if ( variableName == null ) throw new IllegalArgumentException ( "readFileChars.variableName = null");
        DriverCommand dc = new DriverCommand(READFILECHARS_KEYWORD);
        dc.addParameter(fileNumber);
        dc.addParameter(numberOfChar);
        dc.addParameter(variableName);
        return dc;
    }


    /*********** <pre>
          Read the number of characters from the file defined by file number 
          and assign a string containing the characters read to a DDV variable.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fileNumber -- Optional:NO
              The file number of the file to be read from.
            <BR/>        numberOfChar -- Optional:NO
              Number of characters to be read from the file
              If the number is -1, then the whole content will be read .
            <BR/>        variableName -- Optional:NO
              Name of the DDV variable in which to store the characters read from the file
            
    </UL>

     **********/
    static public DriverCommand readFileChars (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "readFileChars.parameters = null");
        DriverCommand dc = new DriverCommand(READFILECHARS_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Read a line from the file defined by file number                 and assign a string containing the line read to a DDV variable.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param fileNumber  Optional:NO
              The file number of the file to be read from.
            
     @param variableName  Optional:NO
              Name of the DDV variable in which to store the line                 read from the file
            
     **********/
    static public DriverCommand readFileLine (String fileNumber, String variableName) {

        if ( fileNumber == null ) throw new IllegalArgumentException ( "readFileLine.fileNumber = null");
        if ( variableName == null ) throw new IllegalArgumentException ( "readFileLine.variableName = null");
        DriverCommand dc = new DriverCommand(READFILELINE_KEYWORD);
        dc.addParameter(fileNumber);
        dc.addParameter(variableName);
        return dc;
    }


    /*********** <pre>
          Read a line from the file defined by file number                 and assign a string containing the line read to a DDV variable.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fileNumber -- Optional:NO
              The file number of the file to be read from.
            <BR/>        variableName -- Optional:NO
              Name of the DDV variable in which to store the line                 read from the file
            
    </UL>

     **********/
    static public DriverCommand readFileLine (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "readFileLine.parameters = null");
        DriverCommand dc = new DriverCommand(READFILELINE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Read a comma-separated value from a file and store it in a DDVariable.
        
          This command provides old Basic 'Input' style handling of file data.  It expects that 
          the file contains comma-separated values and only a single value is read from the 
          specified file for each call.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param fileNumber  Optional:NO
              The file number of the file to be read from.
            
     @param variableName  Optional:NO
              Name of the DDVariable in which to store the value read from the file.
            
     **********/
    static public DriverCommand readFileString (String fileNumber, String variableName) {

        if ( fileNumber == null ) throw new IllegalArgumentException ( "readFileString.fileNumber = null");
        if ( variableName == null ) throw new IllegalArgumentException ( "readFileString.variableName = null");
        DriverCommand dc = new DriverCommand(READFILESTRING_KEYWORD);
        dc.addParameter(fileNumber);
        dc.addParameter(variableName);
        return dc;
    }


    /*********** <pre>
          Read a comma-separated value from a file and store it in a DDVariable.
        
          This command provides old Basic 'Input' style handling of file data.  It expects that 
          the file contains comma-separated values and only a single value is read from the 
          specified file for each call.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fileNumber -- Optional:NO
              The file number of the file to be read from.
            <BR/>        variableName -- Optional:NO
              Name of the DDVariable in which to store the value read from the file.
            
    </UL>

     **********/
    static public DriverCommand readFileString (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "readFileString.parameters = null");
        DriverCommand dc = new DriverCommand(READFILESTRING_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Rename the file from the old file name to the new filename
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param oldFileName  Optional:NO
              The file path and file name of the file to be renamed.
            
     @param newFileName  Optional:NO
              The new file path and file name of the file.
            
     @param noVerify  Optional:Yes
              String Equal to "NOVERIFY" if file is not verified prior to renaming.
            
     **********/
    static public DriverCommand renameFile (String oldFileName, String newFileName, String noVerify) {

        if ( newFileName == null ) throw new IllegalArgumentException ( "renameFile.newFileName = null");
        if ( oldFileName == null ) throw new IllegalArgumentException ( "renameFile.oldFileName = null");
        DriverCommand dc = new DriverCommand(RENAMEFILE_KEYWORD);
        dc.addParameter(oldFileName);
        dc.addParameter(newFileName);
        dc.addParameter(noVerify);
        return dc;
    }


    /*********** <pre>
          Rename the file from the old file name to the new filename
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        oldFileName -- Optional:NO
              The file path and file name of the file to be renamed.
            <BR/>        newFileName -- Optional:NO
              The new file path and file name of the file.
            <BR/>        noVerify -- Optional:Yes
              String Equal to "NOVERIFY" if file is not verified prior to renaming.
            
    </UL>

     **********/
    static public DriverCommand renameFile (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "renameFile.parameters = null");
        DriverCommand dc = new DriverCommand(RENAMEFILE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
             Incorporate OCR technology to detect the text in an image file and save the text to a text file.
             
             Two open-source OCRs are integrated into SAFS. One is TesseractOCR (TOCR) at 
             http://code.google.com/p/tesseract-ocr; the other GOCR at http://jocr.sourceforge.net. 
             
             TOCR 2.0.4 and GOCR 0.48 are the latest release. They are available in SAFS and only 
             support English. Both two OCR owners claim to support more languages in next release. Chinese, 
             Japanese, and Korean are going to be supported in TOCR's next release 3.00.
			
       	         </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS SDCommands</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param imageFile  Optional:NO
             The name of the image file used to detect text in it.
             
     @param outputFile  Optional:NO
             The name of the text file used to store detected text.
              
     @param oCRId  Optional:YES
             OCRId indicating the OCR used to recognize text.
             
     @param langId  Optional:YES
             Optional LangId representing the language in use for selected OCR to recognize text. 
             
     @param scaleRatio  Optional:YES
             Optional ScaleRatio indicating the scale ratio for resizing the original image.
             
     **********/
    static public DriverCommand saveTextFromImage (String imageFile, String outputFile, String oCRId, String langId, String scaleRatio) {

        if ( imageFile == null ) throw new IllegalArgumentException ( "saveTextFromImage.imageFile = null");
        if ( outputFile == null ) throw new IllegalArgumentException ( "saveTextFromImage.outputFile = null");
        DriverCommand dc = new DriverCommand(SAVETEXTFROMIMAGE_KEYWORD);
        dc.addParameter(imageFile);
        dc.addParameter(outputFile);
        dc.addParameter(oCRId);
        dc.addParameter(langId);
        dc.addParameter(scaleRatio);
        return dc;
    }


    /*********** <pre>
             Incorporate OCR technology to detect the text in an image file and save the text to a text file.
             
             Two open-source OCRs are integrated into SAFS. One is TesseractOCR (TOCR) at 
             http://code.google.com/p/tesseract-ocr; the other GOCR at http://jocr.sourceforge.net. 
             
             TOCR 2.0.4 and GOCR 0.48 are the latest release. They are available in SAFS and only 
             support English. Both two OCR owners claim to support more languages in next release. Chinese, 
             Japanese, and Korean are going to be supported in TOCR's next release 3.00.
			
       	         </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS SDCommands</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        imageFile -- Optional:NO
             The name of the image file used to detect text in it.
             <BR/>        outputFile -- Optional:NO
             The name of the text file used to store detected text.
              <BR/>        oCRId -- Optional:YES
             OCRId indicating the OCR used to recognize text.
             <BR/>        langId -- Optional:YES
             Optional LangId representing the language in use for selected OCR to recognize text. 
             <BR/>        scaleRatio -- Optional:YES
             Optional ScaleRatio indicating the scale ratio for resizing the original image.
             
    </UL>

     **********/
    static public DriverCommand saveTextFromImage (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "saveTextFromImage.parameters = null");
        DriverCommand dc = new DriverCommand(SAVETEXTFROMIMAGE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Change the file attribute for the file name provided to the value of the new file protection provided.
        
          Change the file attribute for the file name provided to the value of the new file protection provided. An integer containing the new attributes for the file. Here is a description of attributes that can be modified: 
          0 Normal file (Windows PC Only)
          1 Read-only file
          2 Hidden file (Windows PC Only)
          4 System file (Windows PC Only)
          32 Archive - file has changed since last backup (Windows PC Only)
          Note: Java-based support like RJ, TID, SDC currently only support setting one 
          file protection at a time--0, 1, 2, 3, 32. They do not yet support Integer values OR'd 
          together to combine settings in a single call.
          Note: On platforms other than windows we currently only support setting the READ-ONLY 
          attribute.
          
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param fileName  Optional:NO
              The file path and file name of the file change the file attribute.
            
     @param fileProtection  Optional:NO
              New value of the attribute of the file to be changed
            
     **********/
    static public DriverCommand setFileProtections (String fileName, String fileProtection) {

        if ( fileName == null ) throw new IllegalArgumentException ( "setFileProtections.fileName = null");
        if ( fileProtection == null ) throw new IllegalArgumentException ( "setFileProtections.fileProtection = null");
        DriverCommand dc = new DriverCommand(SETFILEPROTECTIONS_KEYWORD);
        dc.addParameter(fileName);
        dc.addParameter(fileProtection);
        return dc;
    }


    /*********** <pre>
          Change the file attribute for the file name provided to the value of the new file protection provided.
        
          Change the file attribute for the file name provided to the value of the new file protection provided. An integer containing the new attributes for the file. Here is a description of attributes that can be modified: 
          0 Normal file (Windows PC Only)
          1 Read-only file
          2 Hidden file (Windows PC Only)
          4 System file (Windows PC Only)
          32 Archive - file has changed since last backup (Windows PC Only)
          Note: Java-based support like RJ, TID, SDC currently only support setting one 
          file protection at a time--0, 1, 2, 3, 32. They do not yet support Integer values OR'd 
          together to combine settings in a single call.
          Note: On platforms other than windows we currently only support setting the READ-ONLY 
          attribute.
          
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fileName -- Optional:NO
              The file path and file name of the file change the file attribute.
            <BR/>        fileProtection -- Optional:NO
              New value of the attribute of the file to be changed
            
    </UL>

     **********/
    static public DriverCommand setFileProtections (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "setFileProtections.parameters = null");
        DriverCommand dc = new DriverCommand(SETFILEPROTECTIONS_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Write the specified number of characters to a file already opened for writing.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param fileNumber  Optional:NO
              The file number/identifier of the file to be written to.
            
     @param numberOfChars  Optional:NO
              The number of characters to write to the file;                 however, if this parameter is equal to 'all' then all                 of the characters from the expression list are written.
            
     @param expressionList  Optional:NO
              Expression List, if it begins with ^ then it is treated as a variable.
            
     **********/
    static public DriverCommand writeFileChars (String fileNumber, String numberOfChars, String expressionList) {

        if ( expressionList == null ) throw new IllegalArgumentException ( "writeFileChars.expressionList = null");
        if ( fileNumber == null ) throw new IllegalArgumentException ( "writeFileChars.fileNumber = null");
        if ( numberOfChars == null ) throw new IllegalArgumentException ( "writeFileChars.numberOfChars = null");
        DriverCommand dc = new DriverCommand(WRITEFILECHARS_KEYWORD);
        dc.addParameter(fileNumber);
        dc.addParameter(numberOfChars);
        dc.addParameter(expressionList);
        return dc;
    }


    /*********** <pre>
          Write the specified number of characters to a file already opened for writing.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fileNumber -- Optional:NO
              The file number/identifier of the file to be written to.
            <BR/>        numberOfChars -- Optional:NO
              The number of characters to write to the file;                 however, if this parameter is equal to 'all' then all                 of the characters from the expression list are written.
            <BR/>        expressionList -- Optional:NO
              Expression List, if it begins with ^ then it is treated as a variable.
            
    </UL>

     **********/
    static public DriverCommand writeFileChars (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "writeFileChars.parameters = null");
        DriverCommand dc = new DriverCommand(WRITEFILECHARS_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Invoke a Cycle table (from StepDriver or SuiteDriver)
               
                 Since the Cycle is executed as a driver command 
                 and NOT as a test record, the call to the 
                 Cycle itself is not counted as a test pass or a test fail.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param cycleName  Optional:NO 
                 The name of the Cycle table to execute.
              
     @param cycleSeparator  Optional:YES  DefaultVal: 
                 The field separator used by the table--if required.
              
     @param parameterName  Optional:YES  DefaultVal:AValue 
                 One or more parameter values to send to the Cycle--each in their own field.
              
     **********/
    static public DriverCommand callCycle (String cycleName, String cycleSeparator, String parameterName) {

        if ( cycleName == null ) throw new IllegalArgumentException ( "callCycle.cycleName = null");
        DriverCommand dc = new DriverCommand(CALLCYCLE_KEYWORD);
        dc.addParameter(cycleName);
        dc.addParameter(cycleSeparator);
        dc.addParameter(parameterName);
        return dc;
    }


    /*********** <pre> 
                 Invoke a Cycle table (from StepDriver or SuiteDriver)
               
                 Since the Cycle is executed as a driver command 
                 and NOT as a test record, the call to the 
                 Cycle itself is not counted as a test pass or a test fail.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        cycleName -- Optional:NO 
                 The name of the Cycle table to execute.
              <BR/>        cycleSeparator -- Optional:YES  DefaultVal: 
                 The field separator used by the table--if required.
              <BR/>        parameterName -- Optional:YES  DefaultVal:AValue 
                 One or more parameter values to send to the Cycle--each in their own field.
              
    </UL>

     **********/
    static public DriverCommand callCycle (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "callCycle.parameters = null");
        DriverCommand dc = new DriverCommand(CALLCYCLE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Invoke one or more JUnit tests using the provided Class name(s).
               
                 Because JUnit is a testing framework; test_record, test_passes, and test_failure counts within the status counters 
                 will be updated when possible.
                 
                 If properly configured with SAFS RuntimeDataAwareness (dependency injection of SAFS Driver instances) the JUnit 
                 test has full access to all SAFS services including SAFS App Map data and SAFS Variable storage.
                 
                 JUnit tests can be intermixed with other SAFS tests.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param className  Optional:NO 
                 The name of one or more Classes to execute.
              
     **********/
    static public DriverCommand callJUnit (String className) {

        if ( className == null ) throw new IllegalArgumentException ( "callJUnit.className = null");
        DriverCommand dc = new DriverCommand(CALLJUNIT_KEYWORD);
        dc.addParameter(className);
        return dc;
    }


    /*********** <pre> 
                 Invoke a custom script with passed parameters/variables, if desired.
               
                 Since the script is executed as a Driver Command and NOT a test; 
                 test_record, test_passes, and test_failures information within the status counters 
                 are not updated.
                 For Rational Robot, if the called script wishes to record 
                 tests attempted, pass, and failure counts then it must 
                 do so itself by updating the ScriptStatusInfo fields 
                 accordingly.
                 The name of the script must not include the file extension.
                 Any number of parameters can be passed to the script.
                 These parameters are passed as DDVariables and\or SAFSVARS variables.
                 The variables and their values are available to the script and all of SAFS.
                 These parameters are usually specific to each called script.  The script can also 
                 set variable values for use by SAFS test tables.
                 With Robot, the script can get/set variable values from the DDVariableStore.
                 With Rational Functional Tester, the custom script should follow this Script Javadoc.
                 For Apple IOS, consult the SAFS IOS Developer's Guide.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>OpenQA Selenium</LI>
        <LI>Rational Robot</LI>
        <LI>Apple IOS</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param scriptName  Optional:NO 
                 The name of the Script to execute.
              
     @param parameterName  Optional:YES  DefaultVal:AValue 
                 One or more parameter values to send to the script--each in their own field.
              
     **********/
    static public DriverCommand callScript (String scriptName, String parameterName) {

        if ( scriptName == null ) throw new IllegalArgumentException ( "callScript.scriptName = null");
        DriverCommand dc = new DriverCommand(CALLSCRIPT_KEYWORD);
        dc.addParameter(scriptName);
        dc.addParameter(parameterName);
        return dc;
    }


    /*********** <pre> 
                 Invoke a custom script with passed parameters/variables, if desired.
               
                 Since the script is executed as a Driver Command and NOT a test; 
                 test_record, test_passes, and test_failures information within the status counters 
                 are not updated.
                 For Rational Robot, if the called script wishes to record 
                 tests attempted, pass, and failure counts then it must 
                 do so itself by updating the ScriptStatusInfo fields 
                 accordingly.
                 The name of the script must not include the file extension.
                 Any number of parameters can be passed to the script.
                 These parameters are passed as DDVariables and\or SAFSVARS variables.
                 The variables and their values are available to the script and all of SAFS.
                 These parameters are usually specific to each called script.  The script can also 
                 set variable values for use by SAFS test tables.
                 With Robot, the script can get/set variable values from the DDVariableStore.
                 With Rational Functional Tester, the custom script should follow this Script Javadoc.
                 For Apple IOS, consult the SAFS IOS Developer's Guide.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>OpenQA Selenium</LI>
        <LI>Rational Robot</LI>
        <LI>Apple IOS</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        scriptName -- Optional:NO 
                 The name of the Script to execute.
              <BR/>        parameterName -- Optional:YES  DefaultVal:AValue 
                 One or more parameter values to send to the script--each in their own field.
              
    </UL>

     **********/
    static public DriverCommand callScript (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "callScript.parameters = null");
        DriverCommand dc = new DriverCommand(CALLSCRIPT_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Invoke a Step table from within another Step table (from StepDriver).
               
                 The command is only used at the Step level.  You do not use this 
                 command within Suites or Cycles.
                 Since the Step table is executed as a driver command by StepDriver 
                 and NOT as a CycleDriver or SuiteDriver test record, the call to the 
                 Step table itself is not counted as a test pass or a test fail.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param stepName  Optional:NO 
                 The name of the StepTable to execute.
              
     @param stepSeparator  Optional:YES  DefaultVal: 
                 The field separator used by the Step table--if required.
              
     @param parameterName  Optional:YES  DefaultVal:AValue 
                 One or more parameter values to send to the table--each in their own field.
              
     **********/
    static public DriverCommand callStep (String stepName, String stepSeparator, String parameterName) {

        if ( stepName == null ) throw new IllegalArgumentException ( "callStep.stepName = null");
        DriverCommand dc = new DriverCommand(CALLSTEP_KEYWORD);
        dc.addParameter(stepName);
        dc.addParameter(stepSeparator);
        dc.addParameter(parameterName);
        return dc;
    }


    /*********** <pre> 
                 Invoke a Step table from within another Step table (from StepDriver).
               
                 The command is only used at the Step level.  You do not use this 
                 command within Suites or Cycles.
                 Since the Step table is executed as a driver command by StepDriver 
                 and NOT as a CycleDriver or SuiteDriver test record, the call to the 
                 Step table itself is not counted as a test pass or a test fail.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        stepName -- Optional:NO 
                 The name of the StepTable to execute.
              <BR/>        stepSeparator -- Optional:YES  DefaultVal: 
                 The field separator used by the Step table--if required.
              <BR/>        parameterName -- Optional:YES  DefaultVal:AValue 
                 One or more parameter values to send to the table--each in their own field.
              
    </UL>

     **********/
    static public DriverCommand callStep (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "callStep.parameters = null");
        DriverCommand dc = new DriverCommand(CALLSTEP_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Invoke a Suite table (from StepDriver or SuiteDriver)
               
                 You cannot use CallSuite in a CycleDriver test table.
                 Since the Suite is executed as a driver command by SuiteDriver or 
                 StepDriver and NOT as a CycleDriver test record, the call to the 
                 Suite itself is not counted as a test pass or a test fail.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param suiteName  Optional:NO 
                 The name of the Suite to execute.
              
     @param suiteSeparator  Optional:YES  DefaultVal: 
                 The field separator used by the Suite--if required.
              
     @param parameterName  Optional:YES  DefaultVal:AValue 
                 One or more parameter values to send to the suite--each in their own field.
              
     **********/
    static public DriverCommand callSuite (String suiteName, String suiteSeparator, String parameterName) {

        if ( suiteName == null ) throw new IllegalArgumentException ( "callSuite.suiteName = null");
        DriverCommand dc = new DriverCommand(CALLSUITE_KEYWORD);
        dc.addParameter(suiteName);
        dc.addParameter(suiteSeparator);
        dc.addParameter(parameterName);
        return dc;
    }


    /*********** <pre> 
                 Invoke a Suite table (from StepDriver or SuiteDriver)
               
                 You cannot use CallSuite in a CycleDriver test table.
                 Since the Suite is executed as a driver command by SuiteDriver or 
                 StepDriver and NOT as a CycleDriver test record, the call to the 
                 Suite itself is not counted as a test pass or a test fail.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        suiteName -- Optional:NO 
                 The name of the Suite to execute.
              <BR/>        suiteSeparator -- Optional:YES  DefaultVal: 
                 The field separator used by the Suite--if required.
              <BR/>        parameterName -- Optional:YES  DefaultVal:AValue 
                 One or more parameter values to send to the suite--each in their own field.
              
    </UL>

     **********/
    static public DriverCommand callSuite (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "callSuite.parameters = null");
        DriverCommand dc = new DriverCommand(CALLSUITE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Invoke TestNG tests using the provided TestNG parameters.
              
                 
                 If properly configured with SAFS RuntimeDataAwareness (dependency injection of SAFS Driver instances) the TestNG 
                 test has full access to all SAFS services including SAFS App Map data and SAFS Variable storage.
                 
                 TestNG tests can be intermixed with other SAFS tests.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param testNGParameters  Optional:NO 
                 The parameters accepted by TestNG.
              
     **********/
    static public DriverCommand callTestNG (String testNGParameters) {

        if ( testNGParameters == null ) throw new IllegalArgumentException ( "callTestNG.testNGParameters = null");
        DriverCommand dc = new DriverCommand(CALLTESTNG_KEYWORD);
        dc.addParameter(testNGParameters);
        return dc;
    }


    /*********** <pre> 
                 Exit the currently running Step, Suite, and/or Cycle table.
               
                 Exit the currently running Step, Suite, and/or Cycle table.
                 Generally called from Step or Suite Driver to exit or abort the entire 
                 Cycle test currently running.
                 
                 The Step or Suite table containing the command is exited.  If an ExitTable 
                 processing block has been set by SetExitTableBlock then that block 
                 will be executed.  Otherwise, the table will immediately exit.  
                 
                 Any Suite and/or Cycle table that invoked the table will also be exited.  
                 If an ExitTable processing block has been set by SetExitTableBlock for the table 
                 then that block will be executed.  Otherwise, the table will immediately exit.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     **********/
    static public DriverCommand exitCycle () {

        DriverCommand dc = new DriverCommand(EXITCYCLE_KEYWORD);
        return dc;
    }


    /*********** <pre> 
                 Exit the currently running Step and/or Suite table.
               
                 Exit the currently running Step and/or Suite table.
                 Generally only called from Step Driver to exit the current Step 
                 table AND the Suite that invoked it.  The command should have no 
                 effect inside a Cycle table.
                 
                 The Step or Suite table containing the command is exited.  If an ExitTable 
                 processing block has been set by SetExitTableBlock then that block 
                 will be executed.  Otherwise, the table will immediately exit.  
                 
                 If the table containing the command was a Step table, then the Suite that 
                 called the Step table will also be exited.  If an ExitTable 
                 processing block has been set by SetExitTableBlock for the Suite,
                 then that block will be executed.  Otherwise, the Suite will immediately exit.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     **********/
    static public DriverCommand exitSuite () {

        DriverCommand dc = new DriverCommand(EXITSUITE_KEYWORD);
        return dc;
    }


    /*********** <pre> 
                 Exit the currently running Step, Suite, or Cycle table.
               
                 Exit the currently running Step, Suite, or Cycle table.
                 The table containing the command is exited.  No other table 
                 is automatically exited because of this command.  If an ExitTable 
                 processing block has been set by SetExitTableBlock then that block 
                 will be executed.  Otherwise, the table will immediately exit.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     **********/
    static public DriverCommand exitTable () {

        DriverCommand dc = new DriverCommand(EXITTABLE_KEYWORD);
        return dc;
    }


    /*********** <pre> 
                 Goto a named block in the current table.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param blockID  Optional:NO 
                 The name of the block to Goto.
              
     **********/
    static public DriverCommand gotoBlockID (String blockID) {

        if ( blockID == null ) throw new IllegalArgumentException ( "gotoBlockID.blockID = null");
        DriverCommand dc = new DriverCommand(GOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block in the current table if value2 is contained within value1.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param blockID  Optional:NO 
                 The name of the block to Goto.
              
     @param value1  Optional:NO 
                 The value to be searched for the Value2 substring
              
     @param value2  Optional:NO 
                 A string to search Value1 for an occurance of
              
     @param caseSensitive  Optional:YES 
                 Set to 'CaseInsensitive' so comparisons are NOT case-sensitive.
                 Comparisons are case-sensitive by default.
              
     **********/
    static public DriverCommand onContainsGotoBlockID (String blockID, String value1, String value2, String caseSensitive) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onContainsGotoBlockID.blockID = null");
        if ( value1 == null ) throw new IllegalArgumentException ( "onContainsGotoBlockID.value1 = null");
        if ( value2 == null ) throw new IllegalArgumentException ( "onContainsGotoBlockID.value2 = null");
        DriverCommand dc = new DriverCommand(ONCONTAINSGOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(value1);
        dc.addParameter(value2);
        dc.addParameter(caseSensitive);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block in the current table if value2 is contained within value1.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO 
                 The name of the block to Goto.
              <BR/>        value1 -- Optional:NO 
                 The value to be searched for the Value2 substring
              <BR/>        value2 -- Optional:NO 
                 A string to search Value1 for an occurance of
              <BR/>        caseSensitive -- Optional:YES 
                 Set to 'CaseInsensitive' so comparisons are NOT case-sensitive.
                 Comparisons are case-sensitive by default.
              
    </UL>

     **********/
    static public DriverCommand onContainsGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onContainsGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(ONCONTAINSGOTOBLOCKID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block in the current table if the directory exists.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param blockID  Optional:NO 
                 The name of the block to Goto.
              
     @param directoryName  Optional:NO 
                 The directory name of the directory relative to Datapool/Test to be verified for existance.  Case sensitivity is handled by the underlying operating system (i.e. a case sensitive platform makes this keyword case sensitive).
              
     **********/
    static public DriverCommand onDirectoryExistGotoBlockID (String blockID, String directoryName) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onDirectoryExistGotoBlockID.blockID = null");
        if ( directoryName == null ) throw new IllegalArgumentException ( "onDirectoryExistGotoBlockID.directoryName = null");
        DriverCommand dc = new DriverCommand(OnDirectoryExistGotoBlockID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(directoryName);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block in the current table if the directory exists.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO 
                 The name of the block to Goto.
              <BR/>        directoryName -- Optional:NO 
                 The directory name of the directory relative to Datapool/Test to be verified for existance.  Case sensitivity is handled by the underlying operating system (i.e. a case sensitive platform makes this keyword case sensitive).
              
    </UL>

     **********/
    static public DriverCommand onDirectoryExistGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onDirectoryExistGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(OnDirectoryExistGotoBlockID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block in the current table if the Directory does not exist.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param blockID  Optional:NO 
                 The name of the block to Goto.
              
     @param directoryName  Optional:NO 
                 The directory name relatvie to Datapool/Text of the directory to be verified for non existance.  Case sensitivity is handled by the underlying operating system (i.e. a case sensitive platform makes this keyword case sensitive).
              
     **********/
    static public DriverCommand onDirectoryNotExistGotoBlockID (String blockID, String directoryName) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onDirectoryNotExistGotoBlockID.blockID = null");
        if ( directoryName == null ) throw new IllegalArgumentException ( "onDirectoryNotExistGotoBlockID.directoryName = null");
        DriverCommand dc = new DriverCommand(ONDIRECTORYNOTEXISTGOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(directoryName);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block in the current table if the Directory does not exist.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO 
                 The name of the block to Goto.
              <BR/>        directoryName -- Optional:NO 
                 The directory name relatvie to Datapool/Text of the directory to be verified for non existance.  Case sensitivity is handled by the underlying operating system (i.e. a case sensitive platform makes this keyword case sensitive).
              
    </UL>

     **********/
    static public DriverCommand onDirectoryNotExistGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onDirectoryNotExistGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(ONDIRECTORYNOTEXISTGOTOBLOCKID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block in the current table if two values are equal.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param blockID  Optional:NO 
                 The name of the block to Goto.
              
     @param value1  Optional:NO 
                 The first value for the comparison.
              
     @param value2  Optional:NO 
                 The second value for the comparison.
              
     @param caseSensitive  Optional:YES 
                 Set to 'CaseInsensitive' so comparisons are NOT case-sensitive.
                 Comparisons are case-sensitive by default.
              
     **********/
    static public DriverCommand onEqualGotoBlockID (String blockID, String value1, String value2, String caseSensitive) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onEqualGotoBlockID.blockID = null");
        if ( value1 == null ) throw new IllegalArgumentException ( "onEqualGotoBlockID.value1 = null");
        if ( value2 == null ) throw new IllegalArgumentException ( "onEqualGotoBlockID.value2 = null");
        DriverCommand dc = new DriverCommand(ONEQUALGOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(value1);
        dc.addParameter(value2);
        dc.addParameter(caseSensitive);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block in the current table if two values are equal.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO 
                 The name of the block to Goto.
              <BR/>        value1 -- Optional:NO 
                 The first value for the comparison.
              <BR/>        value2 -- Optional:NO 
                 The second value for the comparison.
              <BR/>        caseSensitive -- Optional:YES 
                 Set to 'CaseInsensitive' so comparisons are NOT case-sensitive.
                 Comparisons are case-sensitive by default.
              
    </UL>

     **********/
    static public DriverCommand onEqualGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onEqualGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(ONEQUALGOTOBLOCKID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Goto the named block in the current table if the file is at EOF.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param blockID  Optional:NO
              The name of the block to Goto.
            
     @param fileNumber  Optional:NO
              The file number of the file to be verified for EOF.
            
     **********/
    static public DriverCommand onFileEOFGotoBlockID (String blockID, String fileNumber) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onFileEOFGotoBlockID.blockID = null");
        if ( fileNumber == null ) throw new IllegalArgumentException ( "onFileEOFGotoBlockID.fileNumber = null");
        DriverCommand dc = new DriverCommand(ONFILEEOFGOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(fileNumber);
        return dc;
    }


    /*********** <pre>
          Goto the named block in the current table if the file is at EOF.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO
              The name of the block to Goto.
            <BR/>        fileNumber -- Optional:NO
              The file number of the file to be verified for EOF.
            
    </UL>

     **********/
    static public DriverCommand onFileEOFGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onFileEOFGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(ONFILEEOFGOTOBLOCKID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block in the current table if the file exists.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param blockID  Optional:NO 
                 The name of the block to Goto.
              
     @param fileName  Optional:NO 
                 The file name of the file relative to Datapool/Test to be verified for existance.  Case sensitivity is handled by the underlying operating system (i.e. a case sensitive platform makes this keyword case sensitive).
              
     **********/
    static public DriverCommand onFileExistGotoBlockID (String blockID, String fileName) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onFileExistGotoBlockID.blockID = null");
        if ( fileName == null ) throw new IllegalArgumentException ( "onFileExistGotoBlockID.fileName = null");
        DriverCommand dc = new DriverCommand(ONFILEEXISTGOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(fileName);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block in the current table if the file exists.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO 
                 The name of the block to Goto.
              <BR/>        fileName -- Optional:NO 
                 The file name of the file relative to Datapool/Test to be verified for existance.  Case sensitivity is handled by the underlying operating system (i.e. a case sensitive platform makes this keyword case sensitive).
              
    </UL>

     **********/
    static public DriverCommand onFileExistGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onFileExistGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(ONFILEEXISTGOTOBLOCKID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block in the current table if the file does not exist.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param blockID  Optional:NO 
                 The name of the block to Goto.
              
     @param fileName  Optional:NO 
                 The file name of the file relative to Datapool/Test to be verified for existance.  Case sensitivity is handled by the underlying operating system (i.e. a case sensitive platform makes this keyword case sensitive).
              
     **********/
    static public DriverCommand onFileNotExistGotoBlockID (String blockID, String fileName) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onFileNotExistGotoBlockID.blockID = null");
        if ( fileName == null ) throw new IllegalArgumentException ( "onFileNotExistGotoBlockID.fileName = null");
        DriverCommand dc = new DriverCommand(ONFILENOTEXISTGOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(fileName);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block in the current table if the file does not exist.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO 
                 The name of the block to Goto.
              <BR/>        fileName -- Optional:NO 
                 The file name of the file relative to Datapool/Test to be verified for existance.  Case sensitivity is handled by the underlying operating system (i.e. a case sensitive platform makes this keyword case sensitive).
              
    </UL>

     **********/
    static public DriverCommand onFileNotExistGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onFileNotExistGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(ONFILENOTEXISTGOTOBLOCKID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block in the current table if value1 is greater than value2.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param blockID  Optional:NO 
                 The name of the block to Goto.
              
     @param value1  Optional:NO 
                 The value to be compared.
              
     @param value2  Optional:NO 
                 The value to be compared against.
              
     @param caseSensitive  Optional:YES 
                 Set to 'CaseInsensitive' so comparisons are NOT case-sensitive.
                 Comparisons are case-sensitive by default.
              
     **********/
    static public DriverCommand onGreaterThanGotoBlockID (String blockID, String value1, String value2, String caseSensitive) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onGreaterThanGotoBlockID.blockID = null");
        if ( value1 == null ) throw new IllegalArgumentException ( "onGreaterThanGotoBlockID.value1 = null");
        if ( value2 == null ) throw new IllegalArgumentException ( "onGreaterThanGotoBlockID.value2 = null");
        DriverCommand dc = new DriverCommand(ONGREATERTHANGOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(value1);
        dc.addParameter(value2);
        dc.addParameter(caseSensitive);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block in the current table if value1 is greater than value2.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO 
                 The name of the block to Goto.
              <BR/>        value1 -- Optional:NO 
                 The value to be compared.
              <BR/>        value2 -- Optional:NO 
                 The value to be compared against.
              <BR/>        caseSensitive -- Optional:YES 
                 Set to 'CaseInsensitive' so comparisons are NOT case-sensitive.
                 Comparisons are case-sensitive by default.
              
    </UL>

     **********/
    static public DriverCommand onGreaterThanGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onGreaterThanGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(ONGREATERTHANGOTOBLOCKID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
                 Goto the named block in the current table if a GUI component exists.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>Apple IOS</LI>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param blockID  Optional:NO
                 The name of the block to Goto.
              
     @param windowID  Optional:NO
                 A Window reference from the app map.
              
     @param componentID  Optional:NO
                 A reference from the app map for the Component within the Window.
              
     @param timeOut  Optional:YES  DefaultVal:15
                 Timeout value in seconds before exiting automatically (no branch).
              
     **********/
    static public DriverCommand onGUIExistsGotoBlockID (String blockID, String windowID, String componentID, String timeOut) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onGUIExistsGotoBlockID.blockID = null");
        if ( componentID == null ) throw new IllegalArgumentException ( "onGUIExistsGotoBlockID.componentID = null");
        if ( windowID == null ) throw new IllegalArgumentException ( "onGUIExistsGotoBlockID.windowID = null");
        DriverCommand dc = new DriverCommand(ONGUIEXISTSGOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(windowID);
        dc.addParameter(componentID);
        dc.addParameter(timeOut);
        return dc;
    }


    /*********** <pre>
                 Goto the named block in the current table if a GUI component exists.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>Apple IOS</LI>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO
                 The name of the block to Goto.
              <BR/>        windowID -- Optional:NO
                 A Window reference from the app map.
              <BR/>        componentID -- Optional:NO
                 A reference from the app map for the Component within the Window.
              <BR/>        timeOut -- Optional:YES  DefaultVal:15
                 Timeout value in seconds before exiting automatically (no branch).
              
    </UL>

     **********/
    static public DriverCommand onGUIExistsGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onGUIExistsGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(ONGUIEXISTSGOTOBLOCKID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
                 Goto the named block in the current table if a GUI component does not exist.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>Apple IOS</LI>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param blockID  Optional:NO
                 The name of the block to Goto.
              
     @param windowID  Optional:NO
                 A Window reference from the app map.
              
     @param componentID  Optional:NO
                 A reference from the app map for the Component within the Window.
              
     @param timeOut  Optional:YES  DefaultVal:15
                 Timeout value in seconds before exiting automatically (no branch).
              
     **********/
    static public DriverCommand onGUINotExistGotoBlockID (String blockID, String windowID, String componentID, String timeOut) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onGUINotExistGotoBlockID.blockID = null");
        if ( componentID == null ) throw new IllegalArgumentException ( "onGUINotExistGotoBlockID.componentID = null");
        if ( windowID == null ) throw new IllegalArgumentException ( "onGUINotExistGotoBlockID.windowID = null");
        DriverCommand dc = new DriverCommand(ONGUINOTEXISTGOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(windowID);
        dc.addParameter(componentID);
        dc.addParameter(timeOut);
        return dc;
    }


    /*********** <pre>
                 Goto the named block in the current table if a GUI component does not exist.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>Apple IOS</LI>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO
                 The name of the block to Goto.
              <BR/>        windowID -- Optional:NO
                 A Window reference from the app map.
              <BR/>        componentID -- Optional:NO
                 A reference from the app map for the Component within the Window.
              <BR/>        timeOut -- Optional:YES  DefaultVal:15
                 Timeout value in seconds before exiting automatically (no branch).
              
    </UL>

     **********/
    static public DriverCommand onGUINotExistGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onGUINotExistGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(ONGUINOTEXISTGOTOBLOCKID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
                 Goto named block if value1 is between value2 and value3.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param blockID  Optional:NO
                 The name of the block to Goto.
              
     @param value1  Optional:NO
                 The value to be compared.
              
     @param value2  Optional:NO
                 The low end of range to be compared against.
              
     @param value3  Optional:NO
                 The high end of range to be compared against.
              
     @param caseSensitive  Optional:YES 
                 Set to 'CaseInsensitive' so string comparisons are NOT case-sensitive.
                 String Comparisons are case-sensitive by default.
              
     **********/
    static public DriverCommand onInRangeGotoBlockID (String blockID, String value1, String value2, String value3, String caseSensitive) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onInRangeGotoBlockID.blockID = null");
        if ( value1 == null ) throw new IllegalArgumentException ( "onInRangeGotoBlockID.value1 = null");
        if ( value2 == null ) throw new IllegalArgumentException ( "onInRangeGotoBlockID.value2 = null");
        if ( value3 == null ) throw new IllegalArgumentException ( "onInRangeGotoBlockID.value3 = null");
        DriverCommand dc = new DriverCommand(ONINRANGEGOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(value1);
        dc.addParameter(value2);
        dc.addParameter(value3);
        dc.addParameter(caseSensitive);
        return dc;
    }


    /*********** <pre>
                 Goto named block if value1 is between value2 and value3.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO
                 The name of the block to Goto.
              <BR/>        value1 -- Optional:NO
                 The value to be compared.
              <BR/>        value2 -- Optional:NO
                 The low end of range to be compared against.
              <BR/>        value3 -- Optional:NO
                 The high end of range to be compared against.
              <BR/>        caseSensitive -- Optional:YES 
                 Set to 'CaseInsensitive' so string comparisons are NOT case-sensitive.
                 String Comparisons are case-sensitive by default.
              
    </UL>

     **********/
    static public DriverCommand onInRangeGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onInRangeGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(ONINRANGEGOTOBLOCKID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block if value1 is less than value2.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param blockID  Optional:NO 
                 The name of the block to Goto.
              
     @param value1  Optional:NO 
                 The value to be compared.
              
     @param value2  Optional:NO 
                 The value to be compared against.
              
     @param caseSensitive  Optional:YES 
                 Set to 'CaseInsensitive' so string comparisons are NOT case-sensitive.
                 String Comparisons are case-sensitive by default.
              
     **********/
    static public DriverCommand onLessThanGotoBlockID (String blockID, String value1, String value2, String caseSensitive) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onLessThanGotoBlockID.blockID = null");
        if ( value1 == null ) throw new IllegalArgumentException ( "onLessThanGotoBlockID.value1 = null");
        if ( value2 == null ) throw new IllegalArgumentException ( "onLessThanGotoBlockID.value2 = null");
        DriverCommand dc = new DriverCommand(ONLESSTHANGOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(value1);
        dc.addParameter(value2);
        dc.addParameter(caseSensitive);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block if value1 is less than value2.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO 
                 The name of the block to Goto.
              <BR/>        value1 -- Optional:NO 
                 The value to be compared.
              <BR/>        value2 -- Optional:NO 
                 The value to be compared against.
              <BR/>        caseSensitive -- Optional:YES 
                 Set to 'CaseInsensitive' so string comparisons are NOT case-sensitive.
                 String Comparisons are case-sensitive by default.
              
    </UL>

     **********/
    static public DriverCommand onLessThanGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onLessThanGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(ONLESSTHANGOTOBLOCKID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                   Goto the named block in the current table if state is part of the state information of the menuitem.
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param blockID  Optional:NO 
                   The name of the block to transfer control to if state is 
                   part of the state information of the menuitem.
                
     @param windowName  Optional:NO 
                   The window name.
                
     @param componentName  Optional:NO 
                   The component name.
                
     @param menuItem  Optional:NO 
                   Menu->MenuItem hierarchy string to identify which menu item                              to test. This menu hierarchy is case-sensitive.
                   to test. This menu hierarchy is case-sensitive.
                
     @param state  Optional:NO 
                   Expected status string (or part thereof) to verify. 
		   Ex: "Enabled Checked" OR "Disabled Grayed" etc. Each item 
		   separated by a space will be evaluated separately so the order 
		   of the status items does not matter. These status items are 
		   case-sensitive.
                
     **********/
    static public DriverCommand onMenuItemContainsStateGotoBlockID (String blockID, String windowName, String componentName, String menuItem, String state) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onMenuItemContainsStateGotoBlockID.blockID = null");
        if ( componentName == null ) throw new IllegalArgumentException ( "onMenuItemContainsStateGotoBlockID.componentName = null");
        if ( menuItem == null ) throw new IllegalArgumentException ( "onMenuItemContainsStateGotoBlockID.menuItem = null");
        if ( state == null ) throw new IllegalArgumentException ( "onMenuItemContainsStateGotoBlockID.state = null");
        if ( windowName == null ) throw new IllegalArgumentException ( "onMenuItemContainsStateGotoBlockID.windowName = null");
        DriverCommand dc = new DriverCommand(ONMENUITEMCONTAINSSTATEGOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(windowName);
        dc.addParameter(componentName);
        dc.addParameter(menuItem);
        dc.addParameter(state);
        return dc;
    }


    /*********** <pre> 
                   Goto the named block in the current table if state is part of the state information of the menuitem.
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO 
                   The name of the block to transfer control to if state is 
                   part of the state information of the menuitem.
                <BR/>        windowName -- Optional:NO 
                   The window name.
                <BR/>        componentName -- Optional:NO 
                   The component name.
                <BR/>        menuItem -- Optional:NO 
                   Menu->MenuItem hierarchy string to identify which menu item                              to test. This menu hierarchy is case-sensitive.
                   to test. This menu hierarchy is case-sensitive.
                <BR/>        state -- Optional:NO 
                   Expected status string (or part thereof) to verify. 
		   Ex: "Enabled Checked" OR "Disabled Grayed" etc. Each item 
		   separated by a space will be evaluated separately so the order 
		   of the status items does not matter. These status items are 
		   case-sensitive.
                
    </UL>

     **********/
    static public DriverCommand onMenuItemContainsStateGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onMenuItemContainsStateGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(ONMENUITEMCONTAINSSTATEGOTOBLOCKID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block in the current table if value2 is NOT a substring of value1.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Rational Robot</LI>
    </UL>

     @param blockID  Optional:NO 
                 The name of the block to Goto.
              
     @param value1  Optional:NO 
                 The value to be searched for the Value2 substring
              
     @param value2  Optional:NO 
                 The substring to seek in VALUE1
              
     @param caseSensitive  Optional:YES 
                 Set to 'CaseInsensitive' so comparisons are NOT case-sensitive.
                 Comparisons are case-sensitive by default.
              
     **********/
    static public DriverCommand onNotContainsGotoBlockID (String blockID, String value1, String value2, String caseSensitive) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onNotContainsGotoBlockID.blockID = null");
        if ( value1 == null ) throw new IllegalArgumentException ( "onNotContainsGotoBlockID.value1 = null");
        if ( value2 == null ) throw new IllegalArgumentException ( "onNotContainsGotoBlockID.value2 = null");
        DriverCommand dc = new DriverCommand(ONNOTCONTAINSGOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(value1);
        dc.addParameter(value2);
        dc.addParameter(caseSensitive);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block in the current table if value2 is NOT a substring of value1.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Rational Robot</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO 
                 The name of the block to Goto.
              <BR/>        value1 -- Optional:NO 
                 The value to be searched for the Value2 substring
              <BR/>        value2 -- Optional:NO 
                 The substring to seek in VALUE1
              <BR/>        caseSensitive -- Optional:YES 
                 Set to 'CaseInsensitive' so comparisons are NOT case-sensitive.
                 Comparisons are case-sensitive by default.
              
    </UL>

     **********/
    static public DriverCommand onNotContainsGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onNotContainsGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(ONNOTCONTAINSGOTOBLOCKID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block in the current table if two values are not equal.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param blockID  Optional:NO 
                 The name of the block to Goto.
              
     @param value1  Optional:NO 
                 The first value for the comparison.
              
     @param value2  Optional:NO 
                 The second value for the comparison.
              
     @param caseSensitive  Optional:YES 
                 Set to 'CaseInsensitive' so string comparisons are NOT case-sensitive.
                 String Comparisons are case-sensitive by default.
              
     **********/
    static public DriverCommand onNotEqualGotoBlockID (String blockID, String value1, String value2, String caseSensitive) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onNotEqualGotoBlockID.blockID = null");
        if ( value1 == null ) throw new IllegalArgumentException ( "onNotEqualGotoBlockID.value1 = null");
        if ( value2 == null ) throw new IllegalArgumentException ( "onNotEqualGotoBlockID.value2 = null");
        DriverCommand dc = new DriverCommand(ONNOTEQUALGOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(value1);
        dc.addParameter(value2);
        dc.addParameter(caseSensitive);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block in the current table if two values are not equal.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO 
                 The name of the block to Goto.
              <BR/>        value1 -- Optional:NO 
                 The first value for the comparison.
              <BR/>        value2 -- Optional:NO 
                 The second value for the comparison.
              <BR/>        caseSensitive -- Optional:YES 
                 Set to 'CaseInsensitive' so string comparisons are NOT case-sensitive.
                 String Comparisons are case-sensitive by default.
              
    </UL>

     **********/
    static public DriverCommand onNotEqualGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onNotEqualGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(ONNOTEQUALGOTOBLOCKID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block in the current table if value1 is NOT greater than value2.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param blockID  Optional:NO 
                 The name of the block to Goto.
              
     @param value1  Optional:NO 
                 The value expected to be NOT greater than VALUE2.
              
     @param value2  Optional:NO 
                 The value expected to be equal or greater than VALUE1.
              
     @param caseSensitive  Optional:YES 
                 Set to 'CaseInsensitive' so comparisons are NOT case-sensitive.
                 Comparisons are case-sensitive by default.
              
     **********/
    static public DriverCommand onNotGreaterThanGotoBlockID (String blockID, String value1, String value2, String caseSensitive) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onNotGreaterThanGotoBlockID.blockID = null");
        if ( value1 == null ) throw new IllegalArgumentException ( "onNotGreaterThanGotoBlockID.value1 = null");
        if ( value2 == null ) throw new IllegalArgumentException ( "onNotGreaterThanGotoBlockID.value2 = null");
        DriverCommand dc = new DriverCommand(ONNOTGREATERTHANGOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(value1);
        dc.addParameter(value2);
        dc.addParameter(caseSensitive);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block in the current table if value1 is NOT greater than value2.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO 
                 The name of the block to Goto.
              <BR/>        value1 -- Optional:NO 
                 The value expected to be NOT greater than VALUE2.
              <BR/>        value2 -- Optional:NO 
                 The value expected to be equal or greater than VALUE1.
              <BR/>        caseSensitive -- Optional:YES 
                 Set to 'CaseInsensitive' so comparisons are NOT case-sensitive.
                 Comparisons are case-sensitive by default.
              
    </UL>

     **********/
    static public DriverCommand onNotGreaterThanGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onNotGreaterThanGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(ONNOTGREATERTHANGOTOBLOCKID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
                 Goto the named block in the current table if value1 is not between value2 and value3.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param blockID  Optional:NO
                 The name of the block to Goto.
              
     @param value1  Optional:NO
                 The value to be compared.
              
     @param value2  Optional:NO
                 The low end of range to be compared against.
              
     @param value3  Optional:NO
                 The high end of range to be compared against.
              
     @param caseSensitive  Optional:YES 
                 Set to 'CaseInsensitive' so string comparisons are NOT case-sensitive.
                 String Comparisons are case-sensitive by default.
              
     **********/
    static public DriverCommand onNotInRangeGotoBlockID (String blockID, String value1, String value2, String value3, String caseSensitive) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onNotInRangeGotoBlockID.blockID = null");
        if ( value1 == null ) throw new IllegalArgumentException ( "onNotInRangeGotoBlockID.value1 = null");
        if ( value2 == null ) throw new IllegalArgumentException ( "onNotInRangeGotoBlockID.value2 = null");
        if ( value3 == null ) throw new IllegalArgumentException ( "onNotInRangeGotoBlockID.value3 = null");
        DriverCommand dc = new DriverCommand(ONNOTINRANGEGOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(value1);
        dc.addParameter(value2);
        dc.addParameter(value3);
        dc.addParameter(caseSensitive);
        return dc;
    }


    /*********** <pre>
                 Goto the named block in the current table if value1 is not between value2 and value3.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO
                 The name of the block to Goto.
              <BR/>        value1 -- Optional:NO
                 The value to be compared.
              <BR/>        value2 -- Optional:NO
                 The low end of range to be compared against.
              <BR/>        value3 -- Optional:NO
                 The high end of range to be compared against.
              <BR/>        caseSensitive -- Optional:YES 
                 Set to 'CaseInsensitive' so string comparisons are NOT case-sensitive.
                 String Comparisons are case-sensitive by default.
              
    </UL>

     **********/
    static public DriverCommand onNotInRangeGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onNotInRangeGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(ONNOTINRANGEGOTOBLOCKID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block if value1 is NOT less than value2.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param blockID  Optional:NO 
                 The name of the block to Goto.
              
     @param value1  Optional:NO 
                 The value that should be NOT less than VALUE2.
              
     @param value2  Optional:NO 
                 The value that should be equal or less than VALUE1.
              
     @param caseSensitive  Optional:YES 
                 Set to 'CaseInsensitive' so string comparisons are NOT case-sensitive.
                 String Comparisons are case-sensitive by default.
              
     **********/
    static public DriverCommand onNotLessThanGotoBlockID (String blockID, String value1, String value2, String caseSensitive) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onNotLessThanGotoBlockID.blockID = null");
        if ( value1 == null ) throw new IllegalArgumentException ( "onNotLessThanGotoBlockID.value1 = null");
        if ( value2 == null ) throw new IllegalArgumentException ( "onNotLessThanGotoBlockID.value2 = null");
        DriverCommand dc = new DriverCommand(ONNOTLESSTHANGOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(value1);
        dc.addParameter(value2);
        dc.addParameter(caseSensitive);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block if value1 is NOT less than value2.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO 
                 The name of the block to Goto.
              <BR/>        value1 -- Optional:NO 
                 The value that should be NOT less than VALUE2.
              <BR/>        value2 -- Optional:NO 
                 The value that should be equal or less than VALUE1.
              <BR/>        caseSensitive -- Optional:YES 
                 Set to 'CaseInsensitive' so string comparisons are NOT case-sensitive.
                 String Comparisons are case-sensitive by default.
              
    </UL>

     **********/
    static public DriverCommand onNotLessThanGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onNotLessThanGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(ONNOTLESSTHANGOTOBLOCKID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                   Goto the named block in the current table if state is part of the state information of the menuitem.
                   This command allows for a partial match of the menu item.
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param blockID  Optional:NO 
                   The name of the block to transfer control to if state is 
                   part of the state information of the menuitem.
                
     @param windowName  Optional:NO 
                   The window name.
                
     @param componentName  Optional:NO 
                   The component name.
                
     @param menuItem  Optional:NO 
                   Menu->MenuItem hierarchy string to identify which menu item                              to test. This menu hierarchy is case-sensitive.
                   to test. This menu hierarchy is case-sensitive.
                
     @param state  Optional:NO 
                   Expected status string (or part thereof) to verify. 
		   Ex: "Enabled Checked" OR "Disabled Grayed" etc. Each item 
		   separated by a space will be evaluated separately so the order 
		   of the status items does not matter. These status items are 
		   case-sensitive.
                
     **********/
    static public DriverCommand onPartialMenuItemContainsStateGotoBlockID (String blockID, String windowName, String componentName, String menuItem, String state) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onPartialMenuItemContainsStateGotoBlockID.blockID = null");
        if ( componentName == null ) throw new IllegalArgumentException ( "onPartialMenuItemContainsStateGotoBlockID.componentName = null");
        if ( menuItem == null ) throw new IllegalArgumentException ( "onPartialMenuItemContainsStateGotoBlockID.menuItem = null");
        if ( state == null ) throw new IllegalArgumentException ( "onPartialMenuItemContainsStateGotoBlockID.state = null");
        if ( windowName == null ) throw new IllegalArgumentException ( "onPartialMenuItemContainsStateGotoBlockID.windowName = null");
        DriverCommand dc = new DriverCommand(ONPARTIALMENUITEMCONTAINSSTATEGOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(windowName);
        dc.addParameter(componentName);
        dc.addParameter(menuItem);
        dc.addParameter(state);
        return dc;
    }


    /*********** <pre> 
                   Goto the named block in the current table if state is part of the state information of the menuitem.
                   This command allows for a partial match of the menu item.
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO 
                   The name of the block to transfer control to if state is 
                   part of the state information of the menuitem.
                <BR/>        windowName -- Optional:NO 
                   The window name.
                <BR/>        componentName -- Optional:NO 
                   The component name.
                <BR/>        menuItem -- Optional:NO 
                   Menu->MenuItem hierarchy string to identify which menu item                              to test. This menu hierarchy is case-sensitive.
                   to test. This menu hierarchy is case-sensitive.
                <BR/>        state -- Optional:NO 
                   Expected status string (or part thereof) to verify. 
		   Ex: "Enabled Checked" OR "Disabled Grayed" etc. Each item 
		   separated by a space will be evaluated separately so the order 
		   of the status items does not matter. These status items are 
		   case-sensitive.
                
    </UL>

     **********/
    static public DriverCommand onPartialMenuItemContainsStateGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onPartialMenuItemContainsStateGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(ONPARTIALMENUITEMCONTAINSSTATEGOTOBLOCKID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
                 Goto the named block in the current table if the Registry Key exists.
              On Windows XP (and higher?) this is accomplished via 
              the REG.EXE provided by the operating system.  If this program is NOT available 
              then the Registry commands will not work until another means is implemented--possibly 
              Windows Scripting Host scripts, etc..
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param blockID  Optional:NO
                 The name of the block to Goto.
              
     @param key  Optional:NO
                 The Registry Key to seek.
              
     @param keyValue  Optional:YES
                 The optional Registry subkey value to seek.
              
     @param timeOut  Optional:YES  DefaultVal:15
                 Timeout value in seconds before exiting automatically (no branch).
              
     **********/
    static public DriverCommand onRegistryKeyExistGotoBlockID (String blockID, String key, String keyValue, String timeOut) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onRegistryKeyExistGotoBlockID.blockID = null");
        if ( key == null ) throw new IllegalArgumentException ( "onRegistryKeyExistGotoBlockID.key = null");
        DriverCommand dc = new DriverCommand(ONREGISTRYKEYEXISTGOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(key);
        dc.addParameter(keyValue);
        dc.addParameter(timeOut);
        return dc;
    }


    /*********** <pre>
                 Goto the named block in the current table if the Registry Key exists.
              On Windows XP (and higher?) this is accomplished via 
              the REG.EXE provided by the operating system.  If this program is NOT available 
              then the Registry commands will not work until another means is implemented--possibly 
              Windows Scripting Host scripts, etc..
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO
                 The name of the block to Goto.
              <BR/>        key -- Optional:NO
                 The Registry Key to seek.
              <BR/>        keyValue -- Optional:YES
                 The optional Registry subkey value to seek.
              <BR/>        timeOut -- Optional:YES  DefaultVal:15
                 Timeout value in seconds before exiting automatically (no branch).
              
    </UL>

     **********/
    static public DriverCommand onRegistryKeyExistGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onRegistryKeyExistGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(ONREGISTRYKEYEXISTGOTOBLOCKID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
                 Goto the named block in the current table if the Registry Key does not exist.
              On Windows XP (and higher?) this is accomplished via 
              the REG.EXE provided by the operating system.  If this program is NOT available 
              then the Registry commands will not work until another means is implemented--possibly 
              Windows Scripting Host scripts, etc..
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param blockID  Optional:NO
                 The name of the block to Goto.
              
     @param key  Optional:NO
                 The Registry Key to seek.
              
     @param keyValue  Optional:YES
                 The optional Registry subkey value to seek.
              
     @param timeOut  Optional:YES  DefaultVal:15
                 Timeout value in seconds before exiting automatically (no branch).
              
     **********/
    static public DriverCommand onRegistryKeyNotExistGotoBlockID (String blockID, String key, String keyValue, String timeOut) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onRegistryKeyNotExistGotoBlockID.blockID = null");
        if ( key == null ) throw new IllegalArgumentException ( "onRegistryKeyNotExistGotoBlockID.key = null");
        DriverCommand dc = new DriverCommand(ONREGISTRYKEYNOTEXISTGOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(key);
        dc.addParameter(keyValue);
        dc.addParameter(timeOut);
        return dc;
    }


    /*********** <pre>
                 Goto the named block in the current table if the Registry Key does not exist.
              On Windows XP (and higher?) this is accomplished via 
              the REG.EXE provided by the operating system.  If this program is NOT available 
              then the Registry commands will not work until another means is implemented--possibly 
              Windows Scripting Host scripts, etc..
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO
                 The name of the block to Goto.
              <BR/>        key -- Optional:NO
                 The Registry Key to seek.
              <BR/>        keyValue -- Optional:YES
                 The optional Registry subkey value to seek.
              <BR/>        timeOut -- Optional:YES  DefaultVal:15
                 Timeout value in seconds before exiting automatically (no branch).
              
    </UL>

     **********/
    static public DriverCommand onRegistryKeyNotExistGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onRegistryKeyNotExistGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(ONREGISTRYKEYNOTEXISTGOTOBLOCKID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Set or clear the name of a block to execute when the ExitTable command is encountered.
               
                 Set or clear the name of a block to execute when the ExitTable command is encountered.
                 You can reset this to nothing by leaving the BlockID parameter blank 
                 or providing an empty BlockID.  This reset should be done as part of the ExitTable 
                 processing.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param blockID  Optional:YES  DefaultVal: 
                 The name of the block to Goto when ExitTable is encountered.
              
     **********/
    static public DriverCommand setExitTableBlock (String blockID) {

        DriverCommand dc = new DriverCommand(SETEXITTABLEBLOCK_KEYWORD);
        dc.addParameter(blockID);
        return dc;
    }


    /*********** <pre> 
                 Set or clear the name of a block to execute when GeneralScriptFailure occurs.
               
                 Set or clear the name of a block to execute when GeneralScriptFailure occurs.
                 Status is evaluated after the completion of every record in a table. 
                 
                 You can reset this to nothing by leaving the BlockID parameter blank 
                 or providing an empty BlockID.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param blockID  Optional:YES  DefaultVal: 
                 The name of the block to Goto on status GeneralScriptFailure.
              
     **********/
    static public DriverCommand setGeneralScriptFailureBlock (String blockID) {

        DriverCommand dc = new DriverCommand(SETGENERALSCRIPTFAILUREBLOCK_KEYWORD);
        dc.addParameter(blockID);
        return dc;
    }


    /*********** <pre> 
                 Set or clear the name of a block to execute when InvalidFileIO occurs.
               
                 Set or clear the name of a block to execute when InvalidFileIO occurs.
                 Status is evaluated after the completion of every record in a table. 
                 
                 You can reset this to nothing by leaving the BlockID parameter blank 
                 or providing an empty BlockID.
                 
                 Note, an InvalidFileIO generated from the test table itself will not 
                 be processed by this block.  In general, that would not be possible 
                 because the FileIO error likely means the table cannot be processed.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param blockID  Optional:YES  DefaultVal: 
                 The name of the block to Goto on status InvalidFileIO.
              
     **********/
    static public DriverCommand setInvalidFileIOBlock (String blockID) {

        DriverCommand dc = new DriverCommand(SETINVALIDFILEIOBLOCK_KEYWORD);
        dc.addParameter(blockID);
        return dc;
    }


    /*********** <pre> 
                 Set or clear the name of a block to execute when NoScriptFailure occurs.
               
                 Set or clear the name of a block to execute when NoScriptFailure occurs.
                 Status is evaluated after the completion of every record in a table. 
                 So event the simple logging of message can return NoScriptFailure.
                 
                 This block setting is automatically cleared when a jump is executed as 
                 a result of this condition.  This command is generally used immediately 
                 before the record you expect to pass or fail.  You can reset this to 
                 nothing by leaving the BlockID parameter blank or providing an empty
                 BlockID.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param blockID  Optional:YES  DefaultVal: 
                 The name of the block to Goto on status NoScriptFailure.
              
     **********/
    static public DriverCommand setNoScriptFailureBlock (String blockID) {

        DriverCommand dc = new DriverCommand(SETNOSCRIPTFAILUREBLOCK_KEYWORD);
        dc.addParameter(blockID);
        return dc;
    }


    /*********** <pre> 
                 Set or clear the name of a block to execute when ScriptNotExecuted occurs.
               
                 Set or clear the name of a block to execute when ScriptNotExecuted occurs.
                 Status is evaluated after the completion of every record in a table.  In general, 
                 ScriptNotExecuted only occurs when the drivers are not able to be invoked or 
                 StepDriver cannot properly locate GUI items or the functions to process them.
                 
                 You can reset this to nothing by leaving the BlockID parameter blank 
                 or providing an empty BlockID.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param blockID  Optional:YES  DefaultVal: 
                 The name of the block to Goto on status ScriptNotExecuted.
              
     **********/
    static public DriverCommand setScriptNotExecutedBlock (String blockID) {

        DriverCommand dc = new DriverCommand(SETSCRIPTNOTEXECUTEDBLOCK_KEYWORD);
        dc.addParameter(blockID);
        return dc;
    }


    /*********** <pre> 
                 Set or clear the name of a block to execute when ScriptWarning occurs.
               
                 Set or clear the name of a block to execute when ScriptWarning occurs.
                 Status is evaluated after the completion of every record in a table. 
                 
                 You can reset this to nothing by leaving the BlockID parameter blank 
                 or providing an empty BlockID.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param blockID  Optional:YES  DefaultVal: 
                 The name of the block to Goto on status ScriptWarning.
              
     **********/
    static public DriverCommand setScriptWarningBlock (String blockID) {

        DriverCommand dc = new DriverCommand(SETSCRIPTWARNINGBLOCK_KEYWORD);
        dc.addParameter(blockID);
        return dc;
    }


    /*********** <pre> 
                 When TRUE then flow control block IDs have current table scope only.
               
                 By default, flow control block IDs provided with the SetXXXBlock commands 
                 have test level scope.  That is, a block ID set stays in effect for all test 
                 tables at that test level until the block ID is changed or cleared.
                 
                 By setting UseLocalFlowControl=TRUE then any flow control block ID set 
                 has only local scope.  It is only valid for the currently executing table.
                 
                 Note, if no parameter is provided the parameter will default to TRUE.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param state  Optional:YES  DefaultVal:TRUE 
                 The TRUE or FALSE value to use.
              
     **********/
    static public DriverCommand useLocalFlowControl (String state) {

        DriverCommand dc = new DriverCommand(USELOCALFLOWCONTROL_KEYWORD);
        dc.addParameter(state);
        return dc;
    }


    /*********** <pre>
        Log an EXPECTED failure message.
          Log that a failure was expected and, as such, is OK.
          You can optionally add an additional details description that follows the message.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param message  Optional:NO
              The message to log.
     @param details  Optional:YES
              Additional detail to add to the message.
     **********/
    static public DriverCommand logFailureOK (String message, String details) {

        if ( message == null ) throw new IllegalArgumentException ( "logFailureOK.message = null");
        DriverCommand dc = new DriverCommand(LOGFAILUREOK_KEYWORD);
        dc.addParameter(message);
        dc.addParameter(details);
        return dc;
    }


    /*********** <pre>
        Log an EXPECTED failure message.
          Log that a failure was expected and, as such, is OK.
          You can optionally add an additional details description that follows the message.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        message -- Optional:NO
              The message to log.<BR/>        details -- Optional:YES
              Additional detail to add to the message.
    </UL>

     **********/
    static public DriverCommand logFailureOK (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "logFailureOK.parameters = null");
        DriverCommand dc = new DriverCommand(LOGFAILUREOK_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
        Log a generic message
          Log a generic message.  You can optionally add an additional 
          details description that follows the message.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param message  Optional:NO
              The message to log.
     @param details  Optional:YES
              Additional detail to add to the message.
     **********/
    static public DriverCommand logMessage (String message, String details) {

        if ( message == null ) throw new IllegalArgumentException ( "logMessage.message = null");
        DriverCommand dc = new DriverCommand(LOGMESSAGE_KEYWORD);
        dc.addParameter(message);
        dc.addParameter(details);
        return dc;
    }


    /*********** <pre>
        Log a generic message
          Log a generic message.  You can optionally add an additional 
          details description that follows the message.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        message -- Optional:NO
              The message to log.<BR/>        details -- Optional:YES
              Additional detail to add to the message.
    </UL>

     **********/
    static public DriverCommand logMessage (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "logMessage.parameters = null");
        DriverCommand dc = new DriverCommand(LOGMESSAGE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
        Log a FAILURE message. Also increments appropriate counters.
          Log a FAILURE message.  Also increments appropriate counters.
          You can optionally add an additional details description that follows the message.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param message  Optional:NO
              The message to log.
     @param details  Optional:YES
              Additional detail to add to the message.
     **********/
    static public DriverCommand logTestFailure (String message, String details) {

        if ( message == null ) throw new IllegalArgumentException ( "logTestFailure.message = null");
        DriverCommand dc = new DriverCommand(LOGTESTFAILURE_KEYWORD);
        dc.addParameter(message);
        dc.addParameter(details);
        return dc;
    }


    /*********** <pre>
        Log a FAILURE message. Also increments appropriate counters.
          Log a FAILURE message.  Also increments appropriate counters.
          You can optionally add an additional details description that follows the message.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        message -- Optional:NO
              The message to log.<BR/>        details -- Optional:YES
              Additional detail to add to the message.
    </UL>

     **********/
    static public DriverCommand logTestFailure (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "logTestFailure.parameters = null");
        DriverCommand dc = new DriverCommand(LOGTESTFAILURE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
        Log a SUCCESS/OK message. Also increments appropriate counters.
          Log a SUCCESS/OK message.  Also increments appropriate counters.
          You can optionally add an additional details description that follows the message.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param message  Optional:NO
              The message to log.
     @param details  Optional:YES
              Additional detail to add to the message.
     **********/
    static public DriverCommand logTestSuccess (String message, String details) {

        if ( message == null ) throw new IllegalArgumentException ( "logTestSuccess.message = null");
        DriverCommand dc = new DriverCommand(LOGTESTSUCCESS_KEYWORD);
        dc.addParameter(message);
        dc.addParameter(details);
        return dc;
    }


    /*********** <pre>
        Log a SUCCESS/OK message. Also increments appropriate counters.
          Log a SUCCESS/OK message.  Also increments appropriate counters.
          You can optionally add an additional details description that follows the message.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        message -- Optional:NO
              The message to log.<BR/>        details -- Optional:YES
              Additional detail to add to the message.
    </UL>

     **********/
    static public DriverCommand logTestSuccess (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "logTestSuccess.parameters = null");
        DriverCommand dc = new DriverCommand(LOGTESTSUCCESS_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
        Log a WARNING message. Also increments appropriate counters.
          Log a WARNING message.  Also increments appropriate counters.
          You can optionally add an additional details description that follows the message.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param message  Optional:NO
              The message to log.
     @param details  Optional:YES
              Additional detail to add to the message.
     **********/
    static public DriverCommand logTestWarning (String message, String details) {

        if ( message == null ) throw new IllegalArgumentException ( "logTestWarning.message = null");
        DriverCommand dc = new DriverCommand(LOGTESTWARNING_KEYWORD);
        dc.addParameter(message);
        dc.addParameter(details);
        return dc;
    }


    /*********** <pre>
        Log a WARNING message. Also increments appropriate counters.
          Log a WARNING message.  Also increments appropriate counters.
          You can optionally add an additional details description that follows the message.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        message -- Optional:NO
              The message to log.<BR/>        details -- Optional:YES
              Additional detail to add to the message.
    </UL>

     **********/
    static public DriverCommand logTestWarning (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "logTestWarning.parameters = null");
        DriverCommand dc = new DriverCommand(LOGTESTWARNING_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
        Log an EXPECTED WARNING message.
          Log that a WARNING was expected and, as such, is OK.
          You can optionally add an additional details description that follows the message.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param message  Optional:NO
              The message to log.
     @param details  Optional:YES
              Additional detail to add to the message.
     **********/
    static public DriverCommand logWarningOK (String message, String details) {

        if ( message == null ) throw new IllegalArgumentException ( "logWarningOK.message = null");
        DriverCommand dc = new DriverCommand(LOGWARNINGOK_KEYWORD);
        dc.addParameter(message);
        dc.addParameter(details);
        return dc;
    }


    /*********** <pre>
        Log an EXPECTED WARNING message.
          Log that a WARNING was expected and, as such, is OK.
          You can optionally add an additional details description that follows the message.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        message -- Optional:NO
              The message to log.<BR/>        details -- Optional:YES
              Additional detail to add to the message.
    </UL>

     **********/
    static public DriverCommand logWarningOK (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "logWarningOK.parameters = null");
        DriverCommand dc = new DriverCommand(LOGWARNINGOK_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Resume suspended logging.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param logName  Optional:YES  DefaultVal: 
                 The name of a Log Facility, other than the "current" one, to resume.
              
     **********/
    static public DriverCommand resumeLogging (String logName) {

        DriverCommand dc = new DriverCommand(RESUMELOGGING_KEYWORD);
        dc.addParameter(logName);
        return dc;
    }


    /*********** <pre> 
                 Suspend all logging.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param logName  Optional:YES  DefaultVal: 
                 The name of a Log Facility if other than the "current" one.
              
     **********/
    static public DriverCommand suspendLogging (String logName) {

        DriverCommand dc = new DriverCommand(SUSPENDLOGGING_KEYWORD);
        dc.addParameter(logName);
        return dc;
    }


    /*********** <pre>
                    Delete REST response (and request if it is stored) from the internal Map.
                
                    Delete a REST response (and request if it is stored) from the internal Map.
                    The REST response/request is stored internally in a Map of pair (responsID, Response).
                    
                        BE CAREFUL WHNE CALLING THIS KEYWORD! It will clean Response from internal Map, and
                        can cause other keyword failing to work.
                    
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param responseID  Optional:YES
                            The ID used to delete Response Object from internal Map.
                        
     **********/
    static public DriverCommand restCleanResponseMap (String responseID) {

        DriverCommand dc = new DriverCommand(RESTCLEANRESPONSEMAP_KEYWORD);
        dc.addParameter(responseID);
        return dc;
    }


    /*********** <pre>
					Delete a REST response (and request if stored) from the persistent storages.
				
					Delete a REST response (and request if stored) from the persistent storages.
					The REST response/request is supposed to be in the persistent storages.
					The response/request can be in more than one type of persistence storage, and
					it can be a series of variables, a file or something else, please refer to 
					explanation of parameters of keyword RestStoreResponse.
					For example, if the Response/Request is stored be in a XML file, a JSON file 
					and "a series of variables" at the same time, then this keyword will delete 
					all of them (XML file, JSON file and variables).
				    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param responseID  Optional:NO
							The ID of the Response/Request (stored in persistence storages) to be deleted.
						
     **********/
    static public DriverCommand restDeleteResponse (String responseID) {

        if ( responseID == null ) throw new IllegalArgumentException ( "restDeleteResponse.responseID = null");
        DriverCommand dc = new DriverCommand(RESTDELETERESPONSE_KEYWORD);
        dc.addParameter(responseID);
        return dc;
    }


    /*********** <pre>
                    Delete ALL REST responses (and requests if stored) from the persistent storages.
                
                    Delete ALL REST responses (and requests if stored) from the persistent storages. 
                    The REST response/request is supposed to be in the persistent storages.
                    The response/request can be in more than one type of persistence storage, and
                    it can be a series of variables, a file or something else, please refer to 
                    explanation of parameters of keyword RestStoreResponse.
                    For example, if there are 2 Responses/Requests have been persisted, 
                    one is stored be in a XML file, a JSON file and "a series of variables" at the same time,
                    the other is stored in JSON file and "a series of variables", then this keyword will delete 
                    all of them (XML file, JSON file and variables of the first Response/Request, 
                    JSON file and "a series of variables" of the second Response/Request).
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     **********/
    static public DriverCommand restDeleteResponseStore () {

        DriverCommand dc = new DriverCommand(RESTDELETERESPONSESTORE_KEYWORD);
        return dc;
    }


    /*********** <pre>
                    Load headers from a file.
                
                    This might be called before invoking a REST action, like RESTGetXML etc.
                    And the loaded headers will be used when executing that REST action 
                    if no headers are provided as parameter of that REST action.
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param headersFile  Optional:NO
                            The path to file holding headers information.
                        
     @param method  Optional:YES
                            The method is used to load the "headers" from a file.
                            If this parameter is not provided, then "headers" of all methods will be loaded. 
                        
     @param type  Optional:YES
                            The type is used to load the "headers" from a file.
                            If this parameter is not provided, then "headers" of all types will be loaded. 
                        
     **********/
    static public DriverCommand restHeadersLoad (String headersFile, String method, String type) {

        if ( headersFile == null ) throw new IllegalArgumentException ( "restHeadersLoad.headersFile = null");
        DriverCommand dc = new DriverCommand(RESTHEADERSLOAD_KEYWORD);
        dc.addParameter(headersFile);
        dc.addParameter(method);
        dc.addParameter(type);
        return dc;
    }


    /*********** <pre>
                    Load headers from a file.
                
                    This might be called before invoking a REST action, like RESTGetXML etc.
                    And the loaded headers will be used when executing that REST action 
                    if no headers are provided as parameter of that REST action.
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        headersFile -- Optional:NO
                            The path to file holding headers information.
                        <BR/>        method -- Optional:YES
                            The method is used to load the "headers" from a file.
                            If this parameter is not provided, then "headers" of all methods will be loaded. 
                        <BR/>        type -- Optional:YES
                            The type is used to load the "headers" from a file.
                            If this parameter is not provided, then "headers" of all types will be loaded. 
                        
    </UL>

     **********/
    static public DriverCommand restHeadersLoad (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "restHeadersLoad.parameters = null");
        DriverCommand dc = new DriverCommand(RESTHEADERSLOAD_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>Save a REST response into a persistent storage.
                    Retrieve a REST response according to the responseID, and store the response into
                    a persistent storage. The persistent storage can be a series of variables, a file 
                    or something else, please refer to explanation of parameters.
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param responseID  Optional:NO
                            The ID used to retrieve Response Object from internal Map.
                        
     @param variablePrefix  Optional:NO
                            The prefix of the variables to store the information of a REST response/request if parameter persistenceType is VARIABLE.
                            Or the file name holding the information of a REST response/request if parameter persistenceType is FILE.
                        
     @param storeRequest  Optional:YES  DefaultVal:FalseStore the originating Request information if this parameter is true. The default value is false.
     @param persistenceType  Optional:YES  DefaultVal:VARIABLEThe type of the persistence storage to save the Response/Request information.
     @param fileType  Optional:YES  DefaultVal:JSONThe Type of file to save Response/Request, ONLY useful when persistenceType is "FILE"
     **********/
    static public DriverCommand restStoreResponse (String responseID, String variablePrefix, String storeRequest, String persistenceType, String fileType) {

        if ( responseID == null ) throw new IllegalArgumentException ( "restStoreResponse.responseID = null");
        if ( variablePrefix == null ) throw new IllegalArgumentException ( "restStoreResponse.variablePrefix = null");
        DriverCommand dc = new DriverCommand(RESTSTORERESPONSE_KEYWORD);
        dc.addParameter(responseID);
        dc.addParameter(variablePrefix);
        dc.addParameter(storeRequest);
        dc.addParameter(persistenceType);
        dc.addParameter(fileType);
        return dc;
    }


    /*********** <pre>Save a REST response into a persistent storage.
                    Retrieve a REST response according to the responseID, and store the response into
                    a persistent storage. The persistent storage can be a series of variables, a file 
                    or something else, please refer to explanation of parameters.
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        responseID -- Optional:NO
                            The ID used to retrieve Response Object from internal Map.
                        <BR/>        variablePrefix -- Optional:NO
                            The prefix of the variables to store the information of a REST response/request if parameter persistenceType is VARIABLE.
                            Or the file name holding the information of a REST response/request if parameter persistenceType is FILE.
                        <BR/>        storeRequest -- Optional:YES  DefaultVal:FalseStore the originating Request information if this parameter is true. The default value is false.<BR/>        persistenceType -- Optional:YES  DefaultVal:VARIABLEThe type of the persistence storage to save the Response/Request information.<BR/>        fileType -- Optional:YES  DefaultVal:JSONThe Type of file to save Response/Request, ONLY useful when persistenceType is "FILE"
    </UL>

     **********/
    static public DriverCommand restStoreResponse (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "restStoreResponse.parameters = null");
        DriverCommand dc = new DriverCommand(RESTSTORERESPONSE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>Verify a REST response is what is expected.
                    Retrieve a REST response according to the responseID, and compare the response with
                    the content stored in a bench file.
                    The comparison should be defined by parameter verifyRequest, valueContains and valueCaseSensitive.
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param responseID  Optional:NO
                            The ID used to retrieve Response Object from internal Map.
                        
     @param benchFile  Optional:NO
                            The bench file for verifying a REST response.
                        
     @param fileType  Optional:YES  DefaultVal:JSONThe Type of file to save Response/Request, ONLY useful when persistenceType is "FILE"
     @param result  Optional:YES  DefaultVal:<responseID>.verification.result
                            The variable holding the verification result.
                        
     @param verifyRequest  Optional:YES  DefaultVal:FALSE
                            If it is true, then verify also the Request; otherwise only the Response will be verified.
                            The default value is 'false', which means only the Response will be verified.
                        
     @param valueContains  Optional:YES  DefaultVal:FALSE
                            If true, then verify that Response/Request field's value contains that in benchFile;
                            Otherwise, then verify that Response/Request field's value matches wholly with that in benchFile;
                            The default value is false;
                        
     @param valueCaseSensitive  Optional:YES  DefaultVal:TRUE
                            If true, then verify that Response/Request field's value matches case sensitively with that in benchFile;
                            Otherwise, then verify that Response/Request field's value matches case insensitively with that in benchFile;
                            The default value is true;
                        
     **********/
    static public DriverCommand restVerifyResponse (String responseID, String benchFile, String fileType, String result, String verifyRequest, String valueContains, String valueCaseSensitive) {

        if ( benchFile == null ) throw new IllegalArgumentException ( "restVerifyResponse.benchFile = null");
        if ( responseID == null ) throw new IllegalArgumentException ( "restVerifyResponse.responseID = null");
        DriverCommand dc = new DriverCommand(RESTVERIFYRESPONSE_KEYWORD);
        dc.addParameter(responseID);
        dc.addParameter(benchFile);
        dc.addParameter(fileType);
        dc.addParameter(result);
        dc.addParameter(verifyRequest);
        dc.addParameter(valueContains);
        dc.addParameter(valueCaseSensitive);
        return dc;
    }


    /*********** <pre>Verify a REST response is what is expected.
                    Retrieve a REST response according to the responseID, and compare the response with
                    the content stored in a bench file.
                    The comparison should be defined by parameter verifyRequest, valueContains and valueCaseSensitive.
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        responseID -- Optional:NO
                            The ID used to retrieve Response Object from internal Map.
                        <BR/>        benchFile -- Optional:NO
                            The bench file for verifying a REST response.
                        <BR/>        fileType -- Optional:YES  DefaultVal:JSONThe Type of file to save Response/Request, ONLY useful when persistenceType is "FILE"<BR/>        result -- Optional:YES  DefaultVal:<responseID>.verification.result
                            The variable holding the verification result.
                        <BR/>        verifyRequest -- Optional:YES  DefaultVal:FALSE
                            If it is true, then verify also the Request; otherwise only the Response will be verified.
                            The default value is 'false', which means only the Response will be verified.
                        <BR/>        valueContains -- Optional:YES  DefaultVal:FALSE
                            If true, then verify that Response/Request field's value contains that in benchFile;
                            Otherwise, then verify that Response/Request field's value matches wholly with that in benchFile;
                            The default value is false;
                        <BR/>        valueCaseSensitive -- Optional:YES  DefaultVal:TRUE
                            If true, then verify that Response/Request field's value matches case sensitively with that in benchFile;
                            Otherwise, then verify that Response/Request field's value matches case insensitively with that in benchFile;
                            The default value is true;
                        
    </UL>

     **********/
    static public DriverCommand restVerifyResponse (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "restVerifyResponse.parameters = null");
        DriverCommand dc = new DriverCommand(RESTVERIFYRESPONSE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>Verify a REST response contains what is expected.
                    Retrieve a REST response according to the responseID, and verify that the response contains
                    the content stored in a bench file.
                    The Contains in keyword RestVerifyResponseContains means the Response/Request contains the fields
                    defined in the bench file, that is to say not all fields of Response/Request should be matched
                    For the field's value, it should be defined by parameter valueContains and valueCaseSensitive.
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param responseID  Optional:NO
                            The ID used to retrieve Response Object from internal Map.
                        
     @param benchFile  Optional:NO
                            The bench file for verifying a REST response.
                        
     @param fileType  Optional:YES  DefaultVal:JSONThe Type of file to save Response/Request, ONLY useful when persistenceType is "FILE"
     @param result  Optional:YES  DefaultVal:<responseID>.verification.result
                            The variable holding the verification result.
                        
     @param verifyRequest  Optional:YES  DefaultVal:FALSE
                            If it is true, then verify also the Request; otherwise only the Response will be verified.
                            The default value is 'false', which means only the Response will be verified.
                        
     @param valueContains  Optional:YES  DefaultVal:FALSE
                            If true, then verify that Response/Request field's value contains that in benchFile;
                            Otherwise, then verify that Response/Request field's value matches wholly with that in benchFile;
                            The default value is false;
                        
     @param valueCaseSensitive  Optional:YES  DefaultVal:TRUE
                            If true, then verify that Response/Request field's value matches case sensitively with that in benchFile;
                            Otherwise, then verify that Response/Request field's value matches case insensitively with that in benchFile;
                            The default value is true;
                        
     **********/
    static public DriverCommand restVerifyResponseContains (String responseID, String benchFile, String fileType, String result, String verifyRequest, String valueContains, String valueCaseSensitive) {

        if ( benchFile == null ) throw new IllegalArgumentException ( "restVerifyResponseContains.benchFile = null");
        if ( responseID == null ) throw new IllegalArgumentException ( "restVerifyResponseContains.responseID = null");
        DriverCommand dc = new DriverCommand(RESTVERIFYRESPONSECONTAINS_KEYWORD);
        dc.addParameter(responseID);
        dc.addParameter(benchFile);
        dc.addParameter(fileType);
        dc.addParameter(result);
        dc.addParameter(verifyRequest);
        dc.addParameter(valueContains);
        dc.addParameter(valueCaseSensitive);
        return dc;
    }


    /*********** <pre>Verify a REST response contains what is expected.
                    Retrieve a REST response according to the responseID, and verify that the response contains
                    the content stored in a bench file.
                    The Contains in keyword RestVerifyResponseContains means the Response/Request contains the fields
                    defined in the bench file, that is to say not all fields of Response/Request should be matched
                    For the field's value, it should be defined by parameter valueContains and valueCaseSensitive.
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        responseID -- Optional:NO
                            The ID used to retrieve Response Object from internal Map.
                        <BR/>        benchFile -- Optional:NO
                            The bench file for verifying a REST response.
                        <BR/>        fileType -- Optional:YES  DefaultVal:JSONThe Type of file to save Response/Request, ONLY useful when persistenceType is "FILE"<BR/>        result -- Optional:YES  DefaultVal:<responseID>.verification.result
                            The variable holding the verification result.
                        <BR/>        verifyRequest -- Optional:YES  DefaultVal:FALSE
                            If it is true, then verify also the Request; otherwise only the Response will be verified.
                            The default value is 'false', which means only the Response will be verified.
                        <BR/>        valueContains -- Optional:YES  DefaultVal:FALSE
                            If true, then verify that Response/Request field's value contains that in benchFile;
                            Otherwise, then verify that Response/Request field's value matches wholly with that in benchFile;
                            The default value is false;
                        <BR/>        valueCaseSensitive -- Optional:YES  DefaultVal:TRUE
                            If true, then verify that Response/Request field's value matches case sensitively with that in benchFile;
                            Otherwise, then verify that Response/Request field's value matches case insensitively with that in benchFile;
                            The default value is true;
                        
    </UL>

     **********/
    static public DriverCommand restVerifyResponseContains (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "restVerifyResponseContains.parameters = null");
        DriverCommand dc = new DriverCommand(RESTVERIFYRESPONSECONTAINS_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          CleanString, for each char in string: if ((char .gt. 31) and (char .lt. 127)) keep it,
          otherwise turn it into a space
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param sourceString  Optional:NO
              sourceString (could come from a ^variable)
            
     @param resultVar  Optional:NO
              the resultVar to place the result of the
              operation into
            
     **********/
    static public DriverCommand cleanString (String sourceString, String resultVar) {

        if ( resultVar == null ) throw new IllegalArgumentException ( "cleanString.resultVar = null");
        if ( sourceString == null ) throw new IllegalArgumentException ( "cleanString.sourceString = null");
        DriverCommand dc = new DriverCommand(CLEANSTRING_KEYWORD);
        dc.addParameter(sourceString);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          CleanString, for each char in string: if ((char .gt. 31) and (char .lt. 127)) keep it,
          otherwise turn it into a space
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        sourceString -- Optional:NO
              sourceString (could come from a ^variable)
            <BR/>        resultVar -- Optional:NO
              the resultVar to place the result of the
              operation into
            
    </UL>

     **********/
    static public DriverCommand cleanString (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "cleanString.parameters = null");
        DriverCommand dc = new DriverCommand(CLEANSTRING_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Compares two strings and returns an integer specifying the
          result of the comparison.
          The java version returns 'true' or 'false' as the result.
        
          For java version, if the parameter 'regexMatch' is true, then
          the parameter 'dstString' is considered as regular expression.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param sourceString  Optional:NO
              The source string (could come from a ^variable) to compare.
            
     @param dstString  Optional:NO
              The destination string (could come from a ^variable) to compare.
            
     @param resultVar  Optional:NO
              the resultVar to place the result of the operation into
            
     @param regexMatch  Optional:YES  DefaultVal:false
              Indicates if the comparison is in regex way.
            
     **********/
    static public DriverCommand compare (String sourceString, String dstString, String resultVar, String regexMatch) {

        if ( dstString == null ) throw new IllegalArgumentException ( "compare.dstString = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "compare.resultVar = null");
        if ( sourceString == null ) throw new IllegalArgumentException ( "compare.sourceString = null");
        DriverCommand dc = new DriverCommand(COMPARE_KEYWORD);
        dc.addParameter(sourceString);
        dc.addParameter(dstString);
        dc.addParameter(resultVar);
        dc.addParameter(regexMatch);
        return dc;
    }


    /*********** <pre>
          Compares two strings and returns an integer specifying the
          result of the comparison.
          The java version returns 'true' or 'false' as the result.
        
          For java version, if the parameter 'regexMatch' is true, then
          the parameter 'dstString' is considered as regular expression.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        sourceString -- Optional:NO
              The source string (could come from a ^variable) to compare.
            <BR/>        dstString -- Optional:NO
              The destination string (could come from a ^variable) to compare.
            <BR/>        resultVar -- Optional:NO
              the resultVar to place the result of the operation into
            <BR/>        regexMatch -- Optional:YES  DefaultVal:false
              Indicates if the comparison is in regex way.
            
    </UL>

     **********/
    static public DriverCommand compare (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "compare.parameters = null");
        DriverCommand dc = new DriverCommand(COMPARE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Concatenate String1 with String2 and returns concatenated string.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param string1  Optional:NO
              string1 (could come from a ^variable)
            
     @param string2  Optional:NO
              string2 (could come from a ^variable)
            
     @param resultVar  Optional:NO
              the resultVar to place the result of the
              operation into
            
     **********/
    static public DriverCommand concatenate (String string1, String string2, String resultVar) {

        if ( resultVar == null ) throw new IllegalArgumentException ( "concatenate.resultVar = null");
        if ( string1 == null ) throw new IllegalArgumentException ( "concatenate.string1 = null");
        if ( string2 == null ) throw new IllegalArgumentException ( "concatenate.string2 = null");
        DriverCommand dc = new DriverCommand(CONCATENATE_KEYWORD);
        dc.addParameter(string1);
        dc.addParameter(string2);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          Concatenate String1 with String2 and returns concatenated string.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        string1 -- Optional:NO
              string1 (could come from a ^variable)
            <BR/>        string2 -- Optional:NO
              string2 (could come from a ^variable)
            <BR/>        resultVar -- Optional:NO
              the resultVar to place the result of the
              operation into
            
    </UL>

     **********/
    static public DriverCommand concatenate (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "concatenate.parameters = null");
        DriverCommand dc = new DriverCommand(CONCATENATE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          GetField, get a field out of a string using specified delimiter(s). Note that any leading or trailing whitespaces are still present.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param inputString  Optional:NO
              The input string which contains the field to be returned
            
     @param index  Optional:NO
              0-based index of which field to return
            
     @param delimiter  Optional:NO
              delimiter(s) - one or more single characters used as delimiters
            
     @param resultVar  Optional:NO
              the variable name to store the returned field in
            
     **********/
    static public DriverCommand getField (String inputString, String index, String delimiter, String resultVar) {

        if ( delimiter == null ) throw new IllegalArgumentException ( "getField.delimiter = null");
        if ( index == null ) throw new IllegalArgumentException ( "getField.index = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "getField.resultVar = null");
        if ( inputString == null ) throw new IllegalArgumentException ( "getField.inputString = null");
        DriverCommand dc = new DriverCommand(GETFIELD_KEYWORD);
        dc.addParameter(inputString);
        dc.addParameter(index);
        dc.addParameter(delimiter);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          GetField, get a field out of a string using specified delimiter(s). Note that any leading or trailing whitespaces are still present.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        inputString -- Optional:NO
              The input string which contains the field to be returned
            <BR/>        index -- Optional:NO
              0-based index of which field to return
            <BR/>        delimiter -- Optional:NO
              delimiter(s) - one or more single characters used as delimiters
            <BR/>        resultVar -- Optional:NO
              the variable name to store the returned field in
            
    </UL>

     **********/
    static public DriverCommand getField (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getField.parameters = null");
        DriverCommand dc = new DriverCommand(GETFIELD_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          GetFieldCount, Finds the count of all fields within the
          inputRecord found from startindex to the end of the inputRecord.  
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param string1  Optional:NO
              String1 to parse and count fields
            
     @param startindex  Optional:NO
              0-based startindex for parsing the string.
            
     @param delimiters  Optional:NO
              delimiters -- each character is treated as a separate delimiter.
            
     @param resultVar  Optional:NO
              the resultVar to place the result of the
              operation into
            
     **********/
    static public DriverCommand getFieldCount (String string1, String startindex, String delimiters, String resultVar) {

        if ( delimiters == null ) throw new IllegalArgumentException ( "getFieldCount.delimiters = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "getFieldCount.resultVar = null");
        if ( startindex == null ) throw new IllegalArgumentException ( "getFieldCount.startindex = null");
        if ( string1 == null ) throw new IllegalArgumentException ( "getFieldCount.string1 = null");
        DriverCommand dc = new DriverCommand(GETFIELDCOUNT_KEYWORD);
        dc.addParameter(string1);
        dc.addParameter(startindex);
        dc.addParameter(delimiters);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          GetFieldCount, Finds the count of all fields within the
          inputRecord found from startindex to the end of the inputRecord.  
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        string1 -- Optional:NO
              String1 to parse and count fields
            <BR/>        startindex -- Optional:NO
              0-based startindex for parsing the string.
            <BR/>        delimiters -- Optional:NO
              delimiters -- each character is treated as a separate delimiter.
            <BR/>        resultVar -- Optional:NO
              the resultVar to place the result of the
              operation into
            
    </UL>

     **********/
    static public DriverCommand getFieldCount (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getFieldCount.parameters = null");
        DriverCommand dc = new DriverCommand(GETFIELDCOUNT_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          GetFixedWidthField, Given an Input of fixed-width
          fields, return the nth(FieldID) Field  in the record.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param sourceString  Optional:NO
              sourceString (could come from a ^variable)
            
     @param fieldID  Optional:NO
              0-based field to retrieve.
              from 0.
            
     @param fixedwidth  Optional:NO
              the fixedwidth alotted for each field in the record
            
     @param resultVar  Optional:NO
              the resultVar to place the result of the
              operation into
            
     **********/
    static public DriverCommand getFixedWidthField (String sourceString, String fieldID, String fixedwidth, String resultVar) {

        if ( fieldID == null ) throw new IllegalArgumentException ( "getFixedWidthField.fieldID = null");
        if ( fixedwidth == null ) throw new IllegalArgumentException ( "getFixedWidthField.fixedwidth = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "getFixedWidthField.resultVar = null");
        if ( sourceString == null ) throw new IllegalArgumentException ( "getFixedWidthField.sourceString = null");
        DriverCommand dc = new DriverCommand(GETFIXEDWIDTHFIELD_KEYWORD);
        dc.addParameter(sourceString);
        dc.addParameter(fieldID);
        dc.addParameter(fixedwidth);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          GetFixedWidthField, Given an Input of fixed-width
          fields, return the nth(FieldID) Field  in the record.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        sourceString -- Optional:NO
              sourceString (could come from a ^variable)
            <BR/>        fieldID -- Optional:NO
              0-based field to retrieve.
              from 0.
            <BR/>        fixedwidth -- Optional:NO
              the fixedwidth alotted for each field in the record
            <BR/>        resultVar -- Optional:NO
              the resultVar to place the result of the
              operation into
            
    </UL>

     **********/
    static public DriverCommand getFixedWidthField (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getFixedWidthField.parameters = null");
        DriverCommand dc = new DriverCommand(GETFIXEDWIDTHFIELD_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>Given a sourceString of delimited fields, return the nth(FieldID) Field
      in the record from startIndex.  The startIndex and fieldID are 1 based. 
        Returns a specific field from the source string found from
        startindex to the end of the sourceString.  The field and index are 1-based.
   
      The delimiter string can contain multiple characters and this string is treated
      as a single delimiter.

      For example, if delimiter = "->" then the fields of the sourceString 
      are expected to be delimited by the full delimiter string as in:

      "field1->field2->field3"
           </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param sourceString  Optional:NO
              Source string in which to search for first delimited character
     @param fieldID  Optional:NO
              The one based index of the field to find and return.
     @param startIndex  Optional:NO
              Integer (1-based) start position for search in sourceString
     @param delimiters  Optional:NO
              String list of delimiters to find
     @param resultVar  Optional:NO
              Name of DDVariable that will receive the result.
            
     **********/
    static public DriverCommand getMultiDelimitedField (String sourceString, String fieldID, String startIndex, String delimiters, String resultVar) {

        if ( delimiters == null ) throw new IllegalArgumentException ( "getMultiDelimitedField.delimiters = null");
        if ( fieldID == null ) throw new IllegalArgumentException ( "getMultiDelimitedField.fieldID = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "getMultiDelimitedField.resultVar = null");
        if ( sourceString == null ) throw new IllegalArgumentException ( "getMultiDelimitedField.sourceString = null");
        if ( startIndex == null ) throw new IllegalArgumentException ( "getMultiDelimitedField.startIndex = null");
        DriverCommand dc = new DriverCommand(GETMULTIDELIMITEDFIELD_KEYWORD);
        dc.addParameter(sourceString);
        dc.addParameter(fieldID);
        dc.addParameter(startIndex);
        dc.addParameter(delimiters);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>Given a sourceString of delimited fields, return the nth(FieldID) Field
      in the record from startIndex.  The startIndex and fieldID are 1 based. 
        Returns a specific field from the source string found from
        startindex to the end of the sourceString.  The field and index are 1-based.
   
      The delimiter string can contain multiple characters and this string is treated
      as a single delimiter.

      For example, if delimiter = "->" then the fields of the sourceString 
      are expected to be delimited by the full delimiter string as in:

      "field1->field2->field3"
           </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        sourceString -- Optional:NO
              Source string in which to search for first delimited character<BR/>        fieldID -- Optional:NO
              The one based index of the field to find and return.<BR/>        startIndex -- Optional:NO
              Integer (1-based) start position for search in sourceString<BR/>        delimiters -- Optional:NO
              String list of delimiters to find<BR/>        resultVar -- Optional:NO
              Name of DDVariable that will receive the result.
            
    </UL>

     **********/
    static public DriverCommand getMultiDelimitedField (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getMultiDelimitedField.parameters = null");
        DriverCommand dc = new DriverCommand(GETMULTIDELIMITEDFIELD_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>Finds the count of all fields within the inputRecord found from
        startindex to the end of the inputRecord.  The field and index are 1-based.
        Finds the count of all fields within the inputRecord found from
        startindex to the end of the inputRecord.  The field and index are 1-based.
        Blank fields count The next field starts at the next
        character index even if that char is also a delimiter.
        If the last character in the inputRecord is a delimiter, then the
        field it terminates is the last field in the inputRecord.

      Field #1 index is always the same as startindex--even if the character at 
      the startindex position is a delimiter.

      The delimiter string can contain multiple characters and this string is treated
      as a single delimiter.

      For example, if delimiter = "->" then the fields of the inputRecord 
      are expected to be delimited by the full delimiter string as in:

      "field1->field2->field3"
           </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param string1  Optional:NO
              Source String in which to search for first delimited character
     @param startIndex  Optional:NO
              Integer (1-based) start position for search in inputRecord
     @param delimiters  Optional:NO
              String list of delimiters to find
     @param resultVar  Optional:NO
              Name of DDVariable to receive the result
            
     **********/
    static public DriverCommand getMultiDelimitedFieldCount (String string1, String startIndex, String delimiters, String resultVar) {

        if ( delimiters == null ) throw new IllegalArgumentException ( "getMultiDelimitedFieldCount.delimiters = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "getMultiDelimitedFieldCount.resultVar = null");
        if ( startIndex == null ) throw new IllegalArgumentException ( "getMultiDelimitedFieldCount.startIndex = null");
        if ( string1 == null ) throw new IllegalArgumentException ( "getMultiDelimitedFieldCount.string1 = null");
        DriverCommand dc = new DriverCommand(GETMULTIDELIMITEDFIELDCOUNT_KEYWORD);
        dc.addParameter(string1);
        dc.addParameter(startIndex);
        dc.addParameter(delimiters);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>Finds the count of all fields within the inputRecord found from
        startindex to the end of the inputRecord.  The field and index are 1-based.
        Finds the count of all fields within the inputRecord found from
        startindex to the end of the inputRecord.  The field and index are 1-based.
        Blank fields count The next field starts at the next
        character index even if that char is also a delimiter.
        If the last character in the inputRecord is a delimiter, then the
        field it terminates is the last field in the inputRecord.

      Field #1 index is always the same as startindex--even if the character at 
      the startindex position is a delimiter.

      The delimiter string can contain multiple characters and this string is treated
      as a single delimiter.

      For example, if delimiter = "->" then the fields of the inputRecord 
      are expected to be delimited by the full delimiter string as in:

      "field1->field2->field3"
           </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        string1 -- Optional:NO
              Source String in which to search for first delimited character<BR/>        startIndex -- Optional:NO
              Integer (1-based) start position for search in inputRecord<BR/>        delimiters -- Optional:NO
              String list of delimiters to find<BR/>        resultVar -- Optional:NO
              Name of DDVariable to receive the result
            
    </UL>

     **********/
    static public DriverCommand getMultiDelimitedFieldCount (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getMultiDelimitedFieldCount.parameters = null");
        DriverCommand dc = new DriverCommand(GETMULTIDELIMITEDFIELDCOUNT_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          GetNextDelimiterIndex, Finds the index of the first
          character matching one of the provided delimiter characters.
          The search begins at startindex within the inputRecord. 
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param string1  Optional:NO
              String1 to parse for field delimiters
            
     @param startindex  Optional:NO
              0-based startindex to begin parsing the string.
            
     @param delimiters  Optional:NO
              delimiters -- each character is treated as a separate delimiter.
            
     @param resultVar  Optional:NO
              the resultVar to place the result of the
              operation into
            
     **********/
    static public DriverCommand getNextDelimiterIndex (String string1, String startindex, String delimiters, String resultVar) {

        if ( delimiters == null ) throw new IllegalArgumentException ( "getNextDelimiterIndex.delimiters = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "getNextDelimiterIndex.resultVar = null");
        if ( startindex == null ) throw new IllegalArgumentException ( "getNextDelimiterIndex.startindex = null");
        if ( string1 == null ) throw new IllegalArgumentException ( "getNextDelimiterIndex.string1 = null");
        DriverCommand dc = new DriverCommand(GETNEXTDELIMITERINDEX_KEYWORD);
        dc.addParameter(string1);
        dc.addParameter(startindex);
        dc.addParameter(delimiters);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          GetNextDelimiterIndex, Finds the index of the first
          character matching one of the provided delimiter characters.
          The search begins at startindex within the inputRecord. 
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        string1 -- Optional:NO
              String1 to parse for field delimiters
            <BR/>        startindex -- Optional:NO
              0-based startindex to begin parsing the string.
            <BR/>        delimiters -- Optional:NO
              delimiters -- each character is treated as a separate delimiter.
            <BR/>        resultVar -- Optional:NO
              the resultVar to place the result of the
              operation into
            
    </UL>

     **********/
    static public DriverCommand getNextDelimiterIndex (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getNextDelimiterIndex.parameters = null");
        DriverCommand dc = new DriverCommand(GETNEXTDELIMITERINDEX_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          GetREDelimitedField, this command returns the requested field contained in the input string using the passed in regular expression as the delimiter(s).
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param inputString  Optional:NO
              The input string to analyze.
            
     @param index  Optional:NO
		    1-based index of the field to return from the input string.
            
     @param regExp  Optional:NO
              RegExp - This string contains a regular expression used as the delimiter(s). These should conform to the regular expressions defined in "java.util.regex.Pattern" documentation.
            
     @param resultVar  Optional:NO
              resultVar contains the requested field from the input string.
            
     **********/
    static public DriverCommand getREDelimitedField (String inputString, String index, String regExp, String resultVar) {

        if ( index == null ) throw new IllegalArgumentException ( "getREDelimitedField.index = null");
        if ( regExp == null ) throw new IllegalArgumentException ( "getREDelimitedField.regExp = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "getREDelimitedField.resultVar = null");
        if ( inputString == null ) throw new IllegalArgumentException ( "getREDelimitedField.inputString = null");
        DriverCommand dc = new DriverCommand(GETREDELIMITEDFIELD_KEYWORD);
        dc.addParameter(inputString);
        dc.addParameter(index);
        dc.addParameter(regExp);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          GetREDelimitedField, this command returns the requested field contained in the input string using the passed in regular expression as the delimiter(s).
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        inputString -- Optional:NO
              The input string to analyze.
            <BR/>        index -- Optional:NO
		    1-based index of the field to return from the input string.
            <BR/>        regExp -- Optional:NO
              RegExp - This string contains a regular expression used as the delimiter(s). These should conform to the regular expressions defined in "java.util.regex.Pattern" documentation.
            <BR/>        resultVar -- Optional:NO
              resultVar contains the requested field from the input string.
            
    </UL>

     **********/
    static public DriverCommand getREDelimitedField (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getREDelimitedField.parameters = null");
        DriverCommand dc = new DriverCommand(GETREDELIMITEDFIELD_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          GetREDelimitedFieldCount, this command returns the number of fields contained in the input string using the passed in regular expression as the delimiter(s).
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param inputString  Optional:NO
              The input string to analyze.
            
     @param index  Optional:NO
	        0-based index of where to start the analysis from. 
	        The index should be less than or equal to the length of the input string.
            
     @param regExp  Optional:NO
              RegExp - This string contains a regular expression used as the delimiter(s). These should conform to the regular expressions defined in "java.util.regex.Pattern" documentation.
            
     @param resultVar  Optional:NO
              resultVar contains the number of fields in the input string.
            
     **********/
    static public DriverCommand getREDelimitedFieldCount (String inputString, String index, String regExp, String resultVar) {

        if ( index == null ) throw new IllegalArgumentException ( "getREDelimitedFieldCount.index = null");
        if ( regExp == null ) throw new IllegalArgumentException ( "getREDelimitedFieldCount.regExp = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "getREDelimitedFieldCount.resultVar = null");
        if ( inputString == null ) throw new IllegalArgumentException ( "getREDelimitedFieldCount.inputString = null");
        DriverCommand dc = new DriverCommand(GETREDELIMITEDFIELDCOUNT_KEYWORD);
        dc.addParameter(inputString);
        dc.addParameter(index);
        dc.addParameter(regExp);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          GetREDelimitedFieldCount, this command returns the number of fields contained in the input string using the passed in regular expression as the delimiter(s).
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        inputString -- Optional:NO
              The input string to analyze.
            <BR/>        index -- Optional:NO
	        0-based index of where to start the analysis from. 
	        The index should be less than or equal to the length of the input string.
            <BR/>        regExp -- Optional:NO
              RegExp - This string contains a regular expression used as the delimiter(s). These should conform to the regular expressions defined in "java.util.regex.Pattern" documentation.
            <BR/>        resultVar -- Optional:NO
              resultVar contains the number of fields in the input string.
            
    </UL>

     **********/
    static public DriverCommand getREDelimitedFieldCount (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getREDelimitedFieldCount.parameters = null");
        DriverCommand dc = new DriverCommand(GETREDELIMITEDFIELDCOUNT_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                  Extract dynamic substring from a string using regular expressions.
                
                  
                  This command sets a DDVariable for each substring formed between regexstart and regexstop (1 match per string, currently).  Both regexstart and regexstop must be valid, non-empty strings or no matching substring will be found.
                  
                  The string is parsed, searching the substring between regexstart and regexstop matches.
                  
                  When a match is found, the string between regexstart and regexstop is saved in a newly created DDVariable with the name given in varname.
                  
                   </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param string  Optional:NO 
                  String to search for substring.
               
     @param regexStart  Optional:NO 
                  The starting regular expression.  Should not be empty.
               
     @param regexStop  Optional:NO 
                  The stopping regular expression.  Should not be empty.
               
     @param varName  Optional:NO 
                  The name of the variable to contain the substring.  
               
     **********/
    static public DriverCommand getSubstringsInString (String string, String regexStart, String regexStop, String varName) {

        if ( regexStart == null ) throw new IllegalArgumentException ( "getSubstringsInString.regexStart = null");
        if ( regexStop == null ) throw new IllegalArgumentException ( "getSubstringsInString.regexStop = null");
        if ( string == null ) throw new IllegalArgumentException ( "getSubstringsInString.string = null");
        if ( varName == null ) throw new IllegalArgumentException ( "getSubstringsInString.varName = null");
        DriverCommand dc = new DriverCommand(GETSUBSTRINGINSTRING_KEYWORD);
        dc.addParameter(string);
        dc.addParameter(regexStart);
        dc.addParameter(regexStop);
        dc.addParameter(varName);
        return dc;
    }


    /*********** <pre> 
                  Extract dynamic substring from a string using regular expressions.
                
                  
                  This command sets a DDVariable for each substring formed between regexstart and regexstop (1 match per string, currently).  Both regexstart and regexstop must be valid, non-empty strings or no matching substring will be found.
                  
                  The string is parsed, searching the substring between regexstart and regexstop matches.
                  
                  When a match is found, the string between regexstart and regexstop is saved in a newly created DDVariable with the name given in varname.
                  
                   </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        string -- Optional:NO 
                  String to search for substring.
               <BR/>        regexStart -- Optional:NO 
                  The starting regular expression.  Should not be empty.
               <BR/>        regexStop -- Optional:NO 
                  The stopping regular expression.  Should not be empty.
               <BR/>        varName -- Optional:NO 
                  The name of the variable to contain the substring.  
               
    </UL>

     **********/
    static public DriverCommand getSubstringsInString (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getSubstringsInString.parameters = null");
        DriverCommand dc = new DriverCommand(GETSUBSTRINGINSTRING_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          GetSystemEnviron, get a system environment variable value
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param string1  Optional:NO
              String1
            
     @param resultVar  Optional:NO
              the resultVar to place the result of the
              operation into
            
     **********/
    static public DriverCommand getSystemEnviron (String string1, String resultVar) {

        if ( resultVar == null ) throw new IllegalArgumentException ( "getSystemEnviron.resultVar = null");
        if ( string1 == null ) throw new IllegalArgumentException ( "getSystemEnviron.string1 = null");
        DriverCommand dc = new DriverCommand(GETSYSTEMENVIRON_KEYWORD);
        dc.addParameter(string1);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          GetSystemEnviron, get a system environment variable value
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        string1 -- Optional:NO
              String1
            <BR/>        resultVar -- Optional:NO
              the resultVar to place the result of the
              operation into
            
    </UL>

     **********/
    static public DriverCommand getSystemEnviron (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getSystemEnviron.parameters = null");
        DriverCommand dc = new DriverCommand(GETSYSTEMENVIRON_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Get the USERID of the currently logged on user as stored in System Environment variables.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param resultVar  Optional:NO
              the resultVar to place the USERID into
            
     **********/
    static public DriverCommand getSystemUser (String resultVar) {

        if ( resultVar == null ) throw new IllegalArgumentException ( "getSystemUser.resultVar = null");
        DriverCommand dc = new DriverCommand(GETSYSTEMUSER_KEYWORD);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          GetTrimmedField, get a trimmed field out of a string using specified delimiter(s).
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param string1  Optional:NO
              string1
            
     @param index  Optional:NO
              0-based index of which field to grab
            
     @param delimiter  Optional:NO
              delimiter
            
     @param resultVar  Optional:NO
              the resultVar to place the result of the
              operation into
            
     **********/
    static public DriverCommand getTrimmedField (String string1, String index, String delimiter, String resultVar) {

        if ( delimiter == null ) throw new IllegalArgumentException ( "getTrimmedField.delimiter = null");
        if ( index == null ) throw new IllegalArgumentException ( "getTrimmedField.index = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "getTrimmedField.resultVar = null");
        if ( string1 == null ) throw new IllegalArgumentException ( "getTrimmedField.string1 = null");
        DriverCommand dc = new DriverCommand(GETTRIMMEDFIELD_KEYWORD);
        dc.addParameter(string1);
        dc.addParameter(index);
        dc.addParameter(delimiter);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          GetTrimmedField, get a trimmed field out of a string using specified delimiter(s).
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        string1 -- Optional:NO
              string1
            <BR/>        index -- Optional:NO
              0-based index of which field to grab
            <BR/>        delimiter -- Optional:NO
              delimiter
            <BR/>        resultVar -- Optional:NO
              the resultVar to place the result of the
              operation into
            
    </UL>

     **********/
    static public DriverCommand getTrimmedField (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getTrimmedField.parameters = null");
        DriverCommand dc = new DriverCommand(GETTRIMMEDFIELD_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Returns the position of the first occurrence of one string
          within another string. -1 if not found at all
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param start  Optional:NO
              0-based starting offset of the sourceString to search
            
     @param sourceString  Optional:NO
              sourceString (could come from a ^variable)
            
     @param findString  Optional:NO
              findString (could come from a ^variable)
            
     @param resultVar  Optional:NO
              the resultVar to place the result of the
              operation into
            
     **********/
    static public DriverCommand index (String start, String sourceString, String findString, String resultVar) {

        if ( findString == null ) throw new IllegalArgumentException ( "index.findString = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "index.resultVar = null");
        if ( sourceString == null ) throw new IllegalArgumentException ( "index.sourceString = null");
        if ( start == null ) throw new IllegalArgumentException ( "index.start = null");
        DriverCommand dc = new DriverCommand(INDEX_KEYWORD);
        dc.addParameter(start);
        dc.addParameter(sourceString);
        dc.addParameter(findString);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          Returns the position of the first occurrence of one string
          within another string. -1 if not found at all
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        start -- Optional:NO
              0-based starting offset of the sourceString to search
            <BR/>        sourceString -- Optional:NO
              sourceString (could come from a ^variable)
            <BR/>        findString -- Optional:NO
              findString (could come from a ^variable)
            <BR/>        resultVar -- Optional:NO
              the resultVar to place the result of the
              operation into
            
    </UL>

     **********/
    static public DriverCommand index (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "index.parameters = null");
        DriverCommand dc = new DriverCommand(INDEX_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Returns a string of a specified number of characters copied from the beginning of another string.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param sourceString  Optional:NO
              sourceString (could come from a ^variable)
            
     @param length  Optional:NO
              number of chars to copy
            
     @param resultVar  Optional:NO
              the resultVar to place the result of the
              operation into
            
     **********/
    static public DriverCommand left (String sourceString, String length, String resultVar) {

        if ( length == null ) throw new IllegalArgumentException ( "left.length = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "left.resultVar = null");
        if ( sourceString == null ) throw new IllegalArgumentException ( "left.sourceString = null");
        DriverCommand dc = new DriverCommand(LEFT_KEYWORD);
        dc.addParameter(sourceString);
        dc.addParameter(length);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          Returns a string of a specified number of characters copied from the beginning of another string.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        sourceString -- Optional:NO
              sourceString (could come from a ^variable)
            <BR/>        length -- Optional:NO
              number of chars to copy
            <BR/>        resultVar -- Optional:NO
              the resultVar to place the result of the
              operation into
            
    </UL>

     **********/
    static public DriverCommand left (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "left.parameters = null");
        DriverCommand dc = new DriverCommand(LEFT_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          A new string trimmed of leading tabs and spaces.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param sourceString  Optional:NO
              sourceString (could come from a ^variable)
            
     @param resultVar  Optional:NO
              the resultVar to place the result of the
              operation into
            
     **********/
    static public DriverCommand leftTrim (String sourceString, String resultVar) {

        if ( resultVar == null ) throw new IllegalArgumentException ( "leftTrim.resultVar = null");
        if ( sourceString == null ) throw new IllegalArgumentException ( "leftTrim.sourceString = null");
        DriverCommand dc = new DriverCommand(LEFTTRIM_KEYWORD);
        dc.addParameter(sourceString);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          A new string trimmed of leading tabs and spaces.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        sourceString -- Optional:NO
              sourceString (could come from a ^variable)
            <BR/>        resultVar -- Optional:NO
              the resultVar to place the result of the
              operation into
            
    </UL>

     **********/
    static public DriverCommand leftTrim (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "leftTrim.parameters = null");
        DriverCommand dc = new DriverCommand(LEFTTRIM_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Returns the length of a string or variable.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param sourceString  Optional:NO
              sourceString (could come from a ^variable)
            
     @param resultVar  Optional:NO
              the resultVar to place the result of the length
              operation into
            
     **********/
    static public DriverCommand length (String sourceString, String resultVar) {

        if ( resultVar == null ) throw new IllegalArgumentException ( "length.resultVar = null");
        if ( sourceString == null ) throw new IllegalArgumentException ( "length.sourceString = null");
        DriverCommand dc = new DriverCommand(LENGTH_KEYWORD);
        dc.addParameter(sourceString);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          Returns the length of a string or variable.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        sourceString -- Optional:NO
              sourceString (could come from a ^variable)
            <BR/>        resultVar -- Optional:NO
              the resultVar to place the result of the length
              operation into
            
    </UL>

     **********/
    static public DriverCommand length (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "length.parameters = null");
        DriverCommand dc = new DriverCommand(LENGTH_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Replace 'find' substring with 'replace' substring
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param sourceString  Optional:NO
              sourceString (could come from a ^variable)
            
     @param findString  Optional:NO
              findString (could come from a ^variable)
            
     @param replaceString  Optional:NO
              replaceString (could come from a ^variable)
            
     @param resultVar  Optional:NO
              the resultVar to place the result of the
              operation into
            
     **********/
    static public DriverCommand replace (String sourceString, String findString, String replaceString, String resultVar) {

        if ( findString == null ) throw new IllegalArgumentException ( "replace.findString = null");
        if ( replaceString == null ) throw new IllegalArgumentException ( "replace.replaceString = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "replace.resultVar = null");
        if ( sourceString == null ) throw new IllegalArgumentException ( "replace.sourceString = null");
        DriverCommand dc = new DriverCommand(REPLACE_KEYWORD);
        dc.addParameter(sourceString);
        dc.addParameter(findString);
        dc.addParameter(replaceString);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          Replace 'find' substring with 'replace' substring
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        sourceString -- Optional:NO
              sourceString (could come from a ^variable)
            <BR/>        findString -- Optional:NO
              findString (could come from a ^variable)
            <BR/>        replaceString -- Optional:NO
              replaceString (could come from a ^variable)
            <BR/>        resultVar -- Optional:NO
              the resultVar to place the result of the
              operation into
            
    </UL>

     **********/
    static public DriverCommand replace (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "replace.parameters = null");
        DriverCommand dc = new DriverCommand(REPLACE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Returns a string of a specified number of characters copied from the end of another string.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param sourceString  Optional:NO
              sourceString (could come from a ^variable)
            
     @param length  Optional:NO
              length
            
     @param resultVar  Optional:NO
              the resultVar to place the result of the
              operation into
            
     **********/
    static public DriverCommand right (String sourceString, String length, String resultVar) {

        if ( length == null ) throw new IllegalArgumentException ( "right.length = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "right.resultVar = null");
        if ( sourceString == null ) throw new IllegalArgumentException ( "right.sourceString = null");
        DriverCommand dc = new DriverCommand(RIGHT_KEYWORD);
        dc.addParameter(sourceString);
        dc.addParameter(length);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          Returns a string of a specified number of characters copied from the end of another string.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        sourceString -- Optional:NO
              sourceString (could come from a ^variable)
            <BR/>        length -- Optional:NO
              length
            <BR/>        resultVar -- Optional:NO
              the resultVar to place the result of the
              operation into
            
    </UL>

     **********/
    static public DriverCommand right (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "right.parameters = null");
        DriverCommand dc = new DriverCommand(RIGHT_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          A new string trimmed of trailing tabs and spaces.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param sourceString  Optional:NO
              sourceString (could come from a ^variable)
            
     @param resultVar  Optional:NO
              the resultVar to place the result of the
              operation into
            
     **********/
    static public DriverCommand rightTrim (String sourceString, String resultVar) {

        if ( resultVar == null ) throw new IllegalArgumentException ( "rightTrim.resultVar = null");
        if ( sourceString == null ) throw new IllegalArgumentException ( "rightTrim.sourceString = null");
        DriverCommand dc = new DriverCommand(RIGHTTRIM_KEYWORD);
        dc.addParameter(sourceString);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          A new string trimmed of trailing tabs and spaces.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        sourceString -- Optional:NO
              sourceString (could come from a ^variable)
            <BR/>        resultVar -- Optional:NO
              the resultVar to place the result of the
              operation into
            
    </UL>

     **********/
    static public DriverCommand rightTrim (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "rightTrim.parameters = null");
        DriverCommand dc = new DriverCommand(RIGHTTRIM_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Returns a portion of a string based on character index.
        
          The substring  to retrieve starts at the specified start
          character index and ends after the specified number of characters have been copied.  If the number of characters to copy is not provided, then we will return all characters after the start index.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param sourceString  Optional:NO
              sourceString (could come from a ^variable)
            
     @param start  Optional:NO
              starting 0-based offset character position
            
     @param length  Optional:YES
              number of chars to copy.  If not provided or less than 1 then all characters after the start index will be retrieved.
            
     @param resultVar  Optional:NO
              the resultVar to place the result of the
              operation into
            
     **********/
    static public DriverCommand subString (String sourceString, String start, String length, String resultVar) {

        if ( resultVar == null ) throw new IllegalArgumentException ( "subString.resultVar = null");
        if ( sourceString == null ) throw new IllegalArgumentException ( "subString.sourceString = null");
        if ( start == null ) throw new IllegalArgumentException ( "subString.start = null");
        DriverCommand dc = new DriverCommand(SUBSTRING_KEYWORD);
        dc.addParameter(sourceString);
        dc.addParameter(start);
        dc.addParameter(length);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          Returns a portion of a string based on character index.
        
          The substring  to retrieve starts at the specified start
          character index and ends after the specified number of characters have been copied.  If the number of characters to copy is not provided, then we will return all characters after the start index.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        sourceString -- Optional:NO
              sourceString (could come from a ^variable)
            <BR/>        start -- Optional:NO
              starting 0-based offset character position
            <BR/>        length -- Optional:YES
              number of chars to copy.  If not provided or less than 1 then all characters after the start index will be retrieved.
            <BR/>        resultVar -- Optional:NO
              the resultVar to place the result of the
              operation into
            
    </UL>

     **********/
    static public DriverCommand subString (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "subString.parameters = null");
        DriverCommand dc = new DriverCommand(SUBSTRING_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Returns a copy of a string, with all letters converted to lowercase.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param sourceString  Optional:NO
              sourceString (could come from a ^variable)
            
     @param resultVar  Optional:NO
              the resultVar to place the result of the
              operation into
            
     **********/
    static public DriverCommand toLowerCase (String sourceString, String resultVar) {

        if ( resultVar == null ) throw new IllegalArgumentException ( "toLowerCase.resultVar = null");
        if ( sourceString == null ) throw new IllegalArgumentException ( "toLowerCase.sourceString = null");
        DriverCommand dc = new DriverCommand(TOLOWERCASE_KEYWORD);
        dc.addParameter(sourceString);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          Returns a copy of a string, with all letters converted to lowercase.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        sourceString -- Optional:NO
              sourceString (could come from a ^variable)
            <BR/>        resultVar -- Optional:NO
              the resultVar to place the result of the
              operation into
            
    </UL>

     **********/
    static public DriverCommand toLowerCase (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "toLowerCase.parameters = null");
        DriverCommand dc = new DriverCommand(TOLOWERCASE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Returns a copy of a string after converting all letters to uppercase.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param sourceString  Optional:NO
              sourceString (could come from a ^variable)
            
     @param resultVar  Optional:NO
              the resultVar to place the result of the
              operation into
            
     **********/
    static public DriverCommand toUpperCase (String sourceString, String resultVar) {

        if ( resultVar == null ) throw new IllegalArgumentException ( "toUpperCase.resultVar = null");
        if ( sourceString == null ) throw new IllegalArgumentException ( "toUpperCase.sourceString = null");
        DriverCommand dc = new DriverCommand(TOUPPERCASE_KEYWORD);
        dc.addParameter(sourceString);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          Returns a copy of a string after converting all letters to uppercase.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        sourceString -- Optional:NO
              sourceString (could come from a ^variable)
            <BR/>        resultVar -- Optional:NO
              the resultVar to place the result of the
              operation into
            
    </UL>

     **********/
    static public DriverCommand toUpperCase (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "toUpperCase.parameters = null");
        DriverCommand dc = new DriverCommand(TOUPPERCASE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          A new string trimmed of leading and trailing tabs and spaces.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param sourceString  Optional:NO
              sourceString (could come from a ^variable)
            
     @param resultVar  Optional:NO
              the resultVar to place the result of the
              operation into
            
     **********/
    static public DriverCommand trim (String sourceString, String resultVar) {

        if ( resultVar == null ) throw new IllegalArgumentException ( "trim.resultVar = null");
        if ( sourceString == null ) throw new IllegalArgumentException ( "trim.sourceString = null");
        DriverCommand dc = new DriverCommand(TRIM_KEYWORD);
        dc.addParameter(sourceString);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          A new string trimmed of leading and trailing tabs and spaces.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        sourceString -- Optional:NO
              sourceString (could come from a ^variable)
            <BR/>        resultVar -- Optional:NO
              the resultVar to place the result of the
              operation into
            
    </UL>

     **********/
    static public DriverCommand trim (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "trim.parameters = null");
        DriverCommand dc = new DriverCommand(TRIM_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
                Reset a "stopped" timer for reuse.
                
                Returns internal status values to a reset state. This allows the timer to be used again with 
                a new start time when StartTimer is called with the same name as this timer. It should be 
                considered an error to attempt to reset a timer that is active (not stopped).
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param timerName  Optional:NO
                        timerName (should be unique)
                        
     **********/
    static public DriverCommand resetTimer (String timerName) {

        if ( timerName == null ) throw new IllegalArgumentException ( "resetTimer.timerName = null");
        DriverCommand dc = new DriverCommand(RESETTIMER_KEYWORD);
        dc.addParameter(timerName);
        return dc;
    }


    /*********** <pre>
                Will start a unique timer.
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param timerName  Optional:NO
                        timerName (should be unique)
                        
     @param verifyValue  Optional:YES
                        verifyValue will be used to verify the timer was less then then given value. If the parameter isn't given then no check will occur.
                        
     **********/
    static public DriverCommand startTimer (String timerName, String verifyValue) {

        if ( timerName == null ) throw new IllegalArgumentException ( "startTimer.timerName = null");
        DriverCommand dc = new DriverCommand(StartTimer_KEYWORD);
        dc.addParameter(timerName);
        dc.addParameter(verifyValue);
        return dc;
    }


    /*********** <pre>
                Will start a unique timer.
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        timerName -- Optional:NO
                        timerName (should be unique)
                        <BR/>        verifyValue -- Optional:YES
                        verifyValue will be used to verify the timer was less then then given value. If the parameter isn't given then no check will occur.
                        
    </UL>

     **********/
    static public DriverCommand startTimer (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "startTimer.parameters = null");
        DriverCommand dc = new DriverCommand(StartTimer_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
                Will end a unique timer and perform a verify test if a value was supplied at start time.
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param timerName  Optional:NO
                        timerName (should be unique)
                        
     **********/
    static public DriverCommand stopTimer (String timerName) {

        if ( timerName == null ) throw new IllegalArgumentException ( "stopTimer.timerName = null");
        DriverCommand dc = new DriverCommand(StopTimer_KEYWORD);
        dc.addParameter(timerName);
        return dc;
    }


    /*********** <pre>
                Well store the timer information in the given variable.
                Information stored:
                
                  
                    .elapsed - Amount of seconds that has passed.
                  
                  
                    .startTime - Time that the timer was started.
                  
                  
                    .endTime - Time that the timer was stopped.
                  
                  
                    .failures - Number of failures that happened on the timer (based on verify commands).
                  
                
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param timerName  Optional:NO
                        timerName (should be unique)
                        
     @param variable  Optional:No
                        variable to store time information in.
                        
     **********/
    static public DriverCommand storeTimerInfo (String timerName, String variable) {

        if ( timerName == null ) throw new IllegalArgumentException ( "storeTimerInfo.timerName = null");
        if ( variable == null ) throw new IllegalArgumentException ( "storeTimerInfo.variable = null");
        DriverCommand dc = new DriverCommand(StoreTimerInfo_KEYWORD);
        dc.addParameter(timerName);
        dc.addParameter(variable);
        return dc;
    }


    /*********** <pre>
                Well store the timer information in the given variable.
                Information stored:
                
                  
                    .elapsed - Amount of seconds that has passed.
                  
                  
                    .startTime - Time that the timer was started.
                  
                  
                    .endTime - Time that the timer was stopped.
                  
                  
                    .failures - Number of failures that happened on the timer (based on verify commands).
                  
                
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        timerName -- Optional:NO
                        timerName (should be unique)
                        <BR/>        variable -- Optional:No
                        variable to store time information in.
                        
    </UL>

     **********/
    static public DriverCommand storeTimerInfo (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "storeTimerInfo.parameters = null");
        DriverCommand dc = new DriverCommand(StoreTimerInfo_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
                Well store the timer information in the given file, in csv format. Will use absolute path if given otherwise uses SAFS Project Directory.
                Information Stored:Name,Start,Stop,Duration,Timeout,Pass?
                
                  
                    Name - Name of timer
                  
                  
                    Start - Time of start
                  
                  
                    Stop - Time of stop
                  
                  
                    Duration - total elapsed time.
                  
                  
                    Timeout - 
                  
                  
                    Pass? - if the timer passed any verfiy commands.
                  
                
                Variable TimerStorageVariables can list additional variables to be stored in the file (comma delimited).
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param timerName  Optional:NO
                        timerName (should be unique)
                        
     @param fileLoc  Optional:No
                        fileLoc is the location of the file to write (including filename). If an absolute path is given then it is used other wise the default path is SAFS Project Directory. If the file exists it is just appended to.
                        
     **********/
    static public DriverCommand storeTimerInfoFile (String timerName, String fileLoc) {

        if ( fileLoc == null ) throw new IllegalArgumentException ( "storeTimerInfoFile.fileLoc = null");
        if ( timerName == null ) throw new IllegalArgumentException ( "storeTimerInfoFile.timerName = null");
        DriverCommand dc = new DriverCommand(StoreTimerInfoFile_KEYWORD);
        dc.addParameter(timerName);
        dc.addParameter(fileLoc);
        return dc;
    }


    /*********** <pre>
                Well store the timer information in the given file, in csv format. Will use absolute path if given otherwise uses SAFS Project Directory.
                Information Stored:Name,Start,Stop,Duration,Timeout,Pass?
                
                  
                    Name - Name of timer
                  
                  
                    Start - Time of start
                  
                  
                    Stop - Time of stop
                  
                  
                    Duration - total elapsed time.
                  
                  
                    Timeout - 
                  
                  
                    Pass? - if the timer passed any verfiy commands.
                  
                
                Variable TimerStorageVariables can list additional variables to be stored in the file (comma delimited).
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        timerName -- Optional:NO
                        timerName (should be unique)
                        <BR/>        fileLoc -- Optional:No
                        fileLoc is the location of the file to write (including filename). If an absolute path is given then it is used other wise the default path is SAFS Project Directory. If the file exists it is just appended to.
                        
    </UL>

     **********/
    static public DriverCommand storeTimerInfoFile (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "storeTimerInfoFile.parameters = null");
        DriverCommand dc = new DriverCommand(StoreTimerInfoFile_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
                Well verify that a timer was in the range of the given values.
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param timerName  Optional:NO
                        timerName (should be unique)
                        
     @param verifyValue1  Optional:No
                        verifyValue1 will be used as the lower bounds of the check.
                        
     @param verifyValue2  Optional:No
                        verifyValue2 will be used as the higher bounds of the check.
                        
     **********/
    static public DriverCommand verifyElapsedTimeInRange (String timerName, String verifyValue1, String verifyValue2) {

        if ( timerName == null ) throw new IllegalArgumentException ( "verifyElapsedTimeInRange.timerName = null");
        if ( verifyValue2 == null ) throw new IllegalArgumentException ( "verifyElapsedTimeInRange.verifyValue2 = null");
        if ( verifyValue1 == null ) throw new IllegalArgumentException ( "verifyElapsedTimeInRange.verifyValue1 = null");
        DriverCommand dc = new DriverCommand(VerifyElapsedTimeInRange_KEYWORD);
        dc.addParameter(timerName);
        dc.addParameter(verifyValue1);
        dc.addParameter(verifyValue2);
        return dc;
    }


    /*********** <pre>
                Well verify that a timer was in the range of the given values.
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        timerName -- Optional:NO
                        timerName (should be unique)
                        <BR/>        verifyValue1 -- Optional:No
                        verifyValue1 will be used as the lower bounds of the check.
                        <BR/>        verifyValue2 -- Optional:No
                        verifyValue2 will be used as the higher bounds of the check.
                        
    </UL>

     **********/
    static public DriverCommand verifyElapsedTimeInRange (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyElapsedTimeInRange.parameters = null");
        DriverCommand dc = new DriverCommand(VerifyElapsedTimeInRange_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
                Well verify that a timer was less then the given value.
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param timerName  Optional:NO
                        timerName (should be unique)
                        
     @param verifyValue  Optional:No
                        verifyValue will be used to as the check value.
                        
     **********/
    static public DriverCommand verifyElapsedTimeIsLess (String timerName, String verifyValue) {

        if ( timerName == null ) throw new IllegalArgumentException ( "verifyElapsedTimeIsLess.timerName = null");
        if ( verifyValue == null ) throw new IllegalArgumentException ( "verifyElapsedTimeIsLess.verifyValue = null");
        DriverCommand dc = new DriverCommand(VerifyElapsedTimeIsLess_KEYWORD);
        dc.addParameter(timerName);
        dc.addParameter(verifyValue);
        return dc;
    }


    /*********** <pre>
                Well verify that a timer was less then the given value.
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        timerName -- Optional:NO
                        timerName (should be unique)
                        <BR/>        verifyValue -- Optional:No
                        verifyValue will be used to as the check value.
                        
    </UL>

     **********/
    static public DriverCommand verifyElapsedTimeIsLess (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyElapsedTimeIsLess.parameters = null");
        DriverCommand dc = new DriverCommand(VerifyElapsedTimeIsLess_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
                Well verify that a timer was greater then the given value.
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param timerName  Optional:NO
                        timerName (should be unique)
                        
     @param verifyValue  Optional:No
                        verifyValue will be used to as the check value.
                        
     **********/
    static public DriverCommand verifyElapsedTimeIsMore (String timerName, String verifyValue) {

        if ( timerName == null ) throw new IllegalArgumentException ( "verifyElapsedTimeIsMore.timerName = null");
        if ( verifyValue == null ) throw new IllegalArgumentException ( "verifyElapsedTimeIsMore.verifyValue = null");
        DriverCommand dc = new DriverCommand(VerifyElapsedTimeIsMore_KEYWORD);
        dc.addParameter(timerName);
        dc.addParameter(verifyValue);
        return dc;
    }


    /*********** <pre>
                Well verify that a timer was greater then the given value.
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        timerName -- Optional:NO
                        timerName (should be unique)
                        <BR/>        verifyValue -- Optional:No
                        verifyValue will be used to as the check value.
                        
    </UL>

     **********/
    static public DriverCommand verifyElapsedTimeIsMore (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyElapsedTimeIsMore.parameters = null");
        DriverCommand dc = new DriverCommand(VerifyElapsedTimeIsMore_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
                Well verify that a timer was less then the given value.
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param timerName  Optional:NO
                        timerName (should be unique)
                        
     @param verifyValue  Optional:YES
                        verifyValue will be used to as the check value. If nothing is given then the value given during StartTimer will be use, if nothing was given then the value -1 is used.
                        
     **********/
    static public DriverCommand verifyTimer (String timerName, String verifyValue) {

        if ( timerName == null ) throw new IllegalArgumentException ( "verifyTimer.timerName = null");
        DriverCommand dc = new DriverCommand(VerifyTimer_KEYWORD);
        dc.addParameter(timerName);
        dc.addParameter(verifyValue);
        return dc;
    }


    /*********** <pre>
                Well verify that a timer was less then the given value.
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        timerName -- Optional:NO
                        timerName (should be unique)
                        <BR/>        verifyValue -- Optional:YES
                        verifyValue will be used to as the check value. If nothing is given then the value given during StartTimer will be use, if nothing was given then the value -1 is used.
                        
    </UL>

     **********/
    static public DriverCommand verifyTimer (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyTimer.parameters = null");
        DriverCommand dc = new DriverCommand(VerifyTimer_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
        DEPRECATED. Use StopRequirement instead.
          Log/process the end of testing associated with a user-defined Requirement.
          Currently no processing is done with this.  Only a log entry occurs.
          Use StopRequirement which now implements the original intent of this command.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param requirementID  Optional:YES
              The user-defined ID of the Requirement
     **********/
    static public DriverCommand endRequirement (String requirementID) {

        DriverCommand dc = new DriverCommand(ENDREQUIREMENT_KEYWORD);
        dc.addParameter(requirementID);
        return dc;
    }


    /*********** <pre>
        DEPRECATED. Use StopTestCase instead.
          Log/process the end of testing associated with a user-defined Testcase.
          Currently no processing is done with this.  Only a log entry occurs.
          Use StopTestCase which now implements the original intent of this command.
          
          In addition to the above, WRAFS will close the node created by the SETTESTCASE
          command in the log file.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param testCaseID  Optional:YES
              The user-defined ID of the Testcase.
     **********/
    static public DriverCommand endTestcase (String testCaseID) {

        DriverCommand dc = new DriverCommand(ENDTESTCASE_KEYWORD);
        dc.addParameter(testCaseID);
        return dc;
    }


    /*********** <pre> 
                 Replaced by CopyVariableValueEx    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param sourceVariable  Optional:NO 
                 The name of the variable to retrieve the value of
              
     @param destinationVariable  Optional:NO 
                 The name of the variable to hold the retrieved value
              
     **********/
    static public DriverCommand getVariableValueEx (String sourceVariable, String destinationVariable) {

        if ( destinationVariable == null ) throw new IllegalArgumentException ( "getVariableValueEx.destinationVariable = null");
        if ( sourceVariable == null ) throw new IllegalArgumentException ( "getVariableValueEx.sourceVariable = null");
        DriverCommand dc = new DriverCommand(GETVARIABLEVALUEEX_KEYWORD);
        dc.addParameter(sourceVariable);
        dc.addParameter(destinationVariable);
        return dc;
    }


    /*********** <pre> 
                 Replaced by CopyVariableValueEx    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        sourceVariable -- Optional:NO 
                 The name of the variable to retrieve the value of
              <BR/>        destinationVariable -- Optional:NO 
                 The name of the variable to hold the retrieved value
              
    </UL>

     **********/
    static public DriverCommand getVariableValueEx (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getVariableValueEx.parameters = null");
        DriverCommand dc = new DriverCommand(GETVARIABLEVALUEEX_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
        DEPRECATED. Use StartRequirement instead.
          Log/process the beginning of testing associated with a user-defined Requirement.
          Currently no processing is done with this.  Only a log entry occurs.
          Use StartRequirement which now implements the original intent of this command.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param requirementID  Optional:NO
              The user-defined ID of the Requirement
     @param description  Optional:YES
              A description of the Requirement
     **********/
    static public DriverCommand setRequirement (String requirementID, String description) {

        if ( requirementID == null ) throw new IllegalArgumentException ( "setRequirement.requirementID = null");
        DriverCommand dc = new DriverCommand(SETREQUIREMENT_KEYWORD);
        dc.addParameter(requirementID);
        dc.addParameter(description);
        return dc;
    }


    /*********** <pre>
        DEPRECATED. Use StartRequirement instead.
          Log/process the beginning of testing associated with a user-defined Requirement.
          Currently no processing is done with this.  Only a log entry occurs.
          Use StartRequirement which now implements the original intent of this command.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        requirementID -- Optional:NO
              The user-defined ID of the Requirement<BR/>        description -- Optional:YES
              A description of the Requirement
    </UL>

     **********/
    static public DriverCommand setRequirement (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "setRequirement.parameters = null");
        DriverCommand dc = new DriverCommand(SETREQUIREMENT_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
        DEPRECATED. Use StartTestCase instead.
          Log/process the beginning of testing associated with a user-defined Testcase.
          Currently no processing is done with this.  Only a log entry occurs.
          Use StartTestCase which now implements the original intent of this command.
          
          In addition to the above functionality, WRAFS will create a new node in the 
          log used by Winrunner. Care should be taken to only use one SETTESTCASE at a time,
          nesting these will have unpredictable results.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param testCaseID  Optional:NO
              The user-defined ID of the Testcase.
     @param description  Optional:YES
              A description of the Testcase
     **********/
    static public DriverCommand setTestcase (String testCaseID, String description) {

        if ( testCaseID == null ) throw new IllegalArgumentException ( "setTestcase.testCaseID = null");
        DriverCommand dc = new DriverCommand(SETTESTCASE_KEYWORD);
        dc.addParameter(testCaseID);
        dc.addParameter(description);
        return dc;
    }


    /*********** <pre>
        DEPRECATED. Use StartTestCase instead.
          Log/process the beginning of testing associated with a user-defined Testcase.
          Currently no processing is done with this.  Only a log entry occurs.
          Use StartTestCase which now implements the original intent of this command.
          
          In addition to the above functionality, WRAFS will create a new node in the 
          log used by Winrunner. Care should be taken to only use one SETTESTCASE at a time,
          nesting these will have unpredictable results.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        testCaseID -- Optional:NO
              The user-defined ID of the Testcase.<BR/>        description -- Optional:YES
              A description of the Testcase
    </UL>

     **********/
    static public DriverCommand setTestcase (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "setTestcase.parameters = null");
        DriverCommand dc = new DriverCommand(SETTESTCASE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


}
