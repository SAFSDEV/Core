
/******************************************************************************
 * JavaMenuFunctions.java
 *
 * Copyright (C) SAS Institute, All rights reserved.
 * General Public License: https://www.gnu.org/licenses/gpl-3.0.en.html
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   JavaMenuFunctions.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaCommandModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe JavaMenuFunctions.xml XSLJavaCommandModel.xsl -o JavaMenuFunctions.java
 *
 ******************************************************************************/ 
package org.safs.model.commands;


import org.safs.model.ComponentFunction;


public class JavaMenuFunctions {

    /*****************
    Private Singleton Instance
    ****************/
    private static final JavaMenuFunctions singleton = new JavaMenuFunctions(); 

    /*****************
    Private Constructor
    Static class needing no instantiation.
    ****************/
    private JavaMenuFunctions() {}

    /*****************
    public Singleton to access class static methods via instance
    ****************/
    public static JavaMenuFunctions getInstance() { return singleton;}

    /** "ResetMenuCache" */
    static public final String RESETMENUCACHE_KEYWORD = "ResetMenuCache";
    /** "SelectMenuItem" */
    static public final String SELECTMENUITEM_KEYWORD = "SelectMenuItem";
    /** "SelectMenuItemContains" */
    static public final String SELECTMENUITEMCONTAINS_KEYWORD = "SelectMenuItemContains";
    /** "SelectUnverifiedMenuItem" */
    static public final String SELECTUNVERIFIEDMENUITEM_KEYWORD = "SelectUnverifiedMenuItem";
    /** "VerifyMenuItem" */
    static public final String VERIFYMENUITEM_KEYWORD = "VerifyMenuItem";
    /** "VerifyMenuItemContains" */
    static public final String VERIFYMENUITEMCONTAINS_KEYWORD = "VerifyMenuItemContains";


    /*********** <pre> 
                 Reset the cache containing the content of whole menu.
               
                Reset the cache containing the content of whole menu.
                
                When we begin to manipulate a new menu, we should call this keyword to reset the cache.
                This cache is used for verification.
                
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     **********/
    static public ComponentFunction resetMenuCache (String winname, String compname) {

        if ( winname == null ) throw new IllegalArgumentException ( "resetMenuCache.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "resetMenuCache.compname = null");

        ComponentFunction cf = new ComponentFunction(RESETMENUCACHE_KEYWORD, winname, compname);
        return cf;
    }


    /*********** <pre> 
                 Action to select a menuItem according to its text value.
              
                 In RRAFS, this command will work on both JavaMenu items and JavaPopupMenu items.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:YES 
                 Case-sensitive text of menuItem to select OR an App Map reference.
              
     @param indexPath  Optional:YES 
                 The index for item of each level. It is 1-based.
              
     **********/
    static public ComponentFunction selectMenuItem (String winname, String compname, String textValue, String indexPath) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectMenuItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectMenuItem.compname = null");

        ComponentFunction cf = new ComponentFunction(SELECTMENUITEM_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        cf.addParameter(indexPath);
        return cf;
    }


    /*********** <pre> 
                 Action to select a menuItem according to its text value.
              
                 In RRAFS, this command will work on both JavaMenu items and JavaPopupMenu items.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        textValue -- Optional:YES 
                 Case-sensitive text of menuItem to select OR an App Map reference.
              <BR/>        indexPath -- Optional:YES 
                 The index for item of each level. It is 1-based.
              
    </UL>

     **********/
    static public ComponentFunction selectMenuItem(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectMenuItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectMenuItem.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectMenuItem.parameters = null");
        ComponentFunction cf = new ComponentFunction(SELECTMENUITEM_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                 Action to select a menuItem according to a partial match of its text value.
              
                 In RRAFS, this command will work on both JavaMenu items and JavaPopupMenu items.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:YES 
                 Case-insensitive substring of menuItem to select OR an App Map reference.
              
     @param indexPath  Optional:YES 
                 The index for item of each level. It is 1-based.
              
     **********/
    static public ComponentFunction selectMenuItemContains (String winname, String compname, String textValue, String indexPath) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectMenuItemContains.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectMenuItemContains.compname = null");

        ComponentFunction cf = new ComponentFunction(SELECTMENUITEMCONTAINS_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        cf.addParameter(indexPath);
        return cf;
    }


    /*********** <pre> 
                 Action to select a menuItem according to a partial match of its text value.
              
                 In RRAFS, this command will work on both JavaMenu items and JavaPopupMenu items.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        textValue -- Optional:YES 
                 Case-insensitive substring of menuItem to select OR an App Map reference.
              <BR/>        indexPath -- Optional:YES 
                 The index for item of each level. It is 1-based.
              
    </UL>

     **********/
    static public ComponentFunction selectMenuItemContains(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectMenuItemContains.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectMenuItemContains.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectMenuItemContains.parameters = null");
        ComponentFunction cf = new ComponentFunction(SELECTMENUITEMCONTAINS_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                 Action to select a menuItem according to its text value without verification of it's existance.
              
				  Action to select a menuItem according to its text value without verification of it's existance.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of menuItem to select OR an App Map reference.
              
     @param indexPath  Optional:YES 
                 The index for item of each level. It is 1-based.
              
     **********/
    static public ComponentFunction selectUnverifiedMenuItem (String winname, String compname, String textValue, String indexPath) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectUnverifiedMenuItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectUnverifiedMenuItem.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectUnverifiedMenuItem.textValue = null");
        ComponentFunction cf = new ComponentFunction(SELECTUNVERIFIEDMENUITEM_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        cf.addParameter(indexPath);
        return cf;
    }


    /*********** <pre> 
                 Action to select a menuItem according to its text value without verification of it's existance.
              
				  Action to select a menuItem according to its text value without verification of it's existance.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        textValue -- Optional:NO 
                 Case-sensitive text of menuItem to select OR an App Map reference.
              <BR/>        indexPath -- Optional:YES 
                 The index for item of each level. It is 1-based.
              
    </UL>

     **********/
    static public ComponentFunction selectUnverifiedMenuItem(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectUnverifiedMenuItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectUnverifiedMenuItem.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectUnverifiedMenuItem.parameters = null");
        ComponentFunction cf = new ComponentFunction(SELECTUNVERIFIEDMENUITEM_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
               Attempts to verify the a particular menuitem exists in a menu.
               
                The menuitem should be specified in the form 
                "Menu->Menu->MenuItem   CTRL+V" with the full text (ampersands optional), 
                spaces(if any), and keyboard shortcut text (if any).  
                (The ampersands precede any character in the menuitem that is underlined.)
                
                This command differs from the WindowFunction.VerifyMenuItem command because 
                here we are actually seeking a JavaMenu component, not a Window that contains 
                a menu.  Also, we do not currently verify any state information like the 
                WindowFunctions.VerifyMenuItem command.
                
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param menuItemText  Optional:NO 
                Menu->MenuItem hierarchy string to identify which menuitem to find.
              
     @param expectedStatus  Optional:YES 
                Expected status string (or part thereof) of the menuitem. 
              
     @param indexPath  Optional:YES 
                 The index for item of each level. It is 1-based.
              
     **********/
    static public ComponentFunction verifyMenuItem (String winname, String compname, String menuItemText, String expectedStatus, String indexPath) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyMenuItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyMenuItem.compname = null");

        if ( menuItemText == null ) throw new IllegalArgumentException ( "verifyMenuItem.menuItemText = null");
        ComponentFunction cf = new ComponentFunction(VERIFYMENUITEM_KEYWORD, winname, compname);
        cf.addParameter(menuItemText);
        cf.addParameter(expectedStatus);
        cf.addParameter(indexPath);
        return cf;
    }


    /*********** <pre> 
               Attempts to verify the a particular menuitem exists in a menu.
               
                The menuitem should be specified in the form 
                "Menu->Menu->MenuItem   CTRL+V" with the full text (ampersands optional), 
                spaces(if any), and keyboard shortcut text (if any).  
                (The ampersands precede any character in the menuitem that is underlined.)
                
                This command differs from the WindowFunction.VerifyMenuItem command because 
                here we are actually seeking a JavaMenu component, not a Window that contains 
                a menu.  Also, we do not currently verify any state information like the 
                WindowFunctions.VerifyMenuItem command.
                
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        menuItemText -- Optional:NO 
                Menu->MenuItem hierarchy string to identify which menuitem to find.
              <BR/>        expectedStatus -- Optional:YES 
                Expected status string (or part thereof) of the menuitem. 
              <BR/>        indexPath -- Optional:YES 
                 The index for item of each level. It is 1-based.
              
    </UL>

     **********/
    static public ComponentFunction verifyMenuItem(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyMenuItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyMenuItem.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyMenuItem.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYMENUITEM_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
               Attempts to verify the existence of a menuitem found by partial text match.
               
                Attempts to verify the existence of a menuitem found by partial text match.
                The menuitem should be specified in the form "Menu->Menu->MenuItem".  
                (Optional ampersands precede any character in the menuitem that is underlined.)
                
                This command differs from the WindowFunction.VerifyMenuItemContains command because 
                here we are actually seeking a JavaMenu component, not a Window that contains 
                a menu.  Also, we do not currently verify any state information like the 
                WindowFunctions.VerifyMenuItemContains command.
                
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param menuItemText  Optional:NO 
                Menu->MenuItem hierarchy string to identify which menuitem to find.
              
     @param expectedStatus  Optional:YES 
                Expected status string (or part thereof) of the menuitem. 
              
     @param indexPath  Optional:YES 
                 The index for item of each level. It is 1-based.
              
     **********/
    static public ComponentFunction verifyMenuItemContains (String winname, String compname, String menuItemText, String expectedStatus, String indexPath) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyMenuItemContains.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyMenuItemContains.compname = null");

        if ( menuItemText == null ) throw new IllegalArgumentException ( "verifyMenuItemContains.menuItemText = null");
        ComponentFunction cf = new ComponentFunction(VERIFYMENUITEMCONTAINS_KEYWORD, winname, compname);
        cf.addParameter(menuItemText);
        cf.addParameter(expectedStatus);
        cf.addParameter(indexPath);
        return cf;
    }


    /*********** <pre> 
               Attempts to verify the existence of a menuitem found by partial text match.
               
                Attempts to verify the existence of a menuitem found by partial text match.
                The menuitem should be specified in the form "Menu->Menu->MenuItem".  
                (Optional ampersands precede any character in the menuitem that is underlined.)
                
                This command differs from the WindowFunction.VerifyMenuItemContains command because 
                here we are actually seeking a JavaMenu component, not a Window that contains 
                a menu.  Also, we do not currently verify any state information like the 
                WindowFunctions.VerifyMenuItemContains command.
                
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        menuItemText -- Optional:NO 
                Menu->MenuItem hierarchy string to identify which menuitem to find.
              <BR/>        expectedStatus -- Optional:YES 
                Expected status string (or part thereof) of the menuitem. 
              <BR/>        indexPath -- Optional:YES 
                 The index for item of each level. It is 1-based.
              
    </UL>

     **********/
    static public ComponentFunction verifyMenuItemContains(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyMenuItemContains.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyMenuItemContains.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyMenuItemContains.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYMENUITEMCONTAINS_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


}
