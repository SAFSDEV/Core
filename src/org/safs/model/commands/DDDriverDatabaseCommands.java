
/******************************************************************************
 * DDDriverDatabaseCommands.java
 *
 * Copyright (c) by SAS Institute Inc., Cary, NC 27513
 * General Public License: http://www.opensource.org/licenses/gpl-license.php
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   DDDriverDatabaseCommands.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaCommandModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe DDDriverDatabaseCommands.xml XSLJavaCommandModel.xsl -o DDDriverDatabaseCommands.java
 *
 ******************************************************************************/ 
package org.safs.model.commands;


import org.safs.model.DriverCommand;


public class DDDriverDatabaseCommands {

    /*****************
    Private Singleton Instance
    ****************/
    private static final DDDriverDatabaseCommands singleton = new DDDriverDatabaseCommands(); 

    /*****************
    Private Constructor
    Static class needing no instantiation.
    ****************/
    private DDDriverDatabaseCommands() {}

    /*****************
    public Singleton to access class static methods via instance
    ****************/
    public static DDDriverDatabaseCommands getInstance() { return singleton;}

    /** "CopyDBTableColumnToFile" */
    static public final String COPYDBTABLECOLUMNTOFILE_KEYWORD = "CopyDBTableColumnToFile";
    /** "CopyDBTableToFile" */
    static public final String COPYDBTABLETOFILE_KEYWORD = "CopyDBTableToFile";
    /** "DeleteDBTableRecords" */
    static public final String DELETEDBTABLERECORDS_KEYWORD = "DeleteDBTableRecords";
    /** "ExecSQLQuery" */
    static public final String EXECSQLQUERY_KEYWORD = "ExecSQLQuery";
    /** "GetDBTableColumnCount" */
    static public final String GETDBTABLECOLUMNCOUNT_KEYWORD = "GetDBTableColumnCount";
    /** "GetDBTableRowCount" */
    static public final String GETDBTABLEROWCOUNT_KEYWORD = "GetDBTableRowCount";
    /** "GetDBValue" */
    static public final String GETDBVALUE_KEYWORD = "GetDBValue";
    /** "SetJdbcDriver" */
    static public final String SETJDBCDRIVER_KEYWORD = "SetJdbcDriver";
    /** "VerifyDatabaseNullValue" */
    static public final String VERIFYDATABASENULLVALUE_KEYWORD = "VerifyDatabaseNullValue";
    /** "VerifyDatabaseValue" */
    static public final String VERIFYDATABASEVALUE_KEYWORD = "VerifyDatabaseValue";
    /** "VerifyDBNullValue" */
    static public final String VERIFYDBNULLVALUE_KEYWORD = "VerifyDBNullValue";
    /** "VerifyDBValue" */
    static public final String VERIFYDBVALUE_KEYWORD = "VerifyDBValue";


    /*********** <pre> 
              This routine will copy the contents of one or more DBTable column(s) to a file.
              
                 This routine will export the contents of one or more DBTable column(s) to
                 a delimeted file. If columnDelimiter is omitted, a horizontal tab is used
                 to delimit fields.
                 
                 A data source name  and Query String is required. You also have to specify
                 a variable to get the status code.  And optionally user id and password (this is
                 because some drivers don't need a user/password).
                 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param aDBAlias  Optional:NO 
                 not used
              
     @param aTableAlias  Optional:NO 
                 not used
              
     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param fileOut  Optional:NO 
                 Name of the output file. 
              
     @param sQLQuery  Optional:NO 
                 The file will contain the results of the executed Query. The query is NOT validated 
                 by this function.
              
     @param directoryOut  Optional:YES 
                 OPTIONAL parameter. If not specified the file will be stored in the default 
                 test directory
              
     @param sQLStatus  Optional:YES 
                 A variable which holds the current SQL run status.
              
     @param delimiter  Optional:YES 
                 Optional Delimiter to be used between columns written to file.
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     **********/
    static public DriverCommand copyDBTableColumnToFile (String aDBAlias, String aTableAlias, String dBSourceName, String fileOut, String sQLQuery, String directoryOut, String sQLStatus, String delimiter, String userID, String password) {

        if ( aDBAlias == null ) throw new IllegalArgumentException ( "copyDBTableColumnToFile.aDBAlias = null");
        if ( aTableAlias == null ) throw new IllegalArgumentException ( "copyDBTableColumnToFile.aTableAlias = null");
        if ( dBSourceName == null ) throw new IllegalArgumentException ( "copyDBTableColumnToFile.dBSourceName = null");
        if ( fileOut == null ) throw new IllegalArgumentException ( "copyDBTableColumnToFile.fileOut = null");
        if ( sQLQuery == null ) throw new IllegalArgumentException ( "copyDBTableColumnToFile.sQLQuery = null");
        DriverCommand dc = new DriverCommand(COPYDBTABLECOLUMNTOFILE_KEYWORD);
        dc.addParameter(aDBAlias);
        dc.addParameter(aTableAlias);
        dc.addParameter(dBSourceName);
        dc.addParameter(fileOut);
        dc.addParameter(sQLQuery);
        dc.addParameter(directoryOut);
        dc.addParameter(sQLStatus);
        dc.addParameter(delimiter);
        dc.addParameter(userID);
        dc.addParameter(password);
        return dc;
    }


    /*********** <pre> 
              This routine will copy the contents of one or more DBTable column(s) to a file.
              
                 This routine will export the contents of one or more DBTable column(s) to
                 a delimeted file. If columnDelimiter is omitted, a horizontal tab is used
                 to delimit fields.
                 
                 A data source name  and Query String is required. You also have to specify
                 a variable to get the status code.  And optionally user id and password (this is
                 because some drivers don't need a user/password).
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        aDBAlias -- Optional:NO 
                 not used
              <BR/>        aTableAlias -- Optional:NO 
                 not used
              <BR/>        dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>        fileOut -- Optional:NO 
                 Name of the output file. 
              <BR/>        sQLQuery -- Optional:NO 
                 The file will contain the results of the executed Query. The query is NOT validated 
                 by this function.
              <BR/>        directoryOut -- Optional:YES 
                 OPTIONAL parameter. If not specified the file will be stored in the default 
                 test directory
              <BR/>        sQLStatus -- Optional:YES 
                 A variable which holds the current SQL run status.
              <BR/>        delimiter -- Optional:YES 
                 Optional Delimiter to be used between columns written to file.
              <BR/>        userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>        password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              
    </UL>

     **********/
    static public DriverCommand copyDBTableColumnToFile (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "copyDBTableColumnToFile.parameters = null");
        DriverCommand dc = new DriverCommand(COPYDBTABLECOLUMNTOFILE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
              This routine will copy the contents of a DBTable  to a file.
              
                 This routine will export the contents of a DBTable  to a delimeted file.
                 
                 A data source name  and Query String is required. You also have to specify
                 a variable to get the status code.  And optionally user id and password (this is
                 because some drivers don't need a user/password).
                 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param aDBAlias  Optional:NO 
                 not used
              
     @param aTableAlias  Optional:NO 
                 not used
              
     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param fileOut  Optional:NO 
                 Name of the output file. 
              
     @param dBTableName  Optional:NO 
                 Name of the TABLE to access within the DBSourceName
           
     @param columnCount  Optional:YES 
                 If specified the output file will contain only the number of columns specified.
              
     @param rowCount  Optional:YES 
                 If specified the output file will contain only the number of rows specified. 
              
     @param sQLQuery  Optional:YES 
                 OPTIONAL parameter. If specified, the file will contain the results of the
                 executed Query. The query is NOT validated by this
                 function. If this is provided, the the DBTableName
                 must be ""
              
     @param delimiter  Optional:YES 
                 OPTIONAL parameter. If not specified the default ',' seperator will be used.
              
     @param directoryOut  Optional:YES 
                 OPTIONAL parameter. If not specified the file will be stored in the default 
                 test directory
              
     @param sQLStatus  Optional:YES 
                 A variable which holds the current SQL run status.
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     **********/
    static public DriverCommand copyDBTableToFile (String aDBAlias, String aTableAlias, String dBSourceName, String fileOut, String dBTableName, String columnCount, String rowCount, String sQLQuery, String delimiter, String directoryOut, String sQLStatus, String userID, String password) {

        if ( aDBAlias == null ) throw new IllegalArgumentException ( "copyDBTableToFile.aDBAlias = null");
        if ( aTableAlias == null ) throw new IllegalArgumentException ( "copyDBTableToFile.aTableAlias = null");
        if ( dBSourceName == null ) throw new IllegalArgumentException ( "copyDBTableToFile.dBSourceName = null");
        if ( dBTableName == null ) throw new IllegalArgumentException ( "copyDBTableToFile.dBTableName = null");
        if ( fileOut == null ) throw new IllegalArgumentException ( "copyDBTableToFile.fileOut = null");
        DriverCommand dc = new DriverCommand(COPYDBTABLETOFILE_KEYWORD);
        dc.addParameter(aDBAlias);
        dc.addParameter(aTableAlias);
        dc.addParameter(dBSourceName);
        dc.addParameter(fileOut);
        dc.addParameter(dBTableName);
        dc.addParameter(columnCount);
        dc.addParameter(rowCount);
        dc.addParameter(sQLQuery);
        dc.addParameter(delimiter);
        dc.addParameter(directoryOut);
        dc.addParameter(sQLStatus);
        dc.addParameter(userID);
        dc.addParameter(password);
        return dc;
    }


    /*********** <pre> 
              This routine will copy the contents of a DBTable  to a file.
              
                 This routine will export the contents of a DBTable  to a delimeted file.
                 
                 A data source name  and Query String is required. You also have to specify
                 a variable to get the status code.  And optionally user id and password (this is
                 because some drivers don't need a user/password).
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        aDBAlias -- Optional:NO 
                 not used
              <BR/>        aTableAlias -- Optional:NO 
                 not used
              <BR/>        dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>        fileOut -- Optional:NO 
                 Name of the output file. 
              <BR/>        dBTableName -- Optional:NO 
                 Name of the TABLE to access within the DBSourceName
           <BR/>        columnCount -- Optional:YES 
                 If specified the output file will contain only the number of columns specified.
              <BR/>        rowCount -- Optional:YES 
                 If specified the output file will contain only the number of rows specified. 
              <BR/>        sQLQuery -- Optional:YES 
                 OPTIONAL parameter. If specified, the file will contain the results of the
                 executed Query. The query is NOT validated by this
                 function. If this is provided, the the DBTableName
                 must be ""
              <BR/>        delimiter -- Optional:YES 
                 OPTIONAL parameter. If not specified the default ',' seperator will be used.
              <BR/>        directoryOut -- Optional:YES 
                 OPTIONAL parameter. If not specified the file will be stored in the default 
                 test directory
              <BR/>        sQLStatus -- Optional:YES 
                 A variable which holds the current SQL run status.
              <BR/>        userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>        password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              
    </UL>

     **********/
    static public DriverCommand copyDBTableToFile (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "copyDBTableToFile.parameters = null");
        DriverCommand dc = new DriverCommand(COPYDBTABLETOFILE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Deletes records in a database table
              
                 Deletes records in a database table.
                 
                 A table name is required. You also have to specify data source name,
                 and optionally user id and password (this is because some drivers
                 don't need a user/password).
                 
                 A query condition can be included. It can be any 
                 valid expression allowed by the WHERE clause of the DELETE FROM sentence of the SQL driver
                 you are using. For example: "CliBal > 100000 and CliCat = 'C'". 
                 Including "where" in the expression itself is optional.  It will 
                 be prefixed to the expression if it is not provided.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param aDBAlias  Optional:NO 
                 not used
              
     @param aTableAlias  Optional:NO 
                 not used
              
     @param dBTableName  Optional:NO 
                 Name of the TABLE to access within the DBSourceName
     @param dBQueryCond  Optional:NO 
                 Expression allowed by the WHERE clause of the DELETE FROM sentence of the SQL driver
              
     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     @param sQLStatus  Optional:YES 
                 SQL status code as a result of executing the query gets stored in this variable
              
     **********/
    static public DriverCommand deleteDBTableRecords (String aDBAlias, String aTableAlias, String dBTableName, String dBQueryCond, String dBSourceName, String userID, String password, String sQLStatus) {

        if ( aDBAlias == null ) throw new IllegalArgumentException ( "deleteDBTableRecords.aDBAlias = null");
        if ( aTableAlias == null ) throw new IllegalArgumentException ( "deleteDBTableRecords.aTableAlias = null");
        if ( dBQueryCond == null ) throw new IllegalArgumentException ( "deleteDBTableRecords.dBQueryCond = null");
        if ( dBSourceName == null ) throw new IllegalArgumentException ( "deleteDBTableRecords.dBSourceName = null");
        if ( dBTableName == null ) throw new IllegalArgumentException ( "deleteDBTableRecords.dBTableName = null");
        DriverCommand dc = new DriverCommand(DELETEDBTABLERECORDS_KEYWORD);
        dc.addParameter(aDBAlias);
        dc.addParameter(aTableAlias);
        dc.addParameter(dBTableName);
        dc.addParameter(dBQueryCond);
        dc.addParameter(dBSourceName);
        dc.addParameter(userID);
        dc.addParameter(password);
        dc.addParameter(sQLStatus);
        return dc;
    }


    /*********** <pre> 
                 Deletes records in a database table
              
                 Deletes records in a database table.
                 
                 A table name is required. You also have to specify data source name,
                 and optionally user id and password (this is because some drivers
                 don't need a user/password).
                 
                 A query condition can be included. It can be any 
                 valid expression allowed by the WHERE clause of the DELETE FROM sentence of the SQL driver
                 you are using. For example: "CliBal > 100000 and CliCat = 'C'". 
                 Including "where" in the expression itself is optional.  It will 
                 be prefixed to the expression if it is not provided.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        aDBAlias -- Optional:NO 
                 not used
              <BR/>        aTableAlias -- Optional:NO 
                 not used
              <BR/>        dBTableName -- Optional:NO 
                 Name of the TABLE to access within the DBSourceName<BR/>        dBQueryCond -- Optional:NO 
                 Expression allowed by the WHERE clause of the DELETE FROM sentence of the SQL driver
              <BR/>        dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>        userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>        password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              <BR/>        sQLStatus -- Optional:YES 
                 SQL status code as a result of executing the query gets stored in this variable
              
    </UL>

     **********/
    static public DriverCommand deleteDBTableRecords (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "deleteDBTableRecords.parameters = null");
        DriverCommand dc = new DriverCommand(DELETEDBTABLERECORDS_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Executes the query provided in a queryStr on the database table.
              
                 Executes the query in a database table.
                 
                 A data source name  and Query String is required. You also have to specify
                 a variable to get the status code.  And optionally user id and password (this is
                 because some drivers don't need a user/password).
                 
                 Use this command with caution.  It doesn't return any value back other than the
                 SQL Status code.  So, remember not to use 'SELECT' command inside the queryStr.
                 It should rather be used to do an 'UPDATE', 'INSERT' or 'DELETE'.
                  
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param aDBAlias  Optional:NO 
                 not used
              
     @param aTableAlias  Optional:NO 
                 not used
              
     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param queryStr  Optional:NO 
                 Actual query stored in a queryStr.
              
     @param sQLStatusCode  Optional:NO 
                 SQL status code as a result of executing the query.
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     **********/
    static public DriverCommand execSQLQuery (String aDBAlias, String aTableAlias, String dBSourceName, String queryStr, String sQLStatusCode, String userID, String password) {

        if ( aDBAlias == null ) throw new IllegalArgumentException ( "execSQLQuery.aDBAlias = null");
        if ( aTableAlias == null ) throw new IllegalArgumentException ( "execSQLQuery.aTableAlias = null");
        if ( dBSourceName == null ) throw new IllegalArgumentException ( "execSQLQuery.dBSourceName = null");
        if ( queryStr == null ) throw new IllegalArgumentException ( "execSQLQuery.queryStr = null");
        if ( sQLStatusCode == null ) throw new IllegalArgumentException ( "execSQLQuery.sQLStatusCode = null");
        DriverCommand dc = new DriverCommand(EXECSQLQUERY_KEYWORD);
        dc.addParameter(aDBAlias);
        dc.addParameter(aTableAlias);
        dc.addParameter(dBSourceName);
        dc.addParameter(queryStr);
        dc.addParameter(sQLStatusCode);
        dc.addParameter(userID);
        dc.addParameter(password);
        return dc;
    }


    /*********** <pre> 
                 Executes the query provided in a queryStr on the database table.
              
                 Executes the query in a database table.
                 
                 A data source name  and Query String is required. You also have to specify
                 a variable to get the status code.  And optionally user id and password (this is
                 because some drivers don't need a user/password).
                 
                 Use this command with caution.  It doesn't return any value back other than the
                 SQL Status code.  So, remember not to use 'SELECT' command inside the queryStr.
                 It should rather be used to do an 'UPDATE', 'INSERT' or 'DELETE'.
                  
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        aDBAlias -- Optional:NO 
                 not used
              <BR/>        aTableAlias -- Optional:NO 
                 not used
              <BR/>        dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>        queryStr -- Optional:NO 
                 Actual query stored in a queryStr.
              <BR/>        sQLStatusCode -- Optional:NO 
                 SQL status code as a result of executing the query.
              <BR/>        userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>        password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              
    </UL>

     **********/
    static public DriverCommand execSQLQuery (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "execSQLQuery.parameters = null");
        DriverCommand dc = new DriverCommand(EXECSQLQUERY_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Executes the query in a specified database table and returns the total column count.
              
                 Executes the query in a specified database table and returns the total column count.
                 
                 A data source name  and Table name are required. You also have to specify a 
                 variable to get the result of the SQL and status code.  And optionally user id 
                 and password (this is because some drivers don't need a user/password).
                 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param aDBAlias  Optional:NO 
                 not used
              
     @param aTableAlias  Optional:NO 
                 not used
              
     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param dBTableName  Optional:NO 
                 Name of the TABLE to access within the DBSourceName
           
     @param columnCount  Optional:NO 
                 SQL result get stored in this return variable.
              
     @param sQLStatusCode  Optional:NO 
                 SQL status code as a result of executing the query.
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     **********/
    static public DriverCommand getDBTableColumnCount (String aDBAlias, String aTableAlias, String dBSourceName, String dBTableName, String columnCount, String sQLStatusCode, String userID, String password) {

        if ( aDBAlias == null ) throw new IllegalArgumentException ( "getDBTableColumnCount.aDBAlias = null");
        if ( aTableAlias == null ) throw new IllegalArgumentException ( "getDBTableColumnCount.aTableAlias = null");
        if ( columnCount == null ) throw new IllegalArgumentException ( "getDBTableColumnCount.columnCount = null");
        if ( dBSourceName == null ) throw new IllegalArgumentException ( "getDBTableColumnCount.dBSourceName = null");
        if ( dBTableName == null ) throw new IllegalArgumentException ( "getDBTableColumnCount.dBTableName = null");
        if ( sQLStatusCode == null ) throw new IllegalArgumentException ( "getDBTableColumnCount.sQLStatusCode = null");
        DriverCommand dc = new DriverCommand(GETDBTABLECOLUMNCOUNT_KEYWORD);
        dc.addParameter(aDBAlias);
        dc.addParameter(aTableAlias);
        dc.addParameter(dBSourceName);
        dc.addParameter(dBTableName);
        dc.addParameter(columnCount);
        dc.addParameter(sQLStatusCode);
        dc.addParameter(userID);
        dc.addParameter(password);
        return dc;
    }


    /*********** <pre> 
                 Executes the query in a specified database table and returns the total column count.
              
                 Executes the query in a specified database table and returns the total column count.
                 
                 A data source name  and Table name are required. You also have to specify a 
                 variable to get the result of the SQL and status code.  And optionally user id 
                 and password (this is because some drivers don't need a user/password).
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        aDBAlias -- Optional:NO 
                 not used
              <BR/>        aTableAlias -- Optional:NO 
                 not used
              <BR/>        dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>        dBTableName -- Optional:NO 
                 Name of the TABLE to access within the DBSourceName
           <BR/>        columnCount -- Optional:NO 
                 SQL result get stored in this return variable.
              <BR/>        sQLStatusCode -- Optional:NO 
                 SQL status code as a result of executing the query.
              <BR/>        userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>        password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              
    </UL>

     **********/
    static public DriverCommand getDBTableColumnCount (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getDBTableColumnCount.parameters = null");
        DriverCommand dc = new DriverCommand(GETDBTABLECOLUMNCOUNT_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Executes the query in a database table.
              
                 Executes the query in a database table.
                 
                 A data source name  and Query String is required. You also have to specify
                 a variable to get the status code.  And optionally user id and password (this is
                 because some drivers don't need a user/password).
                 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param aDBAlias  Optional:NO 
                 not used
              
     @param aTableAlias  Optional:NO 
                 not used
              
     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param dBTableName  Optional:NO 
                 Name of the TABLE to access within the DBSourceName
           
     @param rowCount  Optional:NO 
                 SQL result get stored in this return variable.
              
     @param sQLStatusCode  Optional:NO 
                 SQL status code as a result of executing the query.
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     **********/
    static public DriverCommand getDBTableRowCount (String aDBAlias, String aTableAlias, String dBSourceName, String dBTableName, String rowCount, String sQLStatusCode, String userID, String password) {

        if ( aDBAlias == null ) throw new IllegalArgumentException ( "getDBTableRowCount.aDBAlias = null");
        if ( aTableAlias == null ) throw new IllegalArgumentException ( "getDBTableRowCount.aTableAlias = null");
        if ( dBSourceName == null ) throw new IllegalArgumentException ( "getDBTableRowCount.dBSourceName = null");
        if ( dBTableName == null ) throw new IllegalArgumentException ( "getDBTableRowCount.dBTableName = null");
        if ( rowCount == null ) throw new IllegalArgumentException ( "getDBTableRowCount.rowCount = null");
        if ( sQLStatusCode == null ) throw new IllegalArgumentException ( "getDBTableRowCount.sQLStatusCode = null");
        DriverCommand dc = new DriverCommand(GETDBTABLEROWCOUNT_KEYWORD);
        dc.addParameter(aDBAlias);
        dc.addParameter(aTableAlias);
        dc.addParameter(dBSourceName);
        dc.addParameter(dBTableName);
        dc.addParameter(rowCount);
        dc.addParameter(sQLStatusCode);
        dc.addParameter(userID);
        dc.addParameter(password);
        return dc;
    }


    /*********** <pre> 
                 Executes the query in a database table.
              
                 Executes the query in a database table.
                 
                 A data source name  and Query String is required. You also have to specify
                 a variable to get the status code.  And optionally user id and password (this is
                 because some drivers don't need a user/password).
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        aDBAlias -- Optional:NO 
                 not used
              <BR/>        aTableAlias -- Optional:NO 
                 not used
              <BR/>        dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>        dBTableName -- Optional:NO 
                 Name of the TABLE to access within the DBSourceName
           <BR/>        rowCount -- Optional:NO 
                 SQL result get stored in this return variable.
              <BR/>        sQLStatusCode -- Optional:NO 
                 SQL status code as a result of executing the query.
              <BR/>        userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>        password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              
    </UL>

     **********/
    static public DriverCommand getDBTableRowCount (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getDBTableRowCount.parameters = null");
        DriverCommand dc = new DriverCommand(GETDBTABLEROWCOUNT_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Executes the query and returns the case-sensitive value as result of the execution.
              
                 Executes the query specified in the queryStr and returns the case-sensitive value
                 as result of the execution.
                 
                 To return the value, it executes a SQL query sentence using a data source to 
                 connect to the data base (using a 'SELECT').
                 
                 A queryStr and the two return variables to store the query result and SQL Status code
                 are required.  You also have to specify data source name and optionally user id and
                 password (this is because some drivers don't need a user/password).
                 
                 If the query returns more than one record, the returned value is the corresponding to the
                 first one, unless the field name be something like COUNT(*) or SUM(InvoiceTot).
                 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param aDBAlias  Optional:NO 
                 not used
              
     @param aTableAlias  Optional:NO 
                 not used
              
     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param queryStr  Optional:NO
                 Actual query stored in a queryStr.
              
     @param queryResult  Optional:NO 
                 SQL result get stored in this return variable.
              
     @param sQLStatusCode  Optional:NO 
                 SQL status code as a result of executing the query.
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     **********/
    static public DriverCommand getDBValue (String aDBAlias, String aTableAlias, String dBSourceName, String queryStr, String queryResult, String sQLStatusCode, String userID, String password) {

        if ( aDBAlias == null ) throw new IllegalArgumentException ( "getDBValue.aDBAlias = null");
        if ( aTableAlias == null ) throw new IllegalArgumentException ( "getDBValue.aTableAlias = null");
        if ( dBSourceName == null ) throw new IllegalArgumentException ( "getDBValue.dBSourceName = null");
        if ( queryResult == null ) throw new IllegalArgumentException ( "getDBValue.queryResult = null");
        if ( queryStr == null ) throw new IllegalArgumentException ( "getDBValue.queryStr = null");
        if ( sQLStatusCode == null ) throw new IllegalArgumentException ( "getDBValue.sQLStatusCode = null");
        DriverCommand dc = new DriverCommand(GETDBVALUE_KEYWORD);
        dc.addParameter(aDBAlias);
        dc.addParameter(aTableAlias);
        dc.addParameter(dBSourceName);
        dc.addParameter(queryStr);
        dc.addParameter(queryResult);
        dc.addParameter(sQLStatusCode);
        dc.addParameter(userID);
        dc.addParameter(password);
        return dc;
    }


    /*********** <pre> 
                 Executes the query and returns the case-sensitive value as result of the execution.
              
                 Executes the query specified in the queryStr and returns the case-sensitive value
                 as result of the execution.
                 
                 To return the value, it executes a SQL query sentence using a data source to 
                 connect to the data base (using a 'SELECT').
                 
                 A queryStr and the two return variables to store the query result and SQL Status code
                 are required.  You also have to specify data source name and optionally user id and
                 password (this is because some drivers don't need a user/password).
                 
                 If the query returns more than one record, the returned value is the corresponding to the
                 first one, unless the field name be something like COUNT(*) or SUM(InvoiceTot).
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        aDBAlias -- Optional:NO 
                 not used
              <BR/>        aTableAlias -- Optional:NO 
                 not used
              <BR/>        dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>        queryStr -- Optional:NO
                 Actual query stored in a queryStr.
              <BR/>        queryResult -- Optional:NO 
                 SQL result get stored in this return variable.
              <BR/>        sQLStatusCode -- Optional:NO 
                 SQL status code as a result of executing the query.
              <BR/>        userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>        password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              
    </UL>

     **********/
    static public DriverCommand getDBValue (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getDBValue.parameters = null");
        DriverCommand dc = new DriverCommand(GETDBVALUE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 set Jdbc Driver
              
                 sets a JDBC driver, can be called more than once with
                 multiple drivers.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param driverClassName  Optional:NO 
                 Name of the driver class
              
     **********/
    static public DriverCommand setJdbcDriver (String driverClassName) {

        if ( driverClassName == null ) throw new IllegalArgumentException ( "setJdbcDriver.driverClassName = null");
        DriverCommand dc = new DriverCommand(SETJDBCDRIVER_KEYWORD);
        dc.addParameter(driverClassName);
        return dc;
    }


    /*********** <pre> 
                 Verifies the value of a field in a database table is NULL
              
                 Verifies the value of a field in a database table is NULL.
                 
                 Sometimes you have to check if a field's value is NULL. This
                 NULL value is different from any other (even zero for numerics
                 and null string for characters), so if you try to check it
                 using VerifyDBValue() function, if will fail.
                 
                 A table and field name are required. You also have to specify data source name,
                 user id and password (the user id and password can be "" meaning not required).
                 
                 A query condition can be included. It can be any 
                 valid expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
                 you are using. For example: "CliBal > 100000 and CliCat = 'C'". 
                 Including "where" in the expression itself is optional.  It will 
                 be prefixed to the expression if it is not provided.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param aDBAlias  Optional:NO 
                 not used
              
     @param aTableAlias  Optional:NO 
                 not used
              
     @param dBFieldName  Optional:NO 
                 Name of the FIELD within DBTableName used in the verification
              
     @param dBTableName  Optional:NO 
                 Name of the TABLE to access within the DBSourceName
     @param dBQueryCond  Optional:NO 
                 Expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
              
     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     @param sQLStatus  Optional:YES 
                 SQL status code as a result of executing the query gets stored in this variable
              
     **********/
    static public DriverCommand verifyDatabaseNullValue (String aDBAlias, String aTableAlias, String dBFieldName, String dBTableName, String dBQueryCond, String dBSourceName, String userID, String password, String sQLStatus) {

        if ( aDBAlias == null ) throw new IllegalArgumentException ( "verifyDatabaseNullValue.aDBAlias = null");
        if ( aTableAlias == null ) throw new IllegalArgumentException ( "verifyDatabaseNullValue.aTableAlias = null");
        if ( dBFieldName == null ) throw new IllegalArgumentException ( "verifyDatabaseNullValue.dBFieldName = null");
        if ( dBQueryCond == null ) throw new IllegalArgumentException ( "verifyDatabaseNullValue.dBQueryCond = null");
        if ( dBSourceName == null ) throw new IllegalArgumentException ( "verifyDatabaseNullValue.dBSourceName = null");
        if ( dBTableName == null ) throw new IllegalArgumentException ( "verifyDatabaseNullValue.dBTableName = null");
        DriverCommand dc = new DriverCommand(VERIFYDATABASENULLVALUE_KEYWORD);
        dc.addParameter(aDBAlias);
        dc.addParameter(aTableAlias);
        dc.addParameter(dBFieldName);
        dc.addParameter(dBTableName);
        dc.addParameter(dBQueryCond);
        dc.addParameter(dBSourceName);
        dc.addParameter(userID);
        dc.addParameter(password);
        dc.addParameter(sQLStatus);
        return dc;
    }


    /*********** <pre> 
                 Verifies the value of a field in a database table is NULL
              
                 Verifies the value of a field in a database table is NULL.
                 
                 Sometimes you have to check if a field's value is NULL. This
                 NULL value is different from any other (even zero for numerics
                 and null string for characters), so if you try to check it
                 using VerifyDBValue() function, if will fail.
                 
                 A table and field name are required. You also have to specify data source name,
                 user id and password (the user id and password can be "" meaning not required).
                 
                 A query condition can be included. It can be any 
                 valid expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
                 you are using. For example: "CliBal > 100000 and CliCat = 'C'". 
                 Including "where" in the expression itself is optional.  It will 
                 be prefixed to the expression if it is not provided.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        aDBAlias -- Optional:NO 
                 not used
              <BR/>        aTableAlias -- Optional:NO 
                 not used
              <BR/>        dBFieldName -- Optional:NO 
                 Name of the FIELD within DBTableName used in the verification
              <BR/>        dBTableName -- Optional:NO 
                 Name of the TABLE to access within the DBSourceName<BR/>        dBQueryCond -- Optional:NO 
                 Expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
              <BR/>        dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>        userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>        password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              <BR/>        sQLStatus -- Optional:YES 
                 SQL status code as a result of executing the query gets stored in this variable
              
    </UL>

     **********/
    static public DriverCommand verifyDatabaseNullValue (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyDatabaseNullValue.parameters = null");
        DriverCommand dc = new DriverCommand(VERIFYDATABASENULLVALUE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Verifies the case-sensitive value of a field in a database table
              
                 Verifies the case-sensitive value of a field in a database table.
                 
                 To return the value, it executes a SQL query sentence using a
                 data source to connect to the data base (using a 'SELECT'). 
                 
                 A table and field name are required. You also have to specify data source name,
                 user id, password, and the expected value.
                 
                 If the query returns more than one record, the returned value
                 is the corresponding to the first one, unless the field name
                 be something like COUNT(*) or SUM(InvoiceTot).
                 
                 A query condition can be included. It can be any 
                 valid expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
                 you are using. For example: "CliBal > 100000 and CliCat = 'C'". 
                 Including "where" in the expression itself is optional.  It will 
                 be prefixed to the expression if it is not provided.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param aDBAlias  Optional:NO 
                 not used
              
     @param aTableAlias  Optional:NO 
                 not used
              
     @param dBFieldName  Optional:NO 
                 Name of the FIELD within DBTableName used in the verification
              
     @param dBTableName  Optional:NO 
                 Name of the TABLE to access within the DBSourceName
     @param dBQueryCond  Optional:NO 
                 Expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
              
     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param userID  Optional:NO 
                 UserID for accessing the Datasource (if required, if
                 not then "" must be supplied).
              
     @param password  Optional:NO 
                 Password for accessing the Datasource (if required, if
                 not then "" must be supplied).
              
     @param expectedValue  Optional:NO 
                 Benchmark value to compare against retrieved DBFieldName value
              
     @param sQLStatus  Optional:YES 
                 SQL status code as a result of executing the query gets stored in this variable
              
     **********/
    static public DriverCommand verifyDatabaseValue (String aDBAlias, String aTableAlias, String dBFieldName, String dBTableName, String dBQueryCond, String dBSourceName, String userID, String password, String expectedValue, String sQLStatus) {

        if ( aDBAlias == null ) throw new IllegalArgumentException ( "verifyDatabaseValue.aDBAlias = null");
        if ( aTableAlias == null ) throw new IllegalArgumentException ( "verifyDatabaseValue.aTableAlias = null");
        if ( dBFieldName == null ) throw new IllegalArgumentException ( "verifyDatabaseValue.dBFieldName = null");
        if ( dBQueryCond == null ) throw new IllegalArgumentException ( "verifyDatabaseValue.dBQueryCond = null");
        if ( dBSourceName == null ) throw new IllegalArgumentException ( "verifyDatabaseValue.dBSourceName = null");
        if ( dBTableName == null ) throw new IllegalArgumentException ( "verifyDatabaseValue.dBTableName = null");
        if ( expectedValue == null ) throw new IllegalArgumentException ( "verifyDatabaseValue.expectedValue = null");
        if ( password == null ) throw new IllegalArgumentException ( "verifyDatabaseValue.password = null");
        if ( userID == null ) throw new IllegalArgumentException ( "verifyDatabaseValue.userID = null");
        DriverCommand dc = new DriverCommand(VERIFYDATABASEVALUE_KEYWORD);
        dc.addParameter(aDBAlias);
        dc.addParameter(aTableAlias);
        dc.addParameter(dBFieldName);
        dc.addParameter(dBTableName);
        dc.addParameter(dBQueryCond);
        dc.addParameter(dBSourceName);
        dc.addParameter(userID);
        dc.addParameter(password);
        dc.addParameter(expectedValue);
        dc.addParameter(sQLStatus);
        return dc;
    }


    /*********** <pre> 
                 Verifies the case-sensitive value of a field in a database table
              
                 Verifies the case-sensitive value of a field in a database table.
                 
                 To return the value, it executes a SQL query sentence using a
                 data source to connect to the data base (using a 'SELECT'). 
                 
                 A table and field name are required. You also have to specify data source name,
                 user id, password, and the expected value.
                 
                 If the query returns more than one record, the returned value
                 is the corresponding to the first one, unless the field name
                 be something like COUNT(*) or SUM(InvoiceTot).
                 
                 A query condition can be included. It can be any 
                 valid expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
                 you are using. For example: "CliBal > 100000 and CliCat = 'C'". 
                 Including "where" in the expression itself is optional.  It will 
                 be prefixed to the expression if it is not provided.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        aDBAlias -- Optional:NO 
                 not used
              <BR/>        aTableAlias -- Optional:NO 
                 not used
              <BR/>        dBFieldName -- Optional:NO 
                 Name of the FIELD within DBTableName used in the verification
              <BR/>        dBTableName -- Optional:NO 
                 Name of the TABLE to access within the DBSourceName<BR/>        dBQueryCond -- Optional:NO 
                 Expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
              <BR/>        dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>        userID -- Optional:NO 
                 UserID for accessing the Datasource (if required, if
                 not then "" must be supplied).
              <BR/>        password -- Optional:NO 
                 Password for accessing the Datasource (if required, if
                 not then "" must be supplied).
              <BR/>        expectedValue -- Optional:NO 
                 Benchmark value to compare against retrieved DBFieldName value
              <BR/>        sQLStatus -- Optional:YES 
                 SQL status code as a result of executing the query gets stored in this variable
              
    </UL>

     **********/
    static public DriverCommand verifyDatabaseValue (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyDatabaseValue.parameters = null");
        DriverCommand dc = new DriverCommand(VERIFYDATABASEVALUE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Verifies the value of a field in a database table is NULL
              
                 Verifies the value of a field in a database table is NULL.
                 
                 Sometimes you have to check if a field's value is NULL. This
                 NULL value is different from any other (even zero for numerics
                 and null string for characters), so if you try to check it
                 using VerifyDBValue() function, if will fail.
                 
                 A table and field name are required. You also have to specify data source name,
                 user id and password (the user id and password can be "" meaning not required).
                 
                 A query condition can be included. It can be any 
                 valid expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
                 you are using. For example: "CliBal > 100000 and CliCat = 'C'". 
                 Including "where" in the expression itself is optional.  It will 
                 be prefixed to the expression if it is not provided.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param aDBAlias  Optional:NO 
                 not used
              
     @param aTableAlias  Optional:NO 
                 not used
              
     @param dBFieldName  Optional:NO 
                 Name of the FIELD within DBTableName used in the verification
              
     @param dBTableName  Optional:NO 
                 Name of the TABLE to access within the DBSourceName
     @param dBQueryCond  Optional:NO 
                 Expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
              
     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param userID  Optional:YES 
                 UserID for accessing the Datasource (if required).
              
     @param password  Optional:YES 
                 Password for accessing the Datasource (if required).
              
     @param sQLStatus  Optional:YES 
                 SQL status code as a result of executing the query gets stored in this variable
              
     **********/
    static public DriverCommand verifyDBNullValue (String aDBAlias, String aTableAlias, String dBFieldName, String dBTableName, String dBQueryCond, String dBSourceName, String userID, String password, String sQLStatus) {

        if ( aDBAlias == null ) throw new IllegalArgumentException ( "verifyDBNullValue.aDBAlias = null");
        if ( aTableAlias == null ) throw new IllegalArgumentException ( "verifyDBNullValue.aTableAlias = null");
        if ( dBFieldName == null ) throw new IllegalArgumentException ( "verifyDBNullValue.dBFieldName = null");
        if ( dBQueryCond == null ) throw new IllegalArgumentException ( "verifyDBNullValue.dBQueryCond = null");
        if ( dBSourceName == null ) throw new IllegalArgumentException ( "verifyDBNullValue.dBSourceName = null");
        if ( dBTableName == null ) throw new IllegalArgumentException ( "verifyDBNullValue.dBTableName = null");
        DriverCommand dc = new DriverCommand(VERIFYDBNULLVALUE_KEYWORD);
        dc.addParameter(aDBAlias);
        dc.addParameter(aTableAlias);
        dc.addParameter(dBFieldName);
        dc.addParameter(dBTableName);
        dc.addParameter(dBQueryCond);
        dc.addParameter(dBSourceName);
        dc.addParameter(userID);
        dc.addParameter(password);
        dc.addParameter(sQLStatus);
        return dc;
    }


    /*********** <pre> 
                 Verifies the value of a field in a database table is NULL
              
                 Verifies the value of a field in a database table is NULL.
                 
                 Sometimes you have to check if a field's value is NULL. This
                 NULL value is different from any other (even zero for numerics
                 and null string for characters), so if you try to check it
                 using VerifyDBValue() function, if will fail.
                 
                 A table and field name are required. You also have to specify data source name,
                 user id and password (the user id and password can be "" meaning not required).
                 
                 A query condition can be included. It can be any 
                 valid expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
                 you are using. For example: "CliBal > 100000 and CliCat = 'C'". 
                 Including "where" in the expression itself is optional.  It will 
                 be prefixed to the expression if it is not provided.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        aDBAlias -- Optional:NO 
                 not used
              <BR/>        aTableAlias -- Optional:NO 
                 not used
              <BR/>        dBFieldName -- Optional:NO 
                 Name of the FIELD within DBTableName used in the verification
              <BR/>        dBTableName -- Optional:NO 
                 Name of the TABLE to access within the DBSourceName<BR/>        dBQueryCond -- Optional:NO 
                 Expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
              <BR/>        dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>        userID -- Optional:YES 
                 UserID for accessing the Datasource (if required).
              <BR/>        password -- Optional:YES 
                 Password for accessing the Datasource (if required).
              <BR/>        sQLStatus -- Optional:YES 
                 SQL status code as a result of executing the query gets stored in this variable
              
    </UL>

     **********/
    static public DriverCommand verifyDBNullValue (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyDBNullValue.parameters = null");
        DriverCommand dc = new DriverCommand(VERIFYDBNULLVALUE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Verifies the case-sensitive value of a field in a database table
              
                 Verifies the case-sensitive value of a field in a database table.
                 
                 To return the value, it executes a SQL query sentence using a
                 data source to connect to the data base (using a 'SELECT').
                 
                 A table and field name are required. You also have to specify data source name,
                 user id, password, and the expected value.
                 
                 If the query returns more than one record, the returned value
                 is the corresponding to the first one, unless the field name
                 be something like COUNT(*) or SUM(InvoiceTot).
                 
                 A query condition can be included. It can be any 
                 valid expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
                 you are using. For example: "CliBal > 100000 and CliCat = 'C'". 
                 Including "where" in the expression itself is optional.  It will 
                 be prefixed to the expression if it is not provided.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param aDBAlias  Optional:NO 
                 not used
              
     @param aTableAlias  Optional:NO 
                 not used
              
     @param dBFieldName  Optional:NO 
                 Name of the FIELD within DBTableName used in the verification
              
     @param dBTableName  Optional:NO 
                 Name of the TABLE to access within the DBSourceName
     @param dBQueryCond  Optional:NO 
                 Expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
              
     @param dBSourceName  Optional:NO 
                 Name of the Datasource containing the DBTable
              
     @param userID  Optional:NO 
                 UserID for accessing the Datasource (if required, if
                 not then "" must be supplied).
              
     @param password  Optional:NO 
                 Password for accessing the Datasource (if required, if
                 not then "" must be supplied).
              
     @param expectedValue  Optional:NO 
                 Benchmark value to compare against retrieved DBFieldName value
              
     @param sQLStatus  Optional:YES 
                 SQL status code as a result of executing the query gets stored in this variable
              
     **********/
    static public DriverCommand verifyDBValue (String aDBAlias, String aTableAlias, String dBFieldName, String dBTableName, String dBQueryCond, String dBSourceName, String userID, String password, String expectedValue, String sQLStatus) {

        if ( aDBAlias == null ) throw new IllegalArgumentException ( "verifyDBValue.aDBAlias = null");
        if ( aTableAlias == null ) throw new IllegalArgumentException ( "verifyDBValue.aTableAlias = null");
        if ( dBFieldName == null ) throw new IllegalArgumentException ( "verifyDBValue.dBFieldName = null");
        if ( dBQueryCond == null ) throw new IllegalArgumentException ( "verifyDBValue.dBQueryCond = null");
        if ( dBSourceName == null ) throw new IllegalArgumentException ( "verifyDBValue.dBSourceName = null");
        if ( dBTableName == null ) throw new IllegalArgumentException ( "verifyDBValue.dBTableName = null");
        if ( expectedValue == null ) throw new IllegalArgumentException ( "verifyDBValue.expectedValue = null");
        if ( password == null ) throw new IllegalArgumentException ( "verifyDBValue.password = null");
        if ( userID == null ) throw new IllegalArgumentException ( "verifyDBValue.userID = null");
        DriverCommand dc = new DriverCommand(VERIFYDBVALUE_KEYWORD);
        dc.addParameter(aDBAlias);
        dc.addParameter(aTableAlias);
        dc.addParameter(dBFieldName);
        dc.addParameter(dBTableName);
        dc.addParameter(dBQueryCond);
        dc.addParameter(dBSourceName);
        dc.addParameter(userID);
        dc.addParameter(password);
        dc.addParameter(expectedValue);
        dc.addParameter(sQLStatus);
        return dc;
    }


    /*********** <pre> 
                 Verifies the case-sensitive value of a field in a database table
              
                 Verifies the case-sensitive value of a field in a database table.
                 
                 To return the value, it executes a SQL query sentence using a
                 data source to connect to the data base (using a 'SELECT').
                 
                 A table and field name are required. You also have to specify data source name,
                 user id, password, and the expected value.
                 
                 If the query returns more than one record, the returned value
                 is the corresponding to the first one, unless the field name
                 be something like COUNT(*) or SUM(InvoiceTot).
                 
                 A query condition can be included. It can be any 
                 valid expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
                 you are using. For example: "CliBal > 100000 and CliCat = 'C'". 
                 Including "where" in the expression itself is optional.  It will 
                 be prefixed to the expression if it is not provided.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        aDBAlias -- Optional:NO 
                 not used
              <BR/>        aTableAlias -- Optional:NO 
                 not used
              <BR/>        dBFieldName -- Optional:NO 
                 Name of the FIELD within DBTableName used in the verification
              <BR/>        dBTableName -- Optional:NO 
                 Name of the TABLE to access within the DBSourceName<BR/>        dBQueryCond -- Optional:NO 
                 Expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
              <BR/>        dBSourceName -- Optional:NO 
                 Name of the Datasource containing the DBTable
              <BR/>        userID -- Optional:NO 
                 UserID for accessing the Datasource (if required, if
                 not then "" must be supplied).
              <BR/>        password -- Optional:NO 
                 Password for accessing the Datasource (if required, if
                 not then "" must be supplied).
              <BR/>        expectedValue -- Optional:NO 
                 Benchmark value to compare against retrieved DBFieldName value
              <BR/>        sQLStatus -- Optional:YES 
                 SQL status code as a result of executing the query gets stored in this variable
              
    </UL>

     **********/
    static public DriverCommand verifyDBValue (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyDBValue.parameters = null");
        DriverCommand dc = new DriverCommand(VERIFYDBVALUE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


}
