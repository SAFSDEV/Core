
/******************************************************************************
 * DDDriverLogCommands.java
 *
 * Copyright (C) SAS Institute, All rights reserved.
 * General Public License: https://www.gnu.org/licenses/gpl-3.0.en.html
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   DDDriverLogCommands.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaCommandModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe DDDriverLogCommands.xml XSLJavaCommandModel.xsl -o DDDriverLogCommands.java
 *
 ******************************************************************************/ 
package org.safs.model.commands;


import org.safs.model.DriverCommand;


public class DDDriverLogCommands {

    /*****************
    Private Singleton Instance
    ****************/
    private static final DDDriverLogCommands singleton = new DDDriverLogCommands(); 

    /*****************
    Private Constructor
    Static class needing no instantiation.
    ****************/
    private DDDriverLogCommands() {}

    /*****************
    public Singleton to access class static methods via instance
    ****************/
    public static DDDriverLogCommands getInstance() { return singleton;}

    /** "LogFailureOK" */
    static public final String LOGFAILUREOK_KEYWORD = "LogFailureOK";
    /** "LogMessage" */
    static public final String LOGMESSAGE_KEYWORD = "LogMessage";
    /** "LogTestFailure" */
    static public final String LOGTESTFAILURE_KEYWORD = "LogTestFailure";
    /** "LogTestSuccess" */
    static public final String LOGTESTSUCCESS_KEYWORD = "LogTestSuccess";
    /** "LogTestWarning" */
    static public final String LOGTESTWARNING_KEYWORD = "LogTestWarning";
    /** "LogWarningOK" */
    static public final String LOGWARNINGOK_KEYWORD = "LogWarningOK";
    /** "ResumeLogging" */
    static public final String RESUMELOGGING_KEYWORD = "ResumeLogging";
    /** "SuspendLogging" */
    static public final String SUSPENDLOGGING_KEYWORD = "SuspendLogging";


    /*********** <pre>
        Log an EXPECTED failure message.
          Log that a failure was expected and, as such, is OK.
          You can optionally add an additional details description that follows the message.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param message  Optional:NO
              The message to log.
     @param details  Optional:YES
              Additional detail to add to the message.
     **********/
    static public DriverCommand logFailureOK (String message, String details) {

        if ( message == null ) throw new IllegalArgumentException ( "logFailureOK.message = null");
        DriverCommand dc = new DriverCommand(LOGFAILUREOK_KEYWORD);
        dc.addParameter(message);
        dc.addParameter(details);
        return dc;
    }


    /*********** <pre>
        Log an EXPECTED failure message.
          Log that a failure was expected and, as such, is OK.
          You can optionally add an additional details description that follows the message.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        message -- Optional:NO
              The message to log.<BR/>        details -- Optional:YES
              Additional detail to add to the message.
    </UL>

     **********/
    static public DriverCommand logFailureOK (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "logFailureOK.parameters = null");
        DriverCommand dc = new DriverCommand(LOGFAILUREOK_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
        Log a generic message
          Log a generic message.  You can optionally add an additional 
          details description that follows the message.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param message  Optional:NO
              The message to log.
     @param details  Optional:YES
              Additional detail to add to the message.
     **********/
    static public DriverCommand logMessage (String message, String details) {

        if ( message == null ) throw new IllegalArgumentException ( "logMessage.message = null");
        DriverCommand dc = new DriverCommand(LOGMESSAGE_KEYWORD);
        dc.addParameter(message);
        dc.addParameter(details);
        return dc;
    }


    /*********** <pre>
        Log a generic message
          Log a generic message.  You can optionally add an additional 
          details description that follows the message.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        message -- Optional:NO
              The message to log.<BR/>        details -- Optional:YES
              Additional detail to add to the message.
    </UL>

     **********/
    static public DriverCommand logMessage (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "logMessage.parameters = null");
        DriverCommand dc = new DriverCommand(LOGMESSAGE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
        Log a FAILURE message. Also increments appropriate counters.
          Log a FAILURE message.  Also increments appropriate counters.
          You can optionally add an additional details description that follows the message.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param message  Optional:NO
              The message to log.
     @param details  Optional:YES
              Additional detail to add to the message.
     **********/
    static public DriverCommand logTestFailure (String message, String details) {

        if ( message == null ) throw new IllegalArgumentException ( "logTestFailure.message = null");
        DriverCommand dc = new DriverCommand(LOGTESTFAILURE_KEYWORD);
        dc.addParameter(message);
        dc.addParameter(details);
        return dc;
    }


    /*********** <pre>
        Log a FAILURE message. Also increments appropriate counters.
          Log a FAILURE message.  Also increments appropriate counters.
          You can optionally add an additional details description that follows the message.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        message -- Optional:NO
              The message to log.<BR/>        details -- Optional:YES
              Additional detail to add to the message.
    </UL>

     **********/
    static public DriverCommand logTestFailure (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "logTestFailure.parameters = null");
        DriverCommand dc = new DriverCommand(LOGTESTFAILURE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
        Log a SUCCESS/OK message. Also increments appropriate counters.
          Log a SUCCESS/OK message.  Also increments appropriate counters.
          You can optionally add an additional details description that follows the message.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param message  Optional:NO
              The message to log.
     @param details  Optional:YES
              Additional detail to add to the message.
     **********/
    static public DriverCommand logTestSuccess (String message, String details) {

        if ( message == null ) throw new IllegalArgumentException ( "logTestSuccess.message = null");
        DriverCommand dc = new DriverCommand(LOGTESTSUCCESS_KEYWORD);
        dc.addParameter(message);
        dc.addParameter(details);
        return dc;
    }


    /*********** <pre>
        Log a SUCCESS/OK message. Also increments appropriate counters.
          Log a SUCCESS/OK message.  Also increments appropriate counters.
          You can optionally add an additional details description that follows the message.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        message -- Optional:NO
              The message to log.<BR/>        details -- Optional:YES
              Additional detail to add to the message.
    </UL>

     **********/
    static public DriverCommand logTestSuccess (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "logTestSuccess.parameters = null");
        DriverCommand dc = new DriverCommand(LOGTESTSUCCESS_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
        Log a WARNING message. Also increments appropriate counters.
          Log a WARNING message.  Also increments appropriate counters.
          You can optionally add an additional details description that follows the message.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param message  Optional:NO
              The message to log.
     @param details  Optional:YES
              Additional detail to add to the message.
     **********/
    static public DriverCommand logTestWarning (String message, String details) {

        if ( message == null ) throw new IllegalArgumentException ( "logTestWarning.message = null");
        DriverCommand dc = new DriverCommand(LOGTESTWARNING_KEYWORD);
        dc.addParameter(message);
        dc.addParameter(details);
        return dc;
    }


    /*********** <pre>
        Log a WARNING message. Also increments appropriate counters.
          Log a WARNING message.  Also increments appropriate counters.
          You can optionally add an additional details description that follows the message.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        message -- Optional:NO
              The message to log.<BR/>        details -- Optional:YES
              Additional detail to add to the message.
    </UL>

     **********/
    static public DriverCommand logTestWarning (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "logTestWarning.parameters = null");
        DriverCommand dc = new DriverCommand(LOGTESTWARNING_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
        Log an EXPECTED WARNING message.
          Log that a WARNING was expected and, as such, is OK.
          You can optionally add an additional details description that follows the message.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param message  Optional:NO
              The message to log.
     @param details  Optional:YES
              Additional detail to add to the message.
     **********/
    static public DriverCommand logWarningOK (String message, String details) {

        if ( message == null ) throw new IllegalArgumentException ( "logWarningOK.message = null");
        DriverCommand dc = new DriverCommand(LOGWARNINGOK_KEYWORD);
        dc.addParameter(message);
        dc.addParameter(details);
        return dc;
    }


    /*********** <pre>
        Log an EXPECTED WARNING message.
          Log that a WARNING was expected and, as such, is OK.
          You can optionally add an additional details description that follows the message.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        message -- Optional:NO
              The message to log.<BR/>        details -- Optional:YES
              Additional detail to add to the message.
    </UL>

     **********/
    static public DriverCommand logWarningOK (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "logWarningOK.parameters = null");
        DriverCommand dc = new DriverCommand(LOGWARNINGOK_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Resume suspended logging.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param logName  Optional:YES  DefaultVal: 
                 The name of a Log Facility, other than the "current" one, to resume.
              
     **********/
    static public DriverCommand resumeLogging (String logName) {

        DriverCommand dc = new DriverCommand(RESUMELOGGING_KEYWORD);
        dc.addParameter(logName);
        return dc;
    }


    /*********** <pre> 
                 Suspend all logging.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param logName  Optional:YES  DefaultVal: 
                 The name of a Log Facility if other than the "current" one.
              
     **********/
    static public DriverCommand suspendLogging (String logName) {

        DriverCommand dc = new DriverCommand(SUSPENDLOGGING_KEYWORD);
        dc.addParameter(logName);
        return dc;
    }


}
