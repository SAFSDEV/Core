
/******************************************************************************
 * HTMLTableFunctions.java
 *
 * Copyright (c) by SAS Institute Inc., Cary, NC 27513
 * General Public License: http://www.opensource.org/licenses/gpl-license.php
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   HTMLTableFunctions.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaCommandModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe HTMLTableFunctions.xml XSLJavaCommandModel.xsl -o HTMLTableFunctions.java
 *
 ******************************************************************************/ 
package org.safs.model.commands;


import org.safs.model.ComponentFunction;


public class HTMLTableFunctions {

    /*****************
    Private Singleton Instance
    ****************/
    private static final HTMLTableFunctions singleton = new HTMLTableFunctions(); 

    /*****************
    Private Constructor
    Static class needing no instantiation.
    ****************/
    private HTMLTableFunctions() {}

    /*****************
    public Singleton to access class static methods via instance
    ****************/
    public static HTMLTableFunctions getInstance() { return singleton;}

    /** "ActivateCell" */
    static public final String ACTIVATECELL_KEYWORD = "ActivateCell";
    /** "AssignCellContainsTextRow" */
    static public final String ASSIGNCELLCONTAINSTEXTROW_KEYWORD = "AssignCellContainsTextRow";
    /** "AssignCellTextRow" */
    static public final String ASSIGNCELLTEXTROW_KEYWORD = "AssignCellTextRow";
    /** "AssignVariableCellText" */
    static public final String ASSIGNVARIABLECELLTEXT_KEYWORD = "AssignVariableCellText";
    /** "CaptureFuzzyRangeToFile" */
    static public final String CAPTUREFUZZYRANGETOFILE_KEYWORD = "CaptureFuzzyRangeToFile";
    /** "CaptureRangeToFile" */
    static public final String CAPTURERANGETOFILE_KEYWORD = "CaptureRangeToFile";
    /** "Click" */
    static public final String CLICK_KEYWORD = "Click";
    /** "ClickCell" */
    static public final String CLICKCELL_KEYWORD = "ClickCell";
    /** "CompareStoredData" */
    static public final String COMPARESTOREDDATA_KEYWORD = "CompareStoredData";
    /** "CompareStoredProperties" */
    static public final String COMPARESTOREDPROPERTIES_KEYWORD = "CompareStoredProperties";
    /** "DoubleClickCell" */
    static public final String DOUBLECLICKCELL_KEYWORD = "DoubleClickCell";
    /** "RightClickCell" */
    static public final String RIGHTCLICKCELL_KEYWORD = "RightClickCell";
    /** "SelectCell" */
    static public final String SELECTCELL_KEYWORD = "SelectCell";
    /** "SelectCellContainsTextFind" */
    static public final String SELECTCELLCONTAINSTEXTFIND_KEYWORD = "SelectCellContainsTextFind";
    /** "SelectCellText" */
    static public final String SELECTCELLTEXT_KEYWORD = "SelectCellText";
    /** "SelectCellTextFind" */
    static public final String SELECTCELLTEXTFIND_KEYWORD = "SelectCellTextFind";
    /** "SelectCellTextSpecial" */
    static public final String SELECTCELLTEXTSPECIAL_KEYWORD = "SelectCellTextSpecial";
    /** "SelectFuzzyCellText" */
    static public final String SELECTFUZZYCELLTEXT_KEYWORD = "SelectFuzzyCellText";
    /** "SelectFuzzyCellTextFind" */
    static public final String SELECTFUZZYCELLTEXTFIND_KEYWORD = "SelectFuzzyCellTextFind";
    /** "VerifyCellEditable" */
    static public final String VERIFYCELLEDITABLE_KEYWORD = "VerifyCellEditable";
    /** "VerifyCellText" */
    static public final String VERIFYCELLTEXT_KEYWORD = "VerifyCellText";
    /** "VerifyCellTextContains" */
    static public final String VERIFYCELLTEXTCONTAINS_KEYWORD = "VerifyCellTextContains";
    /** "VerifyCellTextFind" */
    static public final String VERIFYCELLTEXTFIND_KEYWORD = "VerifyCellTextFind";
    /** "VerifyCellValue" */
    static public final String VERIFYCELLVALUE_KEYWORD = "VerifyCellValue";
    /** "VerifyColumnLabel" */
    static public final String VERIFYCOLUMNLABEL_KEYWORD = "VerifyColumnLabel";
    /** "VerifyFuzzyCellText" */
    static public final String VERIFYFUZZYCELLTEXT_KEYWORD = "VerifyFuzzyCellText";
    /** "VerifyFuzzyCellTextContains" */
    static public final String VERIFYFUZZYCELLTEXTCONTAINS_KEYWORD = "VerifyFuzzyCellTextContains";
    /** "VerifyFuzzyCellTextFind" */
    static public final String VERIFYFUZZYCELLTEXTFIND_KEYWORD = "VerifyFuzzyCellTextFind";


    /*********** <pre> 
                Attempts to perform a double click on a Table cell.
               
                Clicks on a particular row/column of the table. 
                The default location is Row=1, Col=1 unless either parameter 
                is specified otherwise.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param row  Optional:YES  DefaultVal:1 
                The 1-based cell row in the row/col specification.
              
     @param col  Optional:YES  DefaultVal:1 
                The 1-based cell column in the row/col specification.
              
     **********/
    static public ComponentFunction activateCell (String winname, String compname, String row, String col) {

        if ( winname == null ) throw new IllegalArgumentException ( "activateCell.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "activateCell.compname = null");

        ComponentFunction cf = new ComponentFunction(ACTIVATECELL_KEYWORD, winname, compname);
        cf.addParameter(row);
        cf.addParameter(col);
        return cf;
    }


    /*********** <pre> 
                Attempts to perform a double click on a Table cell.
               
                Clicks on a particular row/column of the table. 
                The default location is Row=1, Col=1 unless either parameter 
                is specified otherwise.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        row -- Optional:YES  DefaultVal:1 
                The 1-based cell row in the row/col specification.
              <BR/>        col -- Optional:YES  DefaultVal:1 
                The 1-based cell column in the row/col specification.
              
    </UL>

     **********/
    static public ComponentFunction activateCell(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "activateCell.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "activateCell.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "activateCell.parameters = null");
        ComponentFunction cf = new ComponentFunction(ACTIVATECELL_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                  Assigns a user-defined variable a row # based on partial matching cell values.
              
                  The cell value from the specified column in the found row is also assigned to 
                  a variable derived from the user-defined variable name.
                  
                  The cell value comparisons are not case-senstive, and provided values can be substrings 
                  of the actual cell value in the table.
                  
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param var  Optional:NO 
                The variable which gets assigned the row found.
              
     @param col  Optional:NO 
                The 1-based cell column # or header value, identifying the column for extracting the 
                cell value into variable +".Value".
              
     @param colN  Optional:NO 
                A 1-based cell column #, or header value, identifying the column to locate the VALUEN below.
              
     @param valueN  Optional:NO 
                A Value to search for in the 'COLN' column.
              
     **********/
    static public ComponentFunction assignCellContainsTextRow (String winname, String compname, String var, String col, String colN, String valueN) {

        if ( winname == null ) throw new IllegalArgumentException ( "assignCellContainsTextRow.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "assignCellContainsTextRow.compname = null");

        if ( col == null ) throw new IllegalArgumentException ( "assignCellContainsTextRow.col = null");
        if ( colN == null ) throw new IllegalArgumentException ( "assignCellContainsTextRow.colN = null");
        if ( valueN == null ) throw new IllegalArgumentException ( "assignCellContainsTextRow.valueN = null");
        if ( var == null ) throw new IllegalArgumentException ( "assignCellContainsTextRow.var = null");
        ComponentFunction cf = new ComponentFunction(ASSIGNCELLCONTAINSTEXTROW_KEYWORD, winname, compname);
        cf.addParameter(var);
        cf.addParameter(col);
        cf.addParameter(colN);
        cf.addParameter(valueN);
        return cf;
    }


    /*********** <pre> 
                  Assigns a user-defined variable a row # based on partial matching cell values.
              
                  The cell value from the specified column in the found row is also assigned to 
                  a variable derived from the user-defined variable name.
                  
                  The cell value comparisons are not case-senstive, and provided values can be substrings 
                  of the actual cell value in the table.
                  
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        var -- Optional:NO 
                The variable which gets assigned the row found.
              <BR/>        col -- Optional:NO 
                The 1-based cell column # or header value, identifying the column for extracting the 
                cell value into variable +".Value".
              <BR/>        colN -- Optional:NO 
                A 1-based cell column #, or header value, identifying the column to locate the VALUEN below.
              <BR/>        valueN -- Optional:NO 
                A Value to search for in the 'COLN' column.
              
    </UL>

     **********/
    static public ComponentFunction assignCellContainsTextRow(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "assignCellContainsTextRow.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "assignCellContainsTextRow.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "assignCellContainsTextRow.parameters = null");
        ComponentFunction cf = new ComponentFunction(ASSIGNCELLCONTAINSTEXTROW_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                  Assigns a user-defined variable a row # based on matching cell values.
              
                  The cell value from the specified column in the found row is also assigned to 
                  a variable derived from the user-defined variable name.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param var  Optional:NO 
                The variable which gets assigned the row found.
              
     @param col  Optional:NO 
                The 1-based cell column # or header value, identifying the column for extracting the 
                cell value into variable +".Value".
              
     @param colN  Optional:NO 
                A 1-based cell column #, or header value, identifying the column to locate the VALUEN below.
              
     @param valueN  Optional:NO 
                A Value to search for in the 'COLN' column
              
     **********/
    static public ComponentFunction assignCellTextRow (String winname, String compname, String var, String col, String colN, String valueN) {

        if ( winname == null ) throw new IllegalArgumentException ( "assignCellTextRow.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "assignCellTextRow.compname = null");

        if ( col == null ) throw new IllegalArgumentException ( "assignCellTextRow.col = null");
        if ( colN == null ) throw new IllegalArgumentException ( "assignCellTextRow.colN = null");
        if ( valueN == null ) throw new IllegalArgumentException ( "assignCellTextRow.valueN = null");
        if ( var == null ) throw new IllegalArgumentException ( "assignCellTextRow.var = null");
        ComponentFunction cf = new ComponentFunction(ASSIGNCELLTEXTROW_KEYWORD, winname, compname);
        cf.addParameter(var);
        cf.addParameter(col);
        cf.addParameter(colN);
        cf.addParameter(valueN);
        return cf;
    }


    /*********** <pre> 
                  Assigns a user-defined variable a row # based on matching cell values.
              
                  The cell value from the specified column in the found row is also assigned to 
                  a variable derived from the user-defined variable name.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        var -- Optional:NO 
                The variable which gets assigned the row found.
              <BR/>        col -- Optional:NO 
                The 1-based cell column # or header value, identifying the column for extracting the 
                cell value into variable +".Value".
              <BR/>        colN -- Optional:NO 
                A 1-based cell column #, or header value, identifying the column to locate the VALUEN below.
              <BR/>        valueN -- Optional:NO 
                A Value to search for in the 'COLN' column
              
    </UL>

     **********/
    static public ComponentFunction assignCellTextRow(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "assignCellTextRow.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "assignCellTextRow.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "assignCellTextRow.parameters = null");
        ComponentFunction cf = new ComponentFunction(ASSIGNCELLTEXTROW_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Attempts to extract a particular cell value and assign 
                it to the provided variable name.
              
               Note, if you supply the name of the variable and include the leading
               caret (^) symbol then the variable must be enclosed in quotes.
               Otherwise, that variable will be used like any other variable and the
               substituted value of that variable will be interpretted as the name
               of the variable you wish to use.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param variableName  Optional:NO
             The name of the variable to receive the property value.
              
     @param row  Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification.
              
     @param col  Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification.
              
     **********/
    static public ComponentFunction assignVariableCellText (String winname, String compname, String variableName, String row, String col) {

        if ( winname == null ) throw new IllegalArgumentException ( "assignVariableCellText.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "assignVariableCellText.compname = null");

        if ( variableName == null ) throw new IllegalArgumentException ( "assignVariableCellText.variableName = null");
        ComponentFunction cf = new ComponentFunction(ASSIGNVARIABLECELLTEXT_KEYWORD, winname, compname);
        cf.addParameter(variableName);
        cf.addParameter(row);
        cf.addParameter(col);
        return cf;
    }


    /*********** <pre> 
                Attempts to extract a particular cell value and assign 
                it to the provided variable name.
              
               Note, if you supply the name of the variable and include the leading
               caret (^) symbol then the variable must be enclosed in quotes.
               Otherwise, that variable will be used like any other variable and the
               substituted value of that variable will be interpretted as the name
               of the variable you wish to use.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        variableName -- Optional:NO
             The name of the variable to receive the property value.
              <BR/>        row -- Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification.
              <BR/>        col -- Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification.
              
    </UL>

     **********/
    static public ComponentFunction assignVariableCellText(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "assignVariableCellText.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "assignVariableCellText.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "assignVariableCellText.parameters = null");
        ComponentFunction cf = new ComponentFunction(ASSIGNVARIABLECELLTEXT_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Saves a range of values to the specified file.
              
                "Fuzzy" matches come into play when using header field text 
                or column1 row text to specify row and column identities.  The 
                specified text does NOT have to be an exact match--it is NOT 
                case-sensitive and can be just a substring of the desired value 
                in the table.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param fileName  Optional:NO
             The name of the file to receive the data.
              
     @param row  Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification or a unique row 
                value in column 1.  
              
     @param col  Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification or column header text.
              
     @param rows  Optional:YES  DefaultVal: 
                The number of rows to capture.
              
     @param columns  Optional:YES  DefaultVal: 
                The number of columns to capture.
              
     @param fileEncoding  Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
     @param filterMode  Optional:YES  DefaultVal: 
                (FUTURE) A file filter to use when processing the text values.
              
     @param filterOptions  Optional:YES  DefaultVal: 
                (FUTURE) Filter options to use with the file filter.
              
     **********/
    static public ComponentFunction captureFuzzyRangeToFile (String winname, String compname, String fileName, String row, String col, String rows, String columns, String fileEncoding, String filterMode, String filterOptions) {

        if ( winname == null ) throw new IllegalArgumentException ( "captureFuzzyRangeToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "captureFuzzyRangeToFile.compname = null");

        if ( fileName == null ) throw new IllegalArgumentException ( "captureFuzzyRangeToFile.fileName = null");
        ComponentFunction cf = new ComponentFunction(CAPTUREFUZZYRANGETOFILE_KEYWORD, winname, compname);
        cf.addParameter(fileName);
        cf.addParameter(row);
        cf.addParameter(col);
        cf.addParameter(rows);
        cf.addParameter(columns);
        cf.addParameter(fileEncoding);
        cf.addParameter(filterMode);
        cf.addParameter(filterOptions);
        return cf;
    }


    /*********** <pre> 
                Saves a range of values to the specified file.
              
                "Fuzzy" matches come into play when using header field text 
                or column1 row text to specify row and column identities.  The 
                specified text does NOT have to be an exact match--it is NOT 
                case-sensitive and can be just a substring of the desired value 
                in the table.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fileName -- Optional:NO
             The name of the file to receive the data.
              <BR/>        row -- Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification or a unique row 
                value in column 1.  
              <BR/>        col -- Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification or column header text.
              <BR/>        rows -- Optional:YES  DefaultVal: 
                The number of rows to capture.
              <BR/>        columns -- Optional:YES  DefaultVal: 
                The number of columns to capture.
              <BR/>        fileEncoding -- Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            <BR/>        filterMode -- Optional:YES  DefaultVal: 
                (FUTURE) A file filter to use when processing the text values.
              <BR/>        filterOptions -- Optional:YES  DefaultVal: 
                (FUTURE) Filter options to use with the file filter.
              
    </UL>

     **********/
    static public ComponentFunction captureFuzzyRangeToFile(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "captureFuzzyRangeToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "captureFuzzyRangeToFile.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "captureFuzzyRangeToFile.parameters = null");
        ComponentFunction cf = new ComponentFunction(CAPTUREFUZZYRANGETOFILE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Saves a range of values to the specified file.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param fileName  Optional:NO
             The name of the file to receive the data.
              
     @param row  Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              
     @param col  Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification or column header text.
              
     @param rows  Optional:YES  DefaultVal: 
                The number of rows to capture.
              
     @param columns  Optional:YES  DefaultVal: 
                The number of columns to capture.
              
     @param fileEncoding  Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
     @param filterMode  Optional:YES  DefaultVal: 
                (FUTURE) A file filter to use when processing the text values.
              
     @param filterOptions  Optional:YES  DefaultVal: 
                (FUTURE) Filter options to use with the file filter.
              
     **********/
    static public ComponentFunction captureRangeToFile (String winname, String compname, String fileName, String row, String col, String rows, String columns, String fileEncoding, String filterMode, String filterOptions) {

        if ( winname == null ) throw new IllegalArgumentException ( "captureRangeToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "captureRangeToFile.compname = null");

        if ( fileName == null ) throw new IllegalArgumentException ( "captureRangeToFile.fileName = null");
        ComponentFunction cf = new ComponentFunction(CAPTURERANGETOFILE_KEYWORD, winname, compname);
        cf.addParameter(fileName);
        cf.addParameter(row);
        cf.addParameter(col);
        cf.addParameter(rows);
        cf.addParameter(columns);
        cf.addParameter(fileEncoding);
        cf.addParameter(filterMode);
        cf.addParameter(filterOptions);
        return cf;
    }


    /*********** <pre> 
                Saves a range of values to the specified file.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fileName -- Optional:NO
             The name of the file to receive the data.
              <BR/>        row -- Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              <BR/>        col -- Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification or column header text.
              <BR/>        rows -- Optional:YES  DefaultVal: 
                The number of rows to capture.
              <BR/>        columns -- Optional:YES  DefaultVal: 
                The number of columns to capture.
              <BR/>        fileEncoding -- Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            <BR/>        filterMode -- Optional:YES  DefaultVal: 
                (FUTURE) A file filter to use when processing the text values.
              <BR/>        filterOptions -- Optional:YES  DefaultVal: 
                (FUTURE) Filter options to use with the file filter.
              
    </UL>

     **********/
    static public ComponentFunction captureRangeToFile(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "captureRangeToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "captureRangeToFile.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "captureRangeToFile.parameters = null");
        ComponentFunction cf = new ComponentFunction(CAPTURERANGETOFILE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Attempts to perform a standard Click on an HTMLTable on a webpage.
               
                Attempts to perform a standard Click on an HTMLTable on a webpage.
                We can optionally click on a particular area of the table 
                rather than a generic click (Coords=1,1).
                 
                The click area lookup is done with the component name AND an additional
                app map reference provided in Field #5.
                
                Typical Data Table records:
                
                (1) t BrowserWin ATable Click
                (2) t BrowserWin ATable Click AMappedRegion
                
                #1 above should merely click in the top-left corner of the table.
                
                #2 above will contain a ATable entry in the BrowserWin section with 
                normal recognition information for it.  ATable will also have it's
                own section in the Application Map in which there will be entries
                defining specific indexed or named regions for the table.
                
                Examples:
                
                [BrowserWin]
                BrowserWin=WindowTag=WEBBrowser
                ATable=Type=HTMLFrame;HTMLID=top;Type=HTMLTable;Index=1
                ...
                
                [ATable]
                AMappedRegion=Coords=10,10
                ANamedRegion=Coords=10,10,25,25
                AnIndexedRegion=Col=1;Row=1
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param appMapSubkey  Optional:YES 
                Name of the AppMap subkey to lookup and use for the click.
              
     **********/
    static public ComponentFunction click (String winname, String compname, String appMapSubkey) {

        if ( winname == null ) throw new IllegalArgumentException ( "click.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "click.compname = null");

        ComponentFunction cf = new ComponentFunction(CLICK_KEYWORD, winname, compname);
        cf.addParameter(appMapSubkey);
        return cf;
    }


    /*********** <pre> 
                Click on a cell specified by row and column.
               
                Click on a cell specified by row and column
                parameters.
                
                Note, for the RobotJ version, (and maybe other engines
                as well), the row and column values are true to the TR
                and TD elements of the web page, so if a TR or TD has
                no text in it, then it may seem confusing. In other
                words, a table may only seem to have lets say 5
                columns, but there may actually be more based on the
                contents of the cells.
                
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param row  Optional:NO 
                The row of the cell to click.
              
     @param col  Optional:NO 
                The column of the cell to click.
              
     **********/
    static public ComponentFunction clickCell (String winname, String compname, String row, String col) {

        if ( winname == null ) throw new IllegalArgumentException ( "clickCell.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "clickCell.compname = null");

        if ( col == null ) throw new IllegalArgumentException ( "clickCell.col = null");
        if ( row == null ) throw new IllegalArgumentException ( "clickCell.row = null");
        ComponentFunction cf = new ComponentFunction(CLICKCELL_KEYWORD, winname, compname);
        cf.addParameter(row);
        cf.addParameter(col);
        return cf;
    }


    /*********** <pre> 
                Click on a cell specified by row and column.
               
                Click on a cell specified by row and column
                parameters.
                
                Note, for the RobotJ version, (and maybe other engines
                as well), the row and column values are true to the TR
                and TD elements of the web page, so if a TR or TD has
                no text in it, then it may seem confusing. In other
                words, a table may only seem to have lets say 5
                columns, but there may actually be more based on the
                contents of the cells.
                
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        row -- Optional:NO 
                The row of the cell to click.
              <BR/>        col -- Optional:NO 
                The column of the cell to click.
              
    </UL>

     **********/
    static public ComponentFunction clickCell(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "clickCell.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "clickCell.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "clickCell.parameters = null");
        ComponentFunction cf = new ComponentFunction(CLICKCELL_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Performs a HTMLTableVP CompareData on an HTMLTable object.
               
                Performs a HTMLTableVP CompareProperties on an HTMLTable object.
                
                THE BENCHMARK VP MUST ALREADY EXIST AND BE AN ASSET OF THE CURRENTLY
                RUNNING SCRIPT.
                  
                Modified VP parameter information can be added to the standard
                VP=VPName by including the VPName reference in the application map
                in a section defined for the HTMLTable.  If this is done, the value 
                retrieved from the application map will be appended to VP=VPName.
                The required semicolon for this append will be provided by this routine.
                
                Example 1: Perform a standard HTMLTable CompareProperties.  To perform
                a basic CompareProperties the name "StoredVP" will not exist in the app map:
                
                The Step File call:
                
                BrowserWindow AnHTMLTable CompareStoredProperties StoredVP
                
                This will produce a CompareProperties VP with "VP=StoredVP;Wait=2,10".
                
                The StoredVP baseline MUST already exist as an asset of the
                currently running script.
                
                Example 2: Perform a HTMLTable CompareProperties providing addition 
                parameter information (such as ExpectedResult=FAIL).  To do this the
                HTMLTable object must have its own section in the app map and an item
                with the same name as the StoredVP.  The value of that item will be
                appended to the standard VP argument with a semicolon.
                
                Part of App Map:
                
                [BrowserWindow]
                BrowserWindow=WindowTag=WEBBrowser
                AnHTMLTable=<snipped for brevity>;\;Type=HTMLTable;HTMLID=TableID
                ...
                [AnHTMLTable]
                StoredVP=ExpectedResult=FAIL;Wait=3,30
                
                The Step File call:
                
                BrowserWindow AnHTMLTable CompareStoredProperties StoredVP
                
                This will produce a CompareProperties VP with all the parameters appended
                like this: "VP=StoredVP;ExpectedResult=FAIL;Wait=3,30".
                NOTE:When stored parameters are found in the app map then the default Wait= 
                parameter used in the standard compare is no longer provided.  If you still 
                need a Wait= parameter, then it must be included in the stored parameters.
                
                The StoredVP baseline MUST already exist as an asset of the
                currently running script.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param vPAsset  Optional:NO 
                Name of the pre-existing VP asset stored in the currently running script.
              
     **********/
    static public ComponentFunction compareStoredData (String winname, String compname, String vPAsset) {

        if ( winname == null ) throw new IllegalArgumentException ( "compareStoredData.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "compareStoredData.compname = null");

        if ( vPAsset == null ) throw new IllegalArgumentException ( "compareStoredData.vPAsset = null");
        ComponentFunction cf = new ComponentFunction(COMPARESTOREDDATA_KEYWORD, winname, compname);
        cf.addParameter(vPAsset);
        return cf;
    }


    /*********** <pre> 
                Performs a HTMLTableVP CompareProperties on an HTMLTable object.
               
                Performs a HTMLTableVP CompareProperties on an HTMLTable object.
                
                THE BENCHMARK VP MUST ALREADY EXIST AND BE AN ASSET OF THE CURRENTLY
                RUNNING SCRIPT.
                  
                Modified VP parameter information can be added to the standard
                VP=VPName by including the VPName reference in the application map
                in a section defined for the HTMLTable.  If this is done, the value 
                retrieved from the application map will be appended to VP=VPName.
                The required semicolon for this append will be provided by this routine.
                
                Example 1: Perform a standard HTMLTable CompareProperties.  To perform
                a basic CompareProperties the name "StoredVP" will not exist in the app map:
                
                The Step File call:
                
                BrowserWindow AnHTMLTable CompareStoredProperties StoredVP
                
                This will produce a CompareProperties VP with "VP=StoredVP;Wait=2,10".
                
                The StoredVP baseline MUST already exist as an asset of the
                currently running script.
                
                Example 2: Perform a HTMLTable CompareProperties providing addition 
                parameter information (such as ExpectedResult=FAIL).  To do this the
                HTMLTable object must have its own section in the app map and an item
                with the same name as the StoredVP.  The value of that item will be
                appended to the standard VP argument with a semicolon.
                
                Part of App Map:
                
                [BrowserWindow]
                BrowserWindow=WindowTag=WEBBrowser
                AnHTMLTable=<snipped for brevity>;\;Type=HTMLTable;HTMLID=TableID
                ...
                [AnHTMLTable]
                StoredVP=ExpectedResult=FAIL;Wait=3,30
                
                The Step File call:
                
                BrowserWindow AnHTMLTable CompareStoredProperties StoredVP
                
                This will produce a CompareProperties VP with all the parameters appended
                like this: "VP=StoredVP;ExpectedResult=FAIL;Wait=3,30".
                NOTE:When stored parameters are found in the app map then the default Wait= 
                parameter used in the standard compare is no longer provided.  If you still 
                need a Wait= parameter, then it must be included in the stored parameters.
                
                The StoredVP baseline MUST already exist as an asset of the
                currently running script.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param vPAsset  Optional:NO
                Name of the pre-existing VP asset stored in the currently running script.
              
     **********/
    static public ComponentFunction compareStoredProperties (String winname, String compname, String vPAsset) {

        if ( winname == null ) throw new IllegalArgumentException ( "compareStoredProperties.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "compareStoredProperties.compname = null");

        if ( vPAsset == null ) throw new IllegalArgumentException ( "compareStoredProperties.vPAsset = null");
        ComponentFunction cf = new ComponentFunction(COMPARESTOREDPROPERTIES_KEYWORD, winname, compname);
        cf.addParameter(vPAsset);
        return cf;
    }


    /*********** <pre> 
                Attempts to perform a double click on a cell in a Table.
               
                Clicks on a particular row/column of the table. 
                The default location is Row=1, Col=1 unless either parameter 
                is specified otherwise.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param row  Optional:YES  DefaultVal:1 
                The 1-based cell row in the row/col specification.
              
     @param col  Optional:YES  DefaultVal:1 
                The 1-based cell column in the row/col specification.
              
     **********/
    static public ComponentFunction doubleClickCell (String winname, String compname, String row, String col) {

        if ( winname == null ) throw new IllegalArgumentException ( "doubleClickCell.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "doubleClickCell.compname = null");

        ComponentFunction cf = new ComponentFunction(DOUBLECLICKCELL_KEYWORD, winname, compname);
        cf.addParameter(row);
        cf.addParameter(col);
        return cf;
    }


    /*********** <pre> 
                Attempts to perform a double click on a cell in a Table.
               
                Clicks on a particular row/column of the table. 
                The default location is Row=1, Col=1 unless either parameter 
                is specified otherwise.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        row -- Optional:YES  DefaultVal:1 
                The 1-based cell row in the row/col specification.
              <BR/>        col -- Optional:YES  DefaultVal:1 
                The 1-based cell column in the row/col specification.
              
    </UL>

     **********/
    static public ComponentFunction doubleClickCell(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "doubleClickCell.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "doubleClickCell.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "doubleClickCell.parameters = null");
        ComponentFunction cf = new ComponentFunction(DOUBLECLICKCELL_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Attempts to perform a right click on a cell in a Table.
               
                Right clicks on a particular row/column of the table. 
                The default location is Row=1, Col=1 unless either parameter 
                is specified otherwise.
                
                RJ: CFHTMLTable gets this support from subclassing CFTable.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param row  Optional:YES  DefaultVal:1 
                The 1-based cell row in the row/col specification.
              
     @param col  Optional:YES  DefaultVal:1 
                The 1-based cell column in the row/col specification.
              
     **********/
    static public ComponentFunction rightClickCell (String winname, String compname, String row, String col) {

        if ( winname == null ) throw new IllegalArgumentException ( "rightClickCell.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "rightClickCell.compname = null");

        ComponentFunction cf = new ComponentFunction(RIGHTCLICKCELL_KEYWORD, winname, compname);
        cf.addParameter(row);
        cf.addParameter(col);
        return cf;
    }


    /*********** <pre> 
                Attempts to perform a right click on a cell in a Table.
               
                Right clicks on a particular row/column of the table. 
                The default location is Row=1, Col=1 unless either parameter 
                is specified otherwise.
                
                RJ: CFHTMLTable gets this support from subclassing CFTable.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        row -- Optional:YES  DefaultVal:1 
                The 1-based cell row in the row/col specification.
              <BR/>        col -- Optional:YES  DefaultVal:1 
                The 1-based cell column in the row/col specification.
              
    </UL>

     **********/
    static public ComponentFunction rightClickCell(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "rightClickCell.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "rightClickCell.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "rightClickCell.parameters = null");
        ComponentFunction cf = new ComponentFunction(RIGHTCLICKCELL_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Same as ClickCell.
               
                Clicks on a particular row/column of the table. 
                The default location is Row=1, Col=1 unless either parameter 
                is specified otherwise.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param row  Optional:YES  DefaultVal:1 
                The 1-based cell row in the row/col specification.
              
     @param col  Optional:YES  DefaultVal:1 
                The 1-based cell column in the row/col specification.
              
     **********/
    static public ComponentFunction selectCell (String winname, String compname, String row, String col) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectCell.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectCell.compname = null");

        ComponentFunction cf = new ComponentFunction(SELECTCELL_KEYWORD, winname, compname);
        cf.addParameter(row);
        cf.addParameter(col);
        return cf;
    }


    /*********** <pre> 
                Same as ClickCell.
               
                Clicks on a particular row/column of the table. 
                The default location is Row=1, Col=1 unless either parameter 
                is specified otherwise.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        row -- Optional:YES  DefaultVal:1 
                The 1-based cell row in the row/col specification.
              <BR/>        col -- Optional:YES  DefaultVal:1 
                The 1-based cell column in the row/col specification.
              
    </UL>

     **********/
    static public ComponentFunction selectCell(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectCell.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectCell.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectCell.parameters = null");
        ComponentFunction cf = new ComponentFunction(SELECTCELL_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                  Attempts to select a particular cell by finding the row based on cell values.
              
                  This is the same as SelectFuzzyCellTextFind.
                  The row # for the cell is also assigned to a user-defined variable.
                  The parameter values are not case-sensitive, and can be substrings of the actual 
                  table values.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param var  Optional:NO 
                The variable which gets assigned the row found.
              
     @param col  Optional:NO 
                The 1-based cell column # or header value, identifying the column for the select.
              
     @param colN  Optional:NO 
                A 1-based cell column #, or header value, identifying the column to locate the VALUEN below.
              
     @param valueN  Optional:NO 
                A Value to search for in the 'COLN' column
              
     **********/
    static public ComponentFunction selectCellContainsTextFind (String winname, String compname, String var, String col, String colN, String valueN) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectCellContainsTextFind.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectCellContainsTextFind.compname = null");

        if ( col == null ) throw new IllegalArgumentException ( "selectCellContainsTextFind.col = null");
        if ( colN == null ) throw new IllegalArgumentException ( "selectCellContainsTextFind.colN = null");
        if ( valueN == null ) throw new IllegalArgumentException ( "selectCellContainsTextFind.valueN = null");
        if ( var == null ) throw new IllegalArgumentException ( "selectCellContainsTextFind.var = null");
        ComponentFunction cf = new ComponentFunction(SELECTCELLCONTAINSTEXTFIND_KEYWORD, winname, compname);
        cf.addParameter(var);
        cf.addParameter(col);
        cf.addParameter(colN);
        cf.addParameter(valueN);
        return cf;
    }


    /*********** <pre> 
                  Attempts to select a particular cell by finding the row based on cell values.
              
                  This is the same as SelectFuzzyCellTextFind.
                  The row # for the cell is also assigned to a user-defined variable.
                  The parameter values are not case-sensitive, and can be substrings of the actual 
                  table values.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        var -- Optional:NO 
                The variable which gets assigned the row found.
              <BR/>        col -- Optional:NO 
                The 1-based cell column # or header value, identifying the column for the select.
              <BR/>        colN -- Optional:NO 
                A 1-based cell column #, or header value, identifying the column to locate the VALUEN below.
              <BR/>        valueN -- Optional:NO 
                A Value to search for in the 'COLN' column
              
    </UL>

     **********/
    static public ComponentFunction selectCellContainsTextFind(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectCellContainsTextFind.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectCellContainsTextFind.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectCellContainsTextFind.parameters = null");
        ComponentFunction cf = new ComponentFunction(SELECTCELLCONTAINSTEXTFIND_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Attempts to select a particular cell.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param row  Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              
     @param col  Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification or column header text.
              
     **********/
    static public ComponentFunction selectCellText (String winname, String compname, String row, String col) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectCellText.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectCellText.compname = null");

        ComponentFunction cf = new ComponentFunction(SELECTCELLTEXT_KEYWORD, winname, compname);
        cf.addParameter(row);
        cf.addParameter(col);
        return cf;
    }


    /*********** <pre> 
                Attempts to select a particular cell.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        row -- Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              <BR/>        col -- Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification or column header text.
              
    </UL>

     **********/
    static public ComponentFunction selectCellText(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectCellText.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectCellText.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectCellText.parameters = null");
        ComponentFunction cf = new ComponentFunction(SELECTCELLTEXT_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                  Attempts to select a particular cell by finding the row based on cell values.
              
                  The row # for the cell is also assigned to a user-defined variable.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param var  Optional:NO 
                The variable which gets assigned the row found.
              
     @param col  Optional:NO 
                The 1-based cell column # or header value, identifying the column for the select.
              
     @param colN  Optional:NO 
                A 1-based cell column #, or header value, identifying the column to locate the VALUEN below.
              
     @param valueN  Optional:NO 
                A Value to search for in the 'COLN' column
              
     **********/
    static public ComponentFunction selectCellTextFind (String winname, String compname, String var, String col, String colN, String valueN) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectCellTextFind.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectCellTextFind.compname = null");

        if ( col == null ) throw new IllegalArgumentException ( "selectCellTextFind.col = null");
        if ( colN == null ) throw new IllegalArgumentException ( "selectCellTextFind.colN = null");
        if ( valueN == null ) throw new IllegalArgumentException ( "selectCellTextFind.valueN = null");
        if ( var == null ) throw new IllegalArgumentException ( "selectCellTextFind.var = null");
        ComponentFunction cf = new ComponentFunction(SELECTCELLTEXTFIND_KEYWORD, winname, compname);
        cf.addParameter(var);
        cf.addParameter(col);
        cf.addParameter(colN);
        cf.addParameter(valueN);
        return cf;
    }


    /*********** <pre> 
                  Attempts to select a particular cell by finding the row based on cell values.
              
                  The row # for the cell is also assigned to a user-defined variable.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        var -- Optional:NO 
                The variable which gets assigned the row found.
              <BR/>        col -- Optional:NO 
                The 1-based cell column # or header value, identifying the column for the select.
              <BR/>        colN -- Optional:NO 
                A 1-based cell column #, or header value, identifying the column to locate the VALUEN below.
              <BR/>        valueN -- Optional:NO 
                A Value to search for in the 'COLN' column
              
    </UL>

     **********/
    static public ComponentFunction selectCellTextFind(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectCellTextFind.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectCellTextFind.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectCellTextFind.parameters = null");
        ComponentFunction cf = new ComponentFunction(SELECTCELLTEXTFIND_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
	        Holds down either key Control or Shift while making a cell selection
		with emulating either a Left or Right mouse click.
              
	        Special cell selection which can be used to select multiple rows.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param specialKey  Optional:NO
             The special key command used in the row selection.
	     For now, ownly "Control" and "Shift" are supported.
              
     @param mouseClick  Optional:NO 
	        The type of mouse click needed.
		For now, ownly "Left" and "Right" are supported.
              
     @param row  Optional:NO 
	        The 1-based cell row in the row/col specification.
              
     @param col  Optional:NO 
	        The 1-based cell column in the row/col specification.
              
     **********/
    static public ComponentFunction selectCellTextSpecial (String winname, String compname, String specialKey, String mouseClick, String row, String col) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectCellTextSpecial.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectCellTextSpecial.compname = null");

        if ( col == null ) throw new IllegalArgumentException ( "selectCellTextSpecial.col = null");
        if ( mouseClick == null ) throw new IllegalArgumentException ( "selectCellTextSpecial.mouseClick = null");
        if ( row == null ) throw new IllegalArgumentException ( "selectCellTextSpecial.row = null");
        if ( specialKey == null ) throw new IllegalArgumentException ( "selectCellTextSpecial.specialKey = null");
        ComponentFunction cf = new ComponentFunction(SELECTCELLTEXTSPECIAL_KEYWORD, winname, compname);
        cf.addParameter(specialKey);
        cf.addParameter(mouseClick);
        cf.addParameter(row);
        cf.addParameter(col);
        return cf;
    }


    /*********** <pre> 
	        Holds down either key Control or Shift while making a cell selection
		with emulating either a Left or Right mouse click.
              
	        Special cell selection which can be used to select multiple rows.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        specialKey -- Optional:NO
             The special key command used in the row selection.
	     For now, ownly "Control" and "Shift" are supported.
              <BR/>        mouseClick -- Optional:NO 
	        The type of mouse click needed.
		For now, ownly "Left" and "Right" are supported.
              <BR/>        row -- Optional:NO 
	        The 1-based cell row in the row/col specification.
              <BR/>        col -- Optional:NO 
	        The 1-based cell column in the row/col specification.
              
    </UL>

     **********/
    static public ComponentFunction selectCellTextSpecial(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectCellTextSpecial.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectCellTextSpecial.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectCellTextSpecial.parameters = null");
        ComponentFunction cf = new ComponentFunction(SELECTCELLTEXTSPECIAL_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Attempts to select a particular cell.
               
                "Fuzzy" matches come into play when using header field text 
                or column1 row text to specify row and column identities.  The 
                specified text does NOT have to be an exact match--it is NOT 
                case-sensitive and can be just a substring of the desired value 
                in the table.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param row  Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              
     @param col  Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification or column header text.
              
     **********/
    static public ComponentFunction selectFuzzyCellText (String winname, String compname, String row, String col) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectFuzzyCellText.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectFuzzyCellText.compname = null");

        ComponentFunction cf = new ComponentFunction(SELECTFUZZYCELLTEXT_KEYWORD, winname, compname);
        cf.addParameter(row);
        cf.addParameter(col);
        return cf;
    }


    /*********** <pre> 
                Attempts to select a particular cell.
               
                "Fuzzy" matches come into play when using header field text 
                or column1 row text to specify row and column identities.  The 
                specified text does NOT have to be an exact match--it is NOT 
                case-sensitive and can be just a substring of the desired value 
                in the table.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        row -- Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              <BR/>        col -- Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification or column header text.
              
    </UL>

     **********/
    static public ComponentFunction selectFuzzyCellText(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectFuzzyCellText.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectFuzzyCellText.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectFuzzyCellText.parameters = null");
        ComponentFunction cf = new ComponentFunction(SELECTFUZZYCELLTEXT_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Attempts to select a particular cell by finding the row based on fuzzy cell values.
               
                This is the same as SelectCellContainsTextFind.
                "Fuzzy" matches come into play when using header field text 
                or column1 row text to specify row and column identities.  The 
                specified column/cell text does NOT have to be an exact match--it is NOT 
                case-sensitive and can be just a substring of the desired value 
                in the table.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param var  Optional:NO 
                The variable which gets assigned the row found.
              
     @param col  Optional:NO 
                The 1-based cell column # in the row/col specification or fuzzy column header text.
              
     @param colN  Optional:NO 
                A 1-based cell column # in the row/col specification or fuzzy column header text.
              
     @param valueN  Optional:NO 
                A Value to search for in a cell under the 'ColN' column
              
     **********/
    static public ComponentFunction selectFuzzyCellTextFind (String winname, String compname, String var, String col, String colN, String valueN) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectFuzzyCellTextFind.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectFuzzyCellTextFind.compname = null");

        if ( col == null ) throw new IllegalArgumentException ( "selectFuzzyCellTextFind.col = null");
        if ( colN == null ) throw new IllegalArgumentException ( "selectFuzzyCellTextFind.colN = null");
        if ( valueN == null ) throw new IllegalArgumentException ( "selectFuzzyCellTextFind.valueN = null");
        if ( var == null ) throw new IllegalArgumentException ( "selectFuzzyCellTextFind.var = null");
        ComponentFunction cf = new ComponentFunction(SELECTFUZZYCELLTEXTFIND_KEYWORD, winname, compname);
        cf.addParameter(var);
        cf.addParameter(col);
        cf.addParameter(colN);
        cf.addParameter(valueN);
        return cf;
    }


    /*********** <pre> 
                Attempts to select a particular cell by finding the row based on fuzzy cell values.
               
                This is the same as SelectCellContainsTextFind.
                "Fuzzy" matches come into play when using header field text 
                or column1 row text to specify row and column identities.  The 
                specified column/cell text does NOT have to be an exact match--it is NOT 
                case-sensitive and can be just a substring of the desired value 
                in the table.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        var -- Optional:NO 
                The variable which gets assigned the row found.
              <BR/>        col -- Optional:NO 
                The 1-based cell column # in the row/col specification or fuzzy column header text.
              <BR/>        colN -- Optional:NO 
                A 1-based cell column # in the row/col specification or fuzzy column header text.
              <BR/>        valueN -- Optional:NO 
                A Value to search for in a cell under the 'ColN' column
              
    </UL>

     **********/
    static public ComponentFunction selectFuzzyCellTextFind(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectFuzzyCellTextFind.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectFuzzyCellTextFind.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectFuzzyCellTextFind.parameters = null");
        ComponentFunction cf = new ComponentFunction(SELECTFUZZYCELLTEXTFIND_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Verifies whether the specified cell is editable.
               
	        RJ: Invokes the "editCellAt" method on a specific cell.
		That method returns a boolean which is used for the verification.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param row  Optional:NO
	    The 1-based cell row in the row/col specification.
              
     @param col  Optional:NO
	       The 1-based cell column in the row/col specification.
              
     @param expectedValue  Optional:NO 
	         The case-insensitive value we expect for the editable value ("true" or"false").
              
     **********/
    static public ComponentFunction verifyCellEditable (String winname, String compname, String row, String col, String expectedValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyCellEditable.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyCellEditable.compname = null");

        if ( col == null ) throw new IllegalArgumentException ( "verifyCellEditable.col = null");
        if ( expectedValue == null ) throw new IllegalArgumentException ( "verifyCellEditable.expectedValue = null");
        if ( row == null ) throw new IllegalArgumentException ( "verifyCellEditable.row = null");
        ComponentFunction cf = new ComponentFunction(VERIFYCELLEDITABLE_KEYWORD, winname, compname);
        cf.addParameter(row);
        cf.addParameter(col);
        cf.addParameter(expectedValue);
        return cf;
    }


    /*********** <pre> 
                Verifies whether the specified cell is editable.
               
	        RJ: Invokes the "editCellAt" method on a specific cell.
		That method returns a boolean which is used for the verification.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        row -- Optional:NO
	    The 1-based cell row in the row/col specification.
              <BR/>        col -- Optional:NO
	       The 1-based cell column in the row/col specification.
              <BR/>        expectedValue -- Optional:NO 
	         The case-insensitive value we expect for the editable value ("true" or"false").
              
    </UL>

     **********/
    static public ComponentFunction verifyCellEditable(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyCellEditable.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyCellEditable.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyCellEditable.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYCELLEDITABLE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Attempts to verify a particular cell value.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param benchValue  Optional:NO
             The case-sensitive expected value for the specified cell.
              
     @param row  Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification.
              
     @param col  Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification.
              
     **********/
    static public ComponentFunction verifyCellText (String winname, String compname, String benchValue, String row, String col) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyCellText.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyCellText.compname = null");

        if ( benchValue == null ) throw new IllegalArgumentException ( "verifyCellText.benchValue = null");
        ComponentFunction cf = new ComponentFunction(VERIFYCELLTEXT_KEYWORD, winname, compname);
        cf.addParameter(benchValue);
        cf.addParameter(row);
        cf.addParameter(col);
        return cf;
    }


    /*********** <pre> 
                Attempts to verify a particular cell value.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        benchValue -- Optional:NO
             The case-sensitive expected value for the specified cell.
              <BR/>        row -- Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification.
              <BR/>        col -- Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification.
              
    </UL>

     **********/
    static public ComponentFunction verifyCellText(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyCellText.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyCellText.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyCellText.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYCELLTEXT_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Attempts to verify a particular cell value.
               
                The value comparison is NOT case-sensitive and can be a substring.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param benchValue  Optional:NO
                  The expected value for the specified cell.
              
     @param row  Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification.
              
     @param col  Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification.
              
     **********/
    static public ComponentFunction verifyCellTextContains (String winname, String compname, String benchValue, String row, String col) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyCellTextContains.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyCellTextContains.compname = null");

        if ( benchValue == null ) throw new IllegalArgumentException ( "verifyCellTextContains.benchValue = null");
        ComponentFunction cf = new ComponentFunction(VERIFYCELLTEXTCONTAINS_KEYWORD, winname, compname);
        cf.addParameter(benchValue);
        cf.addParameter(row);
        cf.addParameter(col);
        return cf;
    }


    /*********** <pre> 
                Attempts to verify a particular cell value.
               
                The value comparison is NOT case-sensitive and can be a substring.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        benchValue -- Optional:NO
                  The expected value for the specified cell.
              <BR/>        row -- Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification.
              <BR/>        col -- Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification.
              
    </UL>

     **********/
    static public ComponentFunction verifyCellTextContains(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyCellTextContains.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyCellTextContains.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyCellTextContains.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYCELLTEXTCONTAINS_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Attempts to verify a particular cell by finding the row based on cell values.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param benchValue  Optional:NO
             The case-sensitive expected value for the specified cell.
              
     @param var  Optional:NO 
                The variable which gets assigned the row found.
              
     @param col  Optional:NO 
                The 1-based cell column # in the row/col specification or column header text.
              
     @param colN  Optional:NO 
                A 1-based cell column # in the row/col specification or column header text.
              
     @param valueN  Optional:NO 
                A Value to search for in a cell under the 'ColN' column
              
     **********/
    static public ComponentFunction verifyCellTextFind (String winname, String compname, String benchValue, String var, String col, String colN, String valueN) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyCellTextFind.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyCellTextFind.compname = null");

        if ( benchValue == null ) throw new IllegalArgumentException ( "verifyCellTextFind.benchValue = null");
        if ( col == null ) throw new IllegalArgumentException ( "verifyCellTextFind.col = null");
        if ( colN == null ) throw new IllegalArgumentException ( "verifyCellTextFind.colN = null");
        if ( valueN == null ) throw new IllegalArgumentException ( "verifyCellTextFind.valueN = null");
        if ( var == null ) throw new IllegalArgumentException ( "verifyCellTextFind.var = null");
        ComponentFunction cf = new ComponentFunction(VERIFYCELLTEXTFIND_KEYWORD, winname, compname);
        cf.addParameter(benchValue);
        cf.addParameter(var);
        cf.addParameter(col);
        cf.addParameter(colN);
        cf.addParameter(valueN);
        return cf;
    }


    /*********** <pre> 
                Attempts to verify a particular cell by finding the row based on cell values.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        benchValue -- Optional:NO
             The case-sensitive expected value for the specified cell.
              <BR/>        var -- Optional:NO 
                The variable which gets assigned the row found.
              <BR/>        col -- Optional:NO 
                The 1-based cell column # in the row/col specification or column header text.
              <BR/>        colN -- Optional:NO 
                A 1-based cell column # in the row/col specification or column header text.
              <BR/>        valueN -- Optional:NO 
                A Value to search for in a cell under the 'ColN' column
              
    </UL>

     **********/
    static public ComponentFunction verifyCellTextFind(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyCellTextFind.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyCellTextFind.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyCellTextFind.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYCELLTEXTFIND_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                     Verify the value of a specific Cell.
                    
                     Attemps to verify the contents of a table cell on a webpage
		     should the command not contain what cell to verify it will default
		     to 1,1
                       </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param expectedValue  Optional:NO 
                     The Expected Value of the cell.
                   
     @param cell  Optional:YES 
                     This is the optional cell location to be tested
                   
     **********/
    static public ComponentFunction verifyCellValue (String winname, String compname, String expectedValue, String cell) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyCellValue.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyCellValue.compname = null");

        if ( expectedValue == null ) throw new IllegalArgumentException ( "verifyCellValue.expectedValue = null");
        ComponentFunction cf = new ComponentFunction(VERIFYCELLVALUE_KEYWORD, winname, compname);
        cf.addParameter(expectedValue);
        cf.addParameter(cell);
        return cf;
    }


    /*********** <pre> 
                     Verify the value of a specific Cell.
                    
                     Attemps to verify the contents of a table cell on a webpage
		     should the command not contain what cell to verify it will default
		     to 1,1
                       </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        expectedValue -- Optional:NO 
                     The Expected Value of the cell.
                   <BR/>        cell -- Optional:YES 
                     This is the optional cell location to be tested
                   
    </UL>

     **********/
    static public ComponentFunction verifyCellValue(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyCellValue.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyCellValue.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyCellValue.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYCELLVALUE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Attempts to verify a particular column's label when given a column number.
               
                Verifies a column label when given the column number.  It currently
		does NOT work with columns with multi-line names.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param colLabel  Optional:NO
             The case-insensitive expected value for the specified column label.
              
     @param colNumber  Optional:NO 
                The 1-based column number of the label that needs verified.
              
     **********/
    static public ComponentFunction verifyColumnLabel (String winname, String compname, String colLabel, String colNumber) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyColumnLabel.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyColumnLabel.compname = null");

        if ( colLabel == null ) throw new IllegalArgumentException ( "verifyColumnLabel.colLabel = null");
        if ( colNumber == null ) throw new IllegalArgumentException ( "verifyColumnLabel.colNumber = null");
        ComponentFunction cf = new ComponentFunction(VERIFYCOLUMNLABEL_KEYWORD, winname, compname);
        cf.addParameter(colLabel);
        cf.addParameter(colNumber);
        return cf;
    }


    /*********** <pre> 
                Attempts to verify a particular column's label when given a column number.
               
                Verifies a column label when given the column number.  It currently
		does NOT work with columns with multi-line names.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        colLabel -- Optional:NO
             The case-insensitive expected value for the specified column label.
              <BR/>        colNumber -- Optional:NO 
                The 1-based column number of the label that needs verified.
              
    </UL>

     **********/
    static public ComponentFunction verifyColumnLabel(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyColumnLabel.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyColumnLabel.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyColumnLabel.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYCOLUMNLABEL_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Attempts to verify a particular cell value.
               
                "Fuzzy" matches come into play when using header field text 
                or column1 row text to specify row and column identities.  The 
                specified text does NOT have to be an exact match--it is NOT 
                case-sensitive and can be just a substring of the desired value 
                in the table.
                The Benchmark must be exact, however.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param benchValue  Optional:NO
             The case-sensitive expected value for the specified cell.
              
     @param row  Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              
     @param col  Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification or column header text.
              
     **********/
    static public ComponentFunction verifyFuzzyCellText (String winname, String compname, String benchValue, String row, String col) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyFuzzyCellText.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyFuzzyCellText.compname = null");

        if ( benchValue == null ) throw new IllegalArgumentException ( "verifyFuzzyCellText.benchValue = null");
        ComponentFunction cf = new ComponentFunction(VERIFYFUZZYCELLTEXT_KEYWORD, winname, compname);
        cf.addParameter(benchValue);
        cf.addParameter(row);
        cf.addParameter(col);
        return cf;
    }


    /*********** <pre> 
                Attempts to verify a particular cell value.
               
                "Fuzzy" matches come into play when using header field text 
                or column1 row text to specify row and column identities.  The 
                specified text does NOT have to be an exact match--it is NOT 
                case-sensitive and can be just a substring of the desired value 
                in the table.
                The Benchmark must be exact, however.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        benchValue -- Optional:NO
             The case-sensitive expected value for the specified cell.
              <BR/>        row -- Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              <BR/>        col -- Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification or column header text.
              
    </UL>

     **********/
    static public ComponentFunction verifyFuzzyCellText(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyFuzzyCellText.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyFuzzyCellText.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyFuzzyCellText.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYFUZZYCELLTEXT_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Attempts to verify a particular cell value.
               
                "Fuzzy" matches come into play when using header field text 
                or column1 row text to specify row and column identities.  The 
                specified text does NOT have to be an exact match--it is NOT 
                case-sensitive and can be just a substring of the desired value 
                in the table.
                The Benchmark comparison is NOT case-sensitive and can be a substring.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param benchValue  Optional:NO
                  The expected value for the specified cell.
              
     @param row  Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              
     @param col  Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification or column header text.
              
     **********/
    static public ComponentFunction verifyFuzzyCellTextContains (String winname, String compname, String benchValue, String row, String col) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyFuzzyCellTextContains.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyFuzzyCellTextContains.compname = null");

        if ( benchValue == null ) throw new IllegalArgumentException ( "verifyFuzzyCellTextContains.benchValue = null");
        ComponentFunction cf = new ComponentFunction(VERIFYFUZZYCELLTEXTCONTAINS_KEYWORD, winname, compname);
        cf.addParameter(benchValue);
        cf.addParameter(row);
        cf.addParameter(col);
        return cf;
    }


    /*********** <pre> 
                Attempts to verify a particular cell value.
               
                "Fuzzy" matches come into play when using header field text 
                or column1 row text to specify row and column identities.  The 
                specified text does NOT have to be an exact match--it is NOT 
                case-sensitive and can be just a substring of the desired value 
                in the table.
                The Benchmark comparison is NOT case-sensitive and can be a substring.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        benchValue -- Optional:NO
                  The expected value for the specified cell.
              <BR/>        row -- Optional:YES  DefaultVal:1 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              <BR/>        col -- Optional:YES  DefaultVal:1 
                The 1-based cell column # in the row/col specification or column header text.
              
    </UL>

     **********/
    static public ComponentFunction verifyFuzzyCellTextContains(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyFuzzyCellTextContains.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyFuzzyCellTextContains.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyFuzzyCellTextContains.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYFUZZYCELLTEXTCONTAINS_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Attempts to verify a particular cell by finding the row based on fuzzy cell values.
               
                "Fuzzy" matches come into play when using header field text 
                or column1 row text to specify row and column identities.  The 
                specified column/cell text does NOT have to be an exact match--it is NOT 
                case-sensitive and can be just a substring of the desired value 
                in the table.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param benchValue  Optional:NO
             The case-sensitive expected value for the specified cell.
              
     @param var  Optional:NO 
                The variable which gets assigned the row found.
              
     @param col  Optional:NO 
                The 1-based cell column # in the row/col specification or fuzzy column header text.
              
     @param colN  Optional:NO 
                A 1-based cell column # in the row/col specification or fuzzy column header text.
              
     @param valueN  Optional:NO 
                A Value to search for in a cell under the 'ColN' column
              
     **********/
    static public ComponentFunction verifyFuzzyCellTextFind (String winname, String compname, String benchValue, String var, String col, String colN, String valueN) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyFuzzyCellTextFind.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyFuzzyCellTextFind.compname = null");

        if ( benchValue == null ) throw new IllegalArgumentException ( "verifyFuzzyCellTextFind.benchValue = null");
        if ( col == null ) throw new IllegalArgumentException ( "verifyFuzzyCellTextFind.col = null");
        if ( colN == null ) throw new IllegalArgumentException ( "verifyFuzzyCellTextFind.colN = null");
        if ( valueN == null ) throw new IllegalArgumentException ( "verifyFuzzyCellTextFind.valueN = null");
        if ( var == null ) throw new IllegalArgumentException ( "verifyFuzzyCellTextFind.var = null");
        ComponentFunction cf = new ComponentFunction(VERIFYFUZZYCELLTEXTFIND_KEYWORD, winname, compname);
        cf.addParameter(benchValue);
        cf.addParameter(var);
        cf.addParameter(col);
        cf.addParameter(colN);
        cf.addParameter(valueN);
        return cf;
    }


    /*********** <pre> 
                Attempts to verify a particular cell by finding the row based on fuzzy cell values.
               
                "Fuzzy" matches come into play when using header field text 
                or column1 row text to specify row and column identities.  The 
                specified column/cell text does NOT have to be an exact match--it is NOT 
                case-sensitive and can be just a substring of the desired value 
                in the table.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        benchValue -- Optional:NO
             The case-sensitive expected value for the specified cell.
              <BR/>        var -- Optional:NO 
                The variable which gets assigned the row found.
              <BR/>        col -- Optional:NO 
                The 1-based cell column # in the row/col specification or fuzzy column header text.
              <BR/>        colN -- Optional:NO 
                A 1-based cell column # in the row/col specification or fuzzy column header text.
              <BR/>        valueN -- Optional:NO 
                A Value to search for in a cell under the 'ColN' column
              
    </UL>

     **********/
    static public ComponentFunction verifyFuzzyCellTextFind(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyFuzzyCellTextFind.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyFuzzyCellTextFind.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyFuzzyCellTextFind.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYFUZZYCELLTEXTFIND_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


}
