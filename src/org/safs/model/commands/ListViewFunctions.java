
/******************************************************************************
 * ListViewFunctions.java
 *
 * Copyright (C) SAS Institute, All rights reserved.
 * General Public License: https://www.gnu.org/licenses/gpl-3.0.en.html
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   ListViewFunctions.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaCommandModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe ListViewFunctions.xml XSLJavaCommandModel.xsl -o ListViewFunctions.java
 *
 ******************************************************************************/ 
package org.safs.model.commands;


import org.safs.model.ComponentFunction;


public class ListViewFunctions {

    /*****************
    Private Singleton Instance
    ****************/
    private static final ListViewFunctions singleton = new ListViewFunctions(); 

    /*****************
    Private Constructor
    Static class needing no instantiation.
    ****************/
    private ListViewFunctions() {}

    /*****************
    public Singleton to access class static methods via instance
    ****************/
    public static ListViewFunctions getInstance() { return singleton;}

    /** "ActivateIndex" */
    static public final String ACTIVATEINDEX_KEYWORD = "ActivateIndex";
    /** "ActivateIndexItem" */
    static public final String ACTIVATEINDEXITEM_KEYWORD = "ActivateIndexItem";
    /** "ActivatePartialMatch" */
    static public final String ACTIVATEPARTIALMATCH_KEYWORD = "ActivatePartialMatch";
    /** "ActivateTextItem" */
    static public final String ACTIVATETEXTITEM_KEYWORD = "ActivateTextItem";
    /** "ActivateTextItemCoords" */
    static public final String ACTIVATETEXTITEMCOORDS_KEYWORD = "ActivateTextItemCoords";
    /** "ActivateUnverifiedTextItem" */
    static public final String ACTIVATEUNVERIFIEDTEXTITEM_KEYWORD = "ActivateUnverifiedTextItem";
    /** "ActivateUnverifiedTextItemCoords" */
    static public final String ACTIVATEUNVERIFIEDTEXTITEMCOORDS_KEYWORD = "ActivateUnverifiedTextItemCoords";
    /** "AssignCellValue" */
    static public final String ASSIGNCELLVALUE_KEYWORD = "AssignCellValue";
    /** "CaptureItemsToFile" */
    static public final String CAPTUREITEMSTOFILE_KEYWORD = "CaptureItemsToFile";
    /** "ClickIndex" */
    static public final String CLICKINDEX_KEYWORD = "ClickIndex";
    /** "ClickIndexItem" */
    static public final String CLICKINDEXITEM_KEYWORD = "ClickIndexItem";
    /** "ExtendSelectionToTextItem" */
    static public final String EXTENDSELECTIONTOTEXTITEM_KEYWORD = "ExtendSelectionToTextItem";
    /** "RightClickTextItem" */
    static public final String RIGHTCLICKTEXTITEM_KEYWORD = "RightClickTextItem";
    /** "RightClickTextItemCoords" */
    static public final String RIGHTCLICKTEXTITEMCOORDS_KEYWORD = "RightClickTextItemCoords";
    /** "RightClickUnverifiedTextItem" */
    static public final String RIGHTCLICKUNVERIFIEDTEXTITEM_KEYWORD = "RightClickUnverifiedTextItem";
    /** "RightClickUnverifiedTextItemCoords" */
    static public final String RIGHTCLICKUNVERIFIEDTEXTITEMCOORDS_KEYWORD = "RightClickUnverifiedTextItemCoords";
    /** "SelectAnotherPartialMatch" */
    static public final String SELECTANOTHERPARTIALMATCH_KEYWORD = "SelectAnotherPartialMatch";
    /** "SelectAnotherTextItem" */
    static public final String SELECTANOTHERTEXTITEM_KEYWORD = "SelectAnotherTextItem";
    /** "SelectIndex" */
    static public final String SELECTINDEX_KEYWORD = "SelectIndex";
    /** "SelectIndexItem" */
    static public final String SELECTINDEXITEM_KEYWORD = "SelectIndexItem";
    /** "SelectIndexItemCoords" */
    static public final String SELECTINDEXITEMCOORDS_KEYWORD = "SelectIndexItemCoords";
    /** "SelectPartialMatch" */
    static public final String SELECTPARTIALMATCH_KEYWORD = "SelectPartialMatch";
    /** "SelectRandomItems" */
    static public final String SELECTRANDOMITEMS_KEYWORD = "SelectRandomItems";
    /** "SelectTextItem" */
    static public final String SELECTTEXTITEM_KEYWORD = "SelectTextItem";
    /** "SelectTextItemCoords" */
    static public final String SELECTTEXTITEMCOORDS_KEYWORD = "SelectTextItemCoords";
    /** "SelectUnverifiedTextItem" */
    static public final String SELECTUNVERIFIEDTEXTITEM_KEYWORD = "SelectUnverifiedTextItem";
    /** "SelectUnverifiedTextItemCoords" */
    static public final String SELECTUNVERIFIEDTEXTITEMCOORDS_KEYWORD = "SelectUnverifiedTextItemCoords";
    /** "SetListContains" */
    static public final String SETLISTCONTAINS_KEYWORD = "SetListContains";
    /** "VerifyItemUnselected" */
    static public final String VERIFYITEMUNSELECTED_KEYWORD = "VerifyItemUnselected";
    /** "VerifyListContains" */
    static public final String VERIFYLISTCONTAINS_KEYWORD = "VerifyListContains";
    /** "VerifySelectedItem" */
    static public final String VERIFYSELECTEDITEM_KEYWORD = "VerifySelectedItem";


    /*********** <pre> 
                Activate (double-click) an item based on it's index in the list
               
                It is important to note that some ListViews index their values
                differently.  For example, you may need to select an item by 
                text by using a property whose starting index is 1.  Yet, 
                if you request to seek an item strictly by index, the starting 
                index is 0.  So, the test developer may need to evaluate their 
                ListView object for these differences.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param index  Optional:NO 
                 Index of the text item to select
              
     **********/
    static public ComponentFunction activateIndex (String winname, String compname, String index) {

        if ( winname == null ) throw new IllegalArgumentException ( "activateIndex.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "activateIndex.compname = null");

        if ( index == null ) throw new IllegalArgumentException ( "activateIndex.index = null");
        ComponentFunction cf = new ComponentFunction(ACTIVATEINDEX_KEYWORD, winname, compname);
        cf.addParameter(index);
        return cf;
    }


    /*********** <pre> 
                Routine to double click an item according to its index in the list.
               
                It is important to note that some ListViews index their values
                differently.  For example, you may need to select an item by 
                text by using a property whose starting index is 1.  Yet, 
                if you request to seek an item strictly by index, the starting 
                index is 0.  So, the test developer may need to evaluate their 
                ListView object for these differences.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param indexValue  Optional:NO 
                 Index of item to activate.
              
     **********/
    static public ComponentFunction activateIndexItem (String winname, String compname, String indexValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "activateIndexItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "activateIndexItem.compname = null");

        if ( indexValue == null ) throw new IllegalArgumentException ( "activateIndexItem.indexValue = null");
        ComponentFunction cf = new ComponentFunction(ACTIVATEINDEXITEM_KEYWORD, winname, compname);
        cf.addParameter(indexValue);
        return cf;
    }


    /*********** <pre> 
                Routine to double click an item according to a partial text match.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>AutomatedQA TestComplete</LI>
        <LI>Google Android</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param partialTextValue  Optional:NO 
                 Case-sensitive substring of text item to select
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    static public ComponentFunction activatePartialMatch (String winname, String compname, String partialTextValue, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "activatePartialMatch.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "activatePartialMatch.compname = null");

        if ( partialTextValue == null ) throw new IllegalArgumentException ( "activatePartialMatch.partialTextValue = null");
        ComponentFunction cf = new ComponentFunction(ACTIVATEPARTIALMATCH_KEYWORD, winname, compname);
        cf.addParameter(partialTextValue);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                Routine to double click an item according to a partial text match.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>AutomatedQA TestComplete</LI>
        <LI>Google Android</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        partialTextValue -- Optional:NO 
                 Case-sensitive substring of text item to select
              <BR/>        matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    static public ComponentFunction activatePartialMatch(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "activatePartialMatch.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "activatePartialMatch.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "activatePartialMatch.parameters = null");
        ComponentFunction cf = new ComponentFunction(ACTIVATEPARTIALMATCH_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Routine to double click an item according to its text value.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>AutomatedQA TestComplete</LI>
        <LI>Google Android</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param selectTextValue  Optional:NO 
                 Case-sensitive text of node to select
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    static public ComponentFunction activateTextItem (String winname, String compname, String selectTextValue, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "activateTextItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "activateTextItem.compname = null");

        if ( selectTextValue == null ) throw new IllegalArgumentException ( "activateTextItem.selectTextValue = null");
        ComponentFunction cf = new ComponentFunction(ACTIVATETEXTITEM_KEYWORD, winname, compname);
        cf.addParameter(selectTextValue);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                Routine to double click an item according to its text value.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>AutomatedQA TestComplete</LI>
        <LI>Google Android</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        selectTextValue -- Optional:NO 
                 Case-sensitive text of node to select
              <BR/>        matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    static public ComponentFunction activateTextItem(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "activateTextItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "activateTextItem.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "activateTextItem.parameters = null");
        ComponentFunction cf = new ComponentFunction(ACTIVATETEXTITEM_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Double click a text item at specific Coords.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param selectTextValue  Optional:NO 
                 Case-sensitive text of node to select
              
     @param coords  Optional:NO 
                The explicit coordinates ("x,y") or an App Map reference to 
                pre-defined coordinates.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    static public ComponentFunction activateTextItemCoords (String winname, String compname, String selectTextValue, String coords, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "activateTextItemCoords.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "activateTextItemCoords.compname = null");

        if ( coords == null ) throw new IllegalArgumentException ( "activateTextItemCoords.coords = null");
        if ( selectTextValue == null ) throw new IllegalArgumentException ( "activateTextItemCoords.selectTextValue = null");
        ComponentFunction cf = new ComponentFunction(ACTIVATETEXTITEMCOORDS_KEYWORD, winname, compname);
        cf.addParameter(selectTextValue);
        cf.addParameter(coords);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                Double click a text item at specific Coords.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        selectTextValue -- Optional:NO 
                 Case-sensitive text of node to select
              <BR/>        coords -- Optional:NO 
                The explicit coordinates ("x,y") or an App Map reference to 
                pre-defined coordinates.
              <BR/>        matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    static public ComponentFunction activateTextItemCoords(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "activateTextItemCoords.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "activateTextItemCoords.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "activateTextItemCoords.parameters = null");
        ComponentFunction cf = new ComponentFunction(ACTIVATETEXTITEMCOORDS_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Routine to double click an unverifiable item according to its text value.
              
                An unverifiable item is one whose READ value is not the same as its SET value.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>AutomatedQA TestComplete</LI>
        <LI>Google Android</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param selectTextValue  Optional:NO 
                 Case-sensitive text of node to select
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    static public ComponentFunction activateUnverifiedTextItem (String winname, String compname, String selectTextValue, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "activateUnverifiedTextItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "activateUnverifiedTextItem.compname = null");

        if ( selectTextValue == null ) throw new IllegalArgumentException ( "activateUnverifiedTextItem.selectTextValue = null");
        ComponentFunction cf = new ComponentFunction(ACTIVATEUNVERIFIEDTEXTITEM_KEYWORD, winname, compname);
        cf.addParameter(selectTextValue);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                Routine to double click an unverifiable item according to its text value.
              
                An unverifiable item is one whose READ value is not the same as its SET value.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>AutomatedQA TestComplete</LI>
        <LI>Google Android</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        selectTextValue -- Optional:NO 
                 Case-sensitive text of node to select
              <BR/>        matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    static public ComponentFunction activateUnverifiedTextItem(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "activateUnverifiedTextItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "activateUnverifiedTextItem.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "activateUnverifiedTextItem.parameters = null");
        ComponentFunction cf = new ComponentFunction(ACTIVATEUNVERIFIEDTEXTITEM_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Double click an unverifiable text item at specific Coords.
              
                An unverifiable item is one whose READ value is not the same as its SET value.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param selectTextValue  Optional:NO 
                 Case-sensitive text of node to select
              
     @param coords  Optional:NO 
                The explicit coordinates ("x,y") or an App Map reference to 
                pre-defined coordinates.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    static public ComponentFunction activateUnverifiedTextItemCoords (String winname, String compname, String selectTextValue, String coords, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "activateUnverifiedTextItemCoords.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "activateUnverifiedTextItemCoords.compname = null");

        if ( coords == null ) throw new IllegalArgumentException ( "activateUnverifiedTextItemCoords.coords = null");
        if ( selectTextValue == null ) throw new IllegalArgumentException ( "activateUnverifiedTextItemCoords.selectTextValue = null");
        ComponentFunction cf = new ComponentFunction(ACTIVATEUNVERIFIEDTEXTITEMCOORDS_KEYWORD, winname, compname);
        cf.addParameter(selectTextValue);
        cf.addParameter(coords);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                Double click an unverifiable text item at specific Coords.
              
                An unverifiable item is one whose READ value is not the same as its SET value.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        selectTextValue -- Optional:NO 
                 Case-sensitive text of node to select
              <BR/>        coords -- Optional:NO 
                The explicit coordinates ("x,y") or an App Map reference to 
                pre-defined coordinates.
              <BR/>        matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    static public ComponentFunction activateUnverifiedTextItemCoords(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "activateUnverifiedTextItemCoords.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "activateUnverifiedTextItemCoords.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "activateUnverifiedTextItemCoords.parameters = null");
        ComponentFunction cf = new ComponentFunction(ACTIVATEUNVERIFIEDTEXTITEMCOORDS_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Assigns the value of a cell in a listview to a variable.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param variable  Optional:NO 
                 Name of variable to assign value
              
     @param rowCoord  Optional:NO 
                The coordinate of the row in the listview that you want to capture the value.
              
     @param colCoord  Optional:NO 
                The coordinate of the column in the listview that you want to capture the value.
              
     **********/
    static public ComponentFunction assignCellValue (String winname, String compname, String variable, String rowCoord, String colCoord) {

        if ( winname == null ) throw new IllegalArgumentException ( "assignCellValue.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "assignCellValue.compname = null");

        if ( colCoord == null ) throw new IllegalArgumentException ( "assignCellValue.colCoord = null");
        if ( rowCoord == null ) throw new IllegalArgumentException ( "assignCellValue.rowCoord = null");
        if ( variable == null ) throw new IllegalArgumentException ( "assignCellValue.variable = null");
        ComponentFunction cf = new ComponentFunction(ASSIGNCELLVALUE_KEYWORD, winname, compname);
        cf.addParameter(variable);
        cf.addParameter(rowCoord);
        cf.addParameter(colCoord);
        return cf;
    }


    /*********** <pre> 
                Assigns the value of a cell in a listview to a variable.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        variable -- Optional:NO 
                 Name of variable to assign value
              <BR/>        rowCoord -- Optional:NO 
                The coordinate of the row in the listview that you want to capture the value.
              <BR/>        colCoord -- Optional:NO 
                The coordinate of the column in the listview that you want to capture the value.
              
    </UL>

     **********/
    static public ComponentFunction assignCellValue(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "assignCellValue.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "assignCellValue.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "assignCellValue.parameters = null");
        ComponentFunction cf = new ComponentFunction(ASSIGNCELLVALUE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
                Capture Items To a File specified (if not abs, then to test dir)
               
                Capture Items To a File specified (if not abs, then to test dir)
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>AutomatedQA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param fileName  Optional:NO 
                 File name (if not absolute, then to test dir)
              
     @param fileEncoding  Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
     **********/
    static public ComponentFunction captureItemsToFile (String winname, String compname, String fileName, String fileEncoding) {

        if ( winname == null ) throw new IllegalArgumentException ( "captureItemsToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "captureItemsToFile.compname = null");

        if ( fileName == null ) throw new IllegalArgumentException ( "captureItemsToFile.fileName = null");
        ComponentFunction cf = new ComponentFunction(CAPTUREITEMSTOFILE_KEYWORD, winname, compname);
        cf.addParameter(fileName);
        cf.addParameter(fileEncoding);
        return cf;
    }


    /*********** <pre>
                Capture Items To a File specified (if not abs, then to test dir)
               
                Capture Items To a File specified (if not abs, then to test dir)
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>AutomatedQA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fileName -- Optional:NO 
                 File name (if not absolute, then to test dir)
              <BR/>        fileEncoding -- Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
    </UL>

     **********/
    static public ComponentFunction captureItemsToFile(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "captureItemsToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "captureItemsToFile.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "captureItemsToFile.parameters = null");
        ComponentFunction cf = new ComponentFunction(CAPTUREITEMSTOFILE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Same as (Alias for) ListView ActivateIndexItem
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param index  Optional:NO 
                 See ListView ActivateIndexItem
              
     **********/
    static public ComponentFunction clickIndex (String winname, String compname, String index) {

        if ( winname == null ) throw new IllegalArgumentException ( "clickIndex.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "clickIndex.compname = null");

        if ( index == null ) throw new IllegalArgumentException ( "clickIndex.index = null");
        ComponentFunction cf = new ComponentFunction(CLICKINDEX_KEYWORD, winname, compname);
        cf.addParameter(index);
        return cf;
    }


    /*********** <pre> 
                Same as (Alias for) ListView ActivateIndexItem
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param index  Optional:NO 
                 See ListView ActivateIndexItem
              
     **********/
    static public ComponentFunction clickIndexItem (String winname, String compname, String index) {

        if ( winname == null ) throw new IllegalArgumentException ( "clickIndexItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "clickIndexItem.compname = null");

        if ( index == null ) throw new IllegalArgumentException ( "clickIndexItem.index = null");
        ComponentFunction cf = new ComponentFunction(CLICKINDEXITEM_KEYWORD, winname, compname);
        cf.addParameter(index);
        return cf;
    }


    /*********** <pre> 
                Routine to Shift+Click and Verify a selection according to its text value.
               
                This extends the current selection to include the specified selection and all other items inbetween.
                NOTE: This may not work in all environments (Java, Web, etc...)
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>AutomatedQA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to select and verify.
              
     **********/
    static public ComponentFunction extendSelectionToTextItem (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "extendSelectionToTextItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "extendSelectionToTextItem.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "extendSelectionToTextItem.textValue = null");
        ComponentFunction cf = new ComponentFunction(EXTENDSELECTIONTOTEXTITEM_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                     Routine to RightClick (single click) an item according to its text value.
                       </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>AutomatedQA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param selectTextValue  Optional:NO 
                      Case-sensitive text of node to RightClick
                   
     @param matchIndex  Optional:YES 
                      Optional index of the Nth duplicate item to match.
                   
     **********/
    static public ComponentFunction rightClickTextItem (String winname, String compname, String selectTextValue, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "rightClickTextItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "rightClickTextItem.compname = null");

        if ( selectTextValue == null ) throw new IllegalArgumentException ( "rightClickTextItem.selectTextValue = null");
        ComponentFunction cf = new ComponentFunction(RIGHTCLICKTEXTITEM_KEYWORD, winname, compname);
        cf.addParameter(selectTextValue);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                     Routine to RightClick (single click) an item according to its text value.
                       </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>AutomatedQA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        selectTextValue -- Optional:NO 
                      Case-sensitive text of node to RightClick
                   <BR/>        matchIndex -- Optional:YES 
                      Optional index of the Nth duplicate item to match.
                   
    </UL>

     **********/
    static public ComponentFunction rightClickTextItem(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "rightClickTextItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "rightClickTextItem.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "rightClickTextItem.parameters = null");
        ComponentFunction cf = new ComponentFunction(RIGHTCLICKTEXTITEM_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                     Right click a text item at specific Coords.
                       </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param selectTextValue  Optional:NO 
                      Case-sensitive text of node to RightClick
                   
     @param coords  Optional:NO 
                     The explicit coordinates ("x,y") or an App Map reference to 
                     pre-defined coordinates.
                   
     @param matchIndex  Optional:YES 
                      Optional index of the Nth duplicate item to match.
                   
     **********/
    static public ComponentFunction rightClickTextItemCoords (String winname, String compname, String selectTextValue, String coords, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "rightClickTextItemCoords.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "rightClickTextItemCoords.compname = null");

        if ( coords == null ) throw new IllegalArgumentException ( "rightClickTextItemCoords.coords = null");
        if ( selectTextValue == null ) throw new IllegalArgumentException ( "rightClickTextItemCoords.selectTextValue = null");
        ComponentFunction cf = new ComponentFunction(RIGHTCLICKTEXTITEMCOORDS_KEYWORD, winname, compname);
        cf.addParameter(selectTextValue);
        cf.addParameter(coords);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                     Right click a text item at specific Coords.
                       </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        selectTextValue -- Optional:NO 
                      Case-sensitive text of node to RightClick
                   <BR/>        coords -- Optional:NO 
                     The explicit coordinates ("x,y") or an App Map reference to 
                     pre-defined coordinates.
                   <BR/>        matchIndex -- Optional:YES 
                      Optional index of the Nth duplicate item to match.
                   
    </UL>

     **********/
    static public ComponentFunction rightClickTextItemCoords(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "rightClickTextItemCoords.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "rightClickTextItemCoords.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "rightClickTextItemCoords.parameters = null");
        ComponentFunction cf = new ComponentFunction(RIGHTCLICKTEXTITEMCOORDS_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                     Routine to RightClick (single click) an unverifiable item according to its text value.
                   
                     An unverifiable item is one whose READ value is not the same as its SET value.
                       </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param selectTextValue  Optional:NO 
                      Case-sensitive text of node to RightClick
                   
     @param matchIndex  Optional:YES 
                      Optional index of the Nth duplicate item to match.
                   
     **********/
    static public ComponentFunction rightClickUnverifiedTextItem (String winname, String compname, String selectTextValue, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextItem.compname = null");

        if ( selectTextValue == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextItem.selectTextValue = null");
        ComponentFunction cf = new ComponentFunction(RIGHTCLICKUNVERIFIEDTEXTITEM_KEYWORD, winname, compname);
        cf.addParameter(selectTextValue);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                     Routine to RightClick (single click) an unverifiable item according to its text value.
                   
                     An unverifiable item is one whose READ value is not the same as its SET value.
                       </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        selectTextValue -- Optional:NO 
                      Case-sensitive text of node to RightClick
                   <BR/>        matchIndex -- Optional:YES 
                      Optional index of the Nth duplicate item to match.
                   
    </UL>

     **********/
    static public ComponentFunction rightClickUnverifiedTextItem(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextItem.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextItem.parameters = null");
        ComponentFunction cf = new ComponentFunction(RIGHTCLICKUNVERIFIEDTEXTITEM_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                     Right Click an unverifiable text item at specific Coords.
                   
                     An unverifiable item is one whose READ value is not the same as its SET value.
                       </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param selectTextValue  Optional:NO 
                      Case-sensitive text of node to select
                   
     @param coords  Optional:NO 
                     The explicit coordinates ("x,y") or an App Map reference to 
                     pre-defined coordinates.
                   
     @param matchIndex  Optional:YES 
                      Optional index of the Nth duplicate item to match.
                   
     **********/
    static public ComponentFunction rightClickUnverifiedTextItemCoords (String winname, String compname, String selectTextValue, String coords, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextItemCoords.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextItemCoords.compname = null");

        if ( coords == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextItemCoords.coords = null");
        if ( selectTextValue == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextItemCoords.selectTextValue = null");
        ComponentFunction cf = new ComponentFunction(RIGHTCLICKUNVERIFIEDTEXTITEMCOORDS_KEYWORD, winname, compname);
        cf.addParameter(selectTextValue);
        cf.addParameter(coords);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                     Right Click an unverifiable text item at specific Coords.
                   
                     An unverifiable item is one whose READ value is not the same as its SET value.
                       </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        selectTextValue -- Optional:NO 
                      Case-sensitive text of node to select
                   <BR/>        coords -- Optional:NO 
                     The explicit coordinates ("x,y") or an App Map reference to 
                     pre-defined coordinates.
                   <BR/>        matchIndex -- Optional:YES 
                      Optional index of the Nth duplicate item to match.
                   
    </UL>

     **********/
    static public ComponentFunction rightClickUnverifiedTextItemCoords(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextItemCoords.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextItemCoords.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextItemCoords.parameters = null");
        ComponentFunction cf = new ComponentFunction(RIGHTCLICKUNVERIFIEDTEXTITEMCOORDS_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Routine for multiple selection to Control+Click on an item according to a partial text match.
               
                This adds selected items to items already selected.

                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>AutomatedQA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param partialTextValue  Optional:NO 
                 Case-sensitive substring of text item to select.
              
     @param matchIndex  Optional:YES  DefaultVal:1 
                 Optional index of the Nth duplicate item to match. 
              
     **********/
    static public ComponentFunction selectAnotherPartialMatch (String winname, String compname, String partialTextValue, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectAnotherPartialMatch.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectAnotherPartialMatch.compname = null");

        if ( partialTextValue == null ) throw new IllegalArgumentException ( "selectAnotherPartialMatch.partialTextValue = null");
        ComponentFunction cf = new ComponentFunction(SELECTANOTHERPARTIALMATCH_KEYWORD, winname, compname);
        cf.addParameter(partialTextValue);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                Routine for multiple selection to Control+Click on an item according to a partial text match.
               
                This adds selected items to items already selected.

                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>AutomatedQA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        partialTextValue -- Optional:NO 
                 Case-sensitive substring of text item to select.
              <BR/>        matchIndex -- Optional:YES  DefaultVal:1 
                 Optional index of the Nth duplicate item to match. 
              
    </UL>

     **********/
    static public ComponentFunction selectAnotherPartialMatch(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectAnotherPartialMatch.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectAnotherPartialMatch.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectAnotherPartialMatch.parameters = null");
        ComponentFunction cf = new ComponentFunction(SELECTANOTHERPARTIALMATCH_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Routine for multiple selection to Control+Click on an item by its text value.
               
                This adds selected items to items already selected.

                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>AutomatedQA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to select.
              
     @param matchIndex  Optional:YES  DefaultVal:1 
                 Optional index of the Nth duplicate item to match. 
              
     **********/
    static public ComponentFunction selectAnotherTextItem (String winname, String compname, String textValue, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectAnotherTextItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectAnotherTextItem.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectAnotherTextItem.textValue = null");
        ComponentFunction cf = new ComponentFunction(SELECTANOTHERTEXTITEM_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                Routine for multiple selection to Control+Click on an item by its text value.
               
                This adds selected items to items already selected.

                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>AutomatedQA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        textValue -- Optional:NO 
                 Case-sensitive text of node to select.
              <BR/>        matchIndex -- Optional:YES  DefaultVal:1 
                 Optional index of the Nth duplicate item to match. 
              
    </UL>

     **********/
    static public ComponentFunction selectAnotherTextItem(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectAnotherTextItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectAnotherTextItem.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectAnotherTextItem.parameters = null");
        ComponentFunction cf = new ComponentFunction(SELECTANOTHERTEXTITEM_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Same as (Alias for) ListView SelectIndexItem
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param index  Optional:NO 
                 See ListView SelectIndexItem
              
     **********/
    static public ComponentFunction selectIndex (String winname, String compname, String index) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectIndex.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectIndex.compname = null");

        if ( index == null ) throw new IllegalArgumentException ( "selectIndex.index = null");
        ComponentFunction cf = new ComponentFunction(SELECTINDEX_KEYWORD, winname, compname);
        cf.addParameter(index);
        return cf;
    }


    /*********** <pre> 
                Routine to single click an item according to its Index value.
               
                It is important to note that some ListViews index their values
                differently.  For example, you may need to select an item by 
                text by using a property whose starting index is 1.  Yet, 
                if you request to seek an item strictly by index, the starting 
                index is 0.  So, the test developer may need to evaluate their 
                ListView object for these differences.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>AutomatedQA TestComplete</LI>
        <LI>Google Android</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param itemIndex  Optional:NO 
                 Index of node to select.
              
     **********/
    static public ComponentFunction selectIndexItem (String winname, String compname, String itemIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectIndexItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectIndexItem.compname = null");

        if ( itemIndex == null ) throw new IllegalArgumentException ( "selectIndexItem.itemIndex = null");
        ComponentFunction cf = new ComponentFunction(SELECTINDEXITEM_KEYWORD, winname, compname);
        cf.addParameter(itemIndex);
        return cf;
    }


    /*********** <pre> 
                Routine to single click an item by Index at specific coordinates.
               
                It is important to note that some ListViews index their values
                differently.  For example, you may need to select an item by 
                text by using a property whose starting index is 1.  Yet, 
                if you request to seek an item strictly by index, the starting 
                index is 0.  So, the test developer may need to evaluate their 
                ListView object for these differences.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param itemIndex  Optional:NO 
                 Index of node to select.
              
     @param coords  Optional:NO 
                The explicit coordinates ("x,y") or an App Map reference to 
                pre-defined coordinates.
              
     **********/
    static public ComponentFunction selectIndexItemCoords (String winname, String compname, String itemIndex, String coords) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectIndexItemCoords.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectIndexItemCoords.compname = null");

        if ( coords == null ) throw new IllegalArgumentException ( "selectIndexItemCoords.coords = null");
        if ( itemIndex == null ) throw new IllegalArgumentException ( "selectIndexItemCoords.itemIndex = null");
        ComponentFunction cf = new ComponentFunction(SELECTINDEXITEMCOORDS_KEYWORD, winname, compname);
        cf.addParameter(itemIndex);
        cf.addParameter(coords);
        return cf;
    }


    /*********** <pre> 
                Routine to single click an item by Index at specific coordinates.
               
                It is important to note that some ListViews index their values
                differently.  For example, you may need to select an item by 
                text by using a property whose starting index is 1.  Yet, 
                if you request to seek an item strictly by index, the starting 
                index is 0.  So, the test developer may need to evaluate their 
                ListView object for these differences.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        itemIndex -- Optional:NO 
                 Index of node to select.
              <BR/>        coords -- Optional:NO 
                The explicit coordinates ("x,y") or an App Map reference to 
                pre-defined coordinates.
              
    </UL>

     **********/
    static public ComponentFunction selectIndexItemCoords(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectIndexItemCoords.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectIndexItemCoords.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectIndexItemCoords.parameters = null");
        ComponentFunction cf = new ComponentFunction(SELECTINDEXITEMCOORDS_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Routine to select (single click) an item according to a partial text match.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>AutomatedQA TestComplete</LI>
        <LI>Google Android</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param partialTextValue  Optional:NO 
                 Case-sensitive substring of node to select
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    static public ComponentFunction selectPartialMatch (String winname, String compname, String partialTextValue, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectPartialMatch.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectPartialMatch.compname = null");

        if ( partialTextValue == null ) throw new IllegalArgumentException ( "selectPartialMatch.partialTextValue = null");
        ComponentFunction cf = new ComponentFunction(SELECTPARTIALMATCH_KEYWORD, winname, compname);
        cf.addParameter(partialTextValue);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                Routine to select (single click) an item according to a partial text match.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>AutomatedQA TestComplete</LI>
        <LI>Google Android</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        partialTextValue -- Optional:NO 
                 Case-sensitive substring of node to select
              <BR/>        matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    static public ComponentFunction selectPartialMatch(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectPartialMatch.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectPartialMatch.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectPartialMatch.parameters = null");
        ComponentFunction cf = new ComponentFunction(SELECTPARTIALMATCH_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Routine to randomly select multiple items in the ListView object.
              
                Routine to randomly select multiple items in the ListView object.  
                Each selection is done with a CTRL + Single Left Click.  
                Items are selected by index, not by their text values. Items 
                already selected are NOT unselected.  We add to existing 
                selections.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param itemCount  Optional:NO 
                  The quantity of items to randomly select in the object.
              
     **********/
    static public ComponentFunction selectRandomItems (String winname, String compname, String itemCount) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectRandomItems.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectRandomItems.compname = null");

        if ( itemCount == null ) throw new IllegalArgumentException ( "selectRandomItems.itemCount = null");
        ComponentFunction cf = new ComponentFunction(SELECTRANDOMITEMS_KEYWORD, winname, compname);
        cf.addParameter(itemCount);
        return cf;
    }


    /*********** <pre> 
                Routine to select (single click) an item according to its text value.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>AutomatedQA TestComplete</LI>
        <LI>Google Android</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param selectTextValue  Optional:NO 
                 Case-sensitive text of node to select
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    static public ComponentFunction selectTextItem (String winname, String compname, String selectTextValue, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectTextItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectTextItem.compname = null");

        if ( selectTextValue == null ) throw new IllegalArgumentException ( "selectTextItem.selectTextValue = null");
        ComponentFunction cf = new ComponentFunction(SELECTTEXTITEM_KEYWORD, winname, compname);
        cf.addParameter(selectTextValue);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                Routine to select (single click) an item according to its text value.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>AutomatedQA TestComplete</LI>
        <LI>Google Android</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        selectTextValue -- Optional:NO 
                 Case-sensitive text of node to select
              <BR/>        matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    static public ComponentFunction selectTextItem(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectTextItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectTextItem.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectTextItem.parameters = null");
        ComponentFunction cf = new ComponentFunction(SELECTTEXTITEM_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Single click a text item at specific Coords.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param selectTextValue  Optional:NO 
                 Case-sensitive text of node to select
              
     @param coords  Optional:NO 
                The explicit coordinates ("x,y") or an App Map reference to 
                pre-defined coordinates.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    static public ComponentFunction selectTextItemCoords (String winname, String compname, String selectTextValue, String coords, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectTextItemCoords.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectTextItemCoords.compname = null");

        if ( coords == null ) throw new IllegalArgumentException ( "selectTextItemCoords.coords = null");
        if ( selectTextValue == null ) throw new IllegalArgumentException ( "selectTextItemCoords.selectTextValue = null");
        ComponentFunction cf = new ComponentFunction(SELECTTEXTITEMCOORDS_KEYWORD, winname, compname);
        cf.addParameter(selectTextValue);
        cf.addParameter(coords);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                Single click a text item at specific Coords.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        selectTextValue -- Optional:NO 
                 Case-sensitive text of node to select
              <BR/>        coords -- Optional:NO 
                The explicit coordinates ("x,y") or an App Map reference to 
                pre-defined coordinates.
              <BR/>        matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    static public ComponentFunction selectTextItemCoords(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectTextItemCoords.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectTextItemCoords.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectTextItemCoords.parameters = null");
        ComponentFunction cf = new ComponentFunction(SELECTTEXTITEMCOORDS_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Routine to select (single click) an unverifiable item according to its text value.
              
                An unverifiable item is one whose READ value is not the same as its SET value.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>AutomatedQA TestComplete</LI>
        <LI>Google Android</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param selectTextValue  Optional:NO 
                 Case-sensitive text of node to select
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    static public ComponentFunction selectUnverifiedTextItem (String winname, String compname, String selectTextValue, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectUnverifiedTextItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectUnverifiedTextItem.compname = null");

        if ( selectTextValue == null ) throw new IllegalArgumentException ( "selectUnverifiedTextItem.selectTextValue = null");
        ComponentFunction cf = new ComponentFunction(SELECTUNVERIFIEDTEXTITEM_KEYWORD, winname, compname);
        cf.addParameter(selectTextValue);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                Routine to select (single click) an unverifiable item according to its text value.
              
                An unverifiable item is one whose READ value is not the same as its SET value.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>AutomatedQA TestComplete</LI>
        <LI>Google Android</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        selectTextValue -- Optional:NO 
                 Case-sensitive text of node to select
              <BR/>        matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    static public ComponentFunction selectUnverifiedTextItem(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectUnverifiedTextItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectUnverifiedTextItem.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectUnverifiedTextItem.parameters = null");
        ComponentFunction cf = new ComponentFunction(SELECTUNVERIFIEDTEXTITEM_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Single click an unverifiable text item at specific Coords.
              
                An unverifiable item is one whose READ value is not the same as its SET value.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param selectTextValue  Optional:NO 
                 Case-sensitive text of node to select
              
     @param coords  Optional:NO 
                The explicit coordinates ("x,y") or an App Map reference to 
                pre-defined coordinates.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    static public ComponentFunction selectUnverifiedTextItemCoords (String winname, String compname, String selectTextValue, String coords, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectUnverifiedTextItemCoords.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectUnverifiedTextItemCoords.compname = null");

        if ( coords == null ) throw new IllegalArgumentException ( "selectUnverifiedTextItemCoords.coords = null");
        if ( selectTextValue == null ) throw new IllegalArgumentException ( "selectUnverifiedTextItemCoords.selectTextValue = null");
        ComponentFunction cf = new ComponentFunction(SELECTUNVERIFIEDTEXTITEMCOORDS_KEYWORD, winname, compname);
        cf.addParameter(selectTextValue);
        cf.addParameter(coords);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                Single click an unverifiable text item at specific Coords.
              
                An unverifiable item is one whose READ value is not the same as its SET value.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        selectTextValue -- Optional:NO 
                 Case-sensitive text of node to select
              <BR/>        coords -- Optional:NO 
                The explicit coordinates ("x,y") or an App Map reference to 
                pre-defined coordinates.
              <BR/>        matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    static public ComponentFunction selectUnverifiedTextItemCoords(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectUnverifiedTextItemCoords.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectUnverifiedTextItemCoords.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectUnverifiedTextItemCoords.parameters = null");
        ComponentFunction cf = new ComponentFunction(SELECTUNVERIFIEDTEXTITEMCOORDS_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
            	Set a variable with the result of checking that a listview contains the provided item.
			
            	The search of the item is expected to be a case-sensitive exact match of the item.  The
            	   provided variable is set with 'TRUE' if the item is found or 'FALSE' if the item is not found.
                </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>AutomatedQA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param itemText  Optional:NO
						The case-sensitive name of the sought item.
					
     @param resultVar  Optional:NO
						The name of the variable receiving the result.
					
     **********/
    static public ComponentFunction setListContains (String winname, String compname, String itemText, String resultVar) {

        if ( winname == null ) throw new IllegalArgumentException ( "setListContains.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "setListContains.compname = null");

        if ( itemText == null ) throw new IllegalArgumentException ( "setListContains.itemText = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "setListContains.resultVar = null");
        ComponentFunction cf = new ComponentFunction(SETLISTCONTAINS_KEYWORD, winname, compname);
        cf.addParameter(itemText);
        cf.addParameter(resultVar);
        return cf;
    }


    /*********** <pre>
            	Set a variable with the result of checking that a listview contains the provided item.
			
            	The search of the item is expected to be a case-sensitive exact match of the item.  The
            	   provided variable is set with 'TRUE' if the item is found or 'FALSE' if the item is not found.
                </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>AutomatedQA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        itemText -- Optional:NO
						The case-sensitive name of the sought item.
					<BR/>        resultVar -- Optional:NO
						The name of the variable receiving the result.
					
    </UL>

     **********/
    static public ComponentFunction setListContains(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "setListContains.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "setListContains.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "setListContains.parameters = null");
        ComponentFunction cf = new ComponentFunction(SETLISTCONTAINS_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Verifies a particular case-sensitive text item is NOT selected.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>AutomatedQA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of node that will be verified unselected
              
     **********/
    static public ComponentFunction verifyItemUnselected (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyItemUnselected.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyItemUnselected.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "verifyItemUnselected.textValue = null");
        ComponentFunction cf = new ComponentFunction(VERIFYITEMUNSELECTED_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre>
            	Verify that a list view contains the provided item.
			
            	The search of the item is expected to be a case-sensitive exact match of the item.
                </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>AutomatedQA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param itemText  Optional:NO
						The case-sensitive name of the item to verify.
					
     **********/
    static public ComponentFunction verifyListContains (String winname, String compname, String itemText) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyListContains.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyListContains.compname = null");

        if ( itemText == null ) throw new IllegalArgumentException ( "verifyListContains.itemText = null");
        ComponentFunction cf = new ComponentFunction(VERIFYLISTCONTAINS_KEYWORD, winname, compname);
        cf.addParameter(itemText);
        return cf;
    }


    /*********** <pre> 
                Verifies a particular case-sensitive text item is selected
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>AutomatedQA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of node that will be verified selected
              
     **********/
    static public ComponentFunction verifySelectedItem (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifySelectedItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifySelectedItem.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "verifySelectedItem.textValue = null");
        ComponentFunction cf = new ComponentFunction(VERIFYSELECTEDITEM_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


}
