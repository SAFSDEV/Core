
/******************************************************************************
 * EditBoxFunctions.java
 *
 * Copyright (C) SAS Institute, All rights reserved.
 * General Public License: https://www.gnu.org/licenses/gpl-3.0.en.html
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   EditBoxFunctions.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaCommandModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe EditBoxFunctions.xml XSLJavaCommandModel.xsl -o EditBoxFunctions.java
 *
 ******************************************************************************/ 
package org.safs.model.commands;


import org.safs.model.ComponentFunction;


public class EditBoxFunctions {

    /*****************
    Private Singleton Instance
    ****************/
    private static final EditBoxFunctions singleton = new EditBoxFunctions(); 

    /*****************
    Private Constructor
    Static class needing no instantiation.
    ****************/
    private EditBoxFunctions() {}

    /*****************
    public Singleton to access class static methods via instance
    ****************/
    public static EditBoxFunctions getInstance() { return singleton;}

    /** "SetTextCharacters" */
    static public final String SETTEXTCHARACTERS_KEYWORD = "SetTextCharacters";
    /** "SetTextValue" */
    static public final String SETTEXTVALUE_KEYWORD = "SetTextValue";
    /** "SetUnverifiedTextCharacters" */
    static public final String SETUNVERIFIEDTEXTCHARACTERS_KEYWORD = "SetUnverifiedTextCharacters";
    /** "SetUnverifiedTextValue" */
    static public final String SETUNVERIFIEDTEXTVALUE_KEYWORD = "SetUnverifiedTextValue";


    /*********** <pre> 
            Set the text of the editbox
               
                This action sets the text of the editbox.
                It verifies we can read the property, sets the text value and then 
                verifies that the property has been set to that value.
                This routine uses only the literal text provided.  It does not attempt 
                to convert or interpret the text provided as special characters.  To 
                do that, see the SetTextValue command.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:YES  DefaultVal: 
             The text that will be typed into the EditBox.
              
     **********/
    static public ComponentFunction setTextCharacters (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "setTextCharacters.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "setTextCharacters.compname = null");

        ComponentFunction cf = new ComponentFunction(SETTEXTCHARACTERS_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                Set the text of the editbox
               
                This action sets the text of the editbox.  This version allows the use 
                of special character combinations and substrings to identify specific 
                keyboard keys.  These are the same special characters and interpretation 
                used for Robot's InputKeys command and the Windows Scripting Host.
                
                ~^+%{( are primarily the characters that induce special processing.
                
                The routine verifies we can read the text property, sets the text value 
                and will verify that the property has been set to that value *IF* none 
                of the special characters exist in the provided text value.  If those 
                special characters exist, then no post-set verification will occur.
                
                If you do not want to have any characters converted or interpretted as 
                special characters then you need to use the SetTextCharacters command.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
        <LI>Google Android</LI>
        <LI>AUTOIT Team Autoit</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:YES  DefaultVal: 
                 The text that will be typed into the EditBox and verified.
              
     **********/
    static public ComponentFunction setTextValue (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "setTextValue.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "setTextValue.compname = null");

        ComponentFunction cf = new ComponentFunction(SETTEXTVALUE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
            Set the text of the editbox
               
                This action sets the text of the editbox.
                This routine uses only the literal text provided.  It does not attempt 
                to convert or interpret the text provided as special characters.  To 
                do that, see the SetTextValue commands.
                No attempt to verify the EditBox value is performed.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:YES  DefaultVal: 
             The text that will be typed into the EditBox.
              
     **********/
    static public ComponentFunction setUnverifiedTextCharacters (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "setUnverifiedTextCharacters.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "setUnverifiedTextCharacters.compname = null");

        ComponentFunction cf = new ComponentFunction(SETUNVERIFIEDTEXTCHARACTERS_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                Set the text of the editbox without verification
               
                This action sets the text of the editbox.  This version allows the use 
                of special character combinations and substrings to identify specific 
                keyboard keys.  These are the same special characters and interpretation 
                used for Robot's InputKeys command and the Windows Scripting Host.
                
                The routine does not verify that the property has been set to that 
                value.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
        <LI>Google Android</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:YES  DefaultVal: 
             The text that will be typed into the EditBox.
              
     **********/
    static public ComponentFunction setUnverifiedTextValue (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "setUnverifiedTextValue.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "setUnverifiedTextValue.compname = null");

        ComponentFunction cf = new ComponentFunction(SETUNVERIFIEDTEXTVALUE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


}
