
/******************************************************************************
 * GenericMasterFunctions.java
 *
 * Copyright (c) by SAS Institute Inc., Cary, NC 27513
 * General Public License: http://www.opensource.org/licenses/gpl-license.php
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   GenericMasterFunctions.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaCommandModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe GenericMasterFunctions.xml XSLJavaCommandModel.xsl -o GenericMasterFunctions.java
 *
 ******************************************************************************/ 
package org.safs.model.commands;


import org.safs.model.ComponentFunction;


public class GenericMasterFunctions {

    /*****************
    Private Singleton Instance
    ****************/
    private static final GenericMasterFunctions singleton = new GenericMasterFunctions(); 

    /*****************
    Private Constructor
    Static class needing no instantiation.
    ****************/
    private GenericMasterFunctions() {}

    /*****************
    public Singleton to access class static methods via instance
    ****************/
    public static GenericMasterFunctions getInstance() { return singleton;}

    /** "AssignPropertyVariable" */
    static public final String ASSIGNPROPERTYVARIABLE_KEYWORD = "AssignPropertyVariable";
    /** "CaptureObjectDataToFile" */
    static public final String CAPTUREOBJECTDATATOFILE_KEYWORD = "CaptureObjectDataToFile";
    /** "CapturePropertiesToFile" */
    static public final String CAPTUREPROPERTIESTOFILE_KEYWORD = "CapturePropertiesToFile";
    /** "CapturePropertyToFile" */
    static public final String CAPTUREPROPERTYTOFILE_KEYWORD = "CapturePropertyToFile";
    /** "ClearAppMapCache" */
    static public final String CLEARAPPMAPCACHE_KEYWORD = "ClearAppMapCache";
    /** "ClearCache" */
    static public final String CLEARCACHE_KEYWORD = "ClearCache";
    /** "ExecuteScript" */
    static public final String EXECUTESCRIPT_KEYWORD = "ExecuteScript";
    /** "GetComputedStyle" */
    static public final String GETCOMPUTEDSTYLE_KEYWORD = "GetComputedStyle";
    /** "GetGUIImage" */
    static public final String GETGUIIMAGE_KEYWORD = "GetGUIImage";
    /** "GetTextFromGUI" */
    static public final String GETTEXTFROMGUI_KEYWORD = "GetTextFromGUI";
    /** "GUIDoesExist" */
    static public final String GUIDOESEXIST_KEYWORD = "GUIDoesExist";
    /** "GUIDoesNotExist" */
    static public final String GUIDOESNOTEXIST_KEYWORD = "GUIDoesNotExist";
    /** "HoverMouse" */
    static public final String HOVERMOUSE_KEYWORD = "HoverMouse";
    /** "HoverScreenLocation" */
    static public final String HOVERSCREENLOCATION_KEYWORD = "HoverScreenLocation";
    /** "InputCharacters" */
    static public final String INPUTCHARACTERS_KEYWORD = "InputCharacters";
    /** "InputKeys" */
    static public final String INPUTKEYS_KEYWORD = "InputKeys";
    /** "IsPropertyExist" */
    static public final String ISPROPERTYEXIST_KEYWORD = "IsPropertyExist";
    /** "LocateScreenImage" */
    static public final String LOCATESCREENIMAGE_KEYWORD = "LocateScreenImage";
    /** "SaveTextFromGUI" */
    static public final String SAVETEXTFROMGUI_KEYWORD = "SaveTextFromGUI";
    /** "SendEvent" */
    static public final String SENDEVENT_KEYWORD = "SendEvent";
    /** "SetPropertyValue" */
    static public final String SETPROPERTYVALUE_KEYWORD = "SetPropertyValue";
    /** "ShowOnPage" */
    static public final String SHOWONPAGE_KEYWORD = "ShowOnPage";
    /** "TypeChars" */
    static public final String TYPECHARS_KEYWORD = "TypeChars";
    /** "TypeEncryption" */
    static public final String TYPEENCRYPTION_KEYWORD = "TypeEncryption";
    /** "TypeKeys" */
    static public final String TYPEKEYS_KEYWORD = "TypeKeys";
    /** "VerifyArrayPropertyToFile" */
    static public final String VERIFYARRAYPROPERTYTOFILE_KEYWORD = "VerifyArrayPropertyToFile";
    /** "VerifyBinaryFileToFile" */
    static public final String VERIFYBINARYFILETOFILE_KEYWORD = "VerifyBinaryFileToFile";
    /** "VerifyClipboardToFile" */
    static public final String VERIFYCLIPBOARDTOFILE_KEYWORD = "VerifyClipboardToFile";
    /** "VerifyClipboardVP" */
    static public final String VERIFYCLIPBOARDVP_KEYWORD = "VerifyClipboardVP";
    /** "VerifyComputedStyle" */
    static public final String VERIFYCOMPUTEDSTYLE_KEYWORD = "VerifyComputedStyle";
    /** "VerifyFileToFile" */
    static public final String VERIFYFILETOFILE_KEYWORD = "VerifyFileToFile";
    /** "VerifyGUIImageToFile" */
    static public final String VERIFYGUIIMAGETOFILE_KEYWORD = "VerifyGUIImageToFile";
    /** "VerifyObjectDataToFile" */
    static public final String VERIFYOBJECTDATATOFILE_KEYWORD = "VerifyObjectDataToFile";
    /** "VerifyPropertiesSubsetToFile" */
    static public final String VERIFYPROPERTIESSUBSETTOFILE_KEYWORD = "VerifyPropertiesSubsetToFile";
    /** "VerifyPropertiesToFile" */
    static public final String VERIFYPROPERTIESTOFILE_KEYWORD = "VerifyPropertiesToFile";
    /** "VerifyProperty" */
    static public final String VERIFYPROPERTY_KEYWORD = "VerifyProperty";
    /** "VerifyPropertyContains" */
    static public final String VERIFYPROPERTYCONTAINS_KEYWORD = "VerifyPropertyContains";
    /** "VerifyPropertyToFile" */
    static public final String VERIFYPROPERTYTOFILE_KEYWORD = "VerifyPropertyToFile";
    /** "VerifyTabOrder" */
    static public final String VERIFYTABORDER_KEYWORD = "VerifyTabOrder";
    /** "VerifyTextFileToFile" */
    static public final String VERIFYTEXTFILETOFILE_KEYWORD = "VerifyTextFileToFile";
    /** "VerifyValueContains" */
    static public final String VERIFYVALUECONTAINS_KEYWORD = "VerifyValueContains";
    /** "VerifyValueContainsIgnoreCase" */
    static public final String VERIFYVALUECONTAINSIGNORECASE_KEYWORD = "VerifyValueContainsIgnoreCase";
    /** "VerifyValueDoesNotContain" */
    static public final String VERIFYVALUEDOESNOTCONTAIN_KEYWORD = "VerifyValueDoesNotContain";
    /** "VerifyValues" */
    static public final String VERIFYVALUES_KEYWORD = "VerifyValues";
    /** "VerifyValuesIgnoreCase" */
    static public final String VERIFYVALUESIGNORECASE_KEYWORD = "VerifyValuesIgnoreCase";
    /** "VerifyValuesNotEqual" */
    static public final String VERIFYVALUESNOTEQUAL_KEYWORD = "VerifyValuesNotEqual";


    /*********** <pre>
               Assign the string value of an object property to a specific DDVariable
              
               Assign the string value of an object property to a specific DDVariable.
               Note, if you supply the name of the variable and include the leading
               caret (^) symbol then the variable must be enclosed in quotes.
               Otherwise, that variable will be used like any other variable and the
               substituted value of that variable will be interpretted as the name
               of the variable you wish to use.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Apple IOS</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param propertyName  Optional:NO
             The case-sensitive name of the object property.
              
     @param variableName  Optional:NO
             The name of the variable to receive the property value.
              
     @param suppressValue  Optional:YES
             Set to "SUPPRESSVALUE" to prevent the logging of ugly multi-line property values.
              
     **********/
    static public ComponentFunction assignPropertyVariable (String winname, String compname, String propertyName, String variableName, String suppressValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "assignPropertyVariable.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "assignPropertyVariable.compname = null");

        if ( propertyName == null ) throw new IllegalArgumentException ( "assignPropertyVariable.propertyName = null");
        if ( variableName == null ) throw new IllegalArgumentException ( "assignPropertyVariable.variableName = null");
        ComponentFunction cf = new ComponentFunction(ASSIGNPROPERTYVARIABLE_KEYWORD, winname, compname);
        cf.addParameter(propertyName);
        cf.addParameter(variableName);
        cf.addParameter(suppressValue);
        return cf;
    }


    /*********** <pre>
               Assign the string value of an object property to a specific DDVariable
              
               Assign the string value of an object property to a specific DDVariable.
               Note, if you supply the name of the variable and include the leading
               caret (^) symbol then the variable must be enclosed in quotes.
               Otherwise, that variable will be used like any other variable and the
               substituted value of that variable will be interpretted as the name
               of the variable you wish to use.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Apple IOS</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        propertyName -- Optional:NO
             The case-sensitive name of the object property.
              <BR/>        variableName -- Optional:NO
             The name of the variable to receive the property value.
              <BR/>        suppressValue -- Optional:YES
             Set to "SUPPRESSVALUE" to prevent the logging of ugly multi-line property values.
              
    </UL>

     **********/
    static public ComponentFunction assignPropertyVariable(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "assignPropertyVariable.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "assignPropertyVariable.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "assignPropertyVariable.parameters = null");
        ComponentFunction cf = new ComponentFunction(ASSIGNPROPERTYVARIABLE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
             Copy the current contents of an object's data to a file.
              
             Only an object that Robot can perform an ObjectData VP 
             on can use this command.  By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param file  Optional:NO
             The name of the file used to store the object data.
              
     @param fileEncoding  Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
             If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
     @param filterMode  Optional:YES  DefaultVal:
             (Future) Specify a file filter to use to process the text before comparison.
              
     @param filterOptions  Optional:YES  DefaultVal:
             (Future) Specify filter options to use with the file filter.
              
     **********/
    static public ComponentFunction captureObjectDataToFile (String winname, String compname, String file, String fileEncoding, String filterMode, String filterOptions) {

        if ( winname == null ) throw new IllegalArgumentException ( "captureObjectDataToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "captureObjectDataToFile.compname = null");

        if ( file == null ) throw new IllegalArgumentException ( "captureObjectDataToFile.file = null");
        ComponentFunction cf = new ComponentFunction(CAPTUREOBJECTDATATOFILE_KEYWORD, winname, compname);
        cf.addParameter(file);
        cf.addParameter(fileEncoding);
        cf.addParameter(filterMode);
        cf.addParameter(filterOptions);
        return cf;
    }


    /*********** <pre>
             Copy the current contents of an object's data to a file.
              
             Only an object that Robot can perform an ObjectData VP 
             on can use this command.  By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        file -- Optional:NO
             The name of the file used to store the object data.
              <BR/>        fileEncoding -- Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
             If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            <BR/>        filterMode -- Optional:YES  DefaultVal:
             (Future) Specify a file filter to use to process the text before comparison.
              <BR/>        filterOptions -- Optional:YES  DefaultVal:
             (Future) Specify filter options to use with the file filter.
              
    </UL>

     **********/
    static public ComponentFunction captureObjectDataToFile(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "captureObjectDataToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "captureObjectDataToFile.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "captureObjectDataToFile.parameters = null");
        ComponentFunction cf = new ComponentFunction(CAPTUREOBJECTDATATOFILE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
             Copy all of the value properties a test object to a file.
              
             Copy all of the value properties a test object to a file.
             By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path must already exist.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>Apple IOS</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>Google Android</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param file  Optional:NO
             The name of the file used to store the property list data.
              
     @param fileEncoding  Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
             
     **********/
    static public ComponentFunction capturePropertiesToFile (String winname, String compname, String file, String fileEncoding) {

        if ( winname == null ) throw new IllegalArgumentException ( "capturePropertiesToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "capturePropertiesToFile.compname = null");

        if ( file == null ) throw new IllegalArgumentException ( "capturePropertiesToFile.file = null");
        ComponentFunction cf = new ComponentFunction(CAPTUREPROPERTIESTOFILE_KEYWORD, winname, compname);
        cf.addParameter(file);
        cf.addParameter(fileEncoding);
        return cf;
    }


    /*********** <pre>
             Copy all of the value properties a test object to a file.
              
             Copy all of the value properties a test object to a file.
             By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path must already exist.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>Apple IOS</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>Google Android</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        file -- Optional:NO
             The name of the file used to store the property list data.
              <BR/>        fileEncoding -- Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
             
    </UL>

     **********/
    static public ComponentFunction capturePropertiesToFile(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "capturePropertiesToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "capturePropertiesToFile.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "capturePropertiesToFile.parameters = null");
        ComponentFunction cf = new ComponentFunction(CAPTUREPROPERTIESTOFILE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
             Copy a propertie's value of a test object to to a file.
              
             Copy a propertie's value of a test object to to a file.
			 The file will be stored in the active "Test" directory. 
		     If you specify a relative path, the path will be relative 
		     to the project directory.  The directory for a full or 
		     relative path must already exist.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>Apple IOS</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param propertyName  Optional:NO
             The case-sensitive name of the object array property to verify.
              
     @param file  Optional:NO
             The name of the file used to store the property list data.
              
     @param fileEncoding  Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
             If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
     **********/
    static public ComponentFunction capturePropertyToFile (String winname, String compname, String propertyName, String file, String fileEncoding) {

        if ( winname == null ) throw new IllegalArgumentException ( "capturePropertyToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "capturePropertyToFile.compname = null");

        if ( file == null ) throw new IllegalArgumentException ( "capturePropertyToFile.file = null");
        if ( propertyName == null ) throw new IllegalArgumentException ( "capturePropertyToFile.propertyName = null");
        ComponentFunction cf = new ComponentFunction(CAPTUREPROPERTYTOFILE_KEYWORD, winname, compname);
        cf.addParameter(propertyName);
        cf.addParameter(file);
        cf.addParameter(fileEncoding);
        return cf;
    }


    /*********** <pre>
             Copy a propertie's value of a test object to to a file.
              
             Copy a propertie's value of a test object to to a file.
			 The file will be stored in the active "Test" directory. 
		     If you specify a relative path, the path will be relative 
		     to the project directory.  The directory for a full or 
		     relative path must already exist.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>Apple IOS</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        propertyName -- Optional:NO
             The case-sensitive name of the object array property to verify.
              <BR/>        file -- Optional:NO
             The name of the file used to store the property list data.
              <BR/>        fileEncoding -- Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
             If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
    </UL>

     **********/
    static public ComponentFunction capturePropertyToFile(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "capturePropertyToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "capturePropertyToFile.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "capturePropertyToFile.parameters = null");
        ComponentFunction cf = new ComponentFunction(CAPTUREPROPERTYTOFILE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
             Clear the internal application map cache.
          
             Some Engines maintain an internal cache of previously sought
             application objects.  In RobotJ, there exists a cache of
             TestObject objects, that cache is cleared by this command
             so that the recognition string algorithm has to be re-run
             the next time a window or component is to be recognized.
             This is useful for cases when a dialog pops up, goes
             away, then pops up again.  The cached version of the
             dialog or it's components may not correspond to the actual
             version.  This command lets a tester clear the cache when
             this kind of condition may arrise.
             (Future: instruct the safsmaps service
             to reload it's application map data)
              </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     **********/
    static public ComponentFunction clearAppMapCache (String winname, String compname) {

        if ( winname == null ) throw new IllegalArgumentException ( "clearAppMapCache.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "clearAppMapCache.compname = null");

        ComponentFunction cf = new ComponentFunction(CLEARAPPMAPCACHE_KEYWORD, winname, compname);
        return cf;
    }


    /*********** <pre>
                Clear the cache of a component.
              
                Clear the cache of a component. To save time, component may contain a cache to store its content
                or some time-consuming resource. But sometime, the cache's content may not be fresh, which will
                 affect the test, at this situation, user may call this keyword to clear the cache and SAFS will
                 use the latest content.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     **********/
    static public ComponentFunction clearCache (String winname, String compname) {

        if ( winname == null ) throw new IllegalArgumentException ( "clearCache.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "clearCache.compname = null");
        ComponentFunction cf = new ComponentFunction(CLEARCACHE_KEYWORD, winname, compname);
        return cf;
    }


    /*********** <pre>
                Execute a piece of script on the specified component synchronously.
              
                Execute a piece of script on the specified component synchronously.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param script  Optional:NO
                The script to execute.
              
     @param paramN  Optional:YES
                The paramters passed to script.
              
     **********/
    static public ComponentFunction executeScript (String winname, String compname, String script, String paramN) {

        if ( winname == null ) throw new IllegalArgumentException ( "executeScript.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "executeScript.compname = null");

        if ( script == null ) throw new IllegalArgumentException ( "executeScript.script = null");
        ComponentFunction cf = new ComponentFunction(EXECUTESCRIPT_KEYWORD, winname, compname);
        cf.addParameter(script);
        cf.addParameter(paramN);
        return cf;
    }


    /*********** <pre>
                Execute a piece of script on the specified component synchronously.
              
                Execute a piece of script on the specified component synchronously.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        script -- Optional:NO
                The script to execute.
              <BR/>        paramN -- Optional:YES
                The paramters passed to script.
              
    </UL>

     **********/
    static public ComponentFunction executeScript(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "executeScript.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "executeScript.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "executeScript.parameters = null");
        ComponentFunction cf = new ComponentFunction(EXECUTESCRIPT_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
                Get a component's 'computed style', and save them to a file.
              
                Get a component's 'computed style', and save them to a file.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param testFile  Optional:NO
                The test file to save 'computed style'.
              
     **********/
    static public ComponentFunction getComputedStyle (String winname, String compname, String testFile) {

        if ( winname == null ) throw new IllegalArgumentException ( "getComputedStyle.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "getComputedStyle.compname = null");

        if ( testFile == null ) throw new IllegalArgumentException ( "getComputedStyle.testFile = null");
        ComponentFunction cf = new ComponentFunction(GETCOMPUTEDSTYLE_KEYWORD, winname, compname);
        cf.addParameter(testFile);
        return cf;
    }


    /*********** <pre>
               Capture the screen shot of a GUI component and save it to a file
              
               Capture the screen shot of a GUI component and save it to a file.
               The available formats for the output file are BITMAP (*.bmp) and JPEG
               (*.jpg). 
               For RJ and IBT engine, other formats like TIFF (*.tif), GIF (*.gif), 
               PNG (*.png) and PNM (*.pnm) are also supported.
               Optionally the user can specify part of the component to capture.
               
               The specified GUI component/part must be in the viewing range of its 
               containing window. If portion of the component is displayed in the 
               window, only that portion will be captured; if the component falls
               completely out of the viewing range of the window, the command will 
               fail. The command makes no attempt to bring the component into view.
               
               
               Robot Classic (RC) Specific Notes:  
               		1) This command may fail to execute if the user has turned off logging 
              	 	to TestManager via the Robot tools setting.  You may have to enable 
               		TestManager logging for the command to successfully execute.
               		2) This command requires that the TestManager Image Comparator tool is
               		installed on the test machine. Machines having only the Robot Test Agent
               		installed will not be able to use this command.
               		3) Due to a bug in Robot Classic, images captured using the Robot Classic
			engine may differ in image size and/or file size from those captured using 
			other supported engines.  Depending on the comparator used, rebenching
               		your images may be necessary when migrating to another engine.
               
               
               RobotJ (RJ) and IBT Specific Notes:
               		1)It requires that Java Advanced Imaging (JAI) be installed
               		on the test machine
               		2)It supports to save image in format TIFF (*.tif), GIF (*.gif), PNG (*.png)
               		and PNM (*.pnm) 
               
               
               Apple IOS specific Notes:
               UIAutomation captures all screenshots as PNG images, but SAFS copies and stores them 
               into the image format desired (JPG, BMP, etc.). However, the rootname of the desired 
               output image name must be unique to avoid UIAutomation generating indexed image names 
               we will not be looking for.
               For example, specifying MyImage.JPG and later MyImage.BMP will cause UIAutomation to capture 
               MyImage.PNG and MyImage1.PNG. When attempting to find MyImage.PNG captured for MyImage.BMP 
               we will retrieve MyImage.PNG which is NOT the correct image capture for MyImage.BMP.
               
           </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Apple IOS</LI>
        <LI>SAFS TIDComponent</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>AUTOIT Team Autoit</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param outputFile  Optional:NO
             Path (with filename) to the output image file.
              
     @param subArea  Optional:YES
             Optional app map subkey indicating partial image of the component to capture.
              
     @param filteredAreas  Optional:YES
              "Filter=one or multiple areas" to filter the GUI image (or sub image of GUI if the parameter "SubArea" is present)
             
     **********/
    static public ComponentFunction getGUIImage (String winname, String compname, String outputFile, String subArea, String filteredAreas) {

        if ( winname == null ) throw new IllegalArgumentException ( "getGUIImage.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "getGUIImage.compname = null");

        if ( outputFile == null ) throw new IllegalArgumentException ( "getGUIImage.outputFile = null");
        ComponentFunction cf = new ComponentFunction(GETGUIIMAGE_KEYWORD, winname, compname);
        cf.addParameter(outputFile);
        cf.addParameter(subArea);
        cf.addParameter(filteredAreas);
        return cf;
    }


    /*********** <pre>
               Capture the screen shot of a GUI component and save it to a file
              
               Capture the screen shot of a GUI component and save it to a file.
               The available formats for the output file are BITMAP (*.bmp) and JPEG
               (*.jpg). 
               For RJ and IBT engine, other formats like TIFF (*.tif), GIF (*.gif), 
               PNG (*.png) and PNM (*.pnm) are also supported.
               Optionally the user can specify part of the component to capture.
               
               The specified GUI component/part must be in the viewing range of its 
               containing window. If portion of the component is displayed in the 
               window, only that portion will be captured; if the component falls
               completely out of the viewing range of the window, the command will 
               fail. The command makes no attempt to bring the component into view.
               
               
               Robot Classic (RC) Specific Notes:  
               		1) This command may fail to execute if the user has turned off logging 
              	 	to TestManager via the Robot tools setting.  You may have to enable 
               		TestManager logging for the command to successfully execute.
               		2) This command requires that the TestManager Image Comparator tool is
               		installed on the test machine. Machines having only the Robot Test Agent
               		installed will not be able to use this command.
               		3) Due to a bug in Robot Classic, images captured using the Robot Classic
			engine may differ in image size and/or file size from those captured using 
			other supported engines.  Depending on the comparator used, rebenching
               		your images may be necessary when migrating to another engine.
               
               
               RobotJ (RJ) and IBT Specific Notes:
               		1)It requires that Java Advanced Imaging (JAI) be installed
               		on the test machine
               		2)It supports to save image in format TIFF (*.tif), GIF (*.gif), PNG (*.png)
               		and PNM (*.pnm) 
               
               
               Apple IOS specific Notes:
               UIAutomation captures all screenshots as PNG images, but SAFS copies and stores them 
               into the image format desired (JPG, BMP, etc.). However, the rootname of the desired 
               output image name must be unique to avoid UIAutomation generating indexed image names 
               we will not be looking for.
               For example, specifying MyImage.JPG and later MyImage.BMP will cause UIAutomation to capture 
               MyImage.PNG and MyImage1.PNG. When attempting to find MyImage.PNG captured for MyImage.BMP 
               we will retrieve MyImage.PNG which is NOT the correct image capture for MyImage.BMP.
               
           </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Apple IOS</LI>
        <LI>SAFS TIDComponent</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>AUTOIT Team Autoit</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        outputFile -- Optional:NO
             Path (with filename) to the output image file.
              <BR/>        subArea -- Optional:YES
             Optional app map subkey indicating partial image of the component to capture.
              <BR/>        filteredAreas -- Optional:YES
              "Filter=one or multiple areas" to filter the GUI image (or sub image of GUI if the parameter "SubArea" is present)
             
    </UL>

     **********/
    static public ComponentFunction getGUIImage(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "getGUIImage.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "getGUIImage.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "getGUIImage.parameters = null");
        ComponentFunction cf = new ComponentFunction(GETGUIIMAGE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
             Incorporate OCR technology to detect the text on a GUI component and save the text to a variable.
             
             Two open-source OCRs are integrated into SAFS. One is TesseractOCR (TOCR) at 
             http://code.google.com/p/tesseract-ocr; the other GOCR at http://jocr.sourceforge.net. 
             
             TOCR 2.0.4 and GOCR 0.48 are the latest release. They are available in SAFS and only 
             support English. Both two OCR owners claim to support more languages in next release. Chinese, 
             Japanese, and Korean are going to be supported in TOCR's next release 3.00.
			
       	         </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDComponent</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param variableName  Optional:NO
             The name of the variable to receive detected text.
              
     @param subArea  Optional:YES
             Optional app map subkey indicating partial image of the component to capture.
             
     @param oCRId  Optional:YES
             OCRId indicating the OCR used to recognize text.
             
     @param langId  Optional:YES
             Optional LangId representing the language in use for selected OCR to recognize text. 
             
     @param scaleRatio  Optional:YES
             Optional ScaleRatio indicating the scale ratio for resizing the original image.
             
     **********/
    static public ComponentFunction getTextFromGUI (String winname, String compname, String variableName, String subArea, String oCRId, String langId, String scaleRatio) {

        if ( winname == null ) throw new IllegalArgumentException ( "getTextFromGUI.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "getTextFromGUI.compname = null");

        if ( variableName == null ) throw new IllegalArgumentException ( "getTextFromGUI.variableName = null");
        ComponentFunction cf = new ComponentFunction(GETTEXTFROMGUI_KEYWORD, winname, compname);
        cf.addParameter(variableName);
        cf.addParameter(subArea);
        cf.addParameter(oCRId);
        cf.addParameter(langId);
        cf.addParameter(scaleRatio);
        return cf;
    }


    /*********** <pre>
             Incorporate OCR technology to detect the text on a GUI component and save the text to a variable.
             
             Two open-source OCRs are integrated into SAFS. One is TesseractOCR (TOCR) at 
             http://code.google.com/p/tesseract-ocr; the other GOCR at http://jocr.sourceforge.net. 
             
             TOCR 2.0.4 and GOCR 0.48 are the latest release. They are available in SAFS and only 
             support English. Both two OCR owners claim to support more languages in next release. Chinese, 
             Japanese, and Korean are going to be supported in TOCR's next release 3.00.
			
       	         </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDComponent</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        variableName -- Optional:NO
             The name of the variable to receive detected text.
              <BR/>        subArea -- Optional:YES
             Optional app map subkey indicating partial image of the component to capture.
             <BR/>        oCRId -- Optional:YES
             OCRId indicating the OCR used to recognize text.
             <BR/>        langId -- Optional:YES
             Optional LangId representing the language in use for selected OCR to recognize text. 
             <BR/>        scaleRatio -- Optional:YES
             Optional ScaleRatio indicating the scale ratio for resizing the original image.
             
    </UL>

     **********/
    static public ComponentFunction getTextFromGUI(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "getTextFromGUI.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "getTextFromGUI.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "getTextFromGUI.parameters = null");
        ComponentFunction cf = new ComponentFunction(GETTEXTFROMGUI_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
               Routine to verify the visual existence of a particular window and/or component.
              
               Routine to verify the visual existence of a particular window and/or component.
               If the window(Field 2) and component(Field 3) are the same then we only
               check for the existence of the window.  However, if the component is
               actually a child of the window then we first check for the window and
               then check for the component.
               
               If a Window or Component is HIDDEN, it will be treated as if it Does NOT Exist.
               The item must be VISIBLE to pass.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>Apple IOS</LI>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDComponent</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     **********/
    static public ComponentFunction gUIDoesExist (String winname, String compname) {

        if ( winname == null ) throw new IllegalArgumentException ( "gUIDoesExist.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "gUIDoesExist.compname = null");

        ComponentFunction cf = new ComponentFunction(GUIDOESEXIST_KEYWORD, winname, compname);
        return cf;
    }


    /*********** <pre>
               Routine to verify the visual non-existence of a particular window and/or component.
              
               Routine to verify the visual non-existence of a particular window and/or component.
               If the window(Field 2) and component(Field 3) are the same then we only
               check for the visual non-existence of the window.  However, if the component is
               actually a child of the window then we first check for the visual existence of the
               window and then check for the visual non-existence of the component.
               
               If a Window or Component is HIDDEN, it will be treated as if it Does NOT Exist.
               The item must not exist or be HIDDEN to pass.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>Apple IOS</LI>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDComponent</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     **********/
    static public ComponentFunction gUIDoesNotExist (String winname, String compname) {

        if ( winname == null ) throw new IllegalArgumentException ( "gUIDoesNotExist.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "gUIDoesNotExist.compname = null");

        ComponentFunction cf = new ComponentFunction(GUIDOESNOTEXIST_KEYWORD, winname, compname);
        return cf;
    }


    /*********** <pre> 
                Hover the mouse over an object.
              
                By default, hover on the center of the component for 2000 milliseconds.
                We can also hover on any part of an object based on a stored x,y 
                coordinate.  The object containing the coordinate is first given 
                context and then the hover command is generated at the coordinate.  
                Thus, an item or object can be referenced by name even though it is only 
                recognized via coordinates.
                
                The coordinate lookup is done with the component name of the record AND 
                Field #5.
                
                Typical Data Table records:
                
                (1) t MainWindow Component HoverMouse           1000
                (2) t MainWindow MainWindow HoverMouse AnObject 2000
                (3) t MainWindow FolderTree HoverMouse Node1 3000
                
                #1 above will contain a blank as it's 5th field and 1000 as 6th field, 
                and it will hover at the center of the Component for 1000 milliseconds.
                
                #2 above will contain an AnObject="3,10" entry in the MainWindow section 
                of the Application Map to hover at x=3, y=10 in the MainWindow.
                
                #3 above will contain a FolderTree entry in the MainWindow section with 
                normal recognition information for it.  FolderTree will also have it's
                own section in the Application Map in which there will be an entry like 
                Node1="15,30".  This will tell Robot to locate the FolderTree Generic 
                object and hover at the coordinates specified by the reference.               	              
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDComponent</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param appMapSubkey  Optional:YES 
                (Optional)Name of the AppMap subkey to lookup and use for the hover.
              
     @param hoverTime  Optional:YES  DefaultVal:2000 
	                (Optional)Number of milliseconds to hover.
	              
     **********/
    static public ComponentFunction hoverMouse (String winname, String compname, String appMapSubkey, String hoverTime) {

        if ( winname == null ) throw new IllegalArgumentException ( "hoverMouse.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "hoverMouse.compname = null");

        ComponentFunction cf = new ComponentFunction(HOVERMOUSE_KEYWORD, winname, compname);
        cf.addParameter(appMapSubkey);
        cf.addParameter(hoverTime);
        return cf;
    }


    /*********** <pre> 
                Hover the mouse over an object.
              
                By default, hover on the center of the component for 2000 milliseconds.
                We can also hover on any part of an object based on a stored x,y 
                coordinate.  The object containing the coordinate is first given 
                context and then the hover command is generated at the coordinate.  
                Thus, an item or object can be referenced by name even though it is only 
                recognized via coordinates.
                
                The coordinate lookup is done with the component name of the record AND 
                Field #5.
                
                Typical Data Table records:
                
                (1) t MainWindow Component HoverMouse           1000
                (2) t MainWindow MainWindow HoverMouse AnObject 2000
                (3) t MainWindow FolderTree HoverMouse Node1 3000
                
                #1 above will contain a blank as it's 5th field and 1000 as 6th field, 
                and it will hover at the center of the Component for 1000 milliseconds.
                
                #2 above will contain an AnObject="3,10" entry in the MainWindow section 
                of the Application Map to hover at x=3, y=10 in the MainWindow.
                
                #3 above will contain a FolderTree entry in the MainWindow section with 
                normal recognition information for it.  FolderTree will also have it's
                own section in the Application Map in which there will be an entry like 
                Node1="15,30".  This will tell Robot to locate the FolderTree Generic 
                object and hover at the coordinates specified by the reference.               	              
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDComponent</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        appMapSubkey -- Optional:YES 
                (Optional)Name of the AppMap subkey to lookup and use for the hover.
              <BR/>        hoverTime -- Optional:YES  DefaultVal:2000 
	                (Optional)Number of milliseconds to hover.
	              
    </UL>

     **********/
    static public ComponentFunction hoverMouse(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "hoverMouse.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "hoverMouse.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "hoverMouse.parameters = null");
        ComponentFunction cf = new ComponentFunction(HOVERMOUSE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Hover the mouse over a specified screen location.
              
                Hover the mouse over a specified screen location.
                We can hover on any screen location based on stored x,y 
                coordinates or hardcoded literal values. The Window:Component fields 
                can be anything at all and will be ignored if they do not exist in the app map, 
                or if the retrieved app map data does not contain coordinate data. 
                Thus, an item or object can be referenced by name even though it is only 
                known via coordinates.
                
                If the Window:Component AppMap lookup does NOT contain coordinate data and is ignored, then 
                the AppMapSubKey field is REQUIRED and is expected to contain a reference or literal 
                text containing absolute screen coordinates.
                
                If the Window:Component AppMap lookup DOES contain coordinate data, this data is treated as 
                the absolute screen coordinates to be used.  The AppMapSubKey field becomes OPTIONAL and 
                coordinate data in the field is treated as a relative offset added to the absolute values 
                found for the Window:Component.
                
                Any AppMapSubKey lookup is done with the Component name in the record AND 
                Field #5.
                
                Typical Data Table records:
                
                (1) t MainWindow Component HoverScreenLocation           1000
                (2) t MainWindow MainWindow HoverScreenLocation AnObject 2000
                (3) t MainWindow MainWindow HoverScreenLocation 50,80 3000
                (4) t AnyWin AnyComp HoverScreenLocation Node1 3000
                
                #1 above will contain a blank as it's 5th field and 1000 as 6th field. Because the AppMapSubKey 
                field is blank, the [MainWindow] section of the AppMap MUST have a Component item with valid 
                absolute screen coordinate data. The mouse cursor will hover at the specified Component location 
                for 1000 milliseconds.
                
                #2 above will contain an AnObject="Coords=50,80" entry in the [MainWindow] section 
                of the AppMap. If there is a MainWindow component in the AppMap with valid screen coordinates 
                then the mouse cursor will hover with a relative offset of 50,80 from those absolute screen 
                coordinates. Otherwise, the mouse will hover at absolute screen coordinates 50,80.
                
                #3 If there is a MainWindow component in the [MainWindow] section of the AppMap with valid screen 
                coordinates then the mouse cursor will hover with a relative offset of 50,80 from those absolute 
                screen coordinates. Otherwise, the mouse will hover at absolute screen coordinates 50,80.
                
                #4 above will contain no valid AnyWin:AnyComp coordinate data and 
                those fields will be ignored.  However, Node1 MUST exist in the 
                Application Map [AnyComp] section to provide absolute screen coordinates.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param appMapSubkey  Optional:YES 
                (Sometimes Optional)Name of the AppMap subkey to lookup and use for the hover.
              
     @param hoverTime  Optional:YES  DefaultVal:2000 
	                (Optional)Number of milliseconds to hover.
	              
     **********/
    static public ComponentFunction hoverScreenLocation (String winname, String compname, String appMapSubkey, String hoverTime) {

        if ( winname == null ) throw new IllegalArgumentException ( "hoverScreenLocation.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "hoverScreenLocation.compname = null");

        ComponentFunction cf = new ComponentFunction(HOVERSCREENLOCATION_KEYWORD, winname, compname);
        cf.addParameter(appMapSubkey);
        cf.addParameter(hoverTime);
        return cf;
    }


    /*********** <pre> 
                Hover the mouse over a specified screen location.
              
                Hover the mouse over a specified screen location.
                We can hover on any screen location based on stored x,y 
                coordinates or hardcoded literal values. The Window:Component fields 
                can be anything at all and will be ignored if they do not exist in the app map, 
                or if the retrieved app map data does not contain coordinate data. 
                Thus, an item or object can be referenced by name even though it is only 
                known via coordinates.
                
                If the Window:Component AppMap lookup does NOT contain coordinate data and is ignored, then 
                the AppMapSubKey field is REQUIRED and is expected to contain a reference or literal 
                text containing absolute screen coordinates.
                
                If the Window:Component AppMap lookup DOES contain coordinate data, this data is treated as 
                the absolute screen coordinates to be used.  The AppMapSubKey field becomes OPTIONAL and 
                coordinate data in the field is treated as a relative offset added to the absolute values 
                found for the Window:Component.
                
                Any AppMapSubKey lookup is done with the Component name in the record AND 
                Field #5.
                
                Typical Data Table records:
                
                (1) t MainWindow Component HoverScreenLocation           1000
                (2) t MainWindow MainWindow HoverScreenLocation AnObject 2000
                (3) t MainWindow MainWindow HoverScreenLocation 50,80 3000
                (4) t AnyWin AnyComp HoverScreenLocation Node1 3000
                
                #1 above will contain a blank as it's 5th field and 1000 as 6th field. Because the AppMapSubKey 
                field is blank, the [MainWindow] section of the AppMap MUST have a Component item with valid 
                absolute screen coordinate data. The mouse cursor will hover at the specified Component location 
                for 1000 milliseconds.
                
                #2 above will contain an AnObject="Coords=50,80" entry in the [MainWindow] section 
                of the AppMap. If there is a MainWindow component in the AppMap with valid screen coordinates 
                then the mouse cursor will hover with a relative offset of 50,80 from those absolute screen 
                coordinates. Otherwise, the mouse will hover at absolute screen coordinates 50,80.
                
                #3 If there is a MainWindow component in the [MainWindow] section of the AppMap with valid screen 
                coordinates then the mouse cursor will hover with a relative offset of 50,80 from those absolute 
                screen coordinates. Otherwise, the mouse will hover at absolute screen coordinates 50,80.
                
                #4 above will contain no valid AnyWin:AnyComp coordinate data and 
                those fields will be ignored.  However, Node1 MUST exist in the 
                Application Map [AnyComp] section to provide absolute screen coordinates.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        appMapSubkey -- Optional:YES 
                (Sometimes Optional)Name of the AppMap subkey to lookup and use for the hover.
              <BR/>        hoverTime -- Optional:YES  DefaultVal:2000 
	                (Optional)Number of milliseconds to hover.
	              
    </UL>

     **********/
    static public ComponentFunction hoverScreenLocation(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "hoverScreenLocation.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "hoverScreenLocation.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "hoverScreenLocation.parameters = null");
        ComponentFunction cf = new ComponentFunction(HOVERSCREENLOCATION_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
                Sends literal text to the specified component.
              
                Sends literal text to the specified component.
                The InputChars command does not convert or interpret any special
                characters like InputKeys (InputKeystrokes) does.
                
                Some engines cannot set keyboard focus to the component.  
                These engines will require the component already have keyboard focus before 
                calling this command.
                
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Google Android</LI>
        <LI>Apple IOS</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDComponent</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>Abbot Abbot</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO
                String of keystrokes to send.
              
     **********/
    static public ComponentFunction inputCharacters (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "inputCharacters.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "inputCharacters.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "inputCharacters.textValue = null");
        ComponentFunction cf = new ComponentFunction(INPUTCHARACTERS_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre>
                Sends keystrokes to the specified component.
              
                Sends keystrokes to the specified component.
                
                Some engines cannot set keyboard focus to the component.  
                These engines will require the component already have keyboard focus before 
                calling this command.
                
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDComponent</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>Abbot Abbot</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>Google Android</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO
                String of keystrokes to send.
              
     **********/
    static public ComponentFunction inputKeys (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "inputKeys.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "inputKeys.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "inputKeys.textValue = null");
        ComponentFunction cf = new ComponentFunction(INPUTKEYS_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre>
             Verify if object's property exists or not.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param propertyName  Optional:NO
             The case-sensitive name of the object property to verify.
              
     @param propertyExistVariable  Optional:NO
             The variable to store 'true' or 'false' to indicate if the property exist or not.
              
     **********/
    static public ComponentFunction isPropertyExist (String winname, String compname, String propertyName, String propertyExistVariable) {

        if ( winname == null ) throw new IllegalArgumentException ( "isPropertyExist.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "isPropertyExist.compname = null");

        if ( propertyExistVariable == null ) throw new IllegalArgumentException ( "isPropertyExist.propertyExistVariable = null");
        if ( propertyName == null ) throw new IllegalArgumentException ( "isPropertyExist.propertyName = null");
        ComponentFunction cf = new ComponentFunction(ISPROPERTYEXIST_KEYWORD, winname, compname);
        cf.addParameter(propertyName);
        cf.addParameter(propertyExistVariable);
        return cf;
    }


    /*********** <pre>
             Verify if object's property exists or not.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        propertyName -- Optional:NO
             The case-sensitive name of the object property to verify.
              <BR/>        propertyExistVariable -- Optional:NO
             The variable to store 'true' or 'false' to indicate if the property exist or not.
              
    </UL>

     **********/
    static public ComponentFunction isPropertyExist(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "isPropertyExist.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "isPropertyExist.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "isPropertyExist.parameters = null");
        ComponentFunction cf = new ComponentFunction(ISPROPERTYEXIST_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
               Store the location and dimensions of a component.
              
               Store the location and dimensions of a component.
               The component can be SAFS IBT, RJ, Selenium object.
               The information is stored in a collection of variables using the variable root name provided. 
               
               The following variables are set by this command:
               
               
               rootname=x y w h [space delimited values]
               rootname.x=x
               rootname.y=y
               rootname.w=w
               rootname.h=h
               
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDComponent</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param variableName  Optional:NO
             The root name of the collection of variables to receive the location and dimensions.
              
     @param whomRelativeTo  Optional:YES  DefaultVal:screen
             This parameter decides the coordinates stored in VariableName is relative to the screen or the parent window.
             'screen' means they are relative to the screen; 'parent' means they are relative to the parent window.
             The parameter is curently available in RJ only. 
              
     **********/
    static public ComponentFunction locateScreenImage (String winname, String compname, String variableName, String whomRelativeTo) {

        if ( winname == null ) throw new IllegalArgumentException ( "locateScreenImage.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "locateScreenImage.compname = null");

        if ( variableName == null ) throw new IllegalArgumentException ( "locateScreenImage.variableName = null");
        ComponentFunction cf = new ComponentFunction(LOCATESCREENIMAGE_KEYWORD, winname, compname);
        cf.addParameter(variableName);
        cf.addParameter(whomRelativeTo);
        return cf;
    }


    /*********** <pre>
               Store the location and dimensions of a component.
              
               Store the location and dimensions of a component.
               The component can be SAFS IBT, RJ, Selenium object.
               The information is stored in a collection of variables using the variable root name provided. 
               
               The following variables are set by this command:
               
               
               rootname=x y w h [space delimited values]
               rootname.x=x
               rootname.y=y
               rootname.w=w
               rootname.h=h
               
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDComponent</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        variableName -- Optional:NO
             The root name of the collection of variables to receive the location and dimensions.
              <BR/>        whomRelativeTo -- Optional:YES  DefaultVal:screen
             This parameter decides the coordinates stored in VariableName is relative to the screen or the parent window.
             'screen' means they are relative to the screen; 'parent' means they are relative to the parent window.
             The parameter is curently available in RJ only. 
              
    </UL>

     **********/
    static public ComponentFunction locateScreenImage(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "locateScreenImage.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "locateScreenImage.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "locateScreenImage.parameters = null");
        ComponentFunction cf = new ComponentFunction(LOCATESCREENIMAGE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
             Incorporate OCR technology to detect the text on a GUI component and save the text to a text file.
             
             Two open-source OCRs are integrated into SAFS. One is TesseractOCR (TOCR) at 
             http://code.google.com/p/tesseract-ocr; the other GOCR at http://jocr.sourceforge.net. 
             
             TOCR 2.0.4 and GOCR 0.48 are the latest release. They are available in SAFS and only 
             support English. Both two OCR owners claim to support more languages in next release. Chinese, 
             Japanese, and Korean are going to be supported in TOCR's next release 3.00.
			
       	         </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDComponent</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param outputFile  Optional:NO
             The name of the text file used to store detected text.
              
     @param subArea  Optional:YES
             Optional app map subkey indicating partial image of the component to capture.
             
     @param oCRId  Optional:YES
             OCRId indicating the OCR used to recognize text.
             
     @param langId  Optional:YES
             Optional LangId representing the language in use for selected OCR to recognize text. 
             
     @param scaleRatio  Optional:YES
             Optional ScaleRatio indicating the scale ratio for resizing the original image.
             
     **********/
    static public ComponentFunction saveTextFromGUI (String winname, String compname, String outputFile, String subArea, String oCRId, String langId, String scaleRatio) {

        if ( winname == null ) throw new IllegalArgumentException ( "saveTextFromGUI.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "saveTextFromGUI.compname = null");

        if ( outputFile == null ) throw new IllegalArgumentException ( "saveTextFromGUI.outputFile = null");
        ComponentFunction cf = new ComponentFunction(SAVETEXTFROMGUI_KEYWORD, winname, compname);
        cf.addParameter(outputFile);
        cf.addParameter(subArea);
        cf.addParameter(oCRId);
        cf.addParameter(langId);
        cf.addParameter(scaleRatio);
        return cf;
    }


    /*********** <pre>
             Incorporate OCR technology to detect the text on a GUI component and save the text to a text file.
             
             Two open-source OCRs are integrated into SAFS. One is TesseractOCR (TOCR) at 
             http://code.google.com/p/tesseract-ocr; the other GOCR at http://jocr.sourceforge.net. 
             
             TOCR 2.0.4 and GOCR 0.48 are the latest release. They are available in SAFS and only 
             support English. Both two OCR owners claim to support more languages in next release. Chinese, 
             Japanese, and Korean are going to be supported in TOCR's next release 3.00.
			
       	         </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDComponent</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        outputFile -- Optional:NO
             The name of the text file used to store detected text.
              <BR/>        subArea -- Optional:YES
             Optional app map subkey indicating partial image of the component to capture.
             <BR/>        oCRId -- Optional:YES
             OCRId indicating the OCR used to recognize text.
             <BR/>        langId -- Optional:YES
             Optional LangId representing the language in use for selected OCR to recognize text. 
             <BR/>        scaleRatio -- Optional:YES
             Optional ScaleRatio indicating the scale ratio for resizing the original image.
             
    </UL>

     **********/
    static public ComponentFunction saveTextFromGUI(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "saveTextFromGUI.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "saveTextFromGUI.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "saveTextFromGUI.parameters = null");
        ComponentFunction cf = new ComponentFunction(SAVETEXTFROMGUI_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
             Send or trigger an "event" with 0 or more arguments.
             
             For objects or technologies that can be effectively event-driven, rather than GUI-driven.
             
             The first implementation is in IBM Rational Functional Tester for Flex testing.  Many Flex objects 
             respond to events, in addition to traditional GUI interaction.  Some Flex objects ONLY respond to 
             events.  This is especially true of many custom Flex delegates.
             
             The tester must know the events and arguments available for their particular object and technology. 
             The generic nature for this command cannot generally know if a particular event or set of 
             arguments is valid or not.  Thus, the implementation may not be able issue failures resulting from 
             invalid events, arguments, or other issues not generating recognizable failure conditions.
             
       	         </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param event  Optional:NO
             The potentially case-sensitive name of the event to send or trigger.
              
     @param pARAM_N  Optional:YES
             The first of 0 or more parameters needed for the event.
             
     **********/
    static public ComponentFunction sendEvent (String winname, String compname, String event, String pARAM_N) {

        if ( winname == null ) throw new IllegalArgumentException ( "sendEvent.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "sendEvent.compname = null");

        if ( event == null ) throw new IllegalArgumentException ( "sendEvent.event = null");
        ComponentFunction cf = new ComponentFunction(SENDEVENT_KEYWORD, winname, compname);
        cf.addParameter(event);
        cf.addParameter(pARAM_N);
        return cf;
    }


    /*********** <pre>
             Send or trigger an "event" with 0 or more arguments.
             
             For objects or technologies that can be effectively event-driven, rather than GUI-driven.
             
             The first implementation is in IBM Rational Functional Tester for Flex testing.  Many Flex objects 
             respond to events, in addition to traditional GUI interaction.  Some Flex objects ONLY respond to 
             events.  This is especially true of many custom Flex delegates.
             
             The tester must know the events and arguments available for their particular object and technology. 
             The generic nature for this command cannot generally know if a particular event or set of 
             arguments is valid or not.  Thus, the implementation may not be able issue failures resulting from 
             invalid events, arguments, or other issues not generating recognizable failure conditions.
             
       	         </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        event -- Optional:NO
             The potentially case-sensitive name of the event to send or trigger.
              <BR/>        pARAM_N -- Optional:YES
             The first of 0 or more parameters needed for the event.
             
    </UL>

     **********/
    static public ComponentFunction sendEvent(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "sendEvent.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "sendEvent.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "sendEvent.parameters = null");
        ComponentFunction cf = new ComponentFunction(SENDEVENT_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
             Sets a value to the property of an object.
              
             Routine to set a value to the property of an object..
	     The routine expects that the given object already has Context or Focus.
		It also expects that Global StepDriverTestInfo contains all the information
		it needs to perform its function.
	     The routine will set the StepDriverTestInfo.statuscode and log any pass/fail info 
		using the StepDriverTestInfo.fac LogFacility.
		RJ implementation directly modifies the object in the software under test;therefore, it should be done with extreme care.
		Avoid using setPropertyValue whenever possible because it allows you to modify the software under test in ways that a typical user cannot.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param objectPropertyName  Optional:NO
             The name of the property of the object.
              
     @param propertyValue  Optional:NO
             The value to set the property to.
              
     **********/
    static public ComponentFunction setPropertyValue (String winname, String compname, String objectPropertyName, String propertyValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "setPropertyValue.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "setPropertyValue.compname = null");

        if ( objectPropertyName == null ) throw new IllegalArgumentException ( "setPropertyValue.objectPropertyName = null");
        if ( propertyValue == null ) throw new IllegalArgumentException ( "setPropertyValue.propertyValue = null");
        ComponentFunction cf = new ComponentFunction(SETPROPERTYVALUE_KEYWORD, winname, compname);
        cf.addParameter(objectPropertyName);
        cf.addParameter(propertyValue);
        return cf;
    }


    /*********** <pre>
             Sets a value to the property of an object.
              
             Routine to set a value to the property of an object..
	     The routine expects that the given object already has Context or Focus.
		It also expects that Global StepDriverTestInfo contains all the information
		it needs to perform its function.
	     The routine will set the StepDriverTestInfo.statuscode and log any pass/fail info 
		using the StepDriverTestInfo.fac LogFacility.
		RJ implementation directly modifies the object in the software under test;therefore, it should be done with extreme care.
		Avoid using setPropertyValue whenever possible because it allows you to modify the software under test in ways that a typical user cannot.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        objectPropertyName -- Optional:NO
             The name of the property of the object.
              <BR/>        propertyValue -- Optional:NO
             The value to set the property to.
              
    </UL>

     **********/
    static public ComponentFunction setPropertyValue(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "setPropertyValue.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "setPropertyValue.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "setPropertyValue.parameters = null");
        ComponentFunction cf = new ComponentFunction(SETPROPERTYVALUE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
             Make the component visible on the page.
              
             Make the component visible on the page.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param verify  Optional:YES  DefaultVal:False"True" to verify that the component is shown on page.
     **********/
    static public ComponentFunction showOnPage (String winname, String compname, String verify) {

        if ( winname == null ) throw new IllegalArgumentException ( "showOnPage.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "showOnPage.compname = null");

        ComponentFunction cf = new ComponentFunction(SHOWONPAGE_KEYWORD, winname, compname);
        cf.addParameter(verify);
        return cf;
    }


    /*********** <pre>
                Sends literal text keystrokes to whatever has keyboard focus.
              
                Sends literal text keystrokes to whatever has keyboard focus.
                The TypeChars command does not convert or interpret any special
                characters like InputKeys or TypeKeys do.
                
                No attempt is made to locate any specific window or component.  
                Keystrokes are simply sent to the system.
                
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
        <LI>Google Android</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO
                String of keystrokes to send.
              
     **********/
    static public ComponentFunction typeChars (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "typeChars.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "typeChars.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "typeChars.textValue = null");
        ComponentFunction cf = new ComponentFunction(TYPECHARS_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre>
                Sends secret-text (such as password) to whatever has keyboard focus.
              
                User needs to provide the path to the "encrypted text" and the path
                to the "private key".
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param encryptedDataFile  Optional:NO
                The full path of the file where the "encrypted data" is stored.
              
     @param privateKeyFile  Optional:NO
                The full path of the file where the "private key" is stored.
              
     **********/
    static public ComponentFunction typeEncryption (String winname, String compname, String encryptedDataFile, String privateKeyFile) {

        if ( winname == null ) throw new IllegalArgumentException ( "typeEncryption.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "typeEncryption.compname = null");

        if ( encryptedDataFile == null ) throw new IllegalArgumentException ( "typeEncryption.encryptedDataFile = null");
        if ( privateKeyFile == null ) throw new IllegalArgumentException ( "typeEncryption.privateKeyFile = null");
        ComponentFunction cf = new ComponentFunction(TYPEENCRYPTION_KEYWORD, winname, compname);
        cf.addParameter(encryptedDataFile);
        cf.addParameter(privateKeyFile);
        return cf;
    }


    /*********** <pre>
                Sends secret-text (such as password) to whatever has keyboard focus.
              
                User needs to provide the path to the "encrypted text" and the path
                to the "private key".
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        encryptedDataFile -- Optional:NO
                The full path of the file where the "encrypted data" is stored.
              <BR/>        privateKeyFile -- Optional:NO
                The full path of the file where the "private key" is stored.
              
    </UL>

     **********/
    static public ComponentFunction typeEncryption(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "typeEncryption.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "typeEncryption.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "typeEncryption.parameters = null");
        ComponentFunction cf = new ComponentFunction(TYPEENCRYPTION_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
                Sends keystrokes to whatever has keyboard focus.
              
                Sends keystrokes to whatever has keyboard focus.
                
                No attempt is made to locate any specific window or component.  
                Keystrokes are simply sent to the system.
                
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
        <LI>Google Android</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO
                String of keystrokes to send.
              
     **********/
    static public ComponentFunction typeKeys (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "typeKeys.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "typeKeys.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "typeKeys.textValue = null");
        ComponentFunction cf = new ComponentFunction(TYPEKEYS_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre>
             Verify the value of an array property with a benchmark file
              
             Typically, benchmarks are stored in the Datapool\Bench directory.
             In that event, only the filename.ext is needed.  There is currently
             a limit of 32K allowed for this type of comparison.
             
             The command will produce a TEST WARNING if the user has configured an 
             alternate DIFF tool for which we have no means to compare the diff results.
             If this WARNING is expected, the user should use the "TW" test record type.
             
             Note: for RobotJ,Suggest to use RFT Inspector to confirm which property should be used. There are two examples:
				 
					 For Java swing List and ComboBox items can be fetchedusing the '.itemText' property (Note the dot)
					 For Html List (type is html.select) items can be fetchedusing the '.text' property (Note the dot)
				 
			
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param propertyName  Optional:NO
             The case-sensitive name of the object array property to verify.
              
     @param benchmarkFile  Optional:NO
             The name of the file used as the comparison benchmark.
              
     @param filterMode  Optional:YES  DefaultVal:
             (Future) Specify a file filter to use to process the text before comparison.
              
     @param filterOptions  Optional:YES  DefaultVal:
             (Future) Specify filter options to use with the file filter.
              
     **********/
    static public ComponentFunction verifyArrayPropertyToFile (String winname, String compname, String propertyName, String benchmarkFile, String filterMode, String filterOptions) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyArrayPropertyToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyArrayPropertyToFile.compname = null");

        if ( benchmarkFile == null ) throw new IllegalArgumentException ( "verifyArrayPropertyToFile.benchmarkFile = null");
        if ( propertyName == null ) throw new IllegalArgumentException ( "verifyArrayPropertyToFile.propertyName = null");
        ComponentFunction cf = new ComponentFunction(VERIFYARRAYPROPERTYTOFILE_KEYWORD, winname, compname);
        cf.addParameter(propertyName);
        cf.addParameter(benchmarkFile);
        cf.addParameter(filterMode);
        cf.addParameter(filterOptions);
        return cf;
    }


    /*********** <pre>
             Verify the value of an array property with a benchmark file
              
             Typically, benchmarks are stored in the Datapool\Bench directory.
             In that event, only the filename.ext is needed.  There is currently
             a limit of 32K allowed for this type of comparison.
             
             The command will produce a TEST WARNING if the user has configured an 
             alternate DIFF tool for which we have no means to compare the diff results.
             If this WARNING is expected, the user should use the "TW" test record type.
             
             Note: for RobotJ,Suggest to use RFT Inspector to confirm which property should be used. There are two examples:
				 
					 For Java swing List and ComboBox items can be fetchedusing the '.itemText' property (Note the dot)
					 For Html List (type is html.select) items can be fetchedusing the '.text' property (Note the dot)
				 
			
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        propertyName -- Optional:NO
             The case-sensitive name of the object array property to verify.
              <BR/>        benchmarkFile -- Optional:NO
             The name of the file used as the comparison benchmark.
              <BR/>        filterMode -- Optional:YES  DefaultVal:
             (Future) Specify a file filter to use to process the text before comparison.
              <BR/>        filterOptions -- Optional:YES  DefaultVal:
             (Future) Specify filter options to use with the file filter.
              
    </UL>

     **********/
    static public ComponentFunction verifyArrayPropertyToFile(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyArrayPropertyToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyArrayPropertyToFile.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyArrayPropertyToFile.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYARRAYPROPERTYTOFILE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
             Verify the current contents of a binary file with a benchmark file.
              
             Verify the current contents of a binary file with a benchmark file.
             Typically, benchmarks are stored in the Datapool\Bench directory.  
             Typically, files to test are stored in the Datapool\Test directory.  
             In that event, the filename.ext is needed for both files.
             The Window and Component objects are not validated and have no role.
             The Window and Component strings can be any text, but they cannot be blank.
             
             The command may produce a WARNING if a diff tool for which we 
             have no means to verify the results is configured for use.  
             Consequently, if these warnings are expected, the user can use the 
             "TW" test record type to avoid issuing these warnings.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDComponent</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param benchmarkFile  Optional:NO 
             File used as the comparison benchmark.
              
     @param actualFile  Optional:NO 
             File used as the comparison file under test.
              
     @param filterMode  Optional:YES  DefaultVal: 
                Specify a filter to use to process the file content before comparison.
              
     @param filterOptions  Optional:YES  DefaultVal: 
                Specify filter options to use with the filter.
              
     **********/
    static public ComponentFunction verifyBinaryFileToFile (String winname, String compname, String benchmarkFile, String actualFile, String filterMode, String filterOptions) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyBinaryFileToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyBinaryFileToFile.compname = null");

        if ( actualFile == null ) throw new IllegalArgumentException ( "verifyBinaryFileToFile.actualFile = null");
        if ( benchmarkFile == null ) throw new IllegalArgumentException ( "verifyBinaryFileToFile.benchmarkFile = null");
        ComponentFunction cf = new ComponentFunction(VERIFYBINARYFILETOFILE_KEYWORD, winname, compname);
        cf.addParameter(benchmarkFile);
        cf.addParameter(actualFile);
        cf.addParameter(filterMode);
        cf.addParameter(filterOptions);
        return cf;
    }


    /*********** <pre> 
             Verify the current contents of a binary file with a benchmark file.
              
             Verify the current contents of a binary file with a benchmark file.
             Typically, benchmarks are stored in the Datapool\Bench directory.  
             Typically, files to test are stored in the Datapool\Test directory.  
             In that event, the filename.ext is needed for both files.
             The Window and Component objects are not validated and have no role.
             The Window and Component strings can be any text, but they cannot be blank.
             
             The command may produce a WARNING if a diff tool for which we 
             have no means to verify the results is configured for use.  
             Consequently, if these warnings are expected, the user can use the 
             "TW" test record type to avoid issuing these warnings.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDComponent</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        benchmarkFile -- Optional:NO 
             File used as the comparison benchmark.
              <BR/>        actualFile -- Optional:NO 
             File used as the comparison file under test.
              <BR/>        filterMode -- Optional:YES  DefaultVal: 
                Specify a filter to use to process the file content before comparison.
              <BR/>        filterOptions -- Optional:YES  DefaultVal: 
                Specify filter options to use with the filter.
              
    </UL>

     **********/
    static public ComponentFunction verifyBinaryFileToFile(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyBinaryFileToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyBinaryFileToFile.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyBinaryFileToFile.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYBINARYFILETOFILE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
             Verify the current contents of the Windows clipboard with a benchmark file.
              
             Verify the current contents of the Windows clipboard with a benchmark file.
             Typically, benchmarks are stored in the Datapool\Bench directory.
             In that event, only the filename.ext is needed.  There is currently
             a limit of 32K allowed for this type of comparison.  
             The Window and Component objects are not validated and have no role.
             The Window and Component strings can be any text, but they cannot be blank.
             
             The command will produce a TEST WARNING if the user has configured an 
             alternate DIFF tool for which we have no means to compare the diff results.
             If this WARNING is expected, the user should use the "TW" test record type.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param benchmarkFile  Optional:NO
             The name of the file used as the comparison benchmark.
              
     @param filterMode  Optional:YES  DefaultVal:
             (Future) Specify a file filter to use to process the text before comparison.
              
     @param filterOptions  Optional:YES  DefaultVal:
             (Future) Specify filter options to use with the file filter.
              
     **********/
    static public ComponentFunction verifyClipboardToFile (String winname, String compname, String benchmarkFile, String filterMode, String filterOptions) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyClipboardToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyClipboardToFile.compname = null");

        if ( benchmarkFile == null ) throw new IllegalArgumentException ( "verifyClipboardToFile.benchmarkFile = null");
        ComponentFunction cf = new ComponentFunction(VERIFYCLIPBOARDTOFILE_KEYWORD, winname, compname);
        cf.addParameter(benchmarkFile);
        cf.addParameter(filterMode);
        cf.addParameter(filterOptions);
        return cf;
    }


    /*********** <pre>
             Verify the current contents of the Windows clipboard with a benchmark file.
              
             Verify the current contents of the Windows clipboard with a benchmark file.
             Typically, benchmarks are stored in the Datapool\Bench directory.
             In that event, only the filename.ext is needed.  There is currently
             a limit of 32K allowed for this type of comparison.  
             The Window and Component objects are not validated and have no role.
             The Window and Component strings can be any text, but they cannot be blank.
             
             The command will produce a TEST WARNING if the user has configured an 
             alternate DIFF tool for which we have no means to compare the diff results.
             If this WARNING is expected, the user should use the "TW" test record type.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        benchmarkFile -- Optional:NO
             The name of the file used as the comparison benchmark.
              <BR/>        filterMode -- Optional:YES  DefaultVal:
             (Future) Specify a file filter to use to process the text before comparison.
              <BR/>        filterOptions -- Optional:YES  DefaultVal:
             (Future) Specify filter options to use with the file filter.
              
    </UL>

     **********/
    static public ComponentFunction verifyClipboardToFile(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyClipboardToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyClipboardToFile.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyClipboardToFile.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYCLIPBOARDTOFILE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
               Verify the current contents of the Windows clipboard using a Robot ClipboardVP.
              
               Verify the current contents of the Windows clipboard using a Robot ClipboardVP.
               The benchmark VP must already exist as an asset of the currently running script.
               
               If the provided VP is NOT a reference in the AppMap then a standard VP compare
               will occur with the typical VP parameter value like "VP=StoredVP".
               However, if you wish to modify the ClipboardVP parameter values, such as
               specifying that the expected result = FAIL, then you must make an entry
               in the AppMap under the Component name to provide these modified parameters.
               
               The Window and Component objects are not validated and normally have no role.
               The Window and Component strings can normally be any text, but they cannot be blank.
               However, the Component must be a valid section in the AppMap if we wish to store
               modified VP parameter settings.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param vPName  Optional:NO
             The name of the ClipboardVP from the currently running script.
              
     **********/
    static public ComponentFunction verifyClipboardVP (String winname, String compname, String vPName) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyClipboardVP.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyClipboardVP.compname = null");

        if ( vPName == null ) throw new IllegalArgumentException ( "verifyClipboardVP.vPName = null");
        ComponentFunction cf = new ComponentFunction(VERIFYCLIPBOARDVP_KEYWORD, winname, compname);
        cf.addParameter(vPName);
        return cf;
    }


    /*********** <pre>
                Verify a component's 'computed style' against a benchmark file.
              
                Verify a component's 'computed style' against a benchmark file.
                If the comparison fails, a copy of the captured 'computed style' should be stored in 
                the project's Test directory.  This file, once verified, should be suitable to become a 
                new benchmark, if needed.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param benchFile  Optional:NO
                The benchmake file to compare against.
              
     **********/
    static public ComponentFunction verifyComputedStyle (String winname, String compname, String benchFile) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyComputedStyle.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyComputedStyle.compname = null");

        if ( benchFile == null ) throw new IllegalArgumentException ( "verifyComputedStyle.benchFile = null");
        ComponentFunction cf = new ComponentFunction(VERIFYCOMPUTEDSTYLE_KEYWORD, winname, compname);
        cf.addParameter(benchFile);
        return cf;
    }


    /*********** <pre> 
             Verify the current contents of a text file with a benchmark file (same as VerifyTextFileToFile).
              
             Verify the current contents of a text file with a benchmark file (same as VerifyTextFileToFile).
             Typically, benchmarks are stored in the Datapool\Bench directory.  
             Typically, files to test are stored in the Datapool\Test directory.  
             In that event, the filename.ext is needed for both files.
             The Window and Component objects are not validated and have no role.
             The Window and Component strings can be any text, but they cannot be blank.
             
             The command may produce a WARNING if a diff tool for which we 
             have no means to verify the results is configured for use.  
             Consequently, if these warnings are expected, the user can use the 
             "TW" test record type to avoid issuing these warnings.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDComponent</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param benchmarkFile  Optional:NO 
             File used as the comparison benchmark.
              
     @param actualFile  Optional:NO 
             File used as the comparison file under test.
              
     @param filterMode  Optional:YES  DefaultVal: 
             (Future) Specify a file filter to use to process the text before comparison.
              
     @param filterOptions  Optional:YES  DefaultVal: 
             (Future) Specify filter options to use with the file filter.
              
     **********/
    static public ComponentFunction verifyFileToFile (String winname, String compname, String benchmarkFile, String actualFile, String filterMode, String filterOptions) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyFileToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyFileToFile.compname = null");

        if ( actualFile == null ) throw new IllegalArgumentException ( "verifyFileToFile.actualFile = null");
        if ( benchmarkFile == null ) throw new IllegalArgumentException ( "verifyFileToFile.benchmarkFile = null");
        ComponentFunction cf = new ComponentFunction(VERIFYFILETOFILE_KEYWORD, winname, compname);
        cf.addParameter(benchmarkFile);
        cf.addParameter(actualFile);
        cf.addParameter(filterMode);
        cf.addParameter(filterOptions);
        return cf;
    }


    /*********** <pre> 
             Verify the current contents of a text file with a benchmark file (same as VerifyTextFileToFile).
              
             Verify the current contents of a text file with a benchmark file (same as VerifyTextFileToFile).
             Typically, benchmarks are stored in the Datapool\Bench directory.  
             Typically, files to test are stored in the Datapool\Test directory.  
             In that event, the filename.ext is needed for both files.
             The Window and Component objects are not validated and have no role.
             The Window and Component strings can be any text, but they cannot be blank.
             
             The command may produce a WARNING if a diff tool for which we 
             have no means to verify the results is configured for use.  
             Consequently, if these warnings are expected, the user can use the 
             "TW" test record type to avoid issuing these warnings.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDComponent</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        benchmarkFile -- Optional:NO 
             File used as the comparison benchmark.
              <BR/>        actualFile -- Optional:NO 
             File used as the comparison file under test.
              <BR/>        filterMode -- Optional:YES  DefaultVal: 
             (Future) Specify a file filter to use to process the text before comparison.
              <BR/>        filterOptions -- Optional:YES  DefaultVal: 
             (Future) Specify filter options to use with the file filter.
              
    </UL>

     **********/
    static public ComponentFunction verifyFileToFile(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyFileToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyFileToFile.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyFileToFile.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYFILETOFILE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
               Verify the screen shot of a GUI component with a benchmark image file
              
               Verify the screen shot of a GUI component with a benchmark image file.
               The benchmark file must reside in the <project>\Datapool\Bench folder.
               Only BMP and JPG files can be used as the benchmark. If the extension
               of the bench file is not BMP or JPG, it is considered a BMP file.  
               For RJ and IBT engine, other formats like TIFF (*.tif), GIF (*.gif), 
               PNG (*.png) and PNM (*.pnm) are also supported.
               Optionally the user can specify part of the component to verify.
               The specified GUI component/part must be in the viewing range of its 
               containing window. If portion of the component is displayed in the 
               window, only that portion will be captured; if the component falls 
               completely out of the viewing range of the window, the command will 
               fail. The command makes no attemp to bring the component into view.
             
             NOTE: the command may fail to execute if the user has turned off logging 
             to TestManager via the Robot tools setting.  You may have to enable TestManager
             logging for the command to successfully execute.
             
             The command may produce a WARNING if a diff tool for which we 
             have no means to verify the results is configured for use.  
             Consequently, if these warnings are expected, the user can use the 
             "TW" test record type to avoid issuing these warnings.
             
	    This command requires that TestManager Image Comparator tool is
	    installed on the machine. Machines having only the Robot Test Agent
	    installed will not be able to usee this command.
             
               
               RobotJ (RJ) and IBT Specific Notes:
               		1)It requires that Java Advanced Imaging (JAI) be installed
               		on the test machine
               		2)It supports to save image in format TIFF (*.tif), GIF (*.gif), PNG (*.png)
               		and PNM (*.pnm) 
               
               
               Apple IOS specific Notes:
               UIAutomation captures all screenshots as PNG images, but SAFS copies and stores them 
               into the image format desired (JPG, BMP, etc.). However, the rootname of the desired 
               output image name must be unique to avoid UIAutomation generating indexed image names 
               we will not be looking for.
               For example, specifying MyImage.JPG and later MyImage.BMP will cause UIAutomation to capture 
               MyImage.PNG and MyImage1.PNG. When attempting to find MyImage.PNG captured for MyImage.BMP 
               we will retrieve MyImage.PNG which is NOT the correct image capture for MyImage.BMP.
               
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Apple IOS</LI>
        <LI>SAFS TIDComponent</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param benchmarkFile  Optional:NO
             Name of the benchmark image file.
              
     @param subArea  Optional:YES
             Optional app map subkey indicating partial image of the component to verify.
              
     @param percentageTolerance  Optional:YES
             The percentage of bits need to be matched.
              
     @param uUIDFlag  Optional:YES
             "UUID=False" to make Test/Actuals Filenames the same as the Benchmark.
              
     @param filteredAreas  Optional:YES
              "Filter=one or multiple areas" to filter the GUI image (or sub image of GUI if the parameter "SubArea" is present)
              and it will also be used to filter the bench image before comparing. If there are some differences, the diff image
              will be made between these 2 filtered images (not the acutal and bench image).
             
     **********/
    static public ComponentFunction verifyGUIImageToFile (String winname, String compname, String benchmarkFile, String subArea, String percentageTolerance, String uUIDFlag, String filteredAreas) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyGUIImageToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyGUIImageToFile.compname = null");

        if ( benchmarkFile == null ) throw new IllegalArgumentException ( "verifyGUIImageToFile.benchmarkFile = null");
        ComponentFunction cf = new ComponentFunction(VERIFYGUIIMAGETOFILE_KEYWORD, winname, compname);
        cf.addParameter(benchmarkFile);
        cf.addParameter(subArea);
        cf.addParameter(percentageTolerance);
        cf.addParameter(uUIDFlag);
        cf.addParameter(filteredAreas);
        return cf;
    }


    /*********** <pre>
               Verify the screen shot of a GUI component with a benchmark image file
              
               Verify the screen shot of a GUI component with a benchmark image file.
               The benchmark file must reside in the <project>\Datapool\Bench folder.
               Only BMP and JPG files can be used as the benchmark. If the extension
               of the bench file is not BMP or JPG, it is considered a BMP file.  
               For RJ and IBT engine, other formats like TIFF (*.tif), GIF (*.gif), 
               PNG (*.png) and PNM (*.pnm) are also supported.
               Optionally the user can specify part of the component to verify.
               The specified GUI component/part must be in the viewing range of its 
               containing window. If portion of the component is displayed in the 
               window, only that portion will be captured; if the component falls 
               completely out of the viewing range of the window, the command will 
               fail. The command makes no attemp to bring the component into view.
             
             NOTE: the command may fail to execute if the user has turned off logging 
             to TestManager via the Robot tools setting.  You may have to enable TestManager
             logging for the command to successfully execute.
             
             The command may produce a WARNING if a diff tool for which we 
             have no means to verify the results is configured for use.  
             Consequently, if these warnings are expected, the user can use the 
             "TW" test record type to avoid issuing these warnings.
             
	    This command requires that TestManager Image Comparator tool is
	    installed on the machine. Machines having only the Robot Test Agent
	    installed will not be able to usee this command.
             
               
               RobotJ (RJ) and IBT Specific Notes:
               		1)It requires that Java Advanced Imaging (JAI) be installed
               		on the test machine
               		2)It supports to save image in format TIFF (*.tif), GIF (*.gif), PNG (*.png)
               		and PNM (*.pnm) 
               
               
               Apple IOS specific Notes:
               UIAutomation captures all screenshots as PNG images, but SAFS copies and stores them 
               into the image format desired (JPG, BMP, etc.). However, the rootname of the desired 
               output image name must be unique to avoid UIAutomation generating indexed image names 
               we will not be looking for.
               For example, specifying MyImage.JPG and later MyImage.BMP will cause UIAutomation to capture 
               MyImage.PNG and MyImage1.PNG. When attempting to find MyImage.PNG captured for MyImage.BMP 
               we will retrieve MyImage.PNG which is NOT the correct image capture for MyImage.BMP.
               
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Apple IOS</LI>
        <LI>SAFS TIDComponent</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        benchmarkFile -- Optional:NO
             Name of the benchmark image file.
              <BR/>        subArea -- Optional:YES
             Optional app map subkey indicating partial image of the component to verify.
              <BR/>        percentageTolerance -- Optional:YES
             The percentage of bits need to be matched.
              <BR/>        uUIDFlag -- Optional:YES
             "UUID=False" to make Test/Actuals Filenames the same as the Benchmark.
              <BR/>        filteredAreas -- Optional:YES
              "Filter=one or multiple areas" to filter the GUI image (or sub image of GUI if the parameter "SubArea" is present)
              and it will also be used to filter the bench image before comparing. If there are some differences, the diff image
              will be made between these 2 filtered images (not the acutal and bench image).
             
    </UL>

     **********/
    static public ComponentFunction verifyGUIImageToFile(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyGUIImageToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyGUIImageToFile.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyGUIImageToFile.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYGUIIMAGETOFILE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
             Verify the current contents of an object's data with a benchmark file.
              
             
             Typically, benchmarks are stored in the Datapool\Bench directory.
             In that event, only the filename.ext is needed.  Only an object that 
             Robot can perform an ObjectData VP on can use this command.
             
             The command will produce a TEST WARNING if the user has configured an 
             alternate DIFF tool for which we have no means to compare the diff results.
             If this WARNING is expected, the user should use the "TW" test record type.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param benchmarkFile  Optional:NO
             The name of the file used as the comparison benchmark.
              
     @param fileEncoding  Optional:YES  DefaultVal:
             Specify a character encoding to be used when opening a bench file.
             If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
     @param filterMode  Optional:YES  DefaultVal:
             (Future) Specify a file filter to use to process the text before comparison.
              
     @param filterOptions  Optional:YES  DefaultVal:
             (Future) Specify filter options to use with the file filter.
              
     **********/
    static public ComponentFunction verifyObjectDataToFile (String winname, String compname, String benchmarkFile, String fileEncoding, String filterMode, String filterOptions) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyObjectDataToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyObjectDataToFile.compname = null");

        if ( benchmarkFile == null ) throw new IllegalArgumentException ( "verifyObjectDataToFile.benchmarkFile = null");
        ComponentFunction cf = new ComponentFunction(VERIFYOBJECTDATATOFILE_KEYWORD, winname, compname);
        cf.addParameter(benchmarkFile);
        cf.addParameter(fileEncoding);
        cf.addParameter(filterMode);
        cf.addParameter(filterOptions);
        return cf;
    }


    /*********** <pre>
             Verify the current contents of an object's data with a benchmark file.
              
             
             Typically, benchmarks are stored in the Datapool\Bench directory.
             In that event, only the filename.ext is needed.  Only an object that 
             Robot can perform an ObjectData VP on can use this command.
             
             The command will produce a TEST WARNING if the user has configured an 
             alternate DIFF tool for which we have no means to compare the diff results.
             If this WARNING is expected, the user should use the "TW" test record type.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        benchmarkFile -- Optional:NO
             The name of the file used as the comparison benchmark.
              <BR/>        fileEncoding -- Optional:YES  DefaultVal:
             Specify a character encoding to be used when opening a bench file.
             If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            <BR/>        filterMode -- Optional:YES  DefaultVal:
             (Future) Specify a file filter to use to process the text before comparison.
              <BR/>        filterOptions -- Optional:YES  DefaultVal:
             (Future) Specify filter options to use with the file filter.
              
    </UL>

     **********/
    static public ComponentFunction verifyObjectDataToFile(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyObjectDataToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyObjectDataToFile.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyObjectDataToFile.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYOBJECTDATATOFILE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
             Compare/Verify the subset of properties of a test object with the values stored in a benchmark file.
              
             Compare/Verify the subset of properties of a test object with the values stored in a benchmark file.
             Only the properties stored in the benchmark are compared against the properties of the test object.
             The benchmark file is expected to be stored in the active "Bench" directory.  
             If you specify a relative path, the path will be relative to the project
             directory.  The directory for a full or relative path must already exist.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param benchFile  Optional:NO
             The name of the file used to store the benchmark property data.
              
     @param fileEncoding  Optional:YES  DefaultVal:
             Specify a character encoding to be used when loading data from the file.
             
     **********/
    static public ComponentFunction verifyPropertiesSubsetToFile (String winname, String compname, String benchFile, String fileEncoding) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyPropertiesSubsetToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyPropertiesSubsetToFile.compname = null");

        if ( benchFile == null ) throw new IllegalArgumentException ( "verifyPropertiesSubsetToFile.benchFile = null");
        ComponentFunction cf = new ComponentFunction(VERIFYPROPERTIESSUBSETTOFILE_KEYWORD, winname, compname);
        cf.addParameter(benchFile);
        cf.addParameter(fileEncoding);
        return cf;
    }


    /*********** <pre>
             Compare/Verify the subset of properties of a test object with the values stored in a benchmark file.
              
             Compare/Verify the subset of properties of a test object with the values stored in a benchmark file.
             Only the properties stored in the benchmark are compared against the properties of the test object.
             The benchmark file is expected to be stored in the active "Bench" directory.  
             If you specify a relative path, the path will be relative to the project
             directory.  The directory for a full or relative path must already exist.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        benchFile -- Optional:NO
             The name of the file used to store the benchmark property data.
              <BR/>        fileEncoding -- Optional:YES  DefaultVal:
             Specify a character encoding to be used when loading data from the file.
             
    </UL>

     **********/
    static public ComponentFunction verifyPropertiesSubsetToFile(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyPropertiesSubsetToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyPropertiesSubsetToFile.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyPropertiesSubsetToFile.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYPROPERTIESSUBSETTOFILE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
             Compare/Verify ALL of the value properties of a test object with a benchmark file.
              
             Compare/Verify all of the value properties of a test object with a benchmark file.
             The benchmark file is expected to be stored in the active "Bench" directory.  
             If you specify a relative path, the path will be relative to the project
             directory.  The directory for a full or relative path must already exist.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Apple IOS</LI>
        <LI>Google Android</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param benchFile  Optional:NO
             The name of the file used to store the benchmark property data.
              
     @param fileEncoding  Optional:YES  DefaultVal:
             Specify a character encoding to be used when loading data from the file.
             
     **********/
    static public ComponentFunction verifyPropertiesToFile (String winname, String compname, String benchFile, String fileEncoding) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyPropertiesToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyPropertiesToFile.compname = null");

        if ( benchFile == null ) throw new IllegalArgumentException ( "verifyPropertiesToFile.benchFile = null");
        ComponentFunction cf = new ComponentFunction(VERIFYPROPERTIESTOFILE_KEYWORD, winname, compname);
        cf.addParameter(benchFile);
        cf.addParameter(fileEncoding);
        return cf;
    }


    /*********** <pre>
             Compare/Verify ALL of the value properties of a test object with a benchmark file.
              
             Compare/Verify all of the value properties of a test object with a benchmark file.
             The benchmark file is expected to be stored in the active "Bench" directory.  
             If you specify a relative path, the path will be relative to the project
             directory.  The directory for a full or relative path must already exist.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Apple IOS</LI>
        <LI>Google Android</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        benchFile -- Optional:NO
             The name of the file used to store the benchmark property data.
              <BR/>        fileEncoding -- Optional:YES  DefaultVal:
             Specify a character encoding to be used when loading data from the file.
             
    </UL>

     **********/
    static public ComponentFunction verifyPropertiesToFile(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyPropertiesToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyPropertiesToFile.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyPropertiesToFile.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYPROPERTIESTOFILE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
             Verify the value of a single object property
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Apple IOS</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param propertyName  Optional:NO
             The case-sensitive name of the object property to verify.
              
     @param expectedValue  Optional:NO
             The case-sensitive value we expect to get from the object property.
              
     @param caseInsensitive  Optional:YES
             Values of "CASE-INSENSITIVE", "CASEINSENSITIVE", and "FALSE" will cause the 
             comparison of the property value and the expected value to ignore case.
              
     **********/
    static public ComponentFunction verifyProperty (String winname, String compname, String propertyName, String expectedValue, String caseInsensitive) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyProperty.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyProperty.compname = null");

        if ( expectedValue == null ) throw new IllegalArgumentException ( "verifyProperty.expectedValue = null");
        if ( propertyName == null ) throw new IllegalArgumentException ( "verifyProperty.propertyName = null");
        ComponentFunction cf = new ComponentFunction(VERIFYPROPERTY_KEYWORD, winname, compname);
        cf.addParameter(propertyName);
        cf.addParameter(expectedValue);
        cf.addParameter(caseInsensitive);
        return cf;
    }


    /*********** <pre>
             Verify the value of a single object property
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Apple IOS</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        propertyName -- Optional:NO
             The case-sensitive name of the object property to verify.
              <BR/>        expectedValue -- Optional:NO
             The case-sensitive value we expect to get from the object property.
              <BR/>        caseInsensitive -- Optional:YES
             Values of "CASE-INSENSITIVE", "CASEINSENSITIVE", and "FALSE" will cause the 
             comparison of the property value and the expected value to ignore case.
              
    </UL>

     **********/
    static public ComponentFunction verifyProperty(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyProperty.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyProperty.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyProperty.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYPROPERTY_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
             Verify that the value of an object property contains a string
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Apple IOS</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param propertyName  Optional:NO
             The case-sensitive name of the object property to verify.
              
     @param searchString  Optional:NO
             The case-sensitive value we expect the object property to contain.
              
     @param caseInsensitive  Optional:YES
             Values of "CASE-INSENSITIVE", "CASEINSENSITIVE", and "FALSE" will cause the 
             comparison of the property value and the expected value to ignore case.
              
     **********/
    static public ComponentFunction verifyPropertyContains (String winname, String compname, String propertyName, String searchString, String caseInsensitive) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyPropertyContains.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyPropertyContains.compname = null");

        if ( propertyName == null ) throw new IllegalArgumentException ( "verifyPropertyContains.propertyName = null");
        if ( searchString == null ) throw new IllegalArgumentException ( "verifyPropertyContains.searchString = null");
        ComponentFunction cf = new ComponentFunction(VERIFYPROPERTYCONTAINS_KEYWORD, winname, compname);
        cf.addParameter(propertyName);
        cf.addParameter(searchString);
        cf.addParameter(caseInsensitive);
        return cf;
    }


    /*********** <pre>
             Verify that the value of an object property contains a string
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Apple IOS</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        propertyName -- Optional:NO
             The case-sensitive name of the object property to verify.
              <BR/>        searchString -- Optional:NO
             The case-sensitive value we expect the object property to contain.
              <BR/>        caseInsensitive -- Optional:YES
             Values of "CASE-INSENSITIVE", "CASEINSENSITIVE", and "FALSE" will cause the 
             comparison of the property value and the expected value to ignore case.
              
    </UL>

     **********/
    static public ComponentFunction verifyPropertyContains(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyPropertyContains.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyPropertyContains.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyPropertyContains.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYPROPERTYCONTAINS_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
             Verify the value of a single object property with a benchmark file
              
             Verify the value of a single object property with a benchmark file.
             Typically, benchmarks are stored in the Datapool\Bench directory.
             In that event, only the filename.ext is needed.  There is currently
             a limit of 32K allowed for this type of comparison.
             
             The command will produce a TEST WARNING if the user has configured an 
             alternate DIFF tool for which we have no means to compare the diff results.
             If this WARNING is expected, the user should use the "TW" test record type.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Apple IOS</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param propertyName  Optional:NO
             The case-sensitive name of the object property to verify.
              
     @param benchmarkFile  Optional:NO
             The name of the file used as the comparison benchmark.
              
     @param fileEncoding  Optional:YES  DefaultVal:
             Specify a character encoding to be used when opening a bench file.
             If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
     @param filterMode  Optional:YES  DefaultVal:
             (Future) Specify a file filter to use to process the text before comparison.
              
     @param filterOptions  Optional:YES  DefaultVal:
             (Future) Specify filter options to use with the file filter.
              
     **********/
    static public ComponentFunction verifyPropertyToFile (String winname, String compname, String propertyName, String benchmarkFile, String fileEncoding, String filterMode, String filterOptions) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyPropertyToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyPropertyToFile.compname = null");

        if ( benchmarkFile == null ) throw new IllegalArgumentException ( "verifyPropertyToFile.benchmarkFile = null");
        if ( propertyName == null ) throw new IllegalArgumentException ( "verifyPropertyToFile.propertyName = null");
        ComponentFunction cf = new ComponentFunction(VERIFYPROPERTYTOFILE_KEYWORD, winname, compname);
        cf.addParameter(propertyName);
        cf.addParameter(benchmarkFile);
        cf.addParameter(fileEncoding);
        cf.addParameter(filterMode);
        cf.addParameter(filterOptions);
        return cf;
    }


    /*********** <pre>
             Verify the value of a single object property with a benchmark file
              
             Verify the value of a single object property with a benchmark file.
             Typically, benchmarks are stored in the Datapool\Bench directory.
             In that event, only the filename.ext is needed.  There is currently
             a limit of 32K allowed for this type of comparison.
             
             The command will produce a TEST WARNING if the user has configured an 
             alternate DIFF tool for which we have no means to compare the diff results.
             If this WARNING is expected, the user should use the "TW" test record type.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Apple IOS</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        propertyName -- Optional:NO
             The case-sensitive name of the object property to verify.
              <BR/>        benchmarkFile -- Optional:NO
             The name of the file used as the comparison benchmark.
              <BR/>        fileEncoding -- Optional:YES  DefaultVal:
             Specify a character encoding to be used when opening a bench file.
             If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            <BR/>        filterMode -- Optional:YES  DefaultVal:
             (Future) Specify a file filter to use to process the text before comparison.
              <BR/>        filterOptions -- Optional:YES  DefaultVal:
             (Future) Specify filter options to use with the file filter.
              
    </UL>

     **********/
    static public ComponentFunction verifyPropertyToFile(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyPropertyToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyPropertyToFile.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyPropertyToFile.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYPROPERTYTOFILE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
                 Attempts to verify the tab order of the specified object--usually a Window.
               
  Attempts to verify the tab order of the current object--usually a Window.
  A file is used to store the correct tab order of the interface. 

  The file is simply a list of component names in the order we expect to find
  them as we tab through the interface.  Each line in the file will contain a
  single component name.  That can be either the real valid Name given to the
  component by development, or the name for the component from the AppMap.  The
  AppMap name is highly recommended to reduce maintenance of the tab order file.
  Blank lines or commented lines are ignored.  Comment lines begin with
  apostrophe(') or semi-colon(;) characters.

  Example file:
  
          ;Tab Order Benchmark File
          ;For ClassicC Login Window
          (blank)
          UserIDComboBox
          PasswordEditBox
          RememberCheckBox
          (blank)
          OKButton
          CancelButton
  
  This file would normally be placed in the Datapool\Bench directory.

  The function will verify that the object order in the interface is the same
  object order that is in the file. This is done by checking the FOCUS
  Property of the current object and using the TAB key for navigation.
  Thus, navigation by the TAB key must be supported by the application.

  The routine will only check the tab order for the number of items found
  in the tab order benchmark file.  Thus, the user can perform partial tests
  on different portions of the interface at different times.  Just make sure
  that the item that currently has the focus is the first item in the tab order
  benchmark file when invoking this command.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param fileName  Optional:NO
                Filename of TabOrder benchmark file.
              
     **********/
    static public ComponentFunction verifyTabOrder (String winname, String compname, String fileName) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyTabOrder.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyTabOrder.compname = null");

        if ( fileName == null ) throw new IllegalArgumentException ( "verifyTabOrder.fileName = null");
        ComponentFunction cf = new ComponentFunction(VERIFYTABORDER_KEYWORD, winname, compname);
        cf.addParameter(fileName);
        return cf;
    }


    /*********** <pre> 
             Verify the current contents of a text file with a benchmark file (same as VerifyFileToFile).
              
             Verify the current contents of a text file with a benchmark file (same as VerifyFileToFile).
             Typically, benchmarks are stored in the Datapool\Bench directory.  
             Typically, files to test are stored in the Datapool\Test directory.  
             In that event, the filename.ext is needed for both files.
             The Window and Component objects are not validated and have no role.
             The Window and Component strings can be any text, but they cannot be blank.
             
             The command may produce a WARNING if a diff tool for which we 
             have no means to verify the results is configured for use.  
             Consequently, if these warnings are expected, the user can use the 
             "TW" test record type to avoid issuing these warnings.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDComponent</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param benchmarkFile  Optional:NO 
             File used as the comparison benchmark.
              
     @param actualFile  Optional:NO 
             File used as the comparison file under test.
              
     @param filterMode  Optional:YES  DefaultVal: 
             (Future) Specify a file filter to use to process the text before comparison.
              
     @param filterOptions  Optional:YES  DefaultVal: 
             (Future) Specify filter options to use with the file filter.
              
     **********/
    static public ComponentFunction verifyTextFileToFile (String winname, String compname, String benchmarkFile, String actualFile, String filterMode, String filterOptions) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyTextFileToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyTextFileToFile.compname = null");

        if ( actualFile == null ) throw new IllegalArgumentException ( "verifyTextFileToFile.actualFile = null");
        if ( benchmarkFile == null ) throw new IllegalArgumentException ( "verifyTextFileToFile.benchmarkFile = null");
        ComponentFunction cf = new ComponentFunction(VERIFYTEXTFILETOFILE_KEYWORD, winname, compname);
        cf.addParameter(benchmarkFile);
        cf.addParameter(actualFile);
        cf.addParameter(filterMode);
        cf.addParameter(filterOptions);
        return cf;
    }


    /*********** <pre> 
             Verify the current contents of a text file with a benchmark file (same as VerifyFileToFile).
              
             Verify the current contents of a text file with a benchmark file (same as VerifyFileToFile).
             Typically, benchmarks are stored in the Datapool\Bench directory.  
             Typically, files to test are stored in the Datapool\Test directory.  
             In that event, the filename.ext is needed for both files.
             The Window and Component objects are not validated and have no role.
             The Window and Component strings can be any text, but they cannot be blank.
             
             The command may produce a WARNING if a diff tool for which we 
             have no means to verify the results is configured for use.  
             Consequently, if these warnings are expected, the user can use the 
             "TW" test record type to avoid issuing these warnings.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDComponent</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        benchmarkFile -- Optional:NO 
             File used as the comparison benchmark.
              <BR/>        actualFile -- Optional:NO 
             File used as the comparison file under test.
              <BR/>        filterMode -- Optional:YES  DefaultVal: 
             (Future) Specify a file filter to use to process the text before comparison.
              <BR/>        filterOptions -- Optional:YES  DefaultVal: 
             (Future) Specify filter options to use with the file filter.
              
    </UL>

     **********/
    static public ComponentFunction verifyTextFileToFile(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyTextFileToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyTextFileToFile.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyTextFileToFile.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYTEXTFILETOFILE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
             Verify that a string value contains a substring
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDComponent</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param value  Optional:NO
             The case-sensitive string value to verify.
              
     @param searchString  Optional:NO
             The case-sensitive value we expect the preceeding string to contain.
              
     @param suppressValue  Optional:YES
             Set to "SUPPRESSVALUE" to prevent the logging of ugly multi-line values.
              
     **********/
    static public ComponentFunction verifyValueContains (String winname, String compname, String value, String searchString, String suppressValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyValueContains.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyValueContains.compname = null");

        if ( searchString == null ) throw new IllegalArgumentException ( "verifyValueContains.searchString = null");
        if ( value == null ) throw new IllegalArgumentException ( "verifyValueContains.value = null");
        ComponentFunction cf = new ComponentFunction(VERIFYVALUECONTAINS_KEYWORD, winname, compname);
        cf.addParameter(value);
        cf.addParameter(searchString);
        cf.addParameter(suppressValue);
        return cf;
    }


    /*********** <pre>
             Verify that a string value contains a substring
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDComponent</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        value -- Optional:NO
             The case-sensitive string value to verify.
              <BR/>        searchString -- Optional:NO
             The case-sensitive value we expect the preceeding string to contain.
              <BR/>        suppressValue -- Optional:YES
             Set to "SUPPRESSVALUE" to prevent the logging of ugly multi-line values.
              
    </UL>

     **********/
    static public ComponentFunction verifyValueContains(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyValueContains.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyValueContains.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyValueContains.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYVALUECONTAINS_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
             Verify that a string value contains a substring, ignoring case.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SmartBear TestComplete</LI>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param value  Optional:NO
             The case-insensitive string value to verify.
              
     @param searchString  Optional:NO
             The case-insensitive value we expect the preceeding string to contain.
              
     @param suppressValue  Optional:YES
             Set to "SUPPRESSVALUE" to prevent the logging of ugly multi-line values.
              
     **********/
    static public ComponentFunction verifyValueContainsIgnoreCase (String winname, String compname, String value, String searchString, String suppressValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyValueContainsIgnoreCase.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyValueContainsIgnoreCase.compname = null");

        if ( searchString == null ) throw new IllegalArgumentException ( "verifyValueContainsIgnoreCase.searchString = null");
        if ( value == null ) throw new IllegalArgumentException ( "verifyValueContainsIgnoreCase.value = null");
        ComponentFunction cf = new ComponentFunction(VERIFYVALUECONTAINSIGNORECASE_KEYWORD, winname, compname);
        cf.addParameter(value);
        cf.addParameter(searchString);
        cf.addParameter(suppressValue);
        return cf;
    }


    /*********** <pre>
             Verify that a string value contains a substring, ignoring case.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SmartBear TestComplete</LI>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        value -- Optional:NO
             The case-insensitive string value to verify.
              <BR/>        searchString -- Optional:NO
             The case-insensitive value we expect the preceeding string to contain.
              <BR/>        suppressValue -- Optional:YES
             Set to "SUPPRESSVALUE" to prevent the logging of ugly multi-line values.
              
    </UL>

     **********/
    static public ComponentFunction verifyValueContainsIgnoreCase(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyValueContainsIgnoreCase.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyValueContainsIgnoreCase.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyValueContainsIgnoreCase.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYVALUECONTAINSIGNORECASE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
             Verify that a string value does NOT contain a substring
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param value  Optional:NO
             The case-sensitive string value to verify.
              
     @param searchString  Optional:NO
             The case-sensitive value we do NOT want to find in the provided Value.
              
     @param suppressValue  Optional:YES
             Set to "SUPPRESSVALUE" to prevent the logging of ugly multi-line values.
              
     **********/
    static public ComponentFunction verifyValueDoesNotContain (String winname, String compname, String value, String searchString, String suppressValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyValueDoesNotContain.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyValueDoesNotContain.compname = null");

        if ( searchString == null ) throw new IllegalArgumentException ( "verifyValueDoesNotContain.searchString = null");
        if ( value == null ) throw new IllegalArgumentException ( "verifyValueDoesNotContain.value = null");
        ComponentFunction cf = new ComponentFunction(VERIFYVALUEDOESNOTCONTAIN_KEYWORD, winname, compname);
        cf.addParameter(value);
        cf.addParameter(searchString);
        cf.addParameter(suppressValue);
        return cf;
    }


    /*********** <pre>
             Verify that a string value does NOT contain a substring
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        value -- Optional:NO
             The case-sensitive string value to verify.
              <BR/>        searchString -- Optional:NO
             The case-sensitive value we do NOT want to find in the provided Value.
              <BR/>        suppressValue -- Optional:YES
             Set to "SUPPRESSVALUE" to prevent the logging of ugly multi-line values.
              
    </UL>

     **********/
    static public ComponentFunction verifyValueDoesNotContain(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyValueDoesNotContain.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyValueDoesNotContain.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyValueDoesNotContain.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYVALUEDOESNOTCONTAIN_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
             Verify that two string values are identical. Note: RobotJ
             also uses identical keyword 'VerifyValueEquals'
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDComponent</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param value1  Optional:NO
              A case-sensitive string value to compare.
              
     @param value2  Optional:NO
             A case-sensitive value to compare.
              
     @param suppressValue  Optional:YES
             Set to "SUPPRESSVALUE" to prevent the logging of ugly multi-line values.
              
     **********/
    static public ComponentFunction verifyValues (String winname, String compname, String value1, String value2, String suppressValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyValues.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyValues.compname = null");

        if ( value1 == null ) throw new IllegalArgumentException ( "verifyValues.value1 = null");
        if ( value2 == null ) throw new IllegalArgumentException ( "verifyValues.value2 = null");
        ComponentFunction cf = new ComponentFunction(VERIFYVALUES_KEYWORD, winname, compname);
        cf.addParameter(value1);
        cf.addParameter(value2);
        cf.addParameter(suppressValue);
        return cf;
    }


    /*********** <pre>
             Verify that two string values are identical. Note: RobotJ
             also uses identical keyword 'VerifyValueEquals'
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDComponent</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        value1 -- Optional:NO
              A case-sensitive string value to compare.
              <BR/>        value2 -- Optional:NO
             A case-sensitive value to compare.
              <BR/>        suppressValue -- Optional:YES
             Set to "SUPPRESSVALUE" to prevent the logging of ugly multi-line values.
              
    </UL>

     **********/
    static public ComponentFunction verifyValues(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyValues.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyValues.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyValues.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYVALUES_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
             Verify that two string values are identical, ignoring case.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDComponent</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param value1  Optional:NO
              A case-insensitive string value to compare.
              
     @param value2  Optional:NO
             A case-insensitive value to compare.
              
     @param suppressValue  Optional:YES
             Set to "SUPPRESSVALUE" to prevent the logging of ugly multi-line values.
              
     **********/
    static public ComponentFunction verifyValuesIgnoreCase (String winname, String compname, String value1, String value2, String suppressValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyValuesIgnoreCase.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyValuesIgnoreCase.compname = null");

        if ( value1 == null ) throw new IllegalArgumentException ( "verifyValuesIgnoreCase.value1 = null");
        if ( value2 == null ) throw new IllegalArgumentException ( "verifyValuesIgnoreCase.value2 = null");
        ComponentFunction cf = new ComponentFunction(VERIFYVALUESIGNORECASE_KEYWORD, winname, compname);
        cf.addParameter(value1);
        cf.addParameter(value2);
        cf.addParameter(suppressValue);
        return cf;
    }


    /*********** <pre>
             Verify that two string values are identical, ignoring case.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDComponent</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        value1 -- Optional:NO
              A case-insensitive string value to compare.
              <BR/>        value2 -- Optional:NO
             A case-insensitive value to compare.
              <BR/>        suppressValue -- Optional:YES
             Set to "SUPPRESSVALUE" to prevent the logging of ugly multi-line values.
              
    </UL>

     **********/
    static public ComponentFunction verifyValuesIgnoreCase(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyValuesIgnoreCase.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyValuesIgnoreCase.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyValuesIgnoreCase.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYVALUESIGNORECASE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
             Verify that two string values are NOT identical.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param value1  Optional:NO
              A case-sensitive string value to compare.
              
     @param value2  Optional:NO
             A case-sensitive value to compare.
              
     @param suppressValue  Optional:YES
             Set to "SUPPRESSVALUE" to prevent the logging of ugly multi-line values.
              
     **********/
    static public ComponentFunction verifyValuesNotEqual (String winname, String compname, String value1, String value2, String suppressValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyValuesNotEqual.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyValuesNotEqual.compname = null");

        if ( value1 == null ) throw new IllegalArgumentException ( "verifyValuesNotEqual.value1 = null");
        if ( value2 == null ) throw new IllegalArgumentException ( "verifyValuesNotEqual.value2 = null");
        ComponentFunction cf = new ComponentFunction(VERIFYVALUESNOTEQUAL_KEYWORD, winname, compname);
        cf.addParameter(value1);
        cf.addParameter(value2);
        cf.addParameter(suppressValue);
        return cf;
    }


    /*********** <pre>
             Verify that two string values are NOT identical.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDComponent</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        value1 -- Optional:NO
              A case-sensitive string value to compare.
              <BR/>        value2 -- Optional:NO
             A case-sensitive value to compare.
              <BR/>        suppressValue -- Optional:YES
             Set to "SUPPRESSVALUE" to prevent the logging of ugly multi-line values.
              
    </UL>

     **********/
    static public ComponentFunction verifyValuesNotEqual(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyValuesNotEqual.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyValuesNotEqual.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyValuesNotEqual.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYVALUESNOTEQUAL_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


}
