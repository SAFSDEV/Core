
/******************************************************************************
 * TreeViewFunctions.java
 *
 * Copyright (C) SAS Institute, All rights reserved.
 * General Public License: https://www.gnu.org/licenses/gpl-3.0.en.html
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   TreeViewFunctions.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaCommandModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe TreeViewFunctions.xml XSLJavaCommandModel.xsl -o TreeViewFunctions.java
 *
 ******************************************************************************/ 
package org.safs.model.commands;


import org.safs.model.ComponentFunction;


public class TreeViewFunctions {

    /*****************
    Private Singleton Instance
    ****************/
    private static final TreeViewFunctions singleton = new TreeViewFunctions(); 

    /*****************
    Private Constructor
    Static class needing no instantiation.
    ****************/
    private TreeViewFunctions() {}

    /*****************
    public Singleton to access class static methods via instance
    ****************/
    public static TreeViewFunctions getInstance() { return singleton;}

    /** "ActivateUnverifiedTextNode" */
    static public final String ACTIVATEUNVERIFIEDTEXTNODE_KEYWORD = "ActivateUnverifiedTextNode";
    /** "CaptureTreeDataToFile" */
    static public final String CAPTURETREEDATATOFILE_KEYWORD = "CaptureTreeDataToFile";
    /** "CheckTextNode" */
    static public final String CHECKTEXTNODE_KEYWORD = "CheckTextNode";
    /** "ClickPartial" */
    static public final String CLICKPARTIAL_KEYWORD = "ClickPartial";
    /** "ClickTextNode" */
    static public final String CLICKTEXTNODE_KEYWORD = "ClickTextNode";
    /** "ClickUnverifiedTextNode" */
    static public final String CLICKUNVERIFIEDTEXTNODE_KEYWORD = "ClickUnverifiedTextNode";
    /** "Collapse" */
    static public final String COLLAPSE_KEYWORD = "Collapse";
    /** "CollapsePartial" */
    static public final String COLLAPSEPARTIAL_KEYWORD = "CollapsePartial";
    /** "CollapsePartialTextNode" */
    static public final String COLLAPSEPARTIALTEXTNODE_KEYWORD = "CollapsePartialTextNode";
    /** "CollapseTextNode" */
    static public final String COLLAPSETEXTNODE_KEYWORD = "CollapseTextNode";
    /** "CollapseUnverifiedTextNode" */
    static public final String COLLAPSEUNVERIFIEDTEXTNODE_KEYWORD = "CollapseUnverifiedTextNode";
    /** "CtrlClickUnverifiedTextNode" */
    static public final String CTRLCLICKUNVERIFIEDTEXTNODE_KEYWORD = "CtrlClickUnverifiedTextNode";
    /** "DoubleClickPartial" */
    static public final String DOUBLECLICKPARTIAL_KEYWORD = "DoubleClickPartial";
    /** "DoubleClickTextNode" */
    static public final String DOUBLECLICKTEXTNODE_KEYWORD = "DoubleClickTextNode";
    /** "DoubleClickUnverifiedTextNode" */
    static public final String DOUBLECLICKUNVERIFIEDTEXTNODE_KEYWORD = "DoubleClickUnverifiedTextNode";
    /** "Expand" */
    static public final String EXPAND_KEYWORD = "Expand";
    /** "ExpandPartial" */
    static public final String EXPANDPARTIAL_KEYWORD = "ExpandPartial";
    /** "ExpandPartialTextNode" */
    static public final String EXPANDPARTIALTEXTNODE_KEYWORD = "ExpandPartialTextNode";
    /** "ExpandTextNode" */
    static public final String EXPANDTEXTNODE_KEYWORD = "ExpandTextNode";
    /** "ExpandUnverifiedTextNode" */
    static public final String EXPANDUNVERIFIEDTEXTNODE_KEYWORD = "ExpandUnverifiedTextNode";
    /** "PartialMatchTreeDataToFile" */
    static public final String PARTIALMATCHTREEDATATOFILE_KEYWORD = "PartialMatchTreeDataToFile";
    /** "RightClickPartial" */
    static public final String RIGHTCLICKPARTIAL_KEYWORD = "RightClickPartial";
    /** "RightClickTextNode" */
    static public final String RIGHTCLICKTEXTNODE_KEYWORD = "RightClickTextNode";
    /** "RightClickUnverifiedTextNode" */
    static public final String RIGHTCLICKUNVERIFIEDTEXTNODE_KEYWORD = "RightClickUnverifiedTextNode";
    /** "Select" */
    static public final String SELECT_KEYWORD = "Select";
    /** "SelectAnotherPartialTextNode" */
    static public final String SELECTANOTHERPARTIALTEXTNODE_KEYWORD = "SelectAnotherPartialTextNode";
    /** "SelectAnotherTextNode" */
    static public final String SELECTANOTHERTEXTNODE_KEYWORD = "SelectAnotherTextNode";
    /** "SelectAnotherUnverifiedTextNode" */
    static public final String SELECTANOTHERUNVERIFIEDTEXTNODE_KEYWORD = "SelectAnotherUnverifiedTextNode";
    /** "SelectPartial" */
    static public final String SELECTPARTIAL_KEYWORD = "SelectPartial";
    /** "SelectPartialTextNode" */
    static public final String SELECTPARTIALTEXTNODE_KEYWORD = "SelectPartialTextNode";
    /** "SelectPartialTextNodeSpecial" */
    static public final String SELECTPARTIALTEXTNODESPECIAL_KEYWORD = "SelectPartialTextNodeSpecial";
    /** "SelectStateIcon" */
    static public final String SELECTSTATEICON_KEYWORD = "SelectStateIcon";
    /** "SelectTextNode" */
    static public final String SELECTTEXTNODE_KEYWORD = "SelectTextNode";
    /** "SelectTextNodeSpecial" */
    static public final String SELECTTEXTNODESPECIAL_KEYWORD = "SelectTextNodeSpecial";
    /** "SelectUnverifiedTextNode" */
    static public final String SELECTUNVERIFIEDTEXTNODE_KEYWORD = "SelectUnverifiedTextNode";
    /** "SelectUnverifiedTextNodeRightClick" */
    static public final String SELECTUNVERIFIEDTEXTNODERIGHTCLICK_KEYWORD = "SelectUnverifiedTextNodeRightClick";
    /** "SetTreeContainsNode" */
    static public final String SETTREECONTAINSNODE_KEYWORD = "SetTreeContainsNode";
    /** "SetTreeContainsPartialMatch" */
    static public final String SETTREECONTAINSPARTIALMATCH_KEYWORD = "SetTreeContainsPartialMatch";
    /** "ShiftClickUnverifiedTextNode" */
    static public final String SHIFTCLICKUNVERIFIEDTEXTNODE_KEYWORD = "ShiftClickUnverifiedTextNode";
    /** "UnCheckTextNode" */
    static public final String UNCHECKTEXTNODE_KEYWORD = "UnCheckTextNode";
    /** "VerifyNodeUnselected" */
    static public final String VERIFYNODEUNSELECTED_KEYWORD = "VerifyNodeUnselected";
    /** "VerifySelectedNode" */
    static public final String VERIFYSELECTEDNODE_KEYWORD = "VerifySelectedNode";
    /** "VerifyStateIcon" */
    static public final String VERIFYSTATEICON_KEYWORD = "VerifyStateIcon";
    /** "VerifyStateIconUnselected" */
    static public final String VERIFYSTATEICONUNSELECTED_KEYWORD = "VerifyStateIconUnselected";
    /** "VerifyTextNodeChecked" */
    static public final String VERIFYTEXTNODECHECKED_KEYWORD = "VerifyTextNodeChecked";
    /** "VerifyTextNodeUnChecked" */
    static public final String VERIFYTEXTNODEUNCHECKED_KEYWORD = "VerifyTextNodeUnChecked";
    /** "VerifyTreeContainsNode" */
    static public final String VERIFYTREECONTAINSNODE_KEYWORD = "VerifyTreeContainsNode";
    /** "VerifyTreeContainsPartialMatch" */
    static public final String VERIFYTREECONTAINSPARTIALMATCH_KEYWORD = "VerifyTreeContainsPartialMatch";


    /*********** <pre> 
                 Action to (almost) blindly activate (double-click) a text node.
              
                 No attempt is made to verify that the node exists 
                 prior to the selection.  No attempt to verify the node 
                 has been properly selected after the selection.
                 
                 It should be noted that a click requires the full 
                 hierarchical path to the node to be selected.  Parent 
                 child branches are delimited with '->' as in:
                    Parent->branch->leaf 
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of the node to be clicked
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    static public ComponentFunction activateUnverifiedTextNode (String winname, String compname, String textValue, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "activateUnverifiedTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "activateUnverifiedTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "activateUnverifiedTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(ACTIVATEUNVERIFIEDTEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                 Action to (almost) blindly activate (double-click) a text node.
              
                 No attempt is made to verify that the node exists 
                 prior to the selection.  No attempt to verify the node 
                 has been properly selected after the selection.
                 
                 It should be noted that a click requires the full 
                 hierarchical path to the node to be selected.  Parent 
                 child branches are delimited with '->' as in:
                    Parent->branch->leaf 
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        textValue -- Optional:NO 
                 Case-sensitive text of the node to be clicked
              <BR/>        matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    static public ComponentFunction activateUnverifiedTextNode(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "activateUnverifiedTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "activateUnverifiedTextNode.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "activateUnverifiedTextNode.parameters = null");
        ComponentFunction cf = new ComponentFunction(ACTIVATEUNVERIFIEDTEXTNODE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
             Copy the current contents of a tree[branch] to a file.
             
             The search of the path to the node is expected to be a case-sensitive 
             exact match of each node.  Use 'PartialMatchTreeDataToFile' if you 
             wish to specify case-insensitive substring matches for tree nodes.             
             
             By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param file  Optional:NO
             The name of the file used to store the tree data.
              
     @param branch  Optional:YES
	                	The full name of the tree branch to capture.
	                
     @param indentMark  Optional:YES
		        	The character(s) to use in the output file to indent the tree nodes from the 
		        	parent tree branches.
		        
     @param fileEncoding  Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
     @param filterMode  Optional:YES  DefaultVal:
             (Future) Specify a file filter to use to process the text before comparison.
              
     @param filterOptions  Optional:YES  DefaultVal:
             (Future) Specify filter options to use with the file filter.
              
     **********/
    static public ComponentFunction captureTreeDataToFile (String winname, String compname, String file, String branch, String indentMark, String fileEncoding, String filterMode, String filterOptions) {

        if ( winname == null ) throw new IllegalArgumentException ( "captureTreeDataToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "captureTreeDataToFile.compname = null");

        if ( file == null ) throw new IllegalArgumentException ( "captureTreeDataToFile.file = null");
        ComponentFunction cf = new ComponentFunction(CAPTURETREEDATATOFILE_KEYWORD, winname, compname);
        cf.addParameter(file);
        cf.addParameter(branch);
        cf.addParameter(indentMark);
        cf.addParameter(fileEncoding);
        cf.addParameter(filterMode);
        cf.addParameter(filterOptions);
        return cf;
    }


    /*********** <pre>
             Copy the current contents of a tree[branch] to a file.
             
             The search of the path to the node is expected to be a case-sensitive 
             exact match of each node.  Use 'PartialMatchTreeDataToFile' if you 
             wish to specify case-insensitive substring matches for tree nodes.             
             
             By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        file -- Optional:NO
             The name of the file used to store the tree data.
              <BR/>        branch -- Optional:YES
	                	The full name of the tree branch to capture.
	                <BR/>        indentMark -- Optional:YES
		        	The character(s) to use in the output file to indent the tree nodes from the 
		        	parent tree branches.
		        <BR/>        fileEncoding -- Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            <BR/>        filterMode -- Optional:YES  DefaultVal:
             (Future) Specify a file filter to use to process the text before comparison.
              <BR/>        filterOptions -- Optional:YES  DefaultVal:
             (Future) Specify filter options to use with the file filter.
              
    </UL>

     **********/
    static public ComponentFunction captureTreeDataToFile(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "captureTreeDataToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "captureTreeDataToFile.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "captureTreeDataToFile.parameters = null");
        ComponentFunction cf = new ComponentFunction(CAPTURETREEDATATOFILE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                 Checks a node's state icon (checkbox) according to its associated text value. 
               
                 Initially released with .NET support only.
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of the node to be checked.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    static public ComponentFunction checkTextNode (String winname, String compname, String textValue, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "checkTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "checkTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "checkTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(CHECKTEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                 Checks a node's state icon (checkbox) according to its associated text value. 
               
                 Initially released with .NET support only.
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        textValue -- Optional:NO 
                 Case-sensitive text of the node to be checked.
              <BR/>        matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    static public ComponentFunction checkTextNode(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "checkTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "checkTextNode.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "checkTextNode.parameters = null");
        ComponentFunction cf = new ComponentFunction(CHECKTEXTNODE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                 Action to click a node according to a partial match of its text value.
               
                 Partial matching is accomplished through case-insensitive substring 
                 matching.  Each delimited node of the provided TextValue 
                 is compared against the object data using this partial match comparison.
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.  Only the final node provided in the TextValue 
                 hierarchy is evaluated for duplicity.  Intermediate nodes are always found 
                 on a "first match" basis.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-Insensitive text of node to click.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    static public ComponentFunction clickPartial (String winname, String compname, String textValue, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "clickPartial.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "clickPartial.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "clickPartial.textValue = null");
        ComponentFunction cf = new ComponentFunction(CLICKPARTIAL_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                 Action to click a node according to a partial match of its text value.
               
                 Partial matching is accomplished through case-insensitive substring 
                 matching.  Each delimited node of the provided TextValue 
                 is compared against the object data using this partial match comparison.
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.  Only the final node provided in the TextValue 
                 hierarchy is evaluated for duplicity.  Intermediate nodes are always found 
                 on a "first match" basis.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        textValue -- Optional:NO 
                 Case-Insensitive text of node to click.
              <BR/>        matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    static public ComponentFunction clickPartial(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "clickPartial.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "clickPartial.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "clickPartial.parameters = null");
        ComponentFunction cf = new ComponentFunction(CLICKPARTIAL_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                 Action to click a node according to its text value.
               
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to click.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    static public ComponentFunction clickTextNode (String winname, String compname, String textValue, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "clickTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "clickTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "clickTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(CLICKTEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                 Action to click a node according to its text value.
               
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        textValue -- Optional:NO 
                 Case-sensitive text of node to click.
              <BR/>        matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    static public ComponentFunction clickTextNode(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "clickTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "clickTextNode.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "clickTextNode.parameters = null");
        ComponentFunction cf = new ComponentFunction(CLICKTEXTNODE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                 Action to (almost) blindly click a text node.
              
                 No attempt is made to verify that the node exists 
                 prior to the selection.  No attempt to verify the node 
                 has been properly selected after the selection.
                 
                 It should be noted that a click requires the full 
                 hierarchical path to the node to be selected.  Parent 
                 child branches are delimited with '->' as in:
                    Parent->branch->leaf 
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of the node to be clicked
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    static public ComponentFunction clickUnverifiedTextNode (String winname, String compname, String textValue, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "clickUnverifiedTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "clickUnverifiedTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "clickUnverifiedTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(CLICKUNVERIFIEDTEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                 Action to (almost) blindly click a text node.
              
                 No attempt is made to verify that the node exists 
                 prior to the selection.  No attempt to verify the node 
                 has been properly selected after the selection.
                 
                 It should be noted that a click requires the full 
                 hierarchical path to the node to be selected.  Parent 
                 child branches are delimited with '->' as in:
                    Parent->branch->leaf 
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        textValue -- Optional:NO 
                 Case-sensitive text of the node to be clicked
              <BR/>        matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    static public ComponentFunction clickUnverifiedTextNode(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "clickUnverifiedTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "clickUnverifiedTextNode.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "clickUnverifiedTextNode.parameters = null");
        ComponentFunction cf = new ComponentFunction(CLICKUNVERIFIEDTEXTNODE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                 Action to collapse a node according to its text value.
               
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to collapse
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    static public ComponentFunction collapse (String winname, String compname, String textValue, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "collapse.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "collapse.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "collapse.textValue = null");
        ComponentFunction cf = new ComponentFunction(COLLAPSE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                 Action to collapse a node according to its text value.
               
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        textValue -- Optional:NO 
                 Case-sensitive text of node to collapse
              <BR/>        matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    static public ComponentFunction collapse(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "collapse.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "collapse.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "collapse.parameters = null");
        ComponentFunction cf = new ComponentFunction(COLLAPSE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                 Action to collapse a node according to a partial match of its text value.
               
                 Partial matching is accomplished through case-insensitive substring 
                 matching.  Each delimited node of the provided TextValue 
                 is compared against the object data using this partial match comparison.
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.  Only the final node provided in the TextValue 
                 hierarchy is evaluated for duplicity.  Intermediate nodes are always found 
                 on a "first match" basis.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-Insensitive text of node to collapse
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    static public ComponentFunction collapsePartial (String winname, String compname, String textValue, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "collapsePartial.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "collapsePartial.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "collapsePartial.textValue = null");
        ComponentFunction cf = new ComponentFunction(COLLAPSEPARTIAL_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                 Action to collapse a node according to a partial match of its text value.
               
                 Partial matching is accomplished through case-insensitive substring 
                 matching.  Each delimited node of the provided TextValue 
                 is compared against the object data using this partial match comparison.
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.  Only the final node provided in the TextValue 
                 hierarchy is evaluated for duplicity.  Intermediate nodes are always found 
                 on a "first match" basis.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        textValue -- Optional:NO 
                 Case-Insensitive text of node to collapse
              <BR/>        matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    static public ComponentFunction collapsePartial(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "collapsePartial.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "collapsePartial.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "collapsePartial.parameters = null");
        ComponentFunction cf = new ComponentFunction(COLLAPSEPARTIAL_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                 Action to collapse a node according to a partial match of its text value.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-Insensitive text of node to collapse
              
     **********/
    static public ComponentFunction collapsePartialTextNode (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "collapsePartialTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "collapsePartialTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "collapsePartialTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(COLLAPSEPARTIALTEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                 Action to collapse a node according to its text value. Use Collapse instead.
               
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
				 RJ Implementation: Works the same as command Collapse.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to collapse
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    static public ComponentFunction collapseTextNode (String winname, String compname, String textValue, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "collapseTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "collapseTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "collapseTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(COLLAPSETEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                 Action to collapse a node according to its text value. Use Collapse instead.
               
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
				 RJ Implementation: Works the same as command Collapse.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        textValue -- Optional:NO 
                 Case-sensitive text of node to collapse
              <BR/>        matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    static public ComponentFunction collapseTextNode(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "collapseTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "collapseTextNode.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "collapseTextNode.parameters = null");
        ComponentFunction cf = new ComponentFunction(COLLAPSETEXTNODE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                 Action to blindly collapse a node according to its text value.
              
                 Generally, no pre- or post- node checks are done. If the tree contains 
                 hidden root nodes the user must provide these.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive full path text of node to collapse
              
     **********/
    static public ComponentFunction collapseUnverifiedTextNode (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "collapseUnverifiedTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "collapseUnverifiedTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "collapseUnverifiedTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(COLLAPSEUNVERIFIEDTEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                 Action to blindly CTRL-click a node according to its text value.  Currently, this component function is for JavaTrees only.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to CTRL-click.
              
     **********/
    static public ComponentFunction ctrlClickUnverifiedTextNode (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "ctrlClickUnverifiedTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "ctrlClickUnverifiedTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "ctrlClickUnverifiedTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(CTRLCLICKUNVERIFIEDTEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                 Action to double click a node according to a partial match of its text value.
               
                 Partial matching is accomplished through case-insensitive substring 
                 matching.  Each delimited node of the provided TextValue 
                 is compared against the object data using this partial match comparison.
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.  Only the final node provided in the TextValue 
                 hierarchy is evaluated for duplicity.  Intermediate nodes are always found 
                 on a "first match" basis.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-Insensitive text of node to double click.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    static public ComponentFunction doubleClickPartial (String winname, String compname, String textValue, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "doubleClickPartial.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "doubleClickPartial.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "doubleClickPartial.textValue = null");
        ComponentFunction cf = new ComponentFunction(DOUBLECLICKPARTIAL_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                 Action to double click a node according to a partial match of its text value.
               
                 Partial matching is accomplished through case-insensitive substring 
                 matching.  Each delimited node of the provided TextValue 
                 is compared against the object data using this partial match comparison.
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.  Only the final node provided in the TextValue 
                 hierarchy is evaluated for duplicity.  Intermediate nodes are always found 
                 on a "first match" basis.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        textValue -- Optional:NO 
                 Case-Insensitive text of node to double click.
              <BR/>        matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    static public ComponentFunction doubleClickPartial(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "doubleClickPartial.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "doubleClickPartial.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "doubleClickPartial.parameters = null");
        ComponentFunction cf = new ComponentFunction(DOUBLECLICKPARTIAL_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                 Action to double click a node according to its text value.
               
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to double click.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    static public ComponentFunction doubleClickTextNode (String winname, String compname, String textValue, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "doubleClickTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "doubleClickTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "doubleClickTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(DOUBLECLICKTEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                 Action to double click a node according to its text value.
               
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        textValue -- Optional:NO 
                 Case-sensitive text of node to double click.
              <BR/>        matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    static public ComponentFunction doubleClickTextNode(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "doubleClickTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "doubleClickTextNode.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "doubleClickTextNode.parameters = null");
        ComponentFunction cf = new ComponentFunction(DOUBLECLICKTEXTNODE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                 Action to (almost) blindly activate (double-click) a text node.
              
                 No attempt is made to verify that the node exists 
                 prior to the selection.  No attempt to verify the node 
                 has been properly selected after the selection.
                 
                 It should be noted that a click requires the full 
                 hierarchical path to the node to be selected.  Parent 
                 child branches are delimited with '->' as in:
                    Parent->branch->leaf 
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of the node to be clicked
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    static public ComponentFunction doubleClickUnverifiedTextNode (String winname, String compname, String textValue, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "doubleClickUnverifiedTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "doubleClickUnverifiedTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "doubleClickUnverifiedTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(DOUBLECLICKUNVERIFIEDTEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                 Action to (almost) blindly activate (double-click) a text node.
              
                 No attempt is made to verify that the node exists 
                 prior to the selection.  No attempt to verify the node 
                 has been properly selected after the selection.
                 
                 It should be noted that a click requires the full 
                 hierarchical path to the node to be selected.  Parent 
                 child branches are delimited with '->' as in:
                    Parent->branch->leaf 
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        textValue -- Optional:NO 
                 Case-sensitive text of the node to be clicked
              <BR/>        matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    static public ComponentFunction doubleClickUnverifiedTextNode(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "doubleClickUnverifiedTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "doubleClickUnverifiedTextNode.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "doubleClickUnverifiedTextNode.parameters = null");
        ComponentFunction cf = new ComponentFunction(DOUBLECLICKUNVERIFIEDTEXTNODE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                 Action to expand a node according to its text value.
               
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to expand
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    static public ComponentFunction expand (String winname, String compname, String textValue, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "expand.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "expand.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "expand.textValue = null");
        ComponentFunction cf = new ComponentFunction(EXPAND_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                 Action to expand a node according to its text value.
               
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        textValue -- Optional:NO 
                 Case-sensitive text of node to expand
              <BR/>        matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    static public ComponentFunction expand(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "expand.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "expand.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "expand.parameters = null");
        ComponentFunction cf = new ComponentFunction(EXPAND_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                 Action to expand a node according to a partial match of text value.
               
                 Partial matching is accomplished through case-insensitive substring 
                 matching.  Each delimited node of the provided TextValue 
                 is compared against the object data using this partial match comparison.
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.  Only the final node provided in the TextValue is 
                 evaluated for duplicity.  Intermediate nodes are always found on a 
                 "first match" basis.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-Insensitive text of node to match.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    static public ComponentFunction expandPartial (String winname, String compname, String textValue, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "expandPartial.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "expandPartial.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "expandPartial.textValue = null");
        ComponentFunction cf = new ComponentFunction(EXPANDPARTIAL_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                 Action to expand a node according to a partial match of text value.
               
                 Partial matching is accomplished through case-insensitive substring 
                 matching.  Each delimited node of the provided TextValue 
                 is compared against the object data using this partial match comparison.
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.  Only the final node provided in the TextValue is 
                 evaluated for duplicity.  Intermediate nodes are always found on a 
                 "first match" basis.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        textValue -- Optional:NO 
                 Case-Insensitive text of node to match.
              <BR/>        matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    static public ComponentFunction expandPartial(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "expandPartial.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "expandPartial.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "expandPartial.parameters = null");
        ComponentFunction cf = new ComponentFunction(EXPANDPARTIAL_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                 Action to expand a node according to a partial match of text value.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-Insensitive text of node to match.
              
     **********/
    static public ComponentFunction expandPartialTextNode (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "expandPartialTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "expandPartialTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "expandPartialTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(EXPANDPARTIALTEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                 Action to expand a node according to its text value. Use Expand instead.
               
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
				 RJ Implementation: Works the same as command Expand.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to expand
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    static public ComponentFunction expandTextNode (String winname, String compname, String textValue, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "expandTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "expandTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "expandTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(EXPANDTEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                 Action to expand a node according to its text value. Use Expand instead.
               
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
				 RJ Implementation: Works the same as command Expand.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        textValue -- Optional:NO 
                 Case-sensitive text of node to expand
              <BR/>        matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    static public ComponentFunction expandTextNode(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "expandTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "expandTextNode.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "expandTextNode.parameters = null");
        ComponentFunction cf = new ComponentFunction(EXPANDTEXTNODE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                 Action to blindly expand a node according to its text value.
              
                 Generally, no pre- or post- node checks are done. If the tree contains 
                 hidden root nodes the user must provide these.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive full path text of node to expand
              
     **********/
    static public ComponentFunction expandUnverifiedTextNode (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "expandUnverifiedTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "expandUnverifiedTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "expandUnverifiedTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(EXPANDUNVERIFIEDTEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre>
             Copy the current contents of a tree[branch] to a file according to a partial match of itss text value.
             
             The search of the path to the node is a case-insensitive 
             substring match of each node.  Use 'CaptureTreeDataToFile' if you 
             wish to specify case-sensitive exact matches for tree nodes.             
             
             By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param file  Optional:NO
             The name of the file used to store the tree data.
              
     @param branch  Optional:YES
	             The full name of the tree branch to capture.
	              
     @param indentMark  Optional:YES
			        	The character(s) to use in the output file to indent the tree nodes from the 
			        	parent tree branches.
			        
     @param filterMode  Optional:YES  DefaultVal:
             (Future) Specify a file filter to use to process the text before comparison.
              
     @param filterOptions  Optional:YES  DefaultVal:
             (Future) Specify filter options to use with the file filter.
              
     **********/
    static public ComponentFunction partialMatchTreeDataToFile (String winname, String compname, String file, String branch, String indentMark, String filterMode, String filterOptions) {

        if ( winname == null ) throw new IllegalArgumentException ( "partialMatchTreeDataToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "partialMatchTreeDataToFile.compname = null");

        if ( file == null ) throw new IllegalArgumentException ( "partialMatchTreeDataToFile.file = null");
        ComponentFunction cf = new ComponentFunction(PARTIALMATCHTREEDATATOFILE_KEYWORD, winname, compname);
        cf.addParameter(file);
        cf.addParameter(branch);
        cf.addParameter(indentMark);
        cf.addParameter(filterMode);
        cf.addParameter(filterOptions);
        return cf;
    }


    /*********** <pre>
             Copy the current contents of a tree[branch] to a file according to a partial match of itss text value.
             
             The search of the path to the node is a case-insensitive 
             substring match of each node.  Use 'CaptureTreeDataToFile' if you 
             wish to specify case-sensitive exact matches for tree nodes.             
             
             By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        file -- Optional:NO
             The name of the file used to store the tree data.
              <BR/>        branch -- Optional:YES
	             The full name of the tree branch to capture.
	              <BR/>        indentMark -- Optional:YES
			        	The character(s) to use in the output file to indent the tree nodes from the 
			        	parent tree branches.
			        <BR/>        filterMode -- Optional:YES  DefaultVal:
             (Future) Specify a file filter to use to process the text before comparison.
              <BR/>        filterOptions -- Optional:YES  DefaultVal:
             (Future) Specify filter options to use with the file filter.
              
    </UL>

     **********/
    static public ComponentFunction partialMatchTreeDataToFile(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "partialMatchTreeDataToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "partialMatchTreeDataToFile.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "partialMatchTreeDataToFile.parameters = null");
        ComponentFunction cf = new ComponentFunction(PARTIALMATCHTREEDATATOFILE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                 Action to right click a node according to a partial match of its text value.
               
                 Partial matching is accomplished through case-insensitive substring 
                 matching.  Each delimited node of the provided TextValue 
                 is compared against the object data using this partial match comparison.
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.  Only the final node provided in the TextValue 
                 hierarchy is evaluated for duplicity.  Intermediate nodes are always found 
                 on a "first match" basis.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-Insensitive text of node to right click.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    static public ComponentFunction rightClickPartial (String winname, String compname, String textValue, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "rightClickPartial.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "rightClickPartial.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "rightClickPartial.textValue = null");
        ComponentFunction cf = new ComponentFunction(RIGHTCLICKPARTIAL_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                 Action to right click a node according to a partial match of its text value.
               
                 Partial matching is accomplished through case-insensitive substring 
                 matching.  Each delimited node of the provided TextValue 
                 is compared against the object data using this partial match comparison.
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.  Only the final node provided in the TextValue 
                 hierarchy is evaluated for duplicity.  Intermediate nodes are always found 
                 on a "first match" basis.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        textValue -- Optional:NO 
                 Case-Insensitive text of node to right click.
              <BR/>        matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    static public ComponentFunction rightClickPartial(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "rightClickPartial.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "rightClickPartial.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "rightClickPartial.parameters = null");
        ComponentFunction cf = new ComponentFunction(RIGHTCLICKPARTIAL_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                 Action to right click a node according to its text value.
              
                 It should be noted that a right click requires the full 
                 hierarchical path to the node to be selected.  Parent 
                 child branches are delimited with '->' as in:
                    Parent->branch->leaf
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of the node to be clicked
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    static public ComponentFunction rightClickTextNode (String winname, String compname, String textValue, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "rightClickTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "rightClickTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "rightClickTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(RIGHTCLICKTEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                 Action to right click a node according to its text value.
              
                 It should be noted that a right click requires the full 
                 hierarchical path to the node to be selected.  Parent 
                 child branches are delimited with '->' as in:
                    Parent->branch->leaf
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        textValue -- Optional:NO 
                 Case-sensitive text of the node to be clicked
              <BR/>        matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    static public ComponentFunction rightClickTextNode(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "rightClickTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "rightClickTextNode.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "rightClickTextNode.parameters = null");
        ComponentFunction cf = new ComponentFunction(RIGHTCLICKTEXTNODE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                 Action to (almost) blindly right-click a text node.
              
                 No attempt is made to verify that the node exists 
                 prior to the selection.  No attempt to verify the node 
                 has been properly selected after the selection.
                 
                 It should be noted that a click requires the full 
                 hierarchical path to the node to be selected.  Parent 
                 child branches are delimited with '->' as in:
                    Parent->branch->leaf 
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of the node to be clicked
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    static public ComponentFunction rightClickUnverifiedTextNode (String winname, String compname, String textValue, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(RIGHTCLICKUNVERIFIEDTEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                 Action to (almost) blindly right-click a text node.
              
                 No attempt is made to verify that the node exists 
                 prior to the selection.  No attempt to verify the node 
                 has been properly selected after the selection.
                 
                 It should be noted that a click requires the full 
                 hierarchical path to the node to be selected.  Parent 
                 child branches are delimited with '->' as in:
                    Parent->branch->leaf 
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        textValue -- Optional:NO 
                 Case-sensitive text of the node to be clicked
              <BR/>        matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    static public ComponentFunction rightClickUnverifiedTextNode(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextNode.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "rightClickUnverifiedTextNode.parameters = null");
        ComponentFunction cf = new ComponentFunction(RIGHTCLICKUNVERIFIEDTEXTNODE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                 Action to select a node according to its text value.
               
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
				 RJ Implementation: Works the same as command Click.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to select.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    static public ComponentFunction select (String winname, String compname, String textValue, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "select.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "select.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "select.textValue = null");
        ComponentFunction cf = new ComponentFunction(SELECT_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                 Action to select a node according to its text value.
               
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
				 RJ Implementation: Works the same as command Click.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        textValue -- Optional:NO 
                 Case-sensitive text of node to select.
              <BR/>        matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    static public ComponentFunction select(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "select.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "select.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "select.parameters = null");
        ComponentFunction cf = new ComponentFunction(SELECT_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                 Action to select a node according to a partial match of its text value, in addition to any nodes already selected.
                 Performs selection as if CTRL key were held down during selection.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-Insensitive text of node to select.
              
     **********/
    static public ComponentFunction selectAnotherPartialTextNode (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectAnotherPartialTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectAnotherPartialTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectAnotherPartialTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(SELECTANOTHERPARTIALTEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                 Action to select a node according to its text value, in addition to any nodes already selected.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to select.
              
     **********/
    static public ComponentFunction selectAnotherTextNode (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectAnotherTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectAnotherTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectAnotherTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(SELECTANOTHERTEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                 Action to blindly select a node according to its text value, in addition to any nodes already selected.
              
                 Generally, no pre- or post- node checks are done. If the tree contains 
                 hidden root nodes the user must provide these.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive full path text of node to select.
              
     **********/
    static public ComponentFunction selectAnotherUnverifiedTextNode (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectAnotherUnverifiedTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectAnotherUnverifiedTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectAnotherUnverifiedTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(SELECTANOTHERUNVERIFIEDTEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                 Action to select a node according to a partial match of its text value.
               
                 Partial matching is accomplished through case-insensitive substring 
                 matching.  Each delimited node of the provided TextValue 
                 is compared against the object data using this partial match comparison.
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.  Only the final node provided in the TextValue 
                 hierarchy is evaluated for duplicity.  Intermediate nodes are always found 
                 on a "first match" basis.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-Insensitive text of node to select.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    static public ComponentFunction selectPartial (String winname, String compname, String textValue, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectPartial.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectPartial.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectPartial.textValue = null");
        ComponentFunction cf = new ComponentFunction(SELECTPARTIAL_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                 Action to select a node according to a partial match of its text value.
               
                 Partial matching is accomplished through case-insensitive substring 
                 matching.  Each delimited node of the provided TextValue 
                 is compared against the object data using this partial match comparison.
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.  Only the final node provided in the TextValue 
                 hierarchy is evaluated for duplicity.  Intermediate nodes are always found 
                 on a "first match" basis.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        textValue -- Optional:NO 
                 Case-Insensitive text of node to select.
              <BR/>        matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    static public ComponentFunction selectPartial(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectPartial.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectPartial.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectPartial.parameters = null");
        ComponentFunction cf = new ComponentFunction(SELECTPARTIAL_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                 Action to select a node according to a partial match of its text value.
                 Performs selection as if CTRL key were held down during selection.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-Insensitive text of node to select.
              
     **********/
    static public ComponentFunction selectPartialTextNode (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectPartialTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectPartialTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectPartialTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(SELECTPARTIALTEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre>
               Holds down either Ctrl or Shift while making an item selection with emulating either a Left or Right mouse click.
               The Selection is made according to a partial match of its text value.
            
             		This keyword can be used to select multiple items.
              	    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-Insensitive text (can be a part of whole text) of node to select.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     @param specialKey  Optional:NO
               The special key command used in the row selection.
	           For now, only Control and Shift are supported.
             
     @param mouseClick  Optional:NO 
	           The type of mouse click needed.
		       For now, only Left and Right are supported.
             
     **********/
    static public ComponentFunction selectPartialTextNodeSpecial (String winname, String compname, String textValue, String matchIndex, String specialKey, String mouseClick) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectPartialTextNodeSpecial.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectPartialTextNodeSpecial.compname = null");

        if ( mouseClick == null ) throw new IllegalArgumentException ( "selectPartialTextNodeSpecial.mouseClick = null");
        if ( specialKey == null ) throw new IllegalArgumentException ( "selectPartialTextNodeSpecial.specialKey = null");
        if ( textValue == null ) throw new IllegalArgumentException ( "selectPartialTextNodeSpecial.textValue = null");
        ComponentFunction cf = new ComponentFunction(SELECTPARTIALTEXTNODESPECIAL_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        cf.addParameter(matchIndex);
        cf.addParameter(specialKey);
        cf.addParameter(mouseClick);
        return cf;
    }


    /*********** <pre>
               Holds down either Ctrl or Shift while making an item selection with emulating either a Left or Right mouse click.
               The Selection is made according to a partial match of its text value.
            
             		This keyword can be used to select multiple items.
              	    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        textValue -- Optional:NO 
                 Case-Insensitive text (can be a part of whole text) of node to select.
              <BR/>        matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              <BR/>        specialKey -- Optional:NO
               The special key command used in the row selection.
	           For now, only Control and Shift are supported.
             <BR/>        mouseClick -- Optional:NO 
	           The type of mouse click needed.
		       For now, only Left and Right are supported.
             
    </UL>

     **********/
    static public ComponentFunction selectPartialTextNodeSpecial(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectPartialTextNodeSpecial.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectPartialTextNodeSpecial.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectPartialTextNodeSpecial.parameters = null");
        ComponentFunction cf = new ComponentFunction(SELECTPARTIALTEXTNODESPECIAL_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                 Select/check a node's state icon (checkbox) according to its associated text value. 
               
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of the node to be selected/checked.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    static public ComponentFunction selectStateIcon (String winname, String compname, String textValue, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectStateIcon.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectStateIcon.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectStateIcon.textValue = null");
        ComponentFunction cf = new ComponentFunction(SELECTSTATEICON_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                 Select/check a node's state icon (checkbox) according to its associated text value. 
               
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        textValue -- Optional:NO 
                 Case-sensitive text of the node to be selected/checked.
              <BR/>        matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    static public ComponentFunction selectStateIcon(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectStateIcon.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectStateIcon.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectStateIcon.parameters = null");
        ComponentFunction cf = new ComponentFunction(SELECTSTATEICON_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                 Action to select a node according to its text value. 
               
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
				 RJ Implementation: Works the same as command Select.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of the node to be selected.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    static public ComponentFunction selectTextNode (String winname, String compname, String textValue, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(SELECTTEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                 Action to select a node according to its text value. 
               
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
				 RJ Implementation: Works the same as command Select.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        textValue -- Optional:NO 
                 Case-sensitive text of the node to be selected.
              <BR/>        matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    static public ComponentFunction selectTextNode(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectTextNode.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectTextNode.parameters = null");
        ComponentFunction cf = new ComponentFunction(SELECTTEXTNODE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
               Holds down either Ctrl or Shift while making an item selection with emulating either a Left or Right mouse click.
            
             		This keyword can be used to select multiple items.
              	    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to select.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     @param specialKey  Optional:NO
               The special key command used in the row selection.
	           For now, only Control and Shift are supported.
             
     @param mouseClick  Optional:NO 
	           The type of mouse click needed.
		       For now, only Left and Right are supported.
             
     **********/
    static public ComponentFunction selectTextNodeSpecial (String winname, String compname, String textValue, String matchIndex, String specialKey, String mouseClick) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectTextNodeSpecial.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectTextNodeSpecial.compname = null");

        if ( mouseClick == null ) throw new IllegalArgumentException ( "selectTextNodeSpecial.mouseClick = null");
        if ( specialKey == null ) throw new IllegalArgumentException ( "selectTextNodeSpecial.specialKey = null");
        if ( textValue == null ) throw new IllegalArgumentException ( "selectTextNodeSpecial.textValue = null");
        ComponentFunction cf = new ComponentFunction(SELECTTEXTNODESPECIAL_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        cf.addParameter(matchIndex);
        cf.addParameter(specialKey);
        cf.addParameter(mouseClick);
        return cf;
    }


    /*********** <pre>
               Holds down either Ctrl or Shift while making an item selection with emulating either a Left or Right mouse click.
            
             		This keyword can be used to select multiple items.
              	    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        textValue -- Optional:NO 
                 Case-sensitive text of node to select.
              <BR/>        matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              <BR/>        specialKey -- Optional:NO
               The special key command used in the row selection.
	           For now, only Control and Shift are supported.
             <BR/>        mouseClick -- Optional:NO 
	           The type of mouse click needed.
		       For now, only Left and Right are supported.
             
    </UL>

     **********/
    static public ComponentFunction selectTextNodeSpecial(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectTextNodeSpecial.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectTextNodeSpecial.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectTextNodeSpecial.parameters = null");
        ComponentFunction cf = new ComponentFunction(SELECTTEXTNODESPECIAL_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                 Action to (almost) blindly click a text node.
              
                 No attempt is made to verify that the node exists 
                 prior to the selection.  No attempt to verify the node 
                 has been properly selected after the selection.
                 
                 It should be noted that a click requires the full 
                 hierarchical path to the node to be selected.  Parent 
                 child branches are delimited with '->' as in:
                    Parent->branch->leaf 
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of the node to be clicked
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    static public ComponentFunction selectUnverifiedTextNode (String winname, String compname, String textValue, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectUnverifiedTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectUnverifiedTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectUnverifiedTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(SELECTUNVERIFIEDTEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                 Action to (almost) blindly click a text node.
              
                 No attempt is made to verify that the node exists 
                 prior to the selection.  No attempt to verify the node 
                 has been properly selected after the selection.
                 
                 It should be noted that a click requires the full 
                 hierarchical path to the node to be selected.  Parent 
                 child branches are delimited with '->' as in:
                    Parent->branch->leaf 
                 
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        textValue -- Optional:NO 
                 Case-sensitive text of the node to be clicked
              <BR/>        matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    static public ComponentFunction selectUnverifiedTextNode(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectUnverifiedTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectUnverifiedTextNode.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectUnverifiedTextNode.parameters = null");
        ComponentFunction cf = new ComponentFunction(SELECTUNVERIFIEDTEXTNODE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                 Skips many pre- and post-verification checks for right-clicks.
                 Deprecated. Use RightClick instead.
               
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of the node to be clicked
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    static public ComponentFunction selectUnverifiedTextNodeRightClick (String winname, String compname, String textValue, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectUnverifiedTextNodeRightClick.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectUnverifiedTextNodeRightClick.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectUnverifiedTextNodeRightClick.textValue = null");
        ComponentFunction cf = new ComponentFunction(SELECTUNVERIFIEDTEXTNODERIGHTCLICK_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                 Skips many pre- and post-verification checks for right-clicks.
                 Deprecated. Use RightClick instead.
               
                 We have also made it possible to attempt to select the Nth duplicate 
                 item with the optional MatchIndex parameter for those trees which we 
                 can properly process.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        textValue -- Optional:NO 
                 Case-sensitive text of the node to be clicked
              <BR/>        matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    static public ComponentFunction selectUnverifiedTextNodeRightClick(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectUnverifiedTextNodeRightClick.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectUnverifiedTextNodeRightClick.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectUnverifiedTextNodeRightClick.parameters = null");
        ComponentFunction cf = new ComponentFunction(SELECTUNVERIFIEDTEXTNODERIGHTCLICK_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
             		Sets a user-defined variable with the result of whether a tree contains the provided node.
             	
             		The search of the path to the node is expected to be a case-sensitive 
             		exact match of each node.  Use 'SetTreeContainsPartialMatch' if you 
             		wish to specify case-insensitive substring matches for tree nodes.
              	    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param node  Optional:NO
             				The name of the node to verify.
              			
     @param resultVar  Optional:NO
	             			The name of the variable which gets assigned the result.
	              		
     **********/
    static public ComponentFunction setTreeContainsNode (String winname, String compname, String node, String resultVar) {

        if ( winname == null ) throw new IllegalArgumentException ( "setTreeContainsNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "setTreeContainsNode.compname = null");

        if ( node == null ) throw new IllegalArgumentException ( "setTreeContainsNode.node = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "setTreeContainsNode.resultVar = null");
        ComponentFunction cf = new ComponentFunction(SETTREECONTAINSNODE_KEYWORD, winname, compname);
        cf.addParameter(node);
        cf.addParameter(resultVar);
        return cf;
    }


    /*********** <pre>
             		Sets a user-defined variable with the result of whether a tree contains the provided node.
             	
             		The search of the path to the node is expected to be a case-sensitive 
             		exact match of each node.  Use 'SetTreeContainsPartialMatch' if you 
             		wish to specify case-insensitive substring matches for tree nodes.
              	    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        node -- Optional:NO
             				The name of the node to verify.
              			<BR/>        resultVar -- Optional:NO
	             			The name of the variable which gets assigned the result.
	              		
    </UL>

     **********/
    static public ComponentFunction setTreeContainsNode(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "setTreeContainsNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "setTreeContainsNode.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "setTreeContainsNode.parameters = null");
        ComponentFunction cf = new ComponentFunction(SETTREECONTAINSNODE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
             		Sets a user-defined variable with the result of whether a tree contains the provided node
             		according to a partial match of the node's text value.
             	
             		The search of the path to the node is expected to be a case-insensitive 
			substring match of each node.  Use 'SetTreeContainsNode' if you 
             		wish to specify case-sensitive substring matches for tree nodes.
              	    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param node  Optional:NO
             				The name of the node to verify.
              			
     @param resultVar  Optional:NO
	             			The name of the variable which gets assigned the result.
	              		
     **********/
    static public ComponentFunction setTreeContainsPartialMatch (String winname, String compname, String node, String resultVar) {

        if ( winname == null ) throw new IllegalArgumentException ( "setTreeContainsPartialMatch.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "setTreeContainsPartialMatch.compname = null");

        if ( node == null ) throw new IllegalArgumentException ( "setTreeContainsPartialMatch.node = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "setTreeContainsPartialMatch.resultVar = null");
        ComponentFunction cf = new ComponentFunction(SETTREECONTAINSPARTIALMATCH_KEYWORD, winname, compname);
        cf.addParameter(node);
        cf.addParameter(resultVar);
        return cf;
    }


    /*********** <pre>
             		Sets a user-defined variable with the result of whether a tree contains the provided node
             		according to a partial match of the node's text value.
             	
             		The search of the path to the node is expected to be a case-insensitive 
			substring match of each node.  Use 'SetTreeContainsNode' if you 
             		wish to specify case-sensitive substring matches for tree nodes.
              	    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        node -- Optional:NO
             				The name of the node to verify.
              			<BR/>        resultVar -- Optional:NO
	             			The name of the variable which gets assigned the result.
	              		
    </UL>

     **********/
    static public ComponentFunction setTreeContainsPartialMatch(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "setTreeContainsPartialMatch.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "setTreeContainsPartialMatch.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "setTreeContainsPartialMatch.parameters = null");
        ComponentFunction cf = new ComponentFunction(SETTREECONTAINSPARTIALMATCH_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                 Action to blindly SHIFT-click a node according to its text value. Currently, this component function is for JavaTrees only.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to SHIFT-click.
              
     **********/
    static public ComponentFunction shiftClickUnverifiedTextNode (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "shiftClickUnverifiedTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "shiftClickUnverifiedTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "shiftClickUnverifiedTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(SHIFTCLICKUNVERIFIEDTEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                 UnChecks a node's state icon (checkbox) according to its associated text value. 
               
                 Initially released with .NET support only.
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of the node to be unchecked.
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    static public ComponentFunction unCheckTextNode (String winname, String compname, String textValue, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "unCheckTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "unCheckTextNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "unCheckTextNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(UNCHECKTEXTNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                 UnChecks a node's state icon (checkbox) according to its associated text value. 
               
                 Initially released with .NET support only.
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        textValue -- Optional:NO 
                 Case-sensitive text of the node to be unchecked.
              <BR/>        matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    static public ComponentFunction unCheckTextNode(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "unCheckTextNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "unCheckTextNode.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "unCheckTextNode.parameters = null");
        ComponentFunction cf = new ComponentFunction(UNCHECKTEXTNODE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                 Action to verify a particular text node is NOT selected.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to be verified NOT selected
              
     **********/
    static public ComponentFunction verifyNodeUnselected (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyNodeUnselected.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyNodeUnselected.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "verifyNodeUnselected.textValue = null");
        ComponentFunction cf = new ComponentFunction(VERIFYNODEUNSELECTED_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                 Action to verify a particular text node is selected.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to be verified selected
              
     **********/
    static public ComponentFunction verifySelectedNode (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifySelectedNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifySelectedNode.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "verifySelectedNode.textValue = null");
        ComponentFunction cf = new ComponentFunction(VERIFYSELECTEDNODE_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                 Action to verify a particular state icon is selected/Checked.
              
                 Use VerifyTextNodeChecked instead (if supported).
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of state icon to be verified selected
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    static public ComponentFunction verifyStateIcon (String winname, String compname, String textValue, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyStateIcon.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyStateIcon.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "verifyStateIcon.textValue = null");
        ComponentFunction cf = new ComponentFunction(VERIFYSTATEICON_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                 Action to verify a particular state icon is selected/Checked.
              
                 Use VerifyTextNodeChecked instead (if supported).
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        textValue -- Optional:NO 
                 Case-sensitive text of state icon to be verified selected
              <BR/>        matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    static public ComponentFunction verifyStateIcon(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyStateIcon.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyStateIcon.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyStateIcon.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYSTATEICON_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                 Action to verify a particular state icon is NOT selected.
              
                 Use VerifyTextNodeUnChecked instead (if supported).
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of state icon to be verified NOT selected/checked
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    static public ComponentFunction verifyStateIconUnselected (String winname, String compname, String textValue, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyStateIconUnselected.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyStateIconUnselected.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "verifyStateIconUnselected.textValue = null");
        ComponentFunction cf = new ComponentFunction(VERIFYSTATEICONUNSELECTED_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                 Action to verify a particular state icon is NOT selected.
              
                 Use VerifyTextNodeUnChecked instead (if supported).
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        textValue -- Optional:NO 
                 Case-sensitive text of state icon to be verified NOT selected/checked
              <BR/>        matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    static public ComponentFunction verifyStateIconUnselected(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyStateIconUnselected.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyStateIconUnselected.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyStateIconUnselected.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYSTATEICONUNSELECTED_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                 Action to verify a particular state icon is selected.
               
                 Initially released with .NET support only.
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of state icon to be verified selected/checked
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    static public ComponentFunction verifyTextNodeChecked (String winname, String compname, String textValue, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyTextNodeChecked.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyTextNodeChecked.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "verifyTextNodeChecked.textValue = null");
        ComponentFunction cf = new ComponentFunction(VERIFYTEXTNODECHECKED_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                 Action to verify a particular state icon is selected.
               
                 Initially released with .NET support only.
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        textValue -- Optional:NO 
                 Case-sensitive text of state icon to be verified selected/checked
              <BR/>        matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    static public ComponentFunction verifyTextNodeChecked(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyTextNodeChecked.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyTextNodeChecked.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyTextNodeChecked.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYTEXTNODECHECKED_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                 Action to verify a particular state icon is NOT checked.
               
                 Initially released with .NET support only.
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of state icon to be verified NOT checked
              
     @param matchIndex  Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
     **********/
    static public ComponentFunction verifyTextNodeUnChecked (String winname, String compname, String textValue, String matchIndex) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyTextNodeUnChecked.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyTextNodeUnChecked.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "verifyTextNodeUnChecked.textValue = null");
        ComponentFunction cf = new ComponentFunction(VERIFYTEXTNODEUNCHECKED_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        cf.addParameter(matchIndex);
        return cf;
    }


    /*********** <pre> 
                 Action to verify a particular state icon is NOT checked.
               
                 Initially released with .NET support only.
                 This command might not function correctly when there
                 are duplicate nodes in the tree.  However, we have made it possible to 
                 attempt to select the Nth duplicate item with the optional MatchIndex 
                 parameter for those trees which we can properly process.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        textValue -- Optional:NO 
                 Case-sensitive text of state icon to be verified NOT checked
              <BR/>        matchIndex -- Optional:YES 
                 Optional index of the Nth duplicate item to match.
              
    </UL>

     **********/
    static public ComponentFunction verifyTextNodeUnChecked(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyTextNodeUnChecked.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyTextNodeUnChecked.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyTextNodeUnChecked.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYTEXTNODEUNCHECKED_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre>
             		Verify that a tree contains the provided node.
             	
             		The search of the path to the node is expected to be a case-sensitive 
             		exact match of each node.  Use 'VerifyTreeContainsPartialMatch' if you 
             		wish to specify case-insensitive substring matches for tree nodes.
              	    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param node  Optional:NO
             		The name of the node to verify.
              	
     **********/
    static public ComponentFunction verifyTreeContainsNode (String winname, String compname, String node) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyTreeContainsNode.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyTreeContainsNode.compname = null");

        if ( node == null ) throw new IllegalArgumentException ( "verifyTreeContainsNode.node = null");
        ComponentFunction cf = new ComponentFunction(VERIFYTREECONTAINSNODE_KEYWORD, winname, compname);
        cf.addParameter(node);
        return cf;
    }


    /*********** <pre>
             	Verify that a tree contains the provided node according to a partial match of the node's text value.
             	
             		The search of the path to the node is expected to be a case-insensitive 
             		substring match of each node.  Use 'VerifyTreeContainsNode' if you 
             		wish to specify case-sensitive substring matches for tree nodes.
              	    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param node  Optional:NO
             		The name of the node to verify.
              	
     **********/
    static public ComponentFunction verifyTreeContainsPartialMatch (String winname, String compname, String node) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyTreeContainsPartialMatch.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyTreeContainsPartialMatch.compname = null");

        if ( node == null ) throw new IllegalArgumentException ( "verifyTreeContainsPartialMatch.node = null");
        ComponentFunction cf = new ComponentFunction(VERIFYTREECONTAINSPARTIALMATCH_KEYWORD, winname, compname);
        cf.addParameter(node);
        return cf;
    }


}
