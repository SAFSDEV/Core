
/******************************************************************************
 * DDDriverStringCommands.java
 *
 * Copyright (c) by SAS Institute Inc., Cary, NC 27513
 * General Public License: http://www.opensource.org/licenses/gpl-license.php
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   DDDriverStringCommands.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaCommandModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe DDDriverStringCommands.xml XSLJavaCommandModel.xsl -o DDDriverStringCommands.java
 *
 ******************************************************************************/ 
package org.safs.model.commands;


import org.safs.model.DriverCommand;


public class DDDriverStringCommands {

    /*****************
    Private Singleton Instance
    ****************/
    private static final DDDriverStringCommands singleton = new DDDriverStringCommands(); 

    /*****************
    Private Constructor
    Static class needing no instantiation.
    ****************/
    private DDDriverStringCommands() {}

    /*****************
    public Singleton to access class static methods via instance
    ****************/
    public static DDDriverStringCommands getInstance() { return singleton;}

    /** "CleanString" */
    static public final String CLEANSTRING_KEYWORD = "CleanString";
    /** "Compare" */
    static public final String COMPARE_KEYWORD = "Compare";
    /** "Concatenate" */
    static public final String CONCATENATE_KEYWORD = "Concatenate";
    /** "GetField" */
    static public final String GETFIELD_KEYWORD = "GetField";
    /** "GetFieldCount" */
    static public final String GETFIELDCOUNT_KEYWORD = "GetFieldCount";
    /** "GetFixedWidthField" */
    static public final String GETFIXEDWIDTHFIELD_KEYWORD = "GetFixedWidthField";
    /** "GetMultiDelimitedField" */
    static public final String GETMULTIDELIMITEDFIELD_KEYWORD = "GetMultiDelimitedField";
    /** "GetMultiDelimitedFieldCount" */
    static public final String GETMULTIDELIMITEDFIELDCOUNT_KEYWORD = "GetMultiDelimitedFieldCount";
    /** "GetNextDelimiterIndex" */
    static public final String GETNEXTDELIMITERINDEX_KEYWORD = "GetNextDelimiterIndex";
    /** "GetREDelimitedField" */
    static public final String GETREDELIMITEDFIELD_KEYWORD = "GetREDelimitedField";
    /** "GetREDelimitedFieldCount" */
    static public final String GETREDELIMITEDFIELDCOUNT_KEYWORD = "GetREDelimitedFieldCount";
    /** "GetSubstringsInString" */
    static public final String GETSUBSTRINGINSTRING_KEYWORD = "GetSubstringsInString";
    /** "GetSystemEnviron" */
    static public final String GETSYSTEMENVIRON_KEYWORD = "GetSystemEnviron";
    /** "GetSystemUser" */
    static public final String GETSYSTEMUSER_KEYWORD = "GetSystemUser";
    /** "GetTrimmedField" */
    static public final String GETTRIMMEDFIELD_KEYWORD = "GetTrimmedField";
    /** "Index" */
    static public final String INDEX_KEYWORD = "Index";
    /** "Left" */
    static public final String LEFT_KEYWORD = "Left";
    /** "LeftTrim" */
    static public final String LEFTTRIM_KEYWORD = "LeftTrim";
    /** "Length" */
    static public final String LENGTH_KEYWORD = "Length";
    /** "Replace" */
    static public final String REPLACE_KEYWORD = "Replace";
    /** "Right" */
    static public final String RIGHT_KEYWORD = "Right";
    /** "RightTrim" */
    static public final String RIGHTTRIM_KEYWORD = "RightTrim";
    /** "SubString" */
    static public final String SUBSTRING_KEYWORD = "SubString";
    /** "ToLowerCase" */
    static public final String TOLOWERCASE_KEYWORD = "ToLowerCase";
    /** "ToUpperCase" */
    static public final String TOUPPERCASE_KEYWORD = "ToUpperCase";
    /** "Trim" */
    static public final String TRIM_KEYWORD = "Trim";


    /*********** <pre>
          CleanString, for each char in string: if ((char .gt. 31) and (char .lt. 127)) keep it,
          otherwise turn it into a space
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param sourceString  Optional:NO
              sourceString (could come from a ^variable)
            
     @param resultVar  Optional:NO
              the resultVar to place the result of the
              operation into
            
     **********/
    static public DriverCommand cleanString (String sourceString, String resultVar) {

        if ( resultVar == null ) throw new IllegalArgumentException ( "cleanString.resultVar = null");
        if ( sourceString == null ) throw new IllegalArgumentException ( "cleanString.sourceString = null");
        DriverCommand dc = new DriverCommand(CLEANSTRING_KEYWORD);
        dc.addParameter(sourceString);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          CleanString, for each char in string: if ((char .gt. 31) and (char .lt. 127)) keep it,
          otherwise turn it into a space
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        sourceString -- Optional:NO
              sourceString (could come from a ^variable)
            <BR/>        resultVar -- Optional:NO
              the resultVar to place the result of the
              operation into
            
    </UL>

     **********/
    static public DriverCommand cleanString (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "cleanString.parameters = null");
        DriverCommand dc = new DriverCommand(CLEANSTRING_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Compares two strings and returns an integer specifying the
          result of the comparison.
          The java version returns 'true' or 'false' as the result.
        
          For java version, if the parameter 'regexMatch' is true, then
          the parameter 'dstString' is considered as regular expression.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param sourceString  Optional:NO
              The source string (could come from a ^variable) to compare.
            
     @param dstString  Optional:NO
              The destination string (could come from a ^variable) to compare.
            
     @param resultVar  Optional:NO
              the resultVar to place the result of the operation into
            
     @param regexMatch  Optional:YES  DefaultVal:false
              Indicates if the comparison is in regex way.
            
     **********/
    static public DriverCommand compare (String sourceString, String dstString, String resultVar, String regexMatch) {

        if ( dstString == null ) throw new IllegalArgumentException ( "compare.dstString = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "compare.resultVar = null");
        if ( sourceString == null ) throw new IllegalArgumentException ( "compare.sourceString = null");
        DriverCommand dc = new DriverCommand(COMPARE_KEYWORD);
        dc.addParameter(sourceString);
        dc.addParameter(dstString);
        dc.addParameter(resultVar);
        dc.addParameter(regexMatch);
        return dc;
    }


    /*********** <pre>
          Compares two strings and returns an integer specifying the
          result of the comparison.
          The java version returns 'true' or 'false' as the result.
        
          For java version, if the parameter 'regexMatch' is true, then
          the parameter 'dstString' is considered as regular expression.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        sourceString -- Optional:NO
              The source string (could come from a ^variable) to compare.
            <BR/>        dstString -- Optional:NO
              The destination string (could come from a ^variable) to compare.
            <BR/>        resultVar -- Optional:NO
              the resultVar to place the result of the operation into
            <BR/>        regexMatch -- Optional:YES  DefaultVal:false
              Indicates if the comparison is in regex way.
            
    </UL>

     **********/
    static public DriverCommand compare (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "compare.parameters = null");
        DriverCommand dc = new DriverCommand(COMPARE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Concatenate String1 with String2 and returns concatenated string.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param string1  Optional:NO
              string1 (could come from a ^variable)
            
     @param string2  Optional:NO
              string2 (could come from a ^variable)
            
     @param resultVar  Optional:NO
              the resultVar to place the result of the
              operation into
            
     **********/
    static public DriverCommand concatenate (String string1, String string2, String resultVar) {

        if ( resultVar == null ) throw new IllegalArgumentException ( "concatenate.resultVar = null");
        if ( string1 == null ) throw new IllegalArgumentException ( "concatenate.string1 = null");
        if ( string2 == null ) throw new IllegalArgumentException ( "concatenate.string2 = null");
        DriverCommand dc = new DriverCommand(CONCATENATE_KEYWORD);
        dc.addParameter(string1);
        dc.addParameter(string2);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          Concatenate String1 with String2 and returns concatenated string.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        string1 -- Optional:NO
              string1 (could come from a ^variable)
            <BR/>        string2 -- Optional:NO
              string2 (could come from a ^variable)
            <BR/>        resultVar -- Optional:NO
              the resultVar to place the result of the
              operation into
            
    </UL>

     **********/
    static public DriverCommand concatenate (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "concatenate.parameters = null");
        DriverCommand dc = new DriverCommand(CONCATENATE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          GetField, get a field out of a string using specified delimiter(s). Note that any leading or trailing whitespaces are still present.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param inputString  Optional:NO
              The input string which contains the field to be returned
            
     @param index  Optional:NO
              0-based index of which field to return
            
     @param delimiter  Optional:NO
              delimiter(s) - one or more single characters used as delimiters
            
     @param resultVar  Optional:NO
              the variable name to store the returned field in
            
     **********/
    static public DriverCommand getField (String inputString, String index, String delimiter, String resultVar) {

        if ( delimiter == null ) throw new IllegalArgumentException ( "getField.delimiter = null");
        if ( index == null ) throw new IllegalArgumentException ( "getField.index = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "getField.resultVar = null");
        if ( inputString == null ) throw new IllegalArgumentException ( "getField.inputString = null");
        DriverCommand dc = new DriverCommand(GETFIELD_KEYWORD);
        dc.addParameter(inputString);
        dc.addParameter(index);
        dc.addParameter(delimiter);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          GetField, get a field out of a string using specified delimiter(s). Note that any leading or trailing whitespaces are still present.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        inputString -- Optional:NO
              The input string which contains the field to be returned
            <BR/>        index -- Optional:NO
              0-based index of which field to return
            <BR/>        delimiter -- Optional:NO
              delimiter(s) - one or more single characters used as delimiters
            <BR/>        resultVar -- Optional:NO
              the variable name to store the returned field in
            
    </UL>

     **********/
    static public DriverCommand getField (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getField.parameters = null");
        DriverCommand dc = new DriverCommand(GETFIELD_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          GetFieldCount, Finds the count of all fields within the
          inputRecord found from startindex to the end of the inputRecord.  
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param string1  Optional:NO
              String1 to parse and count fields
            
     @param startindex  Optional:NO
              0-based startindex for parsing the string.
            
     @param delimiters  Optional:NO
              delimiters -- each character is treated as a separate delimiter.
            
     @param resultVar  Optional:NO
              the resultVar to place the result of the
              operation into
            
     **********/
    static public DriverCommand getFieldCount (String string1, String startindex, String delimiters, String resultVar) {

        if ( delimiters == null ) throw new IllegalArgumentException ( "getFieldCount.delimiters = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "getFieldCount.resultVar = null");
        if ( startindex == null ) throw new IllegalArgumentException ( "getFieldCount.startindex = null");
        if ( string1 == null ) throw new IllegalArgumentException ( "getFieldCount.string1 = null");
        DriverCommand dc = new DriverCommand(GETFIELDCOUNT_KEYWORD);
        dc.addParameter(string1);
        dc.addParameter(startindex);
        dc.addParameter(delimiters);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          GetFieldCount, Finds the count of all fields within the
          inputRecord found from startindex to the end of the inputRecord.  
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        string1 -- Optional:NO
              String1 to parse and count fields
            <BR/>        startindex -- Optional:NO
              0-based startindex for parsing the string.
            <BR/>        delimiters -- Optional:NO
              delimiters -- each character is treated as a separate delimiter.
            <BR/>        resultVar -- Optional:NO
              the resultVar to place the result of the
              operation into
            
    </UL>

     **********/
    static public DriverCommand getFieldCount (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getFieldCount.parameters = null");
        DriverCommand dc = new DriverCommand(GETFIELDCOUNT_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          GetFixedWidthField, Given an Input of fixed-width
          fields, return the nth(FieldID) Field  in the record.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param sourceString  Optional:NO
              sourceString (could come from a ^variable)
            
     @param fieldID  Optional:NO
              0-based field to retrieve.
              from 0.
            
     @param fixedwidth  Optional:NO
              the fixedwidth alotted for each field in the record
            
     @param resultVar  Optional:NO
              the resultVar to place the result of the
              operation into
            
     **********/
    static public DriverCommand getFixedWidthField (String sourceString, String fieldID, String fixedwidth, String resultVar) {

        if ( fieldID == null ) throw new IllegalArgumentException ( "getFixedWidthField.fieldID = null");
        if ( fixedwidth == null ) throw new IllegalArgumentException ( "getFixedWidthField.fixedwidth = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "getFixedWidthField.resultVar = null");
        if ( sourceString == null ) throw new IllegalArgumentException ( "getFixedWidthField.sourceString = null");
        DriverCommand dc = new DriverCommand(GETFIXEDWIDTHFIELD_KEYWORD);
        dc.addParameter(sourceString);
        dc.addParameter(fieldID);
        dc.addParameter(fixedwidth);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          GetFixedWidthField, Given an Input of fixed-width
          fields, return the nth(FieldID) Field  in the record.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        sourceString -- Optional:NO
              sourceString (could come from a ^variable)
            <BR/>        fieldID -- Optional:NO
              0-based field to retrieve.
              from 0.
            <BR/>        fixedwidth -- Optional:NO
              the fixedwidth alotted for each field in the record
            <BR/>        resultVar -- Optional:NO
              the resultVar to place the result of the
              operation into
            
    </UL>

     **********/
    static public DriverCommand getFixedWidthField (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getFixedWidthField.parameters = null");
        DriverCommand dc = new DriverCommand(GETFIXEDWIDTHFIELD_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>Given a sourceString of delimited fields, return the nth(FieldID) Field
      in the record from startIndex.  The startIndex and fieldID are 1 based. 
        Returns a specific field from the source string found from
        startindex to the end of the sourceString.  The field and index are 1-based.
   
      The delimiter string can contain multiple characters and this string is treated
      as a single delimiter.

      For example, if delimiter = "->" then the fields of the sourceString 
      are expected to be delimited by the full delimiter string as in:

      "field1->field2->field3"
           </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param sourceString  Optional:NO
              Source string in which to search for first delimited character
     @param fieldID  Optional:NO
              The one based index of the field to find and return.
     @param startIndex  Optional:NO
              Integer (1-based) start position for search in sourceString
     @param delimiters  Optional:NO
              String list of delimiters to find
     @param resultVar  Optional:NO
              Name of DDVariable that will receive the result.
            
     **********/
    static public DriverCommand getMultiDelimitedField (String sourceString, String fieldID, String startIndex, String delimiters, String resultVar) {

        if ( delimiters == null ) throw new IllegalArgumentException ( "getMultiDelimitedField.delimiters = null");
        if ( fieldID == null ) throw new IllegalArgumentException ( "getMultiDelimitedField.fieldID = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "getMultiDelimitedField.resultVar = null");
        if ( sourceString == null ) throw new IllegalArgumentException ( "getMultiDelimitedField.sourceString = null");
        if ( startIndex == null ) throw new IllegalArgumentException ( "getMultiDelimitedField.startIndex = null");
        DriverCommand dc = new DriverCommand(GETMULTIDELIMITEDFIELD_KEYWORD);
        dc.addParameter(sourceString);
        dc.addParameter(fieldID);
        dc.addParameter(startIndex);
        dc.addParameter(delimiters);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>Given a sourceString of delimited fields, return the nth(FieldID) Field
      in the record from startIndex.  The startIndex and fieldID are 1 based. 
        Returns a specific field from the source string found from
        startindex to the end of the sourceString.  The field and index are 1-based.
   
      The delimiter string can contain multiple characters and this string is treated
      as a single delimiter.

      For example, if delimiter = "->" then the fields of the sourceString 
      are expected to be delimited by the full delimiter string as in:

      "field1->field2->field3"
           </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        sourceString -- Optional:NO
              Source string in which to search for first delimited character<BR/>        fieldID -- Optional:NO
              The one based index of the field to find and return.<BR/>        startIndex -- Optional:NO
              Integer (1-based) start position for search in sourceString<BR/>        delimiters -- Optional:NO
              String list of delimiters to find<BR/>        resultVar -- Optional:NO
              Name of DDVariable that will receive the result.
            
    </UL>

     **********/
    static public DriverCommand getMultiDelimitedField (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getMultiDelimitedField.parameters = null");
        DriverCommand dc = new DriverCommand(GETMULTIDELIMITEDFIELD_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>Finds the count of all fields within the inputRecord found from
        startindex to the end of the inputRecord.  The field and index are 1-based.
        Finds the count of all fields within the inputRecord found from
        startindex to the end of the inputRecord.  The field and index are 1-based.
        Blank fields count The next field starts at the next
        character index even if that char is also a delimiter.
        If the last character in the inputRecord is a delimiter, then the
        field it terminates is the last field in the inputRecord.

      Field #1 index is always the same as startindex--even if the character at 
      the startindex position is a delimiter.

      The delimiter string can contain multiple characters and this string is treated
      as a single delimiter.

      For example, if delimiter = "->" then the fields of the inputRecord 
      are expected to be delimited by the full delimiter string as in:

      "field1->field2->field3"
           </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param string1  Optional:NO
              Source String in which to search for first delimited character
     @param startIndex  Optional:NO
              Integer (1-based) start position for search in inputRecord
     @param delimiters  Optional:NO
              String list of delimiters to find
     @param resultVar  Optional:NO
              Name of DDVariable to receive the result
            
     **********/
    static public DriverCommand getMultiDelimitedFieldCount (String string1, String startIndex, String delimiters, String resultVar) {

        if ( delimiters == null ) throw new IllegalArgumentException ( "getMultiDelimitedFieldCount.delimiters = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "getMultiDelimitedFieldCount.resultVar = null");
        if ( startIndex == null ) throw new IllegalArgumentException ( "getMultiDelimitedFieldCount.startIndex = null");
        if ( string1 == null ) throw new IllegalArgumentException ( "getMultiDelimitedFieldCount.string1 = null");
        DriverCommand dc = new DriverCommand(GETMULTIDELIMITEDFIELDCOUNT_KEYWORD);
        dc.addParameter(string1);
        dc.addParameter(startIndex);
        dc.addParameter(delimiters);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>Finds the count of all fields within the inputRecord found from
        startindex to the end of the inputRecord.  The field and index are 1-based.
        Finds the count of all fields within the inputRecord found from
        startindex to the end of the inputRecord.  The field and index are 1-based.
        Blank fields count The next field starts at the next
        character index even if that char is also a delimiter.
        If the last character in the inputRecord is a delimiter, then the
        field it terminates is the last field in the inputRecord.

      Field #1 index is always the same as startindex--even if the character at 
      the startindex position is a delimiter.

      The delimiter string can contain multiple characters and this string is treated
      as a single delimiter.

      For example, if delimiter = "->" then the fields of the inputRecord 
      are expected to be delimited by the full delimiter string as in:

      "field1->field2->field3"
           </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        string1 -- Optional:NO
              Source String in which to search for first delimited character<BR/>        startIndex -- Optional:NO
              Integer (1-based) start position for search in inputRecord<BR/>        delimiters -- Optional:NO
              String list of delimiters to find<BR/>        resultVar -- Optional:NO
              Name of DDVariable to receive the result
            
    </UL>

     **********/
    static public DriverCommand getMultiDelimitedFieldCount (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getMultiDelimitedFieldCount.parameters = null");
        DriverCommand dc = new DriverCommand(GETMULTIDELIMITEDFIELDCOUNT_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          GetNextDelimiterIndex, Finds the index of the first
          character matching one of the provided delimiter characters.
          The search begins at startindex within the inputRecord. 
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param string1  Optional:NO
              String1 to parse for field delimiters
            
     @param startindex  Optional:NO
              0-based startindex to begin parsing the string.
            
     @param delimiters  Optional:NO
              delimiters -- each character is treated as a separate delimiter.
            
     @param resultVar  Optional:NO
              the resultVar to place the result of the
              operation into
            
     **********/
    static public DriverCommand getNextDelimiterIndex (String string1, String startindex, String delimiters, String resultVar) {

        if ( delimiters == null ) throw new IllegalArgumentException ( "getNextDelimiterIndex.delimiters = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "getNextDelimiterIndex.resultVar = null");
        if ( startindex == null ) throw new IllegalArgumentException ( "getNextDelimiterIndex.startindex = null");
        if ( string1 == null ) throw new IllegalArgumentException ( "getNextDelimiterIndex.string1 = null");
        DriverCommand dc = new DriverCommand(GETNEXTDELIMITERINDEX_KEYWORD);
        dc.addParameter(string1);
        dc.addParameter(startindex);
        dc.addParameter(delimiters);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          GetNextDelimiterIndex, Finds the index of the first
          character matching one of the provided delimiter characters.
          The search begins at startindex within the inputRecord. 
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        string1 -- Optional:NO
              String1 to parse for field delimiters
            <BR/>        startindex -- Optional:NO
              0-based startindex to begin parsing the string.
            <BR/>        delimiters -- Optional:NO
              delimiters -- each character is treated as a separate delimiter.
            <BR/>        resultVar -- Optional:NO
              the resultVar to place the result of the
              operation into
            
    </UL>

     **********/
    static public DriverCommand getNextDelimiterIndex (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getNextDelimiterIndex.parameters = null");
        DriverCommand dc = new DriverCommand(GETNEXTDELIMITERINDEX_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          GetREDelimitedField, this command returns the requested field contained in the input string using the passed in regular expression as the delimiter(s).
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param inputString  Optional:NO
              The input string to analyze.
            
     @param index  Optional:NO
		    1-based index of the field to return from the input string.
            
     @param regExp  Optional:NO
              RegExp - This string contains a regular expression used as the delimiter(s). These should conform to the regular expressions defined in "java.util.regex.Pattern" documentation.
            
     @param resultVar  Optional:NO
              resultVar contains the requested field from the input string.
            
     **********/
    static public DriverCommand getREDelimitedField (String inputString, String index, String regExp, String resultVar) {

        if ( index == null ) throw new IllegalArgumentException ( "getREDelimitedField.index = null");
        if ( regExp == null ) throw new IllegalArgumentException ( "getREDelimitedField.regExp = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "getREDelimitedField.resultVar = null");
        if ( inputString == null ) throw new IllegalArgumentException ( "getREDelimitedField.inputString = null");
        DriverCommand dc = new DriverCommand(GETREDELIMITEDFIELD_KEYWORD);
        dc.addParameter(inputString);
        dc.addParameter(index);
        dc.addParameter(regExp);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          GetREDelimitedField, this command returns the requested field contained in the input string using the passed in regular expression as the delimiter(s).
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        inputString -- Optional:NO
              The input string to analyze.
            <BR/>        index -- Optional:NO
		    1-based index of the field to return from the input string.
            <BR/>        regExp -- Optional:NO
              RegExp - This string contains a regular expression used as the delimiter(s). These should conform to the regular expressions defined in "java.util.regex.Pattern" documentation.
            <BR/>        resultVar -- Optional:NO
              resultVar contains the requested field from the input string.
            
    </UL>

     **********/
    static public DriverCommand getREDelimitedField (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getREDelimitedField.parameters = null");
        DriverCommand dc = new DriverCommand(GETREDELIMITEDFIELD_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          GetREDelimitedFieldCount, this command returns the number of fields contained in the input string using the passed in regular expression as the delimiter(s).
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param inputString  Optional:NO
              The input string to analyze.
            
     @param index  Optional:NO
	        0-based index of where to start the analysis from. 
	        The index should be less than or equal to the length of the input string.
            
     @param regExp  Optional:NO
              RegExp - This string contains a regular expression used as the delimiter(s). These should conform to the regular expressions defined in "java.util.regex.Pattern" documentation.
            
     @param resultVar  Optional:NO
              resultVar contains the number of fields in the input string.
            
     **********/
    static public DriverCommand getREDelimitedFieldCount (String inputString, String index, String regExp, String resultVar) {

        if ( index == null ) throw new IllegalArgumentException ( "getREDelimitedFieldCount.index = null");
        if ( regExp == null ) throw new IllegalArgumentException ( "getREDelimitedFieldCount.regExp = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "getREDelimitedFieldCount.resultVar = null");
        if ( inputString == null ) throw new IllegalArgumentException ( "getREDelimitedFieldCount.inputString = null");
        DriverCommand dc = new DriverCommand(GETREDELIMITEDFIELDCOUNT_KEYWORD);
        dc.addParameter(inputString);
        dc.addParameter(index);
        dc.addParameter(regExp);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          GetREDelimitedFieldCount, this command returns the number of fields contained in the input string using the passed in regular expression as the delimiter(s).
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        inputString -- Optional:NO
              The input string to analyze.
            <BR/>        index -- Optional:NO
	        0-based index of where to start the analysis from. 
	        The index should be less than or equal to the length of the input string.
            <BR/>        regExp -- Optional:NO
              RegExp - This string contains a regular expression used as the delimiter(s). These should conform to the regular expressions defined in "java.util.regex.Pattern" documentation.
            <BR/>        resultVar -- Optional:NO
              resultVar contains the number of fields in the input string.
            
    </UL>

     **********/
    static public DriverCommand getREDelimitedFieldCount (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getREDelimitedFieldCount.parameters = null");
        DriverCommand dc = new DriverCommand(GETREDELIMITEDFIELDCOUNT_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                  Extract dynamic substring from a string using regular expressions.
                
                  
                  This command sets a DDVariable for each substring formed between regexstart and regexstop (1 match per string, currently).  Both regexstart and regexstop must be valid, non-empty strings or no matching substring will be found.
                  
                  The string is parsed, searching the substring between regexstart and regexstop matches.
                  
                  When a match is found, the string between regexstart and regexstop is saved in a newly created DDVariable with the name given in varname.
                  
                   </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param string  Optional:NO 
                  String to search for substring.
               
     @param regexStart  Optional:NO 
                  The starting regular expression.  Should not be empty.
               
     @param regexStop  Optional:NO 
                  The stopping regular expression.  Should not be empty.
               
     @param varName  Optional:NO 
                  The name of the variable to contain the substring.  
               
     **********/
    static public DriverCommand getSubstringsInString (String string, String regexStart, String regexStop, String varName) {

        if ( regexStart == null ) throw new IllegalArgumentException ( "getSubstringsInString.regexStart = null");
        if ( regexStop == null ) throw new IllegalArgumentException ( "getSubstringsInString.regexStop = null");
        if ( string == null ) throw new IllegalArgumentException ( "getSubstringsInString.string = null");
        if ( varName == null ) throw new IllegalArgumentException ( "getSubstringsInString.varName = null");
        DriverCommand dc = new DriverCommand(GETSUBSTRINGINSTRING_KEYWORD);
        dc.addParameter(string);
        dc.addParameter(regexStart);
        dc.addParameter(regexStop);
        dc.addParameter(varName);
        return dc;
    }


    /*********** <pre> 
                  Extract dynamic substring from a string using regular expressions.
                
                  
                  This command sets a DDVariable for each substring formed between regexstart and regexstop (1 match per string, currently).  Both regexstart and regexstop must be valid, non-empty strings or no matching substring will be found.
                  
                  The string is parsed, searching the substring between regexstart and regexstop matches.
                  
                  When a match is found, the string between regexstart and regexstop is saved in a newly created DDVariable with the name given in varname.
                  
                   </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        string -- Optional:NO 
                  String to search for substring.
               <BR/>        regexStart -- Optional:NO 
                  The starting regular expression.  Should not be empty.
               <BR/>        regexStop -- Optional:NO 
                  The stopping regular expression.  Should not be empty.
               <BR/>        varName -- Optional:NO 
                  The name of the variable to contain the substring.  
               
    </UL>

     **********/
    static public DriverCommand getSubstringsInString (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getSubstringsInString.parameters = null");
        DriverCommand dc = new DriverCommand(GETSUBSTRINGINSTRING_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          GetSystemEnviron, get a system environment variable value
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param string1  Optional:NO
              String1
            
     @param resultVar  Optional:NO
              the resultVar to place the result of the
              operation into
            
     **********/
    static public DriverCommand getSystemEnviron (String string1, String resultVar) {

        if ( resultVar == null ) throw new IllegalArgumentException ( "getSystemEnviron.resultVar = null");
        if ( string1 == null ) throw new IllegalArgumentException ( "getSystemEnviron.string1 = null");
        DriverCommand dc = new DriverCommand(GETSYSTEMENVIRON_KEYWORD);
        dc.addParameter(string1);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          GetSystemEnviron, get a system environment variable value
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        string1 -- Optional:NO
              String1
            <BR/>        resultVar -- Optional:NO
              the resultVar to place the result of the
              operation into
            
    </UL>

     **********/
    static public DriverCommand getSystemEnviron (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getSystemEnviron.parameters = null");
        DriverCommand dc = new DriverCommand(GETSYSTEMENVIRON_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Get the USERID of the currently logged on user as stored in System Environment variables.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param resultVar  Optional:NO
              the resultVar to place the USERID into
            
     **********/
    static public DriverCommand getSystemUser (String resultVar) {

        if ( resultVar == null ) throw new IllegalArgumentException ( "getSystemUser.resultVar = null");
        DriverCommand dc = new DriverCommand(GETSYSTEMUSER_KEYWORD);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          GetTrimmedField, get a trimmed field out of a string using specified delimiter(s).
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param string1  Optional:NO
              string1
            
     @param index  Optional:NO
              0-based index of which field to grab
            
     @param delimiter  Optional:NO
              delimiter
            
     @param resultVar  Optional:NO
              the resultVar to place the result of the
              operation into
            
     **********/
    static public DriverCommand getTrimmedField (String string1, String index, String delimiter, String resultVar) {

        if ( delimiter == null ) throw new IllegalArgumentException ( "getTrimmedField.delimiter = null");
        if ( index == null ) throw new IllegalArgumentException ( "getTrimmedField.index = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "getTrimmedField.resultVar = null");
        if ( string1 == null ) throw new IllegalArgumentException ( "getTrimmedField.string1 = null");
        DriverCommand dc = new DriverCommand(GETTRIMMEDFIELD_KEYWORD);
        dc.addParameter(string1);
        dc.addParameter(index);
        dc.addParameter(delimiter);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          GetTrimmedField, get a trimmed field out of a string using specified delimiter(s).
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        string1 -- Optional:NO
              string1
            <BR/>        index -- Optional:NO
              0-based index of which field to grab
            <BR/>        delimiter -- Optional:NO
              delimiter
            <BR/>        resultVar -- Optional:NO
              the resultVar to place the result of the
              operation into
            
    </UL>

     **********/
    static public DriverCommand getTrimmedField (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getTrimmedField.parameters = null");
        DriverCommand dc = new DriverCommand(GETTRIMMEDFIELD_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Returns the position of the first occurrence of one string
          within another string. -1 if not found at all
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param start  Optional:NO
              0-based starting offset of the sourceString to search
            
     @param sourceString  Optional:NO
              sourceString (could come from a ^variable)
            
     @param findString  Optional:NO
              findString (could come from a ^variable)
            
     @param resultVar  Optional:NO
              the resultVar to place the result of the
              operation into
            
     **********/
    static public DriverCommand index (String start, String sourceString, String findString, String resultVar) {

        if ( findString == null ) throw new IllegalArgumentException ( "index.findString = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "index.resultVar = null");
        if ( sourceString == null ) throw new IllegalArgumentException ( "index.sourceString = null");
        if ( start == null ) throw new IllegalArgumentException ( "index.start = null");
        DriverCommand dc = new DriverCommand(INDEX_KEYWORD);
        dc.addParameter(start);
        dc.addParameter(sourceString);
        dc.addParameter(findString);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          Returns the position of the first occurrence of one string
          within another string. -1 if not found at all
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        start -- Optional:NO
              0-based starting offset of the sourceString to search
            <BR/>        sourceString -- Optional:NO
              sourceString (could come from a ^variable)
            <BR/>        findString -- Optional:NO
              findString (could come from a ^variable)
            <BR/>        resultVar -- Optional:NO
              the resultVar to place the result of the
              operation into
            
    </UL>

     **********/
    static public DriverCommand index (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "index.parameters = null");
        DriverCommand dc = new DriverCommand(INDEX_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Returns a string of a specified number of characters copied from the beginning of another string.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param sourceString  Optional:NO
              sourceString (could come from a ^variable)
            
     @param length  Optional:NO
              number of chars to copy
            
     @param resultVar  Optional:NO
              the resultVar to place the result of the
              operation into
            
     **********/
    static public DriverCommand left (String sourceString, String length, String resultVar) {

        if ( length == null ) throw new IllegalArgumentException ( "left.length = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "left.resultVar = null");
        if ( sourceString == null ) throw new IllegalArgumentException ( "left.sourceString = null");
        DriverCommand dc = new DriverCommand(LEFT_KEYWORD);
        dc.addParameter(sourceString);
        dc.addParameter(length);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          Returns a string of a specified number of characters copied from the beginning of another string.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        sourceString -- Optional:NO
              sourceString (could come from a ^variable)
            <BR/>        length -- Optional:NO
              number of chars to copy
            <BR/>        resultVar -- Optional:NO
              the resultVar to place the result of the
              operation into
            
    </UL>

     **********/
    static public DriverCommand left (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "left.parameters = null");
        DriverCommand dc = new DriverCommand(LEFT_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          A new string trimmed of leading tabs and spaces.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param sourceString  Optional:NO
              sourceString (could come from a ^variable)
            
     @param resultVar  Optional:NO
              the resultVar to place the result of the
              operation into
            
     **********/
    static public DriverCommand leftTrim (String sourceString, String resultVar) {

        if ( resultVar == null ) throw new IllegalArgumentException ( "leftTrim.resultVar = null");
        if ( sourceString == null ) throw new IllegalArgumentException ( "leftTrim.sourceString = null");
        DriverCommand dc = new DriverCommand(LEFTTRIM_KEYWORD);
        dc.addParameter(sourceString);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          A new string trimmed of leading tabs and spaces.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        sourceString -- Optional:NO
              sourceString (could come from a ^variable)
            <BR/>        resultVar -- Optional:NO
              the resultVar to place the result of the
              operation into
            
    </UL>

     **********/
    static public DriverCommand leftTrim (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "leftTrim.parameters = null");
        DriverCommand dc = new DriverCommand(LEFTTRIM_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Returns the length of a string or variable.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param sourceString  Optional:NO
              sourceString (could come from a ^variable)
            
     @param resultVar  Optional:NO
              the resultVar to place the result of the length
              operation into
            
     **********/
    static public DriverCommand length (String sourceString, String resultVar) {

        if ( resultVar == null ) throw new IllegalArgumentException ( "length.resultVar = null");
        if ( sourceString == null ) throw new IllegalArgumentException ( "length.sourceString = null");
        DriverCommand dc = new DriverCommand(LENGTH_KEYWORD);
        dc.addParameter(sourceString);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          Returns the length of a string or variable.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        sourceString -- Optional:NO
              sourceString (could come from a ^variable)
            <BR/>        resultVar -- Optional:NO
              the resultVar to place the result of the length
              operation into
            
    </UL>

     **********/
    static public DriverCommand length (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "length.parameters = null");
        DriverCommand dc = new DriverCommand(LENGTH_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Replace 'find' substring with 'replace' substring
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param sourceString  Optional:NO
              sourceString (could come from a ^variable)
            
     @param findString  Optional:NO
              findString (could come from a ^variable)
            
     @param replaceString  Optional:NO
              replaceString (could come from a ^variable)
            
     @param resultVar  Optional:NO
              the resultVar to place the result of the
              operation into
            
     **********/
    static public DriverCommand replace (String sourceString, String findString, String replaceString, String resultVar) {

        if ( findString == null ) throw new IllegalArgumentException ( "replace.findString = null");
        if ( replaceString == null ) throw new IllegalArgumentException ( "replace.replaceString = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "replace.resultVar = null");
        if ( sourceString == null ) throw new IllegalArgumentException ( "replace.sourceString = null");
        DriverCommand dc = new DriverCommand(REPLACE_KEYWORD);
        dc.addParameter(sourceString);
        dc.addParameter(findString);
        dc.addParameter(replaceString);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          Replace 'find' substring with 'replace' substring
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        sourceString -- Optional:NO
              sourceString (could come from a ^variable)
            <BR/>        findString -- Optional:NO
              findString (could come from a ^variable)
            <BR/>        replaceString -- Optional:NO
              replaceString (could come from a ^variable)
            <BR/>        resultVar -- Optional:NO
              the resultVar to place the result of the
              operation into
            
    </UL>

     **********/
    static public DriverCommand replace (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "replace.parameters = null");
        DriverCommand dc = new DriverCommand(REPLACE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Returns a string of a specified number of characters copied from the end of another string.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param sourceString  Optional:NO
              sourceString (could come from a ^variable)
            
     @param length  Optional:NO
              length
            
     @param resultVar  Optional:NO
              the resultVar to place the result of the
              operation into
            
     **********/
    static public DriverCommand right (String sourceString, String length, String resultVar) {

        if ( length == null ) throw new IllegalArgumentException ( "right.length = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "right.resultVar = null");
        if ( sourceString == null ) throw new IllegalArgumentException ( "right.sourceString = null");
        DriverCommand dc = new DriverCommand(RIGHT_KEYWORD);
        dc.addParameter(sourceString);
        dc.addParameter(length);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          Returns a string of a specified number of characters copied from the end of another string.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        sourceString -- Optional:NO
              sourceString (could come from a ^variable)
            <BR/>        length -- Optional:NO
              length
            <BR/>        resultVar -- Optional:NO
              the resultVar to place the result of the
              operation into
            
    </UL>

     **********/
    static public DriverCommand right (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "right.parameters = null");
        DriverCommand dc = new DriverCommand(RIGHT_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          A new string trimmed of trailing tabs and spaces.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param sourceString  Optional:NO
              sourceString (could come from a ^variable)
            
     @param resultVar  Optional:NO
              the resultVar to place the result of the
              operation into
            
     **********/
    static public DriverCommand rightTrim (String sourceString, String resultVar) {

        if ( resultVar == null ) throw new IllegalArgumentException ( "rightTrim.resultVar = null");
        if ( sourceString == null ) throw new IllegalArgumentException ( "rightTrim.sourceString = null");
        DriverCommand dc = new DriverCommand(RIGHTTRIM_KEYWORD);
        dc.addParameter(sourceString);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          A new string trimmed of trailing tabs and spaces.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        sourceString -- Optional:NO
              sourceString (could come from a ^variable)
            <BR/>        resultVar -- Optional:NO
              the resultVar to place the result of the
              operation into
            
    </UL>

     **********/
    static public DriverCommand rightTrim (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "rightTrim.parameters = null");
        DriverCommand dc = new DriverCommand(RIGHTTRIM_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Returns a portion of a string based on character index.
        
          The substring  to retrieve starts at the specified start
          character index and ends after the specified number of characters have been copied.  If the number of characters to copy is not provided, then we will return all characters after the start index.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param sourceString  Optional:NO
              sourceString (could come from a ^variable)
            
     @param start  Optional:NO
              starting 0-based offset character position
            
     @param length  Optional:YES
              number of chars to copy.  If not provided or less than 1 then all characters after the start index will be retrieved.
            
     @param resultVar  Optional:NO
              the resultVar to place the result of the
              operation into
            
     **********/
    static public DriverCommand subString (String sourceString, String start, String length, String resultVar) {

        if ( resultVar == null ) throw new IllegalArgumentException ( "subString.resultVar = null");
        if ( sourceString == null ) throw new IllegalArgumentException ( "subString.sourceString = null");
        if ( start == null ) throw new IllegalArgumentException ( "subString.start = null");
        DriverCommand dc = new DriverCommand(SUBSTRING_KEYWORD);
        dc.addParameter(sourceString);
        dc.addParameter(start);
        dc.addParameter(length);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          Returns a portion of a string based on character index.
        
          The substring  to retrieve starts at the specified start
          character index and ends after the specified number of characters have been copied.  If the number of characters to copy is not provided, then we will return all characters after the start index.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        sourceString -- Optional:NO
              sourceString (could come from a ^variable)
            <BR/>        start -- Optional:NO
              starting 0-based offset character position
            <BR/>        length -- Optional:YES
              number of chars to copy.  If not provided or less than 1 then all characters after the start index will be retrieved.
            <BR/>        resultVar -- Optional:NO
              the resultVar to place the result of the
              operation into
            
    </UL>

     **********/
    static public DriverCommand subString (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "subString.parameters = null");
        DriverCommand dc = new DriverCommand(SUBSTRING_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Returns a copy of a string, with all letters converted to lowercase.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param sourceString  Optional:NO
              sourceString (could come from a ^variable)
            
     @param resultVar  Optional:NO
              the resultVar to place the result of the
              operation into
            
     **********/
    static public DriverCommand toLowerCase (String sourceString, String resultVar) {

        if ( resultVar == null ) throw new IllegalArgumentException ( "toLowerCase.resultVar = null");
        if ( sourceString == null ) throw new IllegalArgumentException ( "toLowerCase.sourceString = null");
        DriverCommand dc = new DriverCommand(TOLOWERCASE_KEYWORD);
        dc.addParameter(sourceString);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          Returns a copy of a string, with all letters converted to lowercase.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        sourceString -- Optional:NO
              sourceString (could come from a ^variable)
            <BR/>        resultVar -- Optional:NO
              the resultVar to place the result of the
              operation into
            
    </UL>

     **********/
    static public DriverCommand toLowerCase (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "toLowerCase.parameters = null");
        DriverCommand dc = new DriverCommand(TOLOWERCASE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Returns a copy of a string after converting all letters to uppercase.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param sourceString  Optional:NO
              sourceString (could come from a ^variable)
            
     @param resultVar  Optional:NO
              the resultVar to place the result of the
              operation into
            
     **********/
    static public DriverCommand toUpperCase (String sourceString, String resultVar) {

        if ( resultVar == null ) throw new IllegalArgumentException ( "toUpperCase.resultVar = null");
        if ( sourceString == null ) throw new IllegalArgumentException ( "toUpperCase.sourceString = null");
        DriverCommand dc = new DriverCommand(TOUPPERCASE_KEYWORD);
        dc.addParameter(sourceString);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          Returns a copy of a string after converting all letters to uppercase.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        sourceString -- Optional:NO
              sourceString (could come from a ^variable)
            <BR/>        resultVar -- Optional:NO
              the resultVar to place the result of the
              operation into
            
    </UL>

     **********/
    static public DriverCommand toUpperCase (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "toUpperCase.parameters = null");
        DriverCommand dc = new DriverCommand(TOUPPERCASE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          A new string trimmed of leading and trailing tabs and spaces.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param sourceString  Optional:NO
              sourceString (could come from a ^variable)
            
     @param resultVar  Optional:NO
              the resultVar to place the result of the
              operation into
            
     **********/
    static public DriverCommand trim (String sourceString, String resultVar) {

        if ( resultVar == null ) throw new IllegalArgumentException ( "trim.resultVar = null");
        if ( sourceString == null ) throw new IllegalArgumentException ( "trim.sourceString = null");
        DriverCommand dc = new DriverCommand(TRIM_KEYWORD);
        dc.addParameter(sourceString);
        dc.addParameter(resultVar);
        return dc;
    }


    /*********** <pre>
          A new string trimmed of leading and trailing tabs and spaces.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Rational Robot</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        sourceString -- Optional:NO
              sourceString (could come from a ^variable)
            <BR/>        resultVar -- Optional:NO
              the resultVar to place the result of the
              operation into
            
    </UL>

     **********/
    static public DriverCommand trim (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "trim.parameters = null");
        DriverCommand dc = new DriverCommand(TRIM_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


}
