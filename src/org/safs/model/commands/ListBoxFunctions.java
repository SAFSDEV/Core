
/******************************************************************************
 * ListBoxFunctions.java
 *
 * Copyright (C) SAS Institute, All rights reserved.
 * General Public License: https://www.gnu.org/licenses/gpl-3.0.en.html
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   ListBoxFunctions.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaCommandModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe ListBoxFunctions.xml XSLJavaCommandModel.xsl -o ListBoxFunctions.java
 *
 ******************************************************************************/ 
package org.safs.model.commands;


import org.safs.model.ComponentFunction;


public class ListBoxFunctions {

    /*****************
    Private Singleton Instance
    ****************/
    private static final ListBoxFunctions singleton = new ListBoxFunctions(); 

    /*****************
    Private Constructor
    Static class needing no instantiation.
    ****************/
    private ListBoxFunctions() {}

    /*****************
    public Singleton to access class static methods via instance
    ****************/
    public static ListBoxFunctions getInstance() { return singleton;}

    /** "ActivatePartialMatch" */
    static public final String ACTIVATEPARTIALMATCH_KEYWORD = "ActivatePartialMatch";
    /** "ActivateTextItem" */
    static public final String ACTIVATETEXTITEM_KEYWORD = "ActivateTextItem";
    /** "ActivateUnverifiedPartialMatch" */
    static public final String ACTIVATEUNVERIFIEDPARTIALMATCH_KEYWORD = "ActivateUnverifiedPartialMatch";
    /** "ActivateUnverifiedTextItem" */
    static public final String ACTIVATEUNVERIFIEDTEXTITEM_KEYWORD = "ActivateUnverifiedTextItem";
    /** "CaptureItemsToFile" */
    static public final String CAPTUREITEMSTOFILE_KEYWORD = "CaptureItemsToFile";
    /** "ClickColumnIndex" */
    static public final String CLICKCOLUMNINDEX_KEYWORD = "ClickColumnIndex";
    /** "ClickColumnLabel" */
    static public final String CLICKCOLUMNLABEL_KEYWORD = "ClickColumnLabel";
    /** "ClickTextItem" */
    static public final String CLICKTEXTITEM_KEYWORD = "ClickTextItem";
    /** "ExtendSelectionToTextItem" */
    static public final String EXTENDSELECTIONTOTEXTITEM_KEYWORD = "ExtendSelectionToTextItem";
    /** "RightClickTextItem" */
    static public final String RIGHTCLICKTEXTITEM_KEYWORD = "RightClickTextItem";
    /** "SelectAnotherTextItem" */
    static public final String SELECTANOTHERTEXTITEM_KEYWORD = "SelectAnotherTextItem";
    /** "SelectAnotherUnverifiedTextItem" */
    static public final String SELECTANOTHERUNVERIFIEDTEXTITEM_KEYWORD = "SelectAnotherUnverifiedTextItem";
    /** "SelectIndex" */
    static public final String SELECTINDEX_KEYWORD = "SelectIndex";
    /** "SelectPartialMatch" */
    static public final String SELECTPARTIALMATCH_KEYWORD = "SelectPartialMatch";
    /** "SelectTextItem" */
    static public final String SELECTTEXTITEM_KEYWORD = "SelectTextItem";
    /** "SelectUnverifiedAnotherTextItem" */
    static public final String SELECTUNVERIFIEDANOTHERTEXTITEM_KEYWORD = "SelectUnverifiedAnotherTextItem";
    /** "SelectUnverifiedPartialMatch" */
    static public final String SELECTUNVERIFIEDPARTIALMATCH_KEYWORD = "SelectUnverifiedPartialMatch";
    /** "SelectUnverifiedTextItem" */
    static public final String SELECTUNVERIFIEDTEXTITEM_KEYWORD = "SelectUnverifiedTextItem";
    /** "SetListContains" */
    static public final String SETLISTCONTAINS_KEYWORD = "SetListContains";
    /** "VerifyItem" */
    static public final String VERIFYITEM_KEYWORD = "VerifyItem";
    /** "VerifyItemUnselected" */
    static public final String VERIFYITEMUNSELECTED_KEYWORD = "VerifyItemUnselected";
    /** "VerifyListContains" */
    static public final String VERIFYLISTCONTAINS_KEYWORD = "VerifyListContains";
    /** "VerifyListContainsPartialMatch" */
    static public final String VERIFYLISTCONTAINSPARTIALMATCH_KEYWORD = "VerifyListContainsPartialMatch";
    /** "VerifyListDoesNotContain" */
    static public final String VERIFYLISTDOESNOTCONTAIN_KEYWORD = "VerifyListDoesNotContain";
    /** "VerifyListDoesNotContainPartialMatch" */
    static public final String VERIFYLISTDOESNOTCONTAINPARTIALMATCH_KEYWORD = "VerifyListDoesNotContainPartialMatch";
    /** "VerifyMenuItem" */
    static public final String VERIFYMENUITEM_KEYWORD = "VerifyMenuItem";
    /** "VerifyMenuPartialMatch" */
    static public final String VERIFYMENUPARTIALMATCH_KEYWORD = "VerifyMenuPartialMatch";
    /** "VerifyPartialMatch" */
    static public final String VERIFYPARTIALMATCH_KEYWORD = "VerifyPartialMatch";
    /** "VerifySelectedItem" */
    static public final String VERIFYSELECTEDITEM_KEYWORD = "VerifySelectedItem";
    /** "VerifySelectedPartialMatch" */
    static public final String VERIFYSELECTEDPARTIALMATCH_KEYWORD = "VerifySelectedPartialMatch";


    /*********** <pre> 
                Routine to DblClick and Verify an item according to a partial text match.
               
                Routine to DblClick and Verify an item according to a partial text match.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive substring of node to DblClick and verify.
              
     **********/
    static public ComponentFunction activatePartialMatch (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "activatePartialMatch.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "activatePartialMatch.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "activatePartialMatch.textValue = null");
        ComponentFunction cf = new ComponentFunction(ACTIVATEPARTIALMATCH_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                Routine to DblClick and Verify an item according to its text value.
               
                Routine to DblClick and Verify an item according to its text value.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to DblClick and verify.
              
     **********/
    static public ComponentFunction activateTextItem (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "activateTextItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "activateTextItem.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "activateTextItem.textValue = null");
        ComponentFunction cf = new ComponentFunction(ACTIVATETEXTITEM_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                DblClicks an item according to a partial text match.
               
                DblClicks an item according to a partial text match.
                The item is activated but no check is performed after
                the selection to verify the selection was successful.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive substring of node to DblClick.
              
     **********/
    static public ComponentFunction activateUnverifiedPartialMatch (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "activateUnverifiedPartialMatch.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "activateUnverifiedPartialMatch.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "activateUnverifiedPartialMatch.textValue = null");
        ComponentFunction cf = new ComponentFunction(ACTIVATEUNVERIFIEDPARTIALMATCH_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                Routine to DblClick an item according to its text value.
               
                Routine to DblClick an item according to its text value.
                 No check is performed after the selection to verify success.  
                 This is typically done for cases when the listbox is only temporary 
                 in nature and disappears immediately upon a selection.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to DblClick.
              
     **********/
    static public ComponentFunction activateUnverifiedTextItem (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "activateUnverifiedTextItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "activateUnverifiedTextItem.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "activateUnverifiedTextItem.textValue = null");
        ComponentFunction cf = new ComponentFunction(ACTIVATEUNVERIFIEDTEXTITEM_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre>
                Capture Items To a File specified (if not abs, then to test dir)
               
                Capture Items To a File specified (if not abs, then to test dir)
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param fileName  Optional:NO 
                 File name (if not absolute, then to test dir)
              
     @param fileEncoding  Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
     **********/
    static public ComponentFunction captureItemsToFile (String winname, String compname, String fileName, String fileEncoding) {

        if ( winname == null ) throw new IllegalArgumentException ( "captureItemsToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "captureItemsToFile.compname = null");

        if ( fileName == null ) throw new IllegalArgumentException ( "captureItemsToFile.fileName = null");
        ComponentFunction cf = new ComponentFunction(CAPTUREITEMSTOFILE_KEYWORD, winname, compname);
        cf.addParameter(fileName);
        cf.addParameter(fileEncoding);
        return cf;
    }


    /*********** <pre>
                Capture Items To a File specified (if not abs, then to test dir)
               
                Capture Items To a File specified (if not abs, then to test dir)
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fileName -- Optional:NO 
                 File name (if not absolute, then to test dir)
              <BR/>        fileEncoding -- Optional:YES  DefaultVal:
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            
    </UL>

     **********/
    static public ComponentFunction captureItemsToFile(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "captureItemsToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "captureItemsToFile.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "captureItemsToFile.parameters = null");
        ComponentFunction cf = new ComponentFunction(CAPTUREITEMSTOFILE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Click a column header based on it's index of list, starting from 1
               
                Click a column header based on it's index of list, starting from 1
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param index  Optional:NO 
                 Index of the column header to click, starting from 1
              
     **********/
    static public ComponentFunction clickColumnIndex (String winname, String compname, String index) {

        if ( winname == null ) throw new IllegalArgumentException ( "clickColumnIndex.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "clickColumnIndex.compname = null");

        if ( index == null ) throw new IllegalArgumentException ( "clickColumnIndex.index = null");
        ComponentFunction cf = new ComponentFunction(CLICKCOLUMNINDEX_KEYWORD, winname, compname);
        cf.addParameter(index);
        return cf;
    }


    /*********** <pre> 
                Click a column header based on it's label
               
                Click a column header based on it's label
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param label  Optional:NO 
                 Label of the column header to click
              
     **********/
    static public ComponentFunction clickColumnLabel (String winname, String compname, String label) {

        if ( winname == null ) throw new IllegalArgumentException ( "clickColumnLabel.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "clickColumnLabel.compname = null");

        if ( label == null ) throw new IllegalArgumentException ( "clickColumnLabel.label = null");
        ComponentFunction cf = new ComponentFunction(CLICKCOLUMNLABEL_KEYWORD, winname, compname);
        cf.addParameter(label);
        return cf;
    }


    /*********** <pre> 
                Routine to Click a selection according to its text value.
		Note: This keyword triggers the click event 
               
                Routine to Click a selection according to its text value.
		NOTE: Only ClickTextItem keyword triggers the click event.  SelectTextItem
                         keyword fails to trigger click event on some instances.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to select.
              
     **********/
    static public ComponentFunction clickTextItem (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "clickTextItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "clickTextItem.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "clickTextItem.textValue = null");
        ComponentFunction cf = new ComponentFunction(CLICKTEXTITEM_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                Routine to Shift+Click and Verify a selection according to its text value.
               
                This extends the current selection to include the specified
		selection and all other items inbetween.
                NOTE: This may not work in all environments (Java, Web, etc...)
                
                For example, in Java, we can usually verify that an item exists 
                in the list; but we do not seem to be able to verify if a newly 
                added selection to multiple selections is actually selected.
                
                
                So, for Java, we will verify existence in the list, but we cannot 
                verify the selection was successful--we will skip that last check.
                
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to select and verify.
              
     **********/
    static public ComponentFunction extendSelectionToTextItem (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "extendSelectionToTextItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "extendSelectionToTextItem.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "extendSelectionToTextItem.textValue = null");
        ComponentFunction cf = new ComponentFunction(EXTENDSELECTIONTOTEXTITEM_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                Routine to Right-Click a selection according to its text value.
		Note: This keyword triggers the right-click event.
               
                Routine to Right-Click a selection according to its text value.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to right-click on.
              
     **********/
    static public ComponentFunction rightClickTextItem (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "rightClickTextItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "rightClickTextItem.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "rightClickTextItem.textValue = null");
        ComponentFunction cf = new ComponentFunction(RIGHTCLICKTEXTITEM_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                Routine to Control+Click and Verify a selection according to its text value.
               
                This adds selected items to items already selected.
                NOTE: This may not work in all environments (Java, Web, etc...)
                
                For example, in Java, we can usually verify that an item exists 
                in the list; but we do not seem to be able to verify if a newly 
                added selection to multiple selections is actually selected.
                
                
                So, for Java, we will verify existence in the list, but we cannot 
                verify the selection was successful--we will skip that last check.
                
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to select and verify.
              
     **********/
    static public ComponentFunction selectAnotherTextItem (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectAnotherTextItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectAnotherTextItem.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectAnotherTextItem.textValue = null");
        ComponentFunction cf = new ComponentFunction(SELECTANOTHERTEXTITEM_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                Routine to Control+Click an item according to its text value.
                 No post-select verification of the selection is performed.
               
                Routine to Control+Click an item according to its text value.
                No post-select verification of the selection is performed.  This selection 
                is added to any items already selected.  
                NOTE: This may not work in all environments (Java, Web, etc...)
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to select.
              
     **********/
    static public ComponentFunction selectAnotherUnverifiedTextItem (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectAnotherUnverifiedTextItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectAnotherUnverifiedTextItem.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectAnotherUnverifiedTextItem.textValue = null");
        ComponentFunction cf = new ComponentFunction(SELECTANOTHERUNVERIFIEDTEXTITEM_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                Select an item based on it's index in the list, starting from 1
               
                Select an item based on it's index in the list, starting from 1
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param index  Optional:NO 
                 Index of the text item to select, starting from 1
              
     **********/
    static public ComponentFunction selectIndex (String winname, String compname, String index) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectIndex.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectIndex.compname = null");

        if ( index == null ) throw new IllegalArgumentException ( "selectIndex.index = null");
        ComponentFunction cf = new ComponentFunction(SELECTINDEX_KEYWORD, winname, compname);
        cf.addParameter(index);
        return cf;
    }


    /*********** <pre> 
                Routine to Click and Verify an item according to a partial text match.
               
                Routine to Click and Verify an item according to a partial text match.
                Note: for RobotJ, same as SelectUnverifiedPartialMatch
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive substring of node to select and verify.
              
     **********/
    static public ComponentFunction selectPartialMatch (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectPartialMatch.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectPartialMatch.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectPartialMatch.textValue = null");
        ComponentFunction cf = new ComponentFunction(SELECTPARTIALMATCH_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                Routine to Click and Verify a selection according to its text value.
               
                Routine to Click and Verify a selection according to
                its text value.
                Note: RobotJ also uses the identical keyword 'Select'
                Note: For RobotJ, there is no additional verify step in
                the framework code, in other words, for
                RobotJ, the SelectTextItem and
                SelectUnverifiedTextItem keywords are identical
                because RobotJ does all of the verification internally
                and there is no control over that in it's api.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to select and verify.
              
     **********/
    static public ComponentFunction selectTextItem (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectTextItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectTextItem.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectTextItem.textValue = null");
        ComponentFunction cf = new ComponentFunction(SELECTTEXTITEM_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                Use the identical "SelectAnotherUnverifiedTextItem" instead.
               
                Routine to Control+Click an item according to its text value.
                No post-select verification of the selection is performed.  This selection 
                is added to any items already selected.  
                NOTE: This may not work in all environments (Java, Web, etc...)
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to select.
              
     **********/
    static public ComponentFunction selectUnverifiedAnotherTextItem (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectUnverifiedAnotherTextItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectUnverifiedAnotherTextItem.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectUnverifiedAnotherTextItem.textValue = null");
        ComponentFunction cf = new ComponentFunction(SELECTUNVERIFIEDANOTHERTEXTITEM_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                Routine to Click an item according to a partial text match.
               
                Routine to Click an item according to a partial text match.
                 No check is performed after the selection to verify success.  
                 This is typically done for cases when the listbox is only temporary 
                 in nature and disappears immediately upon a selection.
                Note: for RobotJ, same as SelectPartialMatch
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive substring of node to select.
              
     **********/
    static public ComponentFunction selectUnverifiedPartialMatch (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectUnverifiedPartialMatch.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectUnverifiedPartialMatch.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectUnverifiedPartialMatch.textValue = null");
        ComponentFunction cf = new ComponentFunction(SELECTUNVERIFIEDPARTIALMATCH_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                Routine to Click a selection according to its text value.
               
                Routine to Click a selection according to its text value. 
                 No check is performed after the selection to verify success.  
                 This is typically done for cases when the listbox is only temporary 
                 in nature and disappears immediately upon a
                selection.
                Note: RobotJ also uses the identical keyword 'SelectUnverified'
                Note: This is the default for RobotJ, in other words, for
                RobotJ, the SelectTextItem and
                SelectUnverifiedTextItem keywords are identical
                because RobotJ does all of the verification internally
                and there is no control over that in it's api.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of node to select.
              
     **********/
    static public ComponentFunction selectUnverifiedTextItem (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectUnverifiedTextItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectUnverifiedTextItem.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "selectUnverifiedTextItem.textValue = null");
        ComponentFunction cf = new ComponentFunction(SELECTUNVERIFIEDTEXTITEM_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre>
            	Set a variable with the result of checking that a listview contains the provided item.
			
            	The search of the item is expected to be a case-sensitive exact match of the item.  The
            	   provided variable is set with 'TRUE' if the item is found or 'FALSE' if the item is not found.
                </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param itemText  Optional:NO
						The case-sensitive name of the sought item.
					
     @param resultVar  Optional:NO
						The name of the variable receiving the result.
					
     **********/
    static public ComponentFunction setListContains (String winname, String compname, String itemText, String resultVar) {

        if ( winname == null ) throw new IllegalArgumentException ( "setListContains.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "setListContains.compname = null");

        if ( itemText == null ) throw new IllegalArgumentException ( "setListContains.itemText = null");
        if ( resultVar == null ) throw new IllegalArgumentException ( "setListContains.resultVar = null");
        ComponentFunction cf = new ComponentFunction(SETLISTCONTAINS_KEYWORD, winname, compname);
        cf.addParameter(itemText);
        cf.addParameter(resultVar);
        return cf;
    }


    /*********** <pre>
            	Set a variable with the result of checking that a listview contains the provided item.
			
            	The search of the item is expected to be a case-sensitive exact match of the item.  The
            	   provided variable is set with 'TRUE' if the item is found or 'FALSE' if the item is not found.
                </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        itemText -- Optional:NO
						The case-sensitive name of the sought item.
					<BR/>        resultVar -- Optional:NO
						The name of the variable receiving the result.
					
    </UL>

     **********/
    static public ComponentFunction setListContains(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "setListContains.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "setListContains.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "setListContains.parameters = null");
        ComponentFunction cf = new ComponentFunction(SETLISTCONTAINS_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Verifies a particular case-sensitive item based on index is equal
                to a particular value.
               
                Verifies a particular case-sensitive item based on index is equal
                to a particular value.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param index  Optional:NO 
                 Index of the item in the list starting from 1
              
     @param textValue  Optional:NO 
                 Case-sensitive string to compare to the text of the node at the index.
              
     **********/
    static public ComponentFunction verifyItem (String winname, String compname, String index, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyItem.compname = null");

        if ( index == null ) throw new IllegalArgumentException ( "verifyItem.index = null");
        if ( textValue == null ) throw new IllegalArgumentException ( "verifyItem.textValue = null");
        ComponentFunction cf = new ComponentFunction(VERIFYITEM_KEYWORD, winname, compname);
        cf.addParameter(index);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                Verifies a particular case-sensitive item based on index is equal
                to a particular value.
               
                Verifies a particular case-sensitive item based on index is equal
                to a particular value.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        index -- Optional:NO 
                 Index of the item in the list starting from 1
              <BR/>        textValue -- Optional:NO 
                 Case-sensitive string to compare to the text of the node at the index.
              
    </UL>

     **********/
    static public ComponentFunction verifyItem(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyItem.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyItem.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYITEM_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Verifies a particular case-sensitive text item is NOT selected.
               
                Verifies a particular case-sensitive text item is NOT selected.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of node that will be verified as unselected
              
     **********/
    static public ComponentFunction verifyItemUnselected (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyItemUnselected.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyItemUnselected.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "verifyItemUnselected.textValue = null");
        ComponentFunction cf = new ComponentFunction(VERIFYITEMUNSELECTED_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                Verifies a particular list-item exists in the list (somewhere)
               
                Verifies a particular list-item exists in the list (somewhere).  The comparison 
                can be case-sensitive.  By default, it is not.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 String to look for in the list.
              
     @param caseSensitive  Optional:YES 
	                 Optional "True" for case-sensitive search
	              
     **********/
    static public ComponentFunction verifyListContains (String winname, String compname, String textValue, String caseSensitive) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyListContains.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyListContains.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "verifyListContains.textValue = null");
        ComponentFunction cf = new ComponentFunction(VERIFYLISTCONTAINS_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        cf.addParameter(caseSensitive);
        return cf;
    }


    /*********** <pre> 
                Verifies a particular list-item exists in the list (somewhere)
               
                Verifies a particular list-item exists in the list (somewhere).  The comparison 
                can be case-sensitive.  By default, it is not.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        textValue -- Optional:NO 
                 String to look for in the list.
              <BR/>        caseSensitive -- Optional:YES 
	                 Optional "True" for case-sensitive search
	              
    </UL>

     **********/
    static public ComponentFunction verifyListContains(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyListContains.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyListContains.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyListContains.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYLISTCONTAINS_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Verifies a particular list-item substring exists in the list (somewhere)
               
                Verifies a particular list-item substring exists in the list (somewhere).  The comparison 
                can be case-sensitive.  By default, it is not.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 SubString to look for in the list.
              
     @param caseSensitive  Optional:YES 
	                 Optional "True" for case-sensitive search
	              
     **********/
    static public ComponentFunction verifyListContainsPartialMatch (String winname, String compname, String textValue, String caseSensitive) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyListContainsPartialMatch.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyListContainsPartialMatch.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "verifyListContainsPartialMatch.textValue = null");
        ComponentFunction cf = new ComponentFunction(VERIFYLISTCONTAINSPARTIALMATCH_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        cf.addParameter(caseSensitive);
        return cf;
    }


    /*********** <pre> 
                Verifies a particular list-item substring exists in the list (somewhere)
               
                Verifies a particular list-item substring exists in the list (somewhere).  The comparison 
                can be case-sensitive.  By default, it is not.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        textValue -- Optional:NO 
                 SubString to look for in the list.
              <BR/>        caseSensitive -- Optional:YES 
	                 Optional "True" for case-sensitive search
	              
    </UL>

     **********/
    static public ComponentFunction verifyListContainsPartialMatch(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyListContainsPartialMatch.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyListContainsPartialMatch.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyListContainsPartialMatch.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYLISTCONTAINSPARTIALMATCH_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                     Verifies a particular list-item does NOT exists in the list (somewhere)
                    
                     Verifies a particular list-item does NOT exists in the list (somewhere).  
                     The comparison can be case-sensitive.  It is NOT case-sensitive by default.
                       </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                      String to look for in the list.
                   
     @param caseSensitive  Optional:YES 
     	                 Optional "True" for case-sensitive search
     	              
     **********/
    static public ComponentFunction verifyListDoesNotContain (String winname, String compname, String textValue, String caseSensitive) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyListDoesNotContain.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyListDoesNotContain.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "verifyListDoesNotContain.textValue = null");
        ComponentFunction cf = new ComponentFunction(VERIFYLISTDOESNOTCONTAIN_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        cf.addParameter(caseSensitive);
        return cf;
    }


    /*********** <pre> 
                     Verifies a particular list-item does NOT exists in the list (somewhere)
                    
                     Verifies a particular list-item does NOT exists in the list (somewhere).  
                     The comparison can be case-sensitive.  It is NOT case-sensitive by default.
                       </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        textValue -- Optional:NO 
                      String to look for in the list.
                   <BR/>        caseSensitive -- Optional:YES 
     	                 Optional "True" for case-sensitive search
     	              
    </UL>

     **********/
    static public ComponentFunction verifyListDoesNotContain(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyListDoesNotContain.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyListDoesNotContain.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyListDoesNotContain.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYLISTDOESNOTCONTAIN_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                     Verifies a particular list-item substring does NOT exists in the list (somewhere)
                    
                     Verifies a particular list-item substring does NOT exists in the list (somewhere).  
                     The comparison can be case-sensitive.  It is NOT case-sensitive by default.
                       </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                      SubString to look for in the list.
                   
     @param caseSensitive  Optional:YES 
     	                 Optional "True" for case-sensitive search
     	              
     **********/
    static public ComponentFunction verifyListDoesNotContainPartialMatch (String winname, String compname, String textValue, String caseSensitive) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyListDoesNotContainPartialMatch.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyListDoesNotContainPartialMatch.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "verifyListDoesNotContainPartialMatch.textValue = null");
        ComponentFunction cf = new ComponentFunction(VERIFYLISTDOESNOTCONTAINPARTIALMATCH_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        cf.addParameter(caseSensitive);
        return cf;
    }


    /*********** <pre> 
                     Verifies a particular list-item substring does NOT exists in the list (somewhere)
                    
                     Verifies a particular list-item substring does NOT exists in the list (somewhere).  
                     The comparison can be case-sensitive.  It is NOT case-sensitive by default.
                       </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        textValue -- Optional:NO 
                      SubString to look for in the list.
                   <BR/>        caseSensitive -- Optional:YES 
     	                 Optional "True" for case-sensitive search
     	              
    </UL>

     **********/
    static public ComponentFunction verifyListDoesNotContainPartialMatch(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyListDoesNotContainPartialMatch.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyListDoesNotContainPartialMatch.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyListDoesNotContainPartialMatch.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYLISTDOESNOTCONTAINPARTIALMATCH_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Verifies a particular case-sensitive menu-item exists
                in the list (somewhere)
               
                Verifies a particular case-sensitive menu-item exists
                in the list (somewhere)
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive string to compare to the text of any node in the list.
              
     **********/
    static public ComponentFunction verifyMenuItem (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyMenuItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyMenuItem.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "verifyMenuItem.textValue = null");
        ComponentFunction cf = new ComponentFunction(VERIFYMENUITEM_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                Verifies a particular case-insensitive menu-item
                substring exists in the list (somewhere)
               
                Verifies a particular case-insensitive menu-item
                substring exists in the list (somewhere)
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-insensitive substring to compare to the text of any node in the list.
              
     **********/
    static public ComponentFunction verifyMenuPartialMatch (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyMenuPartialMatch.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyMenuPartialMatch.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "verifyMenuPartialMatch.textValue = null");
        ComponentFunction cf = new ComponentFunction(VERIFYMENUPARTIALMATCH_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                Verifies a particular case-insensitive item based on
                index is has as substring a particular value.
               
                Verifies a particular case-insensitive item based on
                index is has as substring a particular value.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param index  Optional:NO 
                 Index of the item in the list starting from 1
              
     @param textValue  Optional:NO 
                 Case-insensitive substring to compare to the text of the node at the index.
              
     **********/
    static public ComponentFunction verifyPartialMatch (String winname, String compname, String index, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyPartialMatch.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyPartialMatch.compname = null");

        if ( index == null ) throw new IllegalArgumentException ( "verifyPartialMatch.index = null");
        if ( textValue == null ) throw new IllegalArgumentException ( "verifyPartialMatch.textValue = null");
        ComponentFunction cf = new ComponentFunction(VERIFYPARTIALMATCH_KEYWORD, winname, compname);
        cf.addParameter(index);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                Verifies a particular case-insensitive item based on
                index is has as substring a particular value.
               
                Verifies a particular case-insensitive item based on
                index is has as substring a particular value.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        index -- Optional:NO 
                 Index of the item in the list starting from 1
              <BR/>        textValue -- Optional:NO 
                 Case-insensitive substring to compare to the text of the node at the index.
              
    </UL>

     **********/
    static public ComponentFunction verifyPartialMatch(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyPartialMatch.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyPartialMatch.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyPartialMatch.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYPARTIALMATCH_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Verifies a particular case-sensitive text item is selected
               
                Verifies a particular case-sensitive text item is selected
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive text of node that will be verified as selected
              
     **********/
    static public ComponentFunction verifySelectedItem (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifySelectedItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifySelectedItem.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "verifySelectedItem.textValue = null");
        ComponentFunction cf = new ComponentFunction(VERIFYSELECTEDITEM_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                Verifies a particular case-sensitive item is selected 
                based on a substring match.
               
                Verifies a particular case-sensitive item is selected
                based on a substring match.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 Case-sensitive substring of node that will be verified selected
              
     **********/
    static public ComponentFunction verifySelectedPartialMatch (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifySelectedPartialMatch.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifySelectedPartialMatch.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "verifySelectedPartialMatch.textValue = null");
        ComponentFunction cf = new ComponentFunction(VERIFYSELECTEDPARTIALMATCH_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


}
