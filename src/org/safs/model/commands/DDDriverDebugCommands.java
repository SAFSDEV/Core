
/******************************************************************************
 * DDDriverDebugCommands.java
 *
 * Copyright (c) by SAS Institute Inc., Cary, NC 27513
 * General Public License: http://www.opensource.org/licenses/gpl-license.php
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   DDDriverDebugCommands.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaCommandModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe DDDriverDebugCommands.xml XSLJavaCommandModel.xsl -o DDDriverDebugCommands.java
 *
 ******************************************************************************/ 
package org.safs.model.commands;


import org.safs.model.DriverCommand;


public class DDDriverDebugCommands {

    /*****************
    Private Singleton Instance
    ****************/
    private static final DDDriverDebugCommands singleton = new DDDriverDebugCommands(); 

    /*****************
    Private Constructor
    Static class needing no instantiation.
    ****************/
    private DDDriverDebugCommands() {}

    /*****************
    public Singleton to access class static methods via instance
    ****************/
    public static DDDriverDebugCommands getInstance() { return singleton;}

    /** "Breakpoints" */
    static public final String BREAKPOINTS_KEYWORD = "Breakpoints";
    /** "CommandDebug" */
    static public final String COMMANDDEBUG_KEYWORD = "CommandDebug";
    /** "RecordsDebug" */
    static public final String RECORDSDEBUG_KEYWORD = "RecordsDebug";
    /** "TestDebug" */
    static public final String TESTDEBUG_KEYWORD = "TestDebug";


    /*********** <pre> 
                 Enable and Disable Breakpoint Debugging.
              
                 Enable and Disable Breakpoint Debugging.  This means that 
                 debugging will stop at each record following a 
                 (BP) Breakpoint record.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param mode  Optional:NO  DefaultVal:OFF 
                 The status for this debug mode.
              
     **********/
    static public DriverCommand breakpoints (String mode) {

        if ( mode == null ) throw new IllegalArgumentException ( "breakpoints.mode = null");
        DriverCommand dc = new DriverCommand(BREAKPOINTS_KEYWORD);
        dc.addParameter(mode);
        return dc;
    }


    /*********** <pre> 
                 Enable and Disable (C)Command Debugging.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param mode  Optional:NO  DefaultVal:OFF 
                 The status for this debug mode.
              
     **********/
    static public DriverCommand commandDebug (String mode) {

        if ( mode == null ) throw new IllegalArgumentException ( "commandDebug.mode = null");
        DriverCommand dc = new DriverCommand(COMMANDDEBUG_KEYWORD);
        dc.addParameter(mode);
        return dc;
    }


    /*********** <pre> 
                 Enable and Disable debugging of ALL record types.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param mode  Optional:NO  DefaultVal:OFF 
                 The status for this debug mode.
              
     **********/
    static public DriverCommand recordsDebug (String mode) {

        if ( mode == null ) throw new IllegalArgumentException ( "recordsDebug.mode = null");
        DriverCommand dc = new DriverCommand(RECORDSDEBUG_KEYWORD);
        dc.addParameter(mode);
        return dc;
    }


    /*********** <pre> 
                 Enable and Disable (T)Test Record Debugging.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param mode  Optional:NO  DefaultVal:OFF 
                 The status for this debug mode.
              
     **********/
    static public DriverCommand testDebug (String mode) {

        if ( mode == null ) throw new IllegalArgumentException ( "testDebug.mode = null");
        DriverCommand dc = new DriverCommand(TESTDEBUG_KEYWORD);
        dc.addParameter(mode);
        return dc;
    }


}
