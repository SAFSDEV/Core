
/******************************************************************************
 * ToolBarFunctions.java
 *
 * Copyright (c) by SAS Institute Inc., Cary, NC 27513
 * General Public License: http://www.opensource.org/licenses/gpl-license.php
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   ToolBarFunctions.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaCommandModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe ToolBarFunctions.xml XSLJavaCommandModel.xsl -o ToolBarFunctions.java
 *
 ******************************************************************************/ 
package org.safs.model.commands;


import org.safs.model.ComponentFunction;


public class ToolBarFunctions {

    /*****************
    Private Singleton Instance
    ****************/
    private static final ToolBarFunctions singleton = new ToolBarFunctions(); 

    /*****************
    Private Constructor
    Static class needing no instantiation.
    ****************/
    private ToolBarFunctions() {}

    /*****************
    public Singleton to access class static methods via instance
    ****************/
    public static ToolBarFunctions getInstance() { return singleton;}

    /** "ClickButton" */
    static public final String CLICKBUTTON_KEYWORD = "ClickButton";
    /** "ClickButtonIndex" */
    static public final String CLICKBUTTONINDEX_KEYWORD = "ClickButtonIndex";
    /** "ClickButtonText" */
    static public final String CLICKBUTTONTEXT_KEYWORD = "ClickButtonText";
    /** "ClickButtonTooltip" */
    static public final String CLICKBUTTONTOOLTIP_KEYWORD = "ClickButtonTooltip";
    /** "ClickUnverifiedButtonID" */
    static public final String CLICKUNVERIFIEDBUTTONID_KEYWORD = "ClickUnverifiedButtonID";
    /** "ClickUnverifiedButtonText" */
    static public final String CLICKUNVERIFIEDBUTTONTEXT_KEYWORD = "ClickUnverifiedButtonText";
    /** "VerifyButtonClicked" */
    static public final String VERIFYBUTTONCLICKED_KEYWORD = "VerifyButtonClicked";
    /** "VerifyButtonCount" */
    static public final String VERIFYBUTTONCOUNT_KEYWORD = "VerifyButtonCount";
    /** "VerifyButtonText" */
    static public final String VERIFYBUTTONTEXT_KEYWORD = "VerifyButtonText";
    /** "VerifyButtonUnClicked" */
    static public final String VERIFYBUTTONUNCLICKED_KEYWORD = "VerifyButtonUnClicked";


    /*********** <pre> 
                Deprecated.  Use ClickButtonText instead.
               
                Deprecated.  Use ClickButtonText instead.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param buttonTextValue  Optional:NO 
                 Case-sensitive text of the toolbar button to select.
              
     @param caseInsensitive  Optional:YES 
                 "1", "CaseInsensitive", or "Case-Insensitive" to match button text in a case-insensitive manner.
              
     **********/
    static public ComponentFunction clickButton (String winname, String compname, String buttonTextValue, String caseInsensitive) {

        if ( winname == null ) throw new IllegalArgumentException ( "clickButton.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "clickButton.compname = null");

        if ( buttonTextValue == null ) throw new IllegalArgumentException ( "clickButton.buttonTextValue = null");
        ComponentFunction cf = new ComponentFunction(CLICKBUTTON_KEYWORD, winname, compname);
        cf.addParameter(buttonTextValue);
        cf.addParameter(caseInsensitive);
        return cf;
    }


    /*********** <pre> 
                Deprecated.  Use ClickButtonText instead.
               
                Deprecated.  Use ClickButtonText instead.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        buttonTextValue -- Optional:NO 
                 Case-sensitive text of the toolbar button to select.
              <BR/>        caseInsensitive -- Optional:YES 
                 "1", "CaseInsensitive", or "Case-Insensitive" to match button text in a case-insensitive manner.
              
    </UL>

     **********/
    static public ComponentFunction clickButton(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "clickButton.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "clickButton.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "clickButton.parameters = null");
        ComponentFunction cf = new ComponentFunction(CLICKBUTTON_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Click on the icon at a certain position on the ToolBar object, it is 1-based.
               
                Click on the icon at a certain position on the ToolBar object, it is 1-based.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param index  Optional:NO 
                 Index described which icon to be clicked in the toolbar.
              
     @param coordination  Optional:YES 
				A position within the toolbar button, the mouse will be click there. 
				RJ Note: This parameter is special for RJ implementation.
              
     **********/
    static public ComponentFunction clickButtonIndex (String winname, String compname, String index, String coordination) {

        if ( winname == null ) throw new IllegalArgumentException ( "clickButtonIndex.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "clickButtonIndex.compname = null");

        if ( index == null ) throw new IllegalArgumentException ( "clickButtonIndex.index = null");
        ComponentFunction cf = new ComponentFunction(CLICKBUTTONINDEX_KEYWORD, winname, compname);
        cf.addParameter(index);
        cf.addParameter(coordination);
        return cf;
    }


    /*********** <pre> 
                Click on the icon at a certain position on the ToolBar object, it is 1-based.
               
                Click on the icon at a certain position on the ToolBar object, it is 1-based.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        index -- Optional:NO 
                 Index described which icon to be clicked in the toolbar.
              <BR/>        coordination -- Optional:YES 
				A position within the toolbar button, the mouse will be click there. 
				RJ Note: This parameter is special for RJ implementation.
              
    </UL>

     **********/
    static public ComponentFunction clickButtonIndex(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "clickButtonIndex.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "clickButtonIndex.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "clickButtonIndex.parameters = null");
        ComponentFunction cf = new ComponentFunction(CLICKBUTTONINDEX_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Routine to Click on the specified Button.Key (Text) value.
               
                Routine to Click on the specified Button.Key (Text) value.  
                The user has an optional parameter to specify that the provided 
                text is case-insensitive.  The routine will also verify that the 
                button is in the clicked or selected state upon completion.
                Use ClickUnverifiedButtonText if this post-click verification should 
                be skipped.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param buttonTextValue  Optional:NO 
                 Case-sensitive text of the toolbar button to select.
              
     @param caseInsensitive  Optional:YES 
                 "1", "CaseInsensitive", or "Case-Insensitive" to match button text in a case-insensitive manner.
              
     @param coordination  Optional:YES 
				A position within the toolbar button, the mouse will be click there. 
				RJ Note: This parameter is special for RJ implementation.
              
     **********/
    static public ComponentFunction clickButtonText (String winname, String compname, String buttonTextValue, String caseInsensitive, String coordination) {

        if ( winname == null ) throw new IllegalArgumentException ( "clickButtonText.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "clickButtonText.compname = null");

        if ( buttonTextValue == null ) throw new IllegalArgumentException ( "clickButtonText.buttonTextValue = null");
        ComponentFunction cf = new ComponentFunction(CLICKBUTTONTEXT_KEYWORD, winname, compname);
        cf.addParameter(buttonTextValue);
        cf.addParameter(caseInsensitive);
        cf.addParameter(coordination);
        return cf;
    }


    /*********** <pre> 
                Routine to Click on the specified Button.Key (Text) value.
               
                Routine to Click on the specified Button.Key (Text) value.  
                The user has an optional parameter to specify that the provided 
                text is case-insensitive.  The routine will also verify that the 
                button is in the clicked or selected state upon completion.
                Use ClickUnverifiedButtonText if this post-click verification should 
                be skipped.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        buttonTextValue -- Optional:NO 
                 Case-sensitive text of the toolbar button to select.
              <BR/>        caseInsensitive -- Optional:YES 
                 "1", "CaseInsensitive", or "Case-Insensitive" to match button text in a case-insensitive manner.
              <BR/>        coordination -- Optional:YES 
				A position within the toolbar button, the mouse will be click there. 
				RJ Note: This parameter is special for RJ implementation.
              
    </UL>

     **********/
    static public ComponentFunction clickButtonText(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "clickButtonText.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "clickButtonText.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "clickButtonText.parameters = null");
        ComponentFunction cf = new ComponentFunction(CLICKBUTTONTEXT_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Click on the icon whose tooltip equals to the provided parameter
               
                Click on the icon whose tooltip equals to the provided parameter
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param tooltip  Optional:NO 
                 Tooltip is description of the icon on ToolBar.
              
     **********/
    static public ComponentFunction clickButtonTooltip (String winname, String compname, String tooltip) {

        if ( winname == null ) throw new IllegalArgumentException ( "clickButtonTooltip.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "clickButtonTooltip.compname = null");

        if ( tooltip == null ) throw new IllegalArgumentException ( "clickButtonTooltip.tooltip = null");
        ComponentFunction cf = new ComponentFunction(CLICKBUTTONTOOLTIP_KEYWORD, winname, compname);
        cf.addParameter(tooltip);
        return cf;
    }


    /*********** <pre> 
                Routine to select a toolbar button using it's ID.
               
                Routine to select a toolbar button using it's ID.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param buttonID  Optional:NO 
                 ID for a particular button in the toolbar to select.
              
     **********/
    static public ComponentFunction clickUnverifiedButtonID (String winname, String compname, String buttonID) {

        if ( winname == null ) throw new IllegalArgumentException ( "clickUnverifiedButtonID.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "clickUnverifiedButtonID.compname = null");

        if ( buttonID == null ) throw new IllegalArgumentException ( "clickUnverifiedButtonID.buttonID = null");
        ComponentFunction cf = new ComponentFunction(CLICKUNVERIFIEDBUTTONID_KEYWORD, winname, compname);
        cf.addParameter(buttonID);
        return cf;
    }


    /*********** <pre> 
                Routine to Click on the specified Button.Key (Text) value.
               
                Routine to Click on the specified Button.Key (Text) value.
                The user has an optional parameter to specify that the provided 
                text is case-insensitive.  However, not all Toolbars and Buttons will be 
                able to support this case-insensitive capability.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param buttonTextValue  Optional:NO 
                 Case-sensitive text of the toolbar button to select.
              
     @param caseInsensitive  Optional:YES 
                 "1", "CaseInsensitive", or "Case-Insensitive" to match button text in a case-insensitive manner.
              
     @param coordination  Optional:YES 
				A position within the toolbar button, the mouse will be click there. 
				RJ Note: This parameter is special for RJ implementation.
              
     **********/
    static public ComponentFunction clickUnverifiedButtonText (String winname, String compname, String buttonTextValue, String caseInsensitive, String coordination) {

        if ( winname == null ) throw new IllegalArgumentException ( "clickUnverifiedButtonText.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "clickUnverifiedButtonText.compname = null");

        if ( buttonTextValue == null ) throw new IllegalArgumentException ( "clickUnverifiedButtonText.buttonTextValue = null");
        ComponentFunction cf = new ComponentFunction(CLICKUNVERIFIEDBUTTONTEXT_KEYWORD, winname, compname);
        cf.addParameter(buttonTextValue);
        cf.addParameter(caseInsensitive);
        cf.addParameter(coordination);
        return cf;
    }


    /*********** <pre> 
                Routine to Click on the specified Button.Key (Text) value.
               
                Routine to Click on the specified Button.Key (Text) value.
                The user has an optional parameter to specify that the provided 
                text is case-insensitive.  However, not all Toolbars and Buttons will be 
                able to support this case-insensitive capability.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        buttonTextValue -- Optional:NO 
                 Case-sensitive text of the toolbar button to select.
              <BR/>        caseInsensitive -- Optional:YES 
                 "1", "CaseInsensitive", or "Case-Insensitive" to match button text in a case-insensitive manner.
              <BR/>        coordination -- Optional:YES 
				A position within the toolbar button, the mouse will be click there. 
				RJ Note: This parameter is special for RJ implementation.
              
    </UL>

     **********/
    static public ComponentFunction clickUnverifiedButtonText(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "clickUnverifiedButtonText.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "clickUnverifiedButtonText.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "clickUnverifiedButtonText.parameters = null");
        ComponentFunction cf = new ComponentFunction(CLICKUNVERIFIEDBUTTONTEXT_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Verifies a particular case-sensitive button text item is selected
               
                Verifies a particular case-sensitive button text item is selected
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param buttonTextValue  Optional:NO 
                 Case-sensitive text(Button.Key) of button that will be verified as clicked
              
     **********/
    static public ComponentFunction verifyButtonClicked (String winname, String compname, String buttonTextValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyButtonClicked.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyButtonClicked.compname = null");

        if ( buttonTextValue == null ) throw new IllegalArgumentException ( "verifyButtonClicked.buttonTextValue = null");
        ComponentFunction cf = new ComponentFunction(VERIFYBUTTONCLICKED_KEYWORD, winname, compname);
        cf.addParameter(buttonTextValue);
        return cf;
    }


    /*********** <pre> 
                Verifies a total button presents in the Toolbar.
               
                Verifies a total button presents in the Toolbar.  Count includes buttons which are not visible as well.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param buttonCount  Optional:NO 
                 Numeric count value represents the total button counts in the Toolbar.
              
     **********/
    static public ComponentFunction verifyButtonCount (String winname, String compname, String buttonCount) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyButtonCount.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyButtonCount.compname = null");

        if ( buttonCount == null ) throw new IllegalArgumentException ( "verifyButtonCount.buttonCount = null");
        ComponentFunction cf = new ComponentFunction(VERIFYBUTTONCOUNT_KEYWORD, winname, compname);
        cf.addParameter(buttonCount);
        return cf;
    }


    /*********** <pre> 
                Verifies a particular case-sensitive text (button.key) item exists
               
                Verifies a particular case-sensitive text (button.key) item exists
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param buttonTextValue  Optional:NO 
                 Case-sensitive text (button.key) item that will be verified as exists
              
     @param caseInsensitive  Optional:YES 
                 "1", "CaseInsensitive", or "Case-Insensitive" to match button text in a case-insensitive manner.
              
     **********/
    static public ComponentFunction verifyButtonText (String winname, String compname, String buttonTextValue, String caseInsensitive) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyButtonText.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyButtonText.compname = null");

        if ( buttonTextValue == null ) throw new IllegalArgumentException ( "verifyButtonText.buttonTextValue = null");
        ComponentFunction cf = new ComponentFunction(VERIFYBUTTONTEXT_KEYWORD, winname, compname);
        cf.addParameter(buttonTextValue);
        cf.addParameter(caseInsensitive);
        return cf;
    }


    /*********** <pre> 
                Verifies a particular case-sensitive text (button.key) item exists
               
                Verifies a particular case-sensitive text (button.key) item exists
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        buttonTextValue -- Optional:NO 
                 Case-sensitive text (button.key) item that will be verified as exists
              <BR/>        caseInsensitive -- Optional:YES 
                 "1", "CaseInsensitive", or "Case-Insensitive" to match button text in a case-insensitive manner.
              
    </UL>

     **********/
    static public ComponentFunction verifyButtonText(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyButtonText.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyButtonText.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyButtonText.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYBUTTONTEXT_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Verifies a particular case-sensitive button text item is unselected
               
                Verifies a particular case-sensitive button text item is unselected
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param buttonTextValue  Optional:NO 
                 Case-sensitive text(Button.Key) of button that will be verified as unselected
              
     **********/
    static public ComponentFunction verifyButtonUnClicked (String winname, String compname, String buttonTextValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyButtonUnClicked.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyButtonUnClicked.compname = null");

        if ( buttonTextValue == null ) throw new IllegalArgumentException ( "verifyButtonUnClicked.buttonTextValue = null");
        ComponentFunction cf = new ComponentFunction(VERIFYBUTTONUNCLICKED_KEYWORD, winname, compname);
        cf.addParameter(buttonTextValue);
        return cf;
    }


}
