
/******************************************************************************
 * PopupMenuFunctions.java
 *
 * Copyright (c) by SAS Institute Inc., Cary, NC 27513
 * General Public License: http://www.opensource.org/licenses/gpl-license.php
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   PopupMenuFunctions.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaCommandModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe PopupMenuFunctions.xml XSLJavaCommandModel.xsl -o PopupMenuFunctions.java
 *
 ******************************************************************************/ 
package org.safs.model.commands;


import org.safs.model.ComponentFunction;


public class PopupMenuFunctions {

    /*****************
    Private Singleton Instance
    ****************/
    private static final PopupMenuFunctions singleton = new PopupMenuFunctions(); 

    /*****************
    Private Constructor
    Static class needing no instantiation.
    ****************/
    private PopupMenuFunctions() {}

    /*****************
    public Singleton to access class static methods via instance
    ****************/
    public static PopupMenuFunctions getInstance() { return singleton;}

    /** "SelectPopupMenuID" */
    static public final String SELECTPOPUPMENUID_KEYWORD = "SelectPopupMenuID";
    /** "SelectPopupMenuItem" */
    static public final String SELECTPOPUPMENUITEM_KEYWORD = "SelectPopupMenuItem";
    /** "SelectUnverifiedPopupMenuItem" */
    static public final String SELECTUNVERIFIEDPOPUPMENUITEM_KEYWORD = "SelectUnverifiedPopupMenuItem";
    /** "VerifyPopupMenu" */
    static public final String VERIFYPOPUPMENU_KEYWORD = "VerifyPopupMenu";
    /** "VerifyPopupMenuID" */
    static public final String VERIFYPOPUPMENUID_KEYWORD = "VerifyPopupMenuID";
    /** "VerifyPopupMenuItem" */
    static public final String VERIFYPOPUPMENUITEM_KEYWORD = "VerifyPopupMenuItem";
    /** "VerifyPopupMenuPartialMatch" */
    static public final String VERIFYPOPUPMENUPARTIALMATCH_KEYWORD = "VerifyPopupMenuPartialMatch";


    /*********** <pre> 
                Select a menuItem via its menuID in the currently active popup menu.
               
                Attempts to select a particular menuID in the currently 
                active popup menu.  This is generally used when the menuitem is a bitmap 
                or other item that does not have text.  This value can be retrieved from 
                the the menu by index or by manual lookup from a menu structure output 
                from MenuUtilities.
                
                The routine first verifies that the specified menuitem exists
                and exits with error if it does not.
                If it does exist then the selection proceeds.
                
                For RC and Win32 popups: The Window and Component references are not 
                used and can be anything.  They just cannot be blank.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param menuItemID  Optional:NO 
                The Windows menuID of the menuItem to select.
              
     **********/
    static public ComponentFunction selectPopupMenuID (String winname, String compname, String menuItemID) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectPopupMenuID.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectPopupMenuID.compname = null");

        if ( menuItemID == null ) throw new IllegalArgumentException ( "selectPopupMenuID.menuItemID = null");
        ComponentFunction cf = new ComponentFunction(SELECTPOPUPMENUID_KEYWORD, winname, compname);
        cf.addParameter(menuItemID);
        return cf;
    }


    /*********** <pre> 
                Select a menuItem via its text in the currently active popup menu.
               
                Attempts to select a particular text string menuitem in the currently 
                active popup menu.  The menuitem should be specified in the form 
                "Menu->Menu->MenuItem   CTRL+V" with the full text, spaces(if any), and 
                keyboard shortcut text (if any).  
                
                Ampersands preceding underlined characters are optional.
                The routine first verifies that the specified menuitem exists
                and exits with error if it does not.
                If it does exist then the selection proceeds using the MenuID retrieved
                from the found menuitem.
                
                For RC and Win32 popups: The Window and Component references are not 
                used and can be anything.  They just cannot be blank.
                
                For Java popups: Valid recognition information for the Java window and 
                "child" popup menu must be provided.
                
                Also refer to JavaMenuFunctions for support specific to Java menus and 
                popup menus.
                
                TC Note:Component can be the object who contains 'popup menu', or it
                can be the 'context menu' object.                 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param menuItemText  Optional:NO 
                Menu->MenuItem hierarchy to the menuItem to select.
              
     **********/
    static public ComponentFunction selectPopupMenuItem (String winname, String compname, String menuItemText) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectPopupMenuItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectPopupMenuItem.compname = null");

        if ( menuItemText == null ) throw new IllegalArgumentException ( "selectPopupMenuItem.menuItemText = null");
        ComponentFunction cf = new ComponentFunction(SELECTPOPUPMENUITEM_KEYWORD, winname, compname);
        cf.addParameter(menuItemText);
        return cf;
    }


    /*********** <pre> 
                Select a menuItem via its text in the currently active popup menu without verification.
               
                Attempts to select a particular text string menuitem in the currently 
                active popup menu. This routine performs no verification prior to or
                following the selection.  This may cause a Rational error if the Popup
                Menu or selected menu item is not available. 
                The menuitem should be specified in the form 
                "Menu->Menu->MenuItem   CTRL+V" with the full text, spaces(if any), and 
                keyboard shortcut text (if any).
                
                Ampersands preceding underlined characters are optional.
                
                
                For RC and Win32 popups: The Window and Component references are not 
                used and can be anything.  They just cannot be blank.
                
                TC Note:Component can be the object who contains 'popup menu', or it
                can be the 'context menu' object. 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param menuItemText  Optional:NO 
                Menu->MenuItem hierarchy to the menuItem to select.
              
     **********/
    static public ComponentFunction selectUnverifiedPopupMenuItem (String winname, String compname, String menuItemText) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectUnverifiedPopupMenuItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectUnverifiedPopupMenuItem.compname = null");

        if ( menuItemText == null ) throw new IllegalArgumentException ( "selectUnverifiedPopupMenuItem.menuItemText = null");
        ComponentFunction cf = new ComponentFunction(SELECTUNVERIFIEDPOPUPMENUITEM_KEYWORD, winname, compname);
        cf.addParameter(menuItemText);
        return cf;
    }


    /*********** <pre> 
                Verify the complete status of the current popup menu with a benchmark file.
              
                Verify the complete status of the current popup menu with a benchmark file.
                Typically, benchmarks are stored in the Datapool\Bench directory.  
                In that event, only the filename.ext is needed.  There is currently 
                a limit of 32K allowed for this type of comparison.  
                The Window and Component objects are not validated and have no role.
                The Window and Component strings can be any text, but they cannot be blank.
                
                Due to the nature of the verification using a DOS file comparison, the popup 
                menu will no longer be present after the verification and must be reactivated 
                if additional popup menu activity is to occur.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param benchmarkFile  Optional:NO 
             The name.ext of the file used as the comparison benchmark.
              
     @param headerText  Optional:YES  DefaultVal: 
                Optional descriptive header line of text to match with the benchmark.
              
     @param actualFile  Optional:YES  DefaultVal: 
                The optional name.ext of the file used for the captured menu status.
              
     @param diffFile  Optional:YES  DefaultVal: 
                The optional name.ext of the file used to contain the differences found.
              
     **********/
    static public ComponentFunction verifyPopupMenu (String winname, String compname, String benchmarkFile, String headerText, String actualFile, String diffFile) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyPopupMenu.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyPopupMenu.compname = null");

        if ( benchmarkFile == null ) throw new IllegalArgumentException ( "verifyPopupMenu.benchmarkFile = null");
        ComponentFunction cf = new ComponentFunction(VERIFYPOPUPMENU_KEYWORD, winname, compname);
        cf.addParameter(benchmarkFile);
        cf.addParameter(headerText);
        cf.addParameter(actualFile);
        cf.addParameter(diffFile);
        return cf;
    }


    /*********** <pre> 
                Verify the complete status of the current popup menu with a benchmark file.
              
                Verify the complete status of the current popup menu with a benchmark file.
                Typically, benchmarks are stored in the Datapool\Bench directory.  
                In that event, only the filename.ext is needed.  There is currently 
                a limit of 32K allowed for this type of comparison.  
                The Window and Component objects are not validated and have no role.
                The Window and Component strings can be any text, but they cannot be blank.
                
                Due to the nature of the verification using a DOS file comparison, the popup 
                menu will no longer be present after the verification and must be reactivated 
                if additional popup menu activity is to occur.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        benchmarkFile -- Optional:NO 
             The name.ext of the file used as the comparison benchmark.
              <BR/>        headerText -- Optional:YES  DefaultVal: 
                Optional descriptive header line of text to match with the benchmark.
              <BR/>        actualFile -- Optional:YES  DefaultVal: 
                The optional name.ext of the file used for the captured menu status.
              <BR/>        diffFile -- Optional:YES  DefaultVal: 
                The optional name.ext of the file used to contain the differences found.
              
    </UL>

     **********/
    static public ComponentFunction verifyPopupMenu(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyPopupMenu.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyPopupMenu.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyPopupMenu.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYPOPUPMENU_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Verify the state of a menuItem via its menuID in the currently active popup menu.
               
                Verify the state of a particular menuID in the currently 
                active popup menu.  This is generally used when the menuitem is a bitmap 
                or other item that does not have text.  This menuID can be retrieved from 
                the the menu by index or by manual lookup from a menu structure output 
                from MenuUtilities.
                
                The routine first verifies that the specified menuitem exists
                and exits with error if it does not.
                
                For RC and Win32 popups: The Window and Component references are not 
                used and can be anything.  They just cannot be blank.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param menuItemID  Optional:NO 
                The Windows menuID of the menuItem to verify.
              
     @param stateInfo  Optional:NO 
                Expected status string (or part thereof) to verify.  
              
     **********/
    static public ComponentFunction verifyPopupMenuID (String winname, String compname, String menuItemID, String stateInfo) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyPopupMenuID.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyPopupMenuID.compname = null");

        if ( menuItemID == null ) throw new IllegalArgumentException ( "verifyPopupMenuID.menuItemID = null");
        if ( stateInfo == null ) throw new IllegalArgumentException ( "verifyPopupMenuID.stateInfo = null");
        ComponentFunction cf = new ComponentFunction(VERIFYPOPUPMENUID_KEYWORD, winname, compname);
        cf.addParameter(menuItemID);
        cf.addParameter(stateInfo);
        return cf;
    }


    /*********** <pre> 
                Verify the state of a menuItem via its menuID in the currently active popup menu.
               
                Verify the state of a particular menuID in the currently 
                active popup menu.  This is generally used when the menuitem is a bitmap 
                or other item that does not have text.  This menuID can be retrieved from 
                the the menu by index or by manual lookup from a menu structure output 
                from MenuUtilities.
                
                The routine first verifies that the specified menuitem exists
                and exits with error if it does not.
                
                For RC and Win32 popups: The Window and Component references are not 
                used and can be anything.  They just cannot be blank.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        menuItemID -- Optional:NO 
                The Windows menuID of the menuItem to verify.
              <BR/>        stateInfo -- Optional:NO 
                Expected status string (or part thereof) to verify.  
              
    </UL>

     **********/
    static public ComponentFunction verifyPopupMenuID(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyPopupMenuID.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyPopupMenuID.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyPopupMenuID.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYPOPUPMENUID_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Verify the state of a menuItem found via its text in the currently active popup menu.
               
                The menuitem should be specified in the form 
                "Menu->Menu->MenuItem   CTRL+V" with the full text, spaces(if any), and 
                keyboard shortcut text (if any).  
                
                Ampersands preceding underlined characters are optional.
                The routine first verifies that the specified menuitem exists
                and exits with error if it does not.
                
                For RC and Win32 popups: The Window and Component references are not 
                used and can be anything.  They just cannot be blank.
                
                For Java popups: Valid recognition information for the Java window and 
                "child" popup menu must be provided.
                
                Also refer to JavaMenuFunctions for support specific to Java menus and 
                popup menus.                
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param menuItemText  Optional:NO 
                Menu->MenuItem hierarchy to the menuItem to verify.
              
     @param stateInfo  Optional:NO 
                Expected status string (or part thereof) to verify.  
              
     **********/
    static public ComponentFunction verifyPopupMenuItem (String winname, String compname, String menuItemText, String stateInfo) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyPopupMenuItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyPopupMenuItem.compname = null");

        if ( menuItemText == null ) throw new IllegalArgumentException ( "verifyPopupMenuItem.menuItemText = null");
        if ( stateInfo == null ) throw new IllegalArgumentException ( "verifyPopupMenuItem.stateInfo = null");
        ComponentFunction cf = new ComponentFunction(VERIFYPOPUPMENUITEM_KEYWORD, winname, compname);
        cf.addParameter(menuItemText);
        cf.addParameter(stateInfo);
        return cf;
    }


    /*********** <pre> 
                Verify the state of a menuItem found via its text in the currently active popup menu.
               
                The menuitem should be specified in the form 
                "Menu->Menu->MenuItem   CTRL+V" with the full text, spaces(if any), and 
                keyboard shortcut text (if any).  
                
                Ampersands preceding underlined characters are optional.
                The routine first verifies that the specified menuitem exists
                and exits with error if it does not.
                
                For RC and Win32 popups: The Window and Component references are not 
                used and can be anything.  They just cannot be blank.
                
                For Java popups: Valid recognition information for the Java window and 
                "child" popup menu must be provided.
                
                Also refer to JavaMenuFunctions for support specific to Java menus and 
                popup menus.                
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        menuItemText -- Optional:NO 
                Menu->MenuItem hierarchy to the menuItem to verify.
              <BR/>        stateInfo -- Optional:NO 
                Expected status string (or part thereof) to verify.  
              
    </UL>

     **********/
    static public ComponentFunction verifyPopupMenuItem(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyPopupMenuItem.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyPopupMenuItem.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyPopupMenuItem.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYPOPUPMENUITEM_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                Verify if a menuItem contains a substring
               
                Verify if a menuItem contains a substring
                
                For Java popups: Valid recognition information for the Java window and 
                "child" popup menu must be provided.
                
                Also refer to JavaMenuFunctions for support specific to Java menus and 
                popup menus.                
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param menuItemText  Optional:NO 
                Menu->MenuItem hierarchy substring to the menuItem
                to search for.
              
     **********/
    static public ComponentFunction verifyPopupMenuPartialMatch (String winname, String compname, String menuItemText) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyPopupMenuPartialMatch.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyPopupMenuPartialMatch.compname = null");

        if ( menuItemText == null ) throw new IllegalArgumentException ( "verifyPopupMenuPartialMatch.menuItemText = null");
        ComponentFunction cf = new ComponentFunction(VERIFYPOPUPMENUPARTIALMATCH_KEYWORD, winname, compname);
        cf.addParameter(menuItemText);
        return cf;
    }


}
