
/******************************************************************************
 * DDDriverFileCommands.java
 *
 * Copyright (c) by SAS Institute Inc., Cary, NC 27513
 * General Public License: http://www.opensource.org/licenses/gpl-license.php
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   DDDriverFileCommands.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaCommandModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe DDDriverFileCommands.xml XSLJavaCommandModel.xsl -o DDDriverFileCommands.java
 *
 ******************************************************************************/ 
package org.safs.model.commands;


import org.safs.model.DriverCommand;


public class DDDriverFileCommands {

    /*****************
    Private Singleton Instance
    ****************/
    private static final DDDriverFileCommands singleton = new DDDriverFileCommands(); 

    /*****************
    Private Constructor
    Static class needing no instantiation.
    ****************/
    private DDDriverFileCommands() {}

    /*****************
    public Singleton to access class static methods via instance
    ****************/
    public static DDDriverFileCommands getInstance() { return singleton;}

    /** "CloseFile" */
    static public final String CLOSEFILE_KEYWORD = "CloseFile";
    /** "CopyFile" */
    static public final String COPYFILE_KEYWORD = "CopyFile";
    /** "CopyMatchingFiles" */
    static public final String COPYMATCHINGFILES_KEYWORD = "CopyMatchingFiles";
    /** "CreateDirectory" */
    static public final String CREATEDIRECTORY_KEYWORD = "CreateDirectory";
    /** "CreateFile" */
    static public final String CREATEFILE_KEYWORD = "CreateFile";
    /** "DeleteDirectory" */
    static public final String DELETEDIRECTORY_KEYWORD = "DeleteDirectory";
    /** "DeleteDirectoryContents" */
    static public final String DELETEDIRECTORYCONTENTS_KEYWORD = "DeleteDirectoryContents";
    /** "DeleteFile" */
    static public final String DELETEFILE_KEYWORD = "DeleteFile";
    /** "FilterImage" */
    static public final String FILTERIMAGE_KEYWORD = "FilterImage";
    /** "FilterTextFile" */
    static public final String FILTERTEXTFILE_KEYWORD = "FilterTextFile";
    /** "FindSqaFile" */
    static public final String FINDSQAFILE_KEYWORD = "FindSqaFile";
    /** "GetFileDateTime" */
    static public final String GETFILEDATETIME_KEYWORD = "GetFileDateTime";
    /** "GetFileProtections" */
    static public final String GETFILEPROTECTIONS_KEYWORD = "GetFileProtections";
    /** "GetFiles" */
    static public final String GETFILES_KEYWORD = "GetFiles";
    /** "GetFileSize" */
    static public final String GETFILESIZE_KEYWORD = "GetFileSize";
    /** "GetINIFileValue" */
    static public final String GETINIFILEVALUE_KEYWORD = "GetINIFileValue";
    /** "GetStringCountInFile" */
    static public final String GETSTRINGCOUNTINFILE_KEYWORD = "GetStringCountInFile";
    /** "GetSubstringsInFile" */
    static public final String GETSUBSTRINGSINFILE_KEYWORD = "GetSubstringsInFile";
    /** "GetTextFromImage" */
    static public final String GETTEXTFROMIMAGE_KEYWORD = "GetTextFromImage";
    /** "IfExistDir" */
    static public final String IFEXISTDIR_KEYWORD = "IfExistDir";
    /** "IfExistFile" */
    static public final String IFEXISTFILE_KEYWORD = "IfExistFile";
    /** "IsEndOfFile" */
    static public final String ISENDOFFILE_KEYWORD = "IsEndOfFile";
    /** "OpenFile" */
    static public final String OPENFILE_KEYWORD = "OpenFile";
    /** "OpenUTF8File" */
    static public final String OPENUTF8FILE_KEYWORD = "OpenUTF8File";
    /** "PrintToFile" */
    static public final String PRINTTOFILE_KEYWORD = "PrintToFile";
    /** "ReadFileChars" */
    static public final String READFILECHARS_KEYWORD = "ReadFileChars";
    /** "ReadFileLine" */
    static public final String READFILELINE_KEYWORD = "ReadFileLine";
    /** "ReadFileString" */
    static public final String READFILESTRING_KEYWORD = "ReadFileString";
    /** "RenameFile" */
    static public final String RENAMEFILE_KEYWORD = "RenameFile";
    /** "SaveTextFromImage" */
    static public final String SAVETEXTFROMIMAGE_KEYWORD = "SaveTextFromImage";
    /** "SetFileProtections" */
    static public final String SETFILEPROTECTIONS_KEYWORD = "SetFileProtections";
    /** "WriteFileChars" */
    static public final String WRITEFILECHARS_KEYWORD = "WriteFileChars";


    /*********** <pre>
          Close the open file with the file number provided
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param fileNumber  Optional:NO
              The file number for the file to be closed.
            
     **********/
    static public DriverCommand closeFile (String fileNumber) {

        if ( fileNumber == null ) throw new IllegalArgumentException ( "closeFile.fileNumber = null");
        DriverCommand dc = new DriverCommand(CLOSEFILE_KEYWORD);
        dc.addParameter(fileNumber);
        return dc;
    }


    /*********** <pre>
          Copy the specified filename to the target filename.          
        
           For the Java-based engines--RJ, TID, and SDC:
           
	   If the filenames provided are not full absolute paths then we will attempt to deduce a full Project-relative or Datapool\Test-relative path from the relative path provided. If the relative path already contains path separators (ex: "\subpath\filename.ext") then we attempt to deduce a fullpath relative to the SAFS Project.  If no path separators exist (ex: "filename.txt") then we attempt to deduce a fullpath relative to the project's Datapool\Test directory.  We do not actually attempt to see if the directories or files exists before executing the command.
	   
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param fromFileName  Optional:NO
              The file path and file name for the file to be copied.
            
     @param toFileName  Optional:NO
              The file path and file name to copy the file to.
            
     **********/
    static public DriverCommand copyFile (String fromFileName, String toFileName) {

        if ( fromFileName == null ) throw new IllegalArgumentException ( "copyFile.fromFileName = null");
        if ( toFileName == null ) throw new IllegalArgumentException ( "copyFile.toFileName = null");
        DriverCommand dc = new DriverCommand(COPYFILE_KEYWORD);
        dc.addParameter(fromFileName);
        dc.addParameter(toFileName);
        return dc;
    }


    /*********** <pre>
          Copy the specified filename to the target filename.          
        
           For the Java-based engines--RJ, TID, and SDC:
           
	   If the filenames provided are not full absolute paths then we will attempt to deduce a full Project-relative or Datapool\Test-relative path from the relative path provided. If the relative path already contains path separators (ex: "\subpath\filename.ext") then we attempt to deduce a fullpath relative to the SAFS Project.  If no path separators exist (ex: "filename.txt") then we attempt to deduce a fullpath relative to the project's Datapool\Test directory.  We do not actually attempt to see if the directories or files exists before executing the command.
	   
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fromFileName -- Optional:NO
              The file path and file name for the file to be copied.
            <BR/>        toFileName -- Optional:NO
              The file path and file name to copy the file to.
            
    </UL>

     **********/
    static public DriverCommand copyFile (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "copyFile.parameters = null");
        DriverCommand dc = new DriverCommand(COPYFILE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
            		Copy multiple files/sub-directories, based on matching the provided pattern, from one directory to another.
            	
            		Note: This is a very powerful DriverCommand, please use with caution!
            	    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param fromDirectoryName  Optional:NO
                  			The directory name where the files are located.
                		
     @param toDirectoryName  Optional:NO
		                	The directory name where the files are copied.
		                
     @param pattern  Optional:NO
					The pattern used to distinguish the files/sub-directories to be copied.
				
     @param filterMode  Optional:YES 
		                 	The filter mode used for matching the files/sub-directories to be copied.  
		                 	Default is WILDCARD.
		              	
     **********/
    static public DriverCommand copyMatchingFiles (String fromDirectoryName, String toDirectoryName, String pattern, String filterMode) {

        if ( fromDirectoryName == null ) throw new IllegalArgumentException ( "copyMatchingFiles.fromDirectoryName = null");
        if ( pattern == null ) throw new IllegalArgumentException ( "copyMatchingFiles.pattern = null");
        if ( toDirectoryName == null ) throw new IllegalArgumentException ( "copyMatchingFiles.toDirectoryName = null");
        DriverCommand dc = new DriverCommand(COPYMATCHINGFILES_KEYWORD);
        dc.addParameter(fromDirectoryName);
        dc.addParameter(toDirectoryName);
        dc.addParameter(pattern);
        dc.addParameter(filterMode);
        return dc;
    }


    /*********** <pre>
            		Copy multiple files/sub-directories, based on matching the provided pattern, from one directory to another.
            	
            		Note: This is a very powerful DriverCommand, please use with caution!
            	    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fromDirectoryName -- Optional:NO
                  			The directory name where the files are located.
                		<BR/>        toDirectoryName -- Optional:NO
		                	The directory name where the files are copied.
		                <BR/>        pattern -- Optional:NO
					The pattern used to distinguish the files/sub-directories to be copied.
				<BR/>        filterMode -- Optional:YES 
		                 	The filter mode used for matching the files/sub-directories to be copied.  
		                 	Default is WILDCARD.
		              	
    </UL>

     **********/
    static public DriverCommand copyMatchingFiles (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "copyMatchingFiles.parameters = null");
        DriverCommand dc = new DriverCommand(COPYMATCHINGFILES_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Create the directory for the provided directory pathname
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param directoryName  Optional:NO
              The full directory path name for the directory to be created.
            
     **********/
    static public DriverCommand createDirectory (String directoryName) {

        if ( directoryName == null ) throw new IllegalArgumentException ( "createDirectory.directoryName = null");
        DriverCommand dc = new DriverCommand(CREATEDIRECTORY_KEYWORD);
        dc.addParameter(directoryName);
        return dc;
    }


    /*********** <pre>
          Open a new file with the filename, mode and access provided.
          TID Note: Three ways to create a file:
			
				Mode=Input, Access=Read
				Mode=Output, Access=Write
				Mode=Append, Access=Write
				
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param fileName  Optional:NO
              The full path file name of the file to be opened.
            
     @param mode  Optional:NO
              Mode to be used to create and open the file, Input, Output or Append.                    Random and Binary not supported
            
     @param access  Optional:NO
              Access to be used to create and open the file. Read, Write or Read Write.
            
     @param fileNumberVariable  Optional:NO
              DDE Variable name of the variable to store the file number.
            
     @param fileNumber  Optional:Yes
              Optional File number to be used to open the file                       Otherwise next available file number is used
            
     **********/
    static public DriverCommand createFile (String fileName, String mode, String access, String fileNumberVariable, String fileNumber) {

        if ( access == null ) throw new IllegalArgumentException ( "createFile.access = null");
        if ( fileName == null ) throw new IllegalArgumentException ( "createFile.fileName = null");
        if ( fileNumberVariable == null ) throw new IllegalArgumentException ( "createFile.fileNumberVariable = null");
        if ( mode == null ) throw new IllegalArgumentException ( "createFile.mode = null");
        DriverCommand dc = new DriverCommand(CREATEFILE_KEYWORD);
        dc.addParameter(fileName);
        dc.addParameter(mode);
        dc.addParameter(access);
        dc.addParameter(fileNumberVariable);
        dc.addParameter(fileNumber);
        return dc;
    }


    /*********** <pre>
          Open a new file with the filename, mode and access provided.
          TID Note: Three ways to create a file:
			
				Mode=Input, Access=Read
				Mode=Output, Access=Write
				Mode=Append, Access=Write
				
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fileName -- Optional:NO
              The full path file name of the file to be opened.
            <BR/>        mode -- Optional:NO
              Mode to be used to create and open the file, Input, Output or Append.                    Random and Binary not supported
            <BR/>        access -- Optional:NO
              Access to be used to create and open the file. Read, Write or Read Write.
            <BR/>        fileNumberVariable -- Optional:NO
              DDE Variable name of the variable to store the file number.
            <BR/>        fileNumber -- Optional:Yes
              Optional File number to be used to open the file                       Otherwise next available file number is used
            
    </UL>

     **********/
    static public DriverCommand createFile (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "createFile.parameters = null");
        DriverCommand dc = new DriverCommand(CREATEFILE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Delete the directory for the provided directory pathname
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param directoryName  Optional:NO
              The full directory path name for the directory to be deleted.
            
     **********/
    static public DriverCommand deleteDirectory (String directoryName) {

        if ( directoryName == null ) throw new IllegalArgumentException ( "deleteDirectory.directoryName = null");
        DriverCommand dc = new DriverCommand(DELETEDIRECTORY_KEYWORD);
        dc.addParameter(directoryName);
        return dc;
    }


    /*********** <pre>
            		Delete the contents (files and sub-directories) of a provided directory and optionally, 
            		the directory itself.
            	
			Note: This is a very powerful DriverCommand, please use with caution!
            	    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param directoryName  Optional:NO
                  			The directory name in which the contents will be deleted.
                		
     @param deleteDir  Optional:YES
		                	Indicate whether you want to also delete the directory with true or false.  Default is false.
		                
     **********/
    static public DriverCommand deleteDirectoryContents (String directoryName, String deleteDir) {

        if ( directoryName == null ) throw new IllegalArgumentException ( "deleteDirectoryContents.directoryName = null");
        DriverCommand dc = new DriverCommand(DELETEDIRECTORYCONTENTS_KEYWORD);
        dc.addParameter(directoryName);
        dc.addParameter(deleteDir);
        return dc;
    }


    /*********** <pre>
            		Delete the contents (files and sub-directories) of a provided directory and optionally, 
            		the directory itself.
            	
			Note: This is a very powerful DriverCommand, please use with caution!
            	    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        directoryName -- Optional:NO
                  			The directory name in which the contents will be deleted.
                		<BR/>        deleteDir -- Optional:YES
		                	Indicate whether you want to also delete the directory with true or false.  Default is false.
		                
    </UL>

     **********/
    static public DriverCommand deleteDirectoryContents (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "deleteDirectoryContents.parameters = null");
        DriverCommand dc = new DriverCommand(DELETEDIRECTORYCONTENTS_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Delete the file for the file name provided
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param fileName  Optional:NO
              The file name for the file to be deleted.  Normally, the full file path is specified. 
              If a relative path is specified, it is relative to the project directory. 
            
     @param noVerify  Optional:Yes
              String Equal to "NOVERIFY" if file is not verified prior to deleting.
            
     **********/
    static public DriverCommand deleteFile (String fileName, String noVerify) {

        if ( fileName == null ) throw new IllegalArgumentException ( "deleteFile.fileName = null");
        DriverCommand dc = new DriverCommand(DELETEFILE_KEYWORD);
        dc.addParameter(fileName);
        dc.addParameter(noVerify);
        return dc;
    }


    /*********** <pre>
          Delete the file for the file name provided
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fileName -- Optional:NO
              The file name for the file to be deleted.  Normally, the full file path is specified. 
              If a relative path is specified, it is relative to the project directory. 
            <BR/>        noVerify -- Optional:Yes
              String Equal to "NOVERIFY" if file is not verified prior to deleting.
            
    </UL>

     **********/
    static public DriverCommand deleteFile (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "deleteFile.parameters = null");
        DriverCommand dc = new DriverCommand(DELETEFILE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
              	Filter out specific parts of an image.
            
	        Filter out specific parts of an image and save to a new or existing image file.
	        The filtered portions of the image are blacked out so as to remove dynamic visible
	        content from the image.
	        The available formats for the input and output files are BITMAP (*.bmp) and JPEG
	        (*.jpg).
	        
	        Specific Notes:
	        	This command requires that Java Advanced Imaging (JAI) be installed
	                on the test machine.
	        
       	        </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param inputFilename  Optional:NO
                  The input image file (FULL PATH)
                
     @param outputFilename  Optional:NO
                  The output image file after filtering (FULL PATH)
                
     @param filterMode  Optional:NO
                  Mode by which the image is filtered
                
     @param coords  Optional:NO
	      		Required parameter for the COORD FilterMode that defines the rectangle(s) of the input image that are to be filtered out.
	        
     **********/
    static public DriverCommand filterImage (String inputFilename, String outputFilename, String filterMode, String coords) {

        if ( coords == null ) throw new IllegalArgumentException ( "filterImage.coords = null");
        if ( filterMode == null ) throw new IllegalArgumentException ( "filterImage.filterMode = null");
        if ( inputFilename == null ) throw new IllegalArgumentException ( "filterImage.inputFilename = null");
        if ( outputFilename == null ) throw new IllegalArgumentException ( "filterImage.outputFilename = null");
        DriverCommand dc = new DriverCommand(FILTERIMAGE_KEYWORD);
        dc.addParameter(inputFilename);
        dc.addParameter(outputFilename);
        dc.addParameter(filterMode);
        dc.addParameter(coords);
        return dc;
    }


    /*********** <pre>
              	Filter out specific parts of an image.
            
	        Filter out specific parts of an image and save to a new or existing image file.
	        The filtered portions of the image are blacked out so as to remove dynamic visible
	        content from the image.
	        The available formats for the input and output files are BITMAP (*.bmp) and JPEG
	        (*.jpg).
	        
	        Specific Notes:
	        	This command requires that Java Advanced Imaging (JAI) be installed
	                on the test machine.
	        
       	        </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        inputFilename -- Optional:NO
                  The input image file (FULL PATH)
                <BR/>        outputFilename -- Optional:NO
                  The output image file after filtering (FULL PATH)
                <BR/>        filterMode -- Optional:NO
                  Mode by which the image is filtered
                <BR/>        coords -- Optional:NO
	      		Required parameter for the COORD FilterMode that defines the rectangle(s) of the input image that are to be filtered out.
	        
    </UL>

     **********/
    static public DriverCommand filterImage (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "filterImage.parameters = null");
        DriverCommand dc = new DriverCommand(FILTERIMAGE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Filter a text file based on the given parameters.
              
                 Filter a text file based on the given parameters.
                 
                 This command can be used to process a text file based on the
                 provided parameters, such as replacing text in a file that
                 matches a specific pattern. This command is experimental.
                 command name/parameters are subject to change without notice.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param file  Optional:NO 
                 The file to be filtered.
              
     @param filterMode  Optional:NO 
                 The filter mode.
              
     @param filterOptions  Optional:YES 
                 Additional filter options.
              
     @param encoding  Optional:YES 
                 The encoding to use to read and write file.
              
     **********/
    static public DriverCommand filterTextFile (String file, String filterMode, String filterOptions, String encoding) {

        if ( file == null ) throw new IllegalArgumentException ( "filterTextFile.file = null");
        if ( filterMode == null ) throw new IllegalArgumentException ( "filterTextFile.filterMode = null");
        DriverCommand dc = new DriverCommand(FILTERTEXTFILE_KEYWORD);
        dc.addParameter(file);
        dc.addParameter(filterMode);
        dc.addParameter(filterOptions);
        dc.addParameter(encoding);
        return dc;
    }


    /*********** <pre> 
                 Filter a text file based on the given parameters.
              
                 Filter a text file based on the given parameters.
                 
                 This command can be used to process a text file based on the
                 provided parameters, such as replacing text in a file that
                 matches a specific pattern. This command is experimental.
                 command name/parameters are subject to change without notice.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        file -- Optional:NO 
                 The file to be filtered.
              <BR/>        filterMode -- Optional:NO 
                 The filter mode.
              <BR/>        filterOptions -- Optional:YES 
                 Additional filter options.
              <BR/>        encoding -- Optional:YES 
                 The encoding to use to read and write file.
              
    </UL>

     **********/
    static public DriverCommand filterTextFile (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "filterTextFile.parameters = null");
        DriverCommand dc = new DriverCommand(FILTERTEXTFILE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Find the file for the SQA relative path and file name provided.  If a                 full file path is provided the file will be located using the full                 file path and name.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param fileName  Optional:NO
              The file path and file name of the file to be found.
            
     @param filePathVariable  Optional:NO
              Name of the DDV variable to be used to store the full file path of the                 found file. If file not found blank string is assigned to variable
            
     **********/
    static public DriverCommand findSqaFile (String fileName, String filePathVariable) {

        if ( fileName == null ) throw new IllegalArgumentException ( "findSqaFile.fileName = null");
        if ( filePathVariable == null ) throw new IllegalArgumentException ( "findSqaFile.filePathVariable = null");
        DriverCommand dc = new DriverCommand(FINDSQAFILE_KEYWORD);
        dc.addParameter(fileName);
        dc.addParameter(filePathVariable);
        return dc;
    }


    /*********** <pre>
          Find the file for the SQA relative path and file name provided.  If a                 full file path is provided the file will be located using the full                 file path and name.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fileName -- Optional:NO
              The file path and file name of the file to be found.
            <BR/>        filePathVariable -- Optional:NO
              Name of the DDV variable to be used to store the full file path of the                 found file. If file not found blank string is assigned to variable
            
    </UL>

     **********/
    static public DriverCommand findSqaFile (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "findSqaFile.parameters = null");
        DriverCommand dc = new DriverCommand(FINDSQAFILE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Determine the date and time the file created/last changed/last accessed for file name provided and assign it to a DDV variable.
        
                Determine the date and time the file created/last changed/last accessed 
                for file name provided and assign it to a DDV variable.
                This date is in the format MM-DD-YYYY HH:MM:SS, it is in AM-PM 12-hours
                format (1-12) be default; If you set the third parameter 'GetMilitaryTime'
                to True, the time will be 24-hours military format (0-23). Use military time
                is recommanded, as am-pm time has confusion without AM or PM
                (example: 18:00 and 06:00 will be both 06:00)
                You can get different date and time by providing a different value to the fourth
                optional parameter DateTimeType.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param fileName  Optional:NO
              The file path and file name of the file to get the file date and time.
            
     @param fileDateVariable  Optional:NO
              Name of the DDV variable to be used to store the file date and time
            
     @param getMilitaryTime  Optional:YES 
                 If true, the converted time is in 24-hours military time format
              
     @param dateTimeType  Optional:YES 
                 You can get different date and time by providing a different value.
              
     **********/
    static public DriverCommand getFileDateTime (String fileName, String fileDateVariable, String getMilitaryTime, String dateTimeType) {

        if ( fileDateVariable == null ) throw new IllegalArgumentException ( "getFileDateTime.fileDateVariable = null");
        if ( fileName == null ) throw new IllegalArgumentException ( "getFileDateTime.fileName = null");
        DriverCommand dc = new DriverCommand(GETFILEDATETIME_KEYWORD);
        dc.addParameter(fileName);
        dc.addParameter(fileDateVariable);
        dc.addParameter(getMilitaryTime);
        dc.addParameter(dateTimeType);
        return dc;
    }


    /*********** <pre>
          Determine the date and time the file created/last changed/last accessed for file name provided and assign it to a DDV variable.
        
                Determine the date and time the file created/last changed/last accessed 
                for file name provided and assign it to a DDV variable.
                This date is in the format MM-DD-YYYY HH:MM:SS, it is in AM-PM 12-hours
                format (1-12) be default; If you set the third parameter 'GetMilitaryTime'
                to True, the time will be 24-hours military format (0-23). Use military time
                is recommanded, as am-pm time has confusion without AM or PM
                (example: 18:00 and 06:00 will be both 06:00)
                You can get different date and time by providing a different value to the fourth
                optional parameter DateTimeType.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fileName -- Optional:NO
              The file path and file name of the file to get the file date and time.
            <BR/>        fileDateVariable -- Optional:NO
              Name of the DDV variable to be used to store the file date and time
            <BR/>        getMilitaryTime -- Optional:YES 
                 If true, the converted time is in 24-hours military time format
              <BR/>        dateTimeType -- Optional:YES 
                 You can get different date and time by providing a different value.
              
    </UL>

     **********/
    static public DriverCommand getFileDateTime (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getFileDateTime.parameters = null");
        DriverCommand dc = new DriverCommand(GETFILEDATETIME_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Save the file attributes for the file name to the variable provided.
        
          Save the file attributes for the file name to the variable provided. 
          The variable will be an integer containing the attributes for the file, it may be any combination of them.
          Here is a description of attributes:
          0  - Normal file
          1  - Read Only file
          2  - Hidden file
          4  - System file (Windows OS Only)
          16 - Directory
          32 - Archive file (Windows OS: attrib with 'A'; Other OS: file suffix is .jar, .tar, .rar, .gz etc.)
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param fileName  Optional:NO
              The file path and file name of the file to get the file attribute.
            
     @param varName  Optional:NO
              variable name to place the attributes in
            
     **********/
    static public DriverCommand getFileProtections (String fileName, String varName) {

        if ( fileName == null ) throw new IllegalArgumentException ( "getFileProtections.fileName = null");
        if ( varName == null ) throw new IllegalArgumentException ( "getFileProtections.varName = null");
        DriverCommand dc = new DriverCommand(GETFILEPROTECTIONS_KEYWORD);
        dc.addParameter(fileName);
        dc.addParameter(varName);
        return dc;
    }


    /*********** <pre>
          Save the file attributes for the file name to the variable provided.
        
          Save the file attributes for the file name to the variable provided. 
          The variable will be an integer containing the attributes for the file, it may be any combination of them.
          Here is a description of attributes:
          0  - Normal file
          1  - Read Only file
          2  - Hidden file
          4  - System file (Windows OS Only)
          16 - Directory
          32 - Archive file (Windows OS: attrib with 'A'; Other OS: file suffix is .jar, .tar, .rar, .gz etc.)
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fileName -- Optional:NO
              The file path and file name of the file to get the file attribute.
            <BR/>        varName -- Optional:NO
              variable name to place the attributes in
            
    </UL>

     **********/
    static public DriverCommand getFileProtections (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getFileProtections.parameters = null");
        DriverCommand dc = new DriverCommand(GETFILEPROTECTIONS_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Search the directory provided for files according to possible attribute and write the list of filenames found into the output file.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param directory  Optional:NO
              The full name of the directory to be searched for files.
            
     @param fileName  Optional:NO
              Full file path and name of the file to store list of                  files found in the directory
            
     @param fileAttributes  Optional:YES
              Optional File Attributes parameter specifying file attributes to select with Dir directory 
              search command. Default if unspecified is normal files. It may be any combination of them.
            
     **********/
    static public DriverCommand getFiles (String directory, String fileName, String fileAttributes) {

        if ( directory == null ) throw new IllegalArgumentException ( "getFiles.directory = null");
        if ( fileName == null ) throw new IllegalArgumentException ( "getFiles.fileName = null");
        DriverCommand dc = new DriverCommand(GETFILES_KEYWORD);
        dc.addParameter(directory);
        dc.addParameter(fileName);
        dc.addParameter(fileAttributes);
        return dc;
    }


    /*********** <pre>
          Search the directory provided for files according to possible attribute and write the list of filenames found into the output file.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        directory -- Optional:NO
              The full name of the directory to be searched for files.
            <BR/>        fileName -- Optional:NO
              Full file path and name of the file to store list of                  files found in the directory
            <BR/>        fileAttributes -- Optional:YES
              Optional File Attributes parameter specifying file attributes to select with Dir directory 
              search command. Default if unspecified is normal files. It may be any combination of them.
            
    </UL>

     **********/
    static public DriverCommand getFiles (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getFiles.parameters = null");
        DriverCommand dc = new DriverCommand(GETFILES_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Determine the file size for file name provided and assign it to a DDV variable.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param fileName  Optional:NO
              The file path and file name of the file to get file size.
            
     @param fileSizeVariable  Optional:NO
              Name of the DDV variable to be used to store the file size of the file.
            
     **********/
    static public DriverCommand getFileSize (String fileName, String fileSizeVariable) {

        if ( fileName == null ) throw new IllegalArgumentException ( "getFileSize.fileName = null");
        if ( fileSizeVariable == null ) throw new IllegalArgumentException ( "getFileSize.fileSizeVariable = null");
        DriverCommand dc = new DriverCommand(GETFILESIZE_KEYWORD);
        dc.addParameter(fileName);
        dc.addParameter(fileSizeVariable);
        return dc;
    }


    /*********** <pre>
          Determine the file size for file name provided and assign it to a DDV variable.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fileName -- Optional:NO
              The file path and file name of the file to get file size.
            <BR/>        fileSizeVariable -- Optional:NO
              Name of the DDV variable to be used to store the file size of the file.
            
    </UL>

     **********/
    static public DriverCommand getFileSize (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getFileSize.parameters = null");
        DriverCommand dc = new DriverCommand(GETFILESIZE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Get value from INI file.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param fileName  Optional:NO
              The name of the file.
            
     @param section  Optional:NO
              The Section of the file to look in.
            
     @param item  Optional:NO
              The item to look for.
            
     @param variable  Optional:NO
              Name of the DDV variable to be used to store the file date and time
            
     **********/
    static public DriverCommand getINIFileValue (String fileName, String section, String item, String variable) {

        if ( fileName == null ) throw new IllegalArgumentException ( "getINIFileValue.fileName = null");
        if ( item == null ) throw new IllegalArgumentException ( "getINIFileValue.item = null");
        if ( section == null ) throw new IllegalArgumentException ( "getINIFileValue.section = null");
        if ( variable == null ) throw new IllegalArgumentException ( "getINIFileValue.variable = null");
        DriverCommand dc = new DriverCommand(GETINIFILEVALUE_KEYWORD);
        dc.addParameter(fileName);
        dc.addParameter(section);
        dc.addParameter(item);
        dc.addParameter(variable);
        return dc;
    }


    /*********** <pre>
          Get value from INI file.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fileName -- Optional:NO
              The name of the file.
            <BR/>        section -- Optional:NO
              The Section of the file to look in.
            <BR/>        item -- Optional:NO
              The item to look for.
            <BR/>        variable -- Optional:NO
              Name of the DDV variable to be used to store the file date and time
            
    </UL>

     **********/
    static public DriverCommand getINIFileValue (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getINIFileValue.parameters = null");
        DriverCommand dc = new DriverCommand(GETINIFILEVALUE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                  Count the number of occurrences of a target string in a File.
                
                  This command opens and reads a file line by line, then sets a specified DDVariable to the number of times the target string is found in the file. 
                  String comparisons are case-sensitive by default. The file is assumed to be in the system default encoding unless specified otherwise.
                   </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param file  Optional:NO 
                  The File to be searched.
               
     @param string  Optional:NO 
                  The string to match and count in the file.
               
     @param varName  Optional:YES  DefaultVal:GetStringCountInFile 
                  The name of the variable to receive the count.
               
     @param caseSensitive  Optional:YES 
                  Set to 'CaseInsensitive' so comparisons are NOT case-sensitive.  
               
     @param encoding  Optional:YES 
                  Charset encoding string like "UTF-8", etc...
               
     **********/
    static public DriverCommand getStringCountInFile (String file, String string, String varName, String caseSensitive, String encoding) {

        if ( file == null ) throw new IllegalArgumentException ( "getStringCountInFile.file = null");
        if ( string == null ) throw new IllegalArgumentException ( "getStringCountInFile.string = null");
        DriverCommand dc = new DriverCommand(GETSTRINGCOUNTINFILE_KEYWORD);
        dc.addParameter(file);
        dc.addParameter(string);
        dc.addParameter(varName);
        dc.addParameter(caseSensitive);
        dc.addParameter(encoding);
        return dc;
    }


    /*********** <pre> 
                  Count the number of occurrences of a target string in a File.
                
                  This command opens and reads a file line by line, then sets a specified DDVariable to the number of times the target string is found in the file. 
                  String comparisons are case-sensitive by default. The file is assumed to be in the system default encoding unless specified otherwise.
                   </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        file -- Optional:NO 
                  The File to be searched.
               <BR/>        string -- Optional:NO 
                  The string to match and count in the file.
               <BR/>        varName -- Optional:YES  DefaultVal:GetStringCountInFile 
                  The name of the variable to receive the count.
               <BR/>        caseSensitive -- Optional:YES 
                  Set to 'CaseInsensitive' so comparisons are NOT case-sensitive.  
               <BR/>        encoding -- Optional:YES 
                  Charset encoding string like "UTF-8", etc...
               
    </UL>

     **********/
    static public DriverCommand getStringCountInFile (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getStringCountInFile.parameters = null");
        DriverCommand dc = new DriverCommand(GETSTRINGCOUNTINFILE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                  Extract dynamic substrings from a file using regular expressions.
                
                  
                  This command opens the file, reads it line by line, and sets DDVariables (based on rootname) for each occurrence of string identified by the substring formed between regexstart and regexstop (1 match per line, currently).  regexstart and regexstop must both be valid, non-empty strings or no matching substrings will be found.
                  
                  Fully qualified filename is opened and read line by line.  
                  Each line is parsed, searching for a match to the substring formed between regexstart and regexstop.
                  
                  When a match is found, the string between regexstart and regexstop is saved in a newly created DDVariable based on rootname and the number of occurrences.  There will be one DDVariable for each match found and a unique "Count" variable specifying how many matches were found.
                  
                  The rootname is used as a base to build the DDVariable names which contain the located substring(s) and Count.  For example, if rootname is "Chart" and two substring matches are found, then 2 DDVariables are created to store those substrings and another is created to store the count of matches: 
                  
                  
                     DDVariable Chart1 contains the first substring, and
                     DDVariable Chart2 contains the second substring. 
                     DDVariable ChartCount contains the number of matches found. 
                  
                   </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param file  Optional:NO 
                  Fully-qualified filename
               
     @param regexstart  Optional:NO 
                  The starting regular expression.  Should not be empty.
               
     @param regexstop  Optional:NO 
                  The stopping regular expression.  Should not be empty.
               
     @param rootname  Optional:NO 
                  The root name of the returned variable(s).  
               
     **********/
    static public DriverCommand getSubstringsInFile (String file, String regexstart, String regexstop, String rootname) {

        if ( file == null ) throw new IllegalArgumentException ( "getSubstringsInFile.file = null");
        if ( regexstart == null ) throw new IllegalArgumentException ( "getSubstringsInFile.regexstart = null");
        if ( regexstop == null ) throw new IllegalArgumentException ( "getSubstringsInFile.regexstop = null");
        if ( rootname == null ) throw new IllegalArgumentException ( "getSubstringsInFile.rootname = null");
        DriverCommand dc = new DriverCommand(GETSUBSTRINGSINFILE_KEYWORD);
        dc.addParameter(file);
        dc.addParameter(regexstart);
        dc.addParameter(regexstop);
        dc.addParameter(rootname);
        return dc;
    }


    /*********** <pre> 
                  Extract dynamic substrings from a file using regular expressions.
                
                  
                  This command opens the file, reads it line by line, and sets DDVariables (based on rootname) for each occurrence of string identified by the substring formed between regexstart and regexstop (1 match per line, currently).  regexstart and regexstop must both be valid, non-empty strings or no matching substrings will be found.
                  
                  Fully qualified filename is opened and read line by line.  
                  Each line is parsed, searching for a match to the substring formed between regexstart and regexstop.
                  
                  When a match is found, the string between regexstart and regexstop is saved in a newly created DDVariable based on rootname and the number of occurrences.  There will be one DDVariable for each match found and a unique "Count" variable specifying how many matches were found.
                  
                  The rootname is used as a base to build the DDVariable names which contain the located substring(s) and Count.  For example, if rootname is "Chart" and two substring matches are found, then 2 DDVariables are created to store those substrings and another is created to store the count of matches: 
                  
                  
                     DDVariable Chart1 contains the first substring, and
                     DDVariable Chart2 contains the second substring. 
                     DDVariable ChartCount contains the number of matches found. 
                  
                   </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        file -- Optional:NO 
                  Fully-qualified filename
               <BR/>        regexstart -- Optional:NO 
                  The starting regular expression.  Should not be empty.
               <BR/>        regexstop -- Optional:NO 
                  The stopping regular expression.  Should not be empty.
               <BR/>        rootname -- Optional:NO 
                  The root name of the returned variable(s).  
               
    </UL>

     **********/
    static public DriverCommand getSubstringsInFile (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getSubstringsInFile.parameters = null");
        DriverCommand dc = new DriverCommand(GETSUBSTRINGSINFILE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
             Incorporate OCR technology to detect the text in an image file and save the text to a variable.
          
             Two open-source OCRs are integrated into SAFS. One is TesseractOCR (TOCR) at 
             http://code.google.com/p/tesseract-ocr; the other GOCR at http://jocr.sourceforge.net. 
             
             TOCR 2.0.4 and GOCR 0.48 are the latest release. They are available in SAFS and only 
             support English. Both two OCR owners claim to support more languages in next release. Chinese, 
             Japanese, and Korean are going to be supported in TOCR's next release 3.00.
			
       	      </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS SDCommands</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param imageFile  Optional:NO
               The name of the image file used to detect text in it.
             
     @param variableName  Optional:NO
             The name of the variable to receive detected text.
              
     @param oCRId  Optional:YES
             OCRId indicating the OCR used to recognize text.
             
     @param langId  Optional:YES
             Optional LangId representing the language in use for selected OCR to recognize text. 
             
     @param scaleRatio  Optional:YES
             Optional ScaleRatio indicating the scale ratio for resizing the original image.
             
     **********/
    static public DriverCommand getTextFromImage (String imageFile, String variableName, String oCRId, String langId, String scaleRatio) {

        if ( imageFile == null ) throw new IllegalArgumentException ( "getTextFromImage.imageFile = null");
        if ( variableName == null ) throw new IllegalArgumentException ( "getTextFromImage.variableName = null");
        DriverCommand dc = new DriverCommand(GETTEXTFROMIMAGE_KEYWORD);
        dc.addParameter(imageFile);
        dc.addParameter(variableName);
        dc.addParameter(oCRId);
        dc.addParameter(langId);
        dc.addParameter(scaleRatio);
        return dc;
    }


    /*********** <pre>
             Incorporate OCR technology to detect the text in an image file and save the text to a variable.
          
             Two open-source OCRs are integrated into SAFS. One is TesseractOCR (TOCR) at 
             http://code.google.com/p/tesseract-ocr; the other GOCR at http://jocr.sourceforge.net. 
             
             TOCR 2.0.4 and GOCR 0.48 are the latest release. They are available in SAFS and only 
             support English. Both two OCR owners claim to support more languages in next release. Chinese, 
             Japanese, and Korean are going to be supported in TOCR's next release 3.00.
			
       	      </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS SDCommands</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        imageFile -- Optional:NO
               The name of the image file used to detect text in it.
             <BR/>        variableName -- Optional:NO
             The name of the variable to receive detected text.
              <BR/>        oCRId -- Optional:YES
             OCRId indicating the OCR used to recognize text.
             <BR/>        langId -- Optional:YES
             Optional LangId representing the language in use for selected OCR to recognize text. 
             <BR/>        scaleRatio -- Optional:YES
             Optional ScaleRatio indicating the scale ratio for resizing the original image.
             
    </UL>

     **********/
    static public DriverCommand getTextFromImage (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getTextFromImage.parameters = null");
        DriverCommand dc = new DriverCommand(GETTEXTFROMIMAGE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          If the specified directory exists, then execute the following driver command.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param directoryName  Optional:NO
              The full path name of directory to test for
            
     @param thenDriverCommand  Optional:NO
              Actually, the rest of the parameters include this,                     which is the driver command to execute if the                     directory exists, followed by the remaining driver                     parameters for that command
            
     **********/
    static public DriverCommand ifExistDir (String directoryName, String thenDriverCommand) {

        if ( directoryName == null ) throw new IllegalArgumentException ( "ifExistDir.directoryName = null");
        if ( thenDriverCommand == null ) throw new IllegalArgumentException ( "ifExistDir.thenDriverCommand = null");
        DriverCommand dc = new DriverCommand(IFEXISTDIR_KEYWORD);
        dc.addParameter(directoryName);
        dc.addParameter(thenDriverCommand);
        return dc;
    }


    /*********** <pre>
          If the specified directory exists, then execute the following driver command.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        directoryName -- Optional:NO
              The full path name of directory to test for
            <BR/>        thenDriverCommand -- Optional:NO
              Actually, the rest of the parameters include this,                     which is the driver command to execute if the                     directory exists, followed by the remaining driver                     parameters for that command
            
    </UL>

     **********/
    static public DriverCommand ifExistDir (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "ifExistDir.parameters = null");
        DriverCommand dc = new DriverCommand(IFEXISTDIR_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          If the specified file exists, then execute the following driver command.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param fileName  Optional:NO
              The full path name of file to test for
            
     @param thenDriverCommand  Optional:NO
              Actually, the rest of the parameters include this,                     which is the driver command to execute if the                     file exists, followed by the remaining driver                     parameters for that command
            
     **********/
    static public DriverCommand ifExistFile (String fileName, String thenDriverCommand) {

        if ( fileName == null ) throw new IllegalArgumentException ( "ifExistFile.fileName = null");
        if ( thenDriverCommand == null ) throw new IllegalArgumentException ( "ifExistFile.thenDriverCommand = null");
        DriverCommand dc = new DriverCommand(IFEXISTFILE_KEYWORD);
        dc.addParameter(fileName);
        dc.addParameter(thenDriverCommand);
        return dc;
    }


    /*********** <pre>
          If the specified file exists, then execute the following driver command.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fileName -- Optional:NO
              The full path name of file to test for
            <BR/>        thenDriverCommand -- Optional:NO
              Actually, the rest of the parameters include this,                     which is the driver command to execute if the                     file exists, followed by the remaining driver                     parameters for that command
            
    </UL>

     **********/
    static public DriverCommand ifExistFile (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "ifExistFile.parameters = null");
        DriverCommand dc = new DriverCommand(IFEXISTFILE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
           If the specified file is at the end of file, a 'variable' gets true assigned, otherwise it gets false
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param fileNumber  Optional:NO
              The file number for the file to be closed.
            
     @param variable  Optional:NO
              Variable to assign true or false
            
     **********/
    static public DriverCommand isEndOfFile (String fileNumber, String variable) {

        if ( fileNumber == null ) throw new IllegalArgumentException ( "isEndOfFile.fileNumber = null");
        if ( variable == null ) throw new IllegalArgumentException ( "isEndOfFile.variable = null");
        DriverCommand dc = new DriverCommand(ISENDOFFILE_KEYWORD);
        dc.addParameter(fileNumber);
        dc.addParameter(variable);
        return dc;
    }


    /*********** <pre>
           If the specified file is at the end of file, a 'variable' gets true assigned, otherwise it gets false
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fileNumber -- Optional:NO
              The file number for the file to be closed.
            <BR/>        variable -- Optional:NO
              Variable to assign true or false
            
    </UL>

     **********/
    static public DriverCommand isEndOfFile (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "isEndOfFile.parameters = null");
        DriverCommand dc = new DriverCommand(ISENDOFFILE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Open an existing file with the filename, mode and access provided.
		  TID Note: Multiple ways to open a file:
			
				Mode=Input, Access=Read
				Mode=Output, Access=Write
				Mode=Append, Access=Write
				Mode=AppendRaw, Access=Write
				
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param fileName  Optional:NO
              The full path file name of the file to be opened.
            
     @param mode  Optional:NOMode to be used to open the file, Input, Output, Append, and AppendRaw.
     @param access  Optional:NO
              Access to be used to open the file. Read, Write or Read Write.
            
     @param fileNumberVariable  Optional:NO
              DDE Variable name of the variable to store the file number.
            
     @param fileNumber  Optional:Yes
              Optional File number to be used to open the file                       Otherwise next available file number is used
            
     **********/
    static public DriverCommand openFile (String fileName, String mode, String access, String fileNumberVariable, String fileNumber) {

        if ( access == null ) throw new IllegalArgumentException ( "openFile.access = null");
        if ( fileName == null ) throw new IllegalArgumentException ( "openFile.fileName = null");
        if ( fileNumberVariable == null ) throw new IllegalArgumentException ( "openFile.fileNumberVariable = null");
        if ( mode == null ) throw new IllegalArgumentException ( "openFile.mode = null");
        DriverCommand dc = new DriverCommand(OPENFILE_KEYWORD);
        dc.addParameter(fileName);
        dc.addParameter(mode);
        dc.addParameter(access);
        dc.addParameter(fileNumberVariable);
        dc.addParameter(fileNumber);
        return dc;
    }


    /*********** <pre>
          Open an existing file with the filename, mode and access provided.
		  TID Note: Multiple ways to open a file:
			
				Mode=Input, Access=Read
				Mode=Output, Access=Write
				Mode=Append, Access=Write
				Mode=AppendRaw, Access=Write
				
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fileName -- Optional:NO
              The full path file name of the file to be opened.
            <BR/>        mode -- Optional:NOMode to be used to open the file, Input, Output, Append, and AppendRaw.<BR/>        access -- Optional:NO
              Access to be used to open the file. Read, Write or Read Write.
            <BR/>        fileNumberVariable -- Optional:NO
              DDE Variable name of the variable to store the file number.
            <BR/>        fileNumber -- Optional:Yes
              Optional File number to be used to open the file                       Otherwise next available file number is used
            
    </UL>

     **********/
    static public DriverCommand openFile (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "openFile.parameters = null");
        DriverCommand dc = new DriverCommand(OPENFILE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Open an existing UTF-8 file with the filename, mode and access provided.
	      TID Note: Multiple ways to open a file:
			
				Mode=Input, Access=Read
				Mode=Output, Access=Write
				Mode=Append, Access=Write
				Mode=AppendRaw, Access=Write
			
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param fileName  Optional:NO
              The full path file name of the UTF-8 file to be opened.
            
     @param mode  Optional:NOMode to be used to open the file, Input, Output, Append, and AppendRaw.
     @param access  Optional:NO
              Access to be used to open the UTF-8 file. Read, Write or Read Write.
            
     @param fileNumberVariable  Optional:NO
              DDE Variable name of the variable to store the file number.
            
     @param fileNumber  Optional:Yes
              Optional File number to be used to open the UTF-8 file, 
              otherwise, next available file number is used.
            
     **********/
    static public DriverCommand openUTF8File (String fileName, String mode, String access, String fileNumberVariable, String fileNumber) {

        if ( access == null ) throw new IllegalArgumentException ( "openUTF8File.access = null");
        if ( fileName == null ) throw new IllegalArgumentException ( "openUTF8File.fileName = null");
        if ( fileNumberVariable == null ) throw new IllegalArgumentException ( "openUTF8File.fileNumberVariable = null");
        if ( mode == null ) throw new IllegalArgumentException ( "openUTF8File.mode = null");
        DriverCommand dc = new DriverCommand(OPENUTF8FILE_KEYWORD);
        dc.addParameter(fileName);
        dc.addParameter(mode);
        dc.addParameter(access);
        dc.addParameter(fileNumberVariable);
        dc.addParameter(fileNumber);
        return dc;
    }


    /*********** <pre>
          Open an existing UTF-8 file with the filename, mode and access provided.
	      TID Note: Multiple ways to open a file:
			
				Mode=Input, Access=Read
				Mode=Output, Access=Write
				Mode=Append, Access=Write
				Mode=AppendRaw, Access=Write
			
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fileName -- Optional:NO
              The full path file name of the UTF-8 file to be opened.
            <BR/>        mode -- Optional:NOMode to be used to open the file, Input, Output, Append, and AppendRaw.<BR/>        access -- Optional:NO
              Access to be used to open the UTF-8 file. Read, Write or Read Write.
            <BR/>        fileNumberVariable -- Optional:NO
              DDE Variable name of the variable to store the file number.
            <BR/>        fileNumber -- Optional:Yes
              Optional File number to be used to open the UTF-8 file, 
              otherwise, next available file number is used.
            
    </UL>

     **********/
    static public DriverCommand openUTF8File (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "openUTF8File.parameters = null");
        DriverCommand dc = new DriverCommand(OPENUTF8FILE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Write output to a sequential file already opened for writing.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param fileNumber  Optional:NO
              The file number of the file to be written to.
            
     @param expressionListVariable  Optional:NO
              DDV variable name of the variable that contains the "Expression List";                 NOTE: for RobotJ it is the Expression List, if it                 begins with ^ then it is treated as a variable.
            
     @param printOutputPlacement  Optional:YES
              Print Output Placement Parameter determines where the next output to the same file should begin
              
			  ; will place the output immediately following this print output
              , will start output at the next print zone on the same line
              Absence of this parameter (Default) will place the next output at the beginning of a new line following a carriage return line feed.
              
            
     **********/
    static public DriverCommand printToFile (String fileNumber, String expressionListVariable, String printOutputPlacement) {

        if ( expressionListVariable == null ) throw new IllegalArgumentException ( "printToFile.expressionListVariable = null");
        if ( fileNumber == null ) throw new IllegalArgumentException ( "printToFile.fileNumber = null");
        DriverCommand dc = new DriverCommand(PRINTTOFILE_KEYWORD);
        dc.addParameter(fileNumber);
        dc.addParameter(expressionListVariable);
        dc.addParameter(printOutputPlacement);
        return dc;
    }


    /*********** <pre>
          Write output to a sequential file already opened for writing.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fileNumber -- Optional:NO
              The file number of the file to be written to.
            <BR/>        expressionListVariable -- Optional:NO
              DDV variable name of the variable that contains the "Expression List";                 NOTE: for RobotJ it is the Expression List, if it                 begins with ^ then it is treated as a variable.
            <BR/>        printOutputPlacement -- Optional:YES
              Print Output Placement Parameter determines where the next output to the same file should begin
              
			  ; will place the output immediately following this print output
              , will start output at the next print zone on the same line
              Absence of this parameter (Default) will place the next output at the beginning of a new line following a carriage return line feed.
              
            
    </UL>

     **********/
    static public DriverCommand printToFile (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "printToFile.parameters = null");
        DriverCommand dc = new DriverCommand(PRINTTOFILE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Read the number of characters from the file defined by file number                 and assign a string containing the characters read to a DDV variable.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param fileNumber  Optional:NO
              The file number of the file to be read from.
            
     @param numberOfChar  Optional:NO
              Number of characters to be read from the file
            
     @param variableName  Optional:NO
              Name of the DDV variable in which to store the characters                 read from the file
            
     **********/
    static public DriverCommand readFileChars (String fileNumber, String numberOfChar, String variableName) {

        if ( fileNumber == null ) throw new IllegalArgumentException ( "readFileChars.fileNumber = null");
        if ( numberOfChar == null ) throw new IllegalArgumentException ( "readFileChars.numberOfChar = null");
        if ( variableName == null ) throw new IllegalArgumentException ( "readFileChars.variableName = null");
        DriverCommand dc = new DriverCommand(READFILECHARS_KEYWORD);
        dc.addParameter(fileNumber);
        dc.addParameter(numberOfChar);
        dc.addParameter(variableName);
        return dc;
    }


    /*********** <pre>
          Read the number of characters from the file defined by file number                 and assign a string containing the characters read to a DDV variable.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fileNumber -- Optional:NO
              The file number of the file to be read from.
            <BR/>        numberOfChar -- Optional:NO
              Number of characters to be read from the file
            <BR/>        variableName -- Optional:NO
              Name of the DDV variable in which to store the characters                 read from the file
            
    </UL>

     **********/
    static public DriverCommand readFileChars (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "readFileChars.parameters = null");
        DriverCommand dc = new DriverCommand(READFILECHARS_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Read a line from the file defined by file number                 and assign a string containing the line read to a DDV variable.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param fileNumber  Optional:NO
              The file number of the file to be read from.
            
     @param variableName  Optional:NO
              Name of the DDV variable in which to store the line                 read from the file
            
     **********/
    static public DriverCommand readFileLine (String fileNumber, String variableName) {

        if ( fileNumber == null ) throw new IllegalArgumentException ( "readFileLine.fileNumber = null");
        if ( variableName == null ) throw new IllegalArgumentException ( "readFileLine.variableName = null");
        DriverCommand dc = new DriverCommand(READFILELINE_KEYWORD);
        dc.addParameter(fileNumber);
        dc.addParameter(variableName);
        return dc;
    }


    /*********** <pre>
          Read a line from the file defined by file number                 and assign a string containing the line read to a DDV variable.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fileNumber -- Optional:NO
              The file number of the file to be read from.
            <BR/>        variableName -- Optional:NO
              Name of the DDV variable in which to store the line                 read from the file
            
    </UL>

     **********/
    static public DriverCommand readFileLine (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "readFileLine.parameters = null");
        DriverCommand dc = new DriverCommand(READFILELINE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Read a comma-separated value from a file and store it in a DDVariable.
        
          This command provides old Basic 'Input' style handling of file data.  It expects that 
          the file contains comma-separated values and only a single value is read from the 
          specified file for each call.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param fileNumber  Optional:NO
              The file number of the file to be read from.
            
     @param variableName  Optional:NO
              Name of the DDVariable in which to store the value read from the file.
            
     **********/
    static public DriverCommand readFileString (String fileNumber, String variableName) {

        if ( fileNumber == null ) throw new IllegalArgumentException ( "readFileString.fileNumber = null");
        if ( variableName == null ) throw new IllegalArgumentException ( "readFileString.variableName = null");
        DriverCommand dc = new DriverCommand(READFILESTRING_KEYWORD);
        dc.addParameter(fileNumber);
        dc.addParameter(variableName);
        return dc;
    }


    /*********** <pre>
          Read a comma-separated value from a file and store it in a DDVariable.
        
          This command provides old Basic 'Input' style handling of file data.  It expects that 
          the file contains comma-separated values and only a single value is read from the 
          specified file for each call.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fileNumber -- Optional:NO
              The file number of the file to be read from.
            <BR/>        variableName -- Optional:NO
              Name of the DDVariable in which to store the value read from the file.
            
    </UL>

     **********/
    static public DriverCommand readFileString (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "readFileString.parameters = null");
        DriverCommand dc = new DriverCommand(READFILESTRING_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Rename the file from the old file name to the new filename
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param oldFileName  Optional:NO
              The file path and file name of the file to be renamed.
            
     @param newFileName  Optional:NO
              The new file path and file name of the file.
            
     @param noVerify  Optional:Yes
              String Equal to "NOVERIFY" if file is not verified prior to renaming.
            
     **********/
    static public DriverCommand renameFile (String oldFileName, String newFileName, String noVerify) {

        if ( newFileName == null ) throw new IllegalArgumentException ( "renameFile.newFileName = null");
        if ( oldFileName == null ) throw new IllegalArgumentException ( "renameFile.oldFileName = null");
        DriverCommand dc = new DriverCommand(RENAMEFILE_KEYWORD);
        dc.addParameter(oldFileName);
        dc.addParameter(newFileName);
        dc.addParameter(noVerify);
        return dc;
    }


    /*********** <pre>
          Rename the file from the old file name to the new filename
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        oldFileName -- Optional:NO
              The file path and file name of the file to be renamed.
            <BR/>        newFileName -- Optional:NO
              The new file path and file name of the file.
            <BR/>        noVerify -- Optional:Yes
              String Equal to "NOVERIFY" if file is not verified prior to renaming.
            
    </UL>

     **********/
    static public DriverCommand renameFile (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "renameFile.parameters = null");
        DriverCommand dc = new DriverCommand(RENAMEFILE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
             Incorporate OCR technology to detect the text in an image file and save the text to a text file.
             
             Two open-source OCRs are integrated into SAFS. One is TesseractOCR (TOCR) at 
             http://code.google.com/p/tesseract-ocr; the other GOCR at http://jocr.sourceforge.net. 
             
             TOCR 2.0.4 and GOCR 0.48 are the latest release. They are available in SAFS and only 
             support English. Both two OCR owners claim to support more languages in next release. Chinese, 
             Japanese, and Korean are going to be supported in TOCR's next release 3.00.
			
       	         </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS SDCommands</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param imageFile  Optional:NO
             The name of the image file used to detect text in it.
             
     @param outputFile  Optional:NO
             The name of the text file used to store detected text.
              
     @param oCRId  Optional:YES
             OCRId indicating the OCR used to recognize text.
             
     @param langId  Optional:YES
             Optional LangId representing the language in use for selected OCR to recognize text. 
             
     @param scaleRatio  Optional:YES
             Optional ScaleRatio indicating the scale ratio for resizing the original image.
             
     **********/
    static public DriverCommand saveTextFromImage (String imageFile, String outputFile, String oCRId, String langId, String scaleRatio) {

        if ( imageFile == null ) throw new IllegalArgumentException ( "saveTextFromImage.imageFile = null");
        if ( outputFile == null ) throw new IllegalArgumentException ( "saveTextFromImage.outputFile = null");
        DriverCommand dc = new DriverCommand(SAVETEXTFROMIMAGE_KEYWORD);
        dc.addParameter(imageFile);
        dc.addParameter(outputFile);
        dc.addParameter(oCRId);
        dc.addParameter(langId);
        dc.addParameter(scaleRatio);
        return dc;
    }


    /*********** <pre>
             Incorporate OCR technology to detect the text in an image file and save the text to a text file.
             
             Two open-source OCRs are integrated into SAFS. One is TesseractOCR (TOCR) at 
             http://code.google.com/p/tesseract-ocr; the other GOCR at http://jocr.sourceforge.net. 
             
             TOCR 2.0.4 and GOCR 0.48 are the latest release. They are available in SAFS and only 
             support English. Both two OCR owners claim to support more languages in next release. Chinese, 
             Japanese, and Korean are going to be supported in TOCR's next release 3.00.
			
       	         </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS SDCommands</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        imageFile -- Optional:NO
             The name of the image file used to detect text in it.
             <BR/>        outputFile -- Optional:NO
             The name of the text file used to store detected text.
              <BR/>        oCRId -- Optional:YES
             OCRId indicating the OCR used to recognize text.
             <BR/>        langId -- Optional:YES
             Optional LangId representing the language in use for selected OCR to recognize text. 
             <BR/>        scaleRatio -- Optional:YES
             Optional ScaleRatio indicating the scale ratio for resizing the original image.
             
    </UL>

     **********/
    static public DriverCommand saveTextFromImage (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "saveTextFromImage.parameters = null");
        DriverCommand dc = new DriverCommand(SAVETEXTFROMIMAGE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Change the file attribute for the file name provided to the value of the new file protection provided.
        
          Change the file attribute for the file name provided to the value of the new file protection provided. An integer containing the new attributes for the file. Here is a description of attributes that can be modified: 
          0 Normal file (Windows PC Only)
          1 Read-only file
          2 Hidden file (Windows PC Only)
          4 System file (Windows PC Only)
          32 Archive - file has changed since last backup (Windows PC Only)
          Note: Java-based support like RJ, TID, SDC currently only support setting one 
          file protection at a time--0, 1, 2, 3, 32. They do not yet support Integer values OR'd 
          together to combine settings in a single call.
          Note: On platforms other than windows we currently only support setting the READ-ONLY 
          attribute.
          
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param fileName  Optional:NO
              The file path and file name of the file change the file attribute.
            
     @param fileProtection  Optional:NO
              New value of the attribute of the file to be changed
            
     **********/
    static public DriverCommand setFileProtections (String fileName, String fileProtection) {

        if ( fileName == null ) throw new IllegalArgumentException ( "setFileProtections.fileName = null");
        if ( fileProtection == null ) throw new IllegalArgumentException ( "setFileProtections.fileProtection = null");
        DriverCommand dc = new DriverCommand(SETFILEPROTECTIONS_KEYWORD);
        dc.addParameter(fileName);
        dc.addParameter(fileProtection);
        return dc;
    }


    /*********** <pre>
          Change the file attribute for the file name provided to the value of the new file protection provided.
        
          Change the file attribute for the file name provided to the value of the new file protection provided. An integer containing the new attributes for the file. Here is a description of attributes that can be modified: 
          0 Normal file (Windows PC Only)
          1 Read-only file
          2 Hidden file (Windows PC Only)
          4 System file (Windows PC Only)
          32 Archive - file has changed since last backup (Windows PC Only)
          Note: Java-based support like RJ, TID, SDC currently only support setting one 
          file protection at a time--0, 1, 2, 3, 32. They do not yet support Integer values OR'd 
          together to combine settings in a single call.
          Note: On platforms other than windows we currently only support setting the READ-ONLY 
          attribute.
          
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fileName -- Optional:NO
              The file path and file name of the file change the file attribute.
            <BR/>        fileProtection -- Optional:NO
              New value of the attribute of the file to be changed
            
    </UL>

     **********/
    static public DriverCommand setFileProtections (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "setFileProtections.parameters = null");
        DriverCommand dc = new DriverCommand(SETFILEPROTECTIONS_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Write the specified number of characters to a file already opened for writing.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param fileNumber  Optional:NO
              The file number/identifier of the file to be written to.
            
     @param numberOfChars  Optional:NO
              The number of characters to write to the file;                 however, if this parameter is equal to 'all' then all                 of the characters from the expression list are written.
            
     @param expressionList  Optional:NO
              Expression List, if it begins with ^ then it is treated as a variable.
            
     **********/
    static public DriverCommand writeFileChars (String fileNumber, String numberOfChars, String expressionList) {

        if ( expressionList == null ) throw new IllegalArgumentException ( "writeFileChars.expressionList = null");
        if ( fileNumber == null ) throw new IllegalArgumentException ( "writeFileChars.fileNumber = null");
        if ( numberOfChars == null ) throw new IllegalArgumentException ( "writeFileChars.numberOfChars = null");
        DriverCommand dc = new DriverCommand(WRITEFILECHARS_KEYWORD);
        dc.addParameter(fileNumber);
        dc.addParameter(numberOfChars);
        dc.addParameter(expressionList);
        return dc;
    }


    /*********** <pre>
          Write the specified number of characters to a file already opened for writing.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fileNumber -- Optional:NO
              The file number/identifier of the file to be written to.
            <BR/>        numberOfChars -- Optional:NO
              The number of characters to write to the file;                 however, if this parameter is equal to 'all' then all                 of the characters from the expression list are written.
            <BR/>        expressionList -- Optional:NO
              Expression List, if it begins with ^ then it is treated as a variable.
            
    </UL>

     **********/
    static public DriverCommand writeFileChars (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "writeFileChars.parameters = null");
        DriverCommand dc = new DriverCommand(WRITEFILECHARS_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


}
