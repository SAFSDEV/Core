
/******************************************************************************
 * ScrollBarFunctions.java
 *
 * Copyright (C) SAS Institute, All rights reserved.
 * General Public License: https://www.gnu.org/licenses/gpl-3.0.en.html
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   ScrollBarFunctions.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaCommandModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe ScrollBarFunctions.xml XSLJavaCommandModel.xsl -o ScrollBarFunctions.java
 *
 ******************************************************************************/ 
package org.safs.model.commands;


import org.safs.model.ComponentFunction;


public class ScrollBarFunctions {

    /*****************
    Private Singleton Instance
    ****************/
    private static final ScrollBarFunctions singleton = new ScrollBarFunctions(); 

    /*****************
    Private Constructor
    Static class needing no instantiation.
    ****************/
    private ScrollBarFunctions() {}

    /*****************
    public Singleton to access class static methods via instance
    ****************/
    public static ScrollBarFunctions getInstance() { return singleton;}

    /** "OneDown" */
    static public final String ONEDOWN_KEYWORD = "OneDown";
    /** "OneLeft" */
    static public final String ONELeft_KEYWORD = "OneLeft";
    /** "OneRight" */
    static public final String ONERIGHT_KEYWORD = "OneRight";
    /** "OneUp" */
    static public final String ONEUP_KEYWORD = "OneUp";
    /** "PageDown" */
    static public final String PAGEDOWN_KEYWORD = "PageDown";
    /** "PageLeft" */
    static public final String PAGELEFT_KEYWORD = "PageLeft";
    /** "PageRight" */
    static public final String PAGERIGHT_KEYWORD = "PageRight";
    /** "PageUp" */
    static public final String PAGEUP_KEYWORD = "PageUp";


    /*********** <pre> 
                 Attempts to perform a ScrollLineDown on a scrollbar.
               
                Attempts to perform a ScrollLineDown on a scrollbar.  The input record 
                can optionally specify the number of iterations to perform the action.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>Google Android</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param integerValue  Optional:YES  DefaultVal:1 
                 Optional integer to specify how many times to perform the action.
              
     **********/
    static public ComponentFunction oneDown (String winname, String compname, String integerValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "oneDown.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "oneDown.compname = null");

        ComponentFunction cf = new ComponentFunction(ONEDOWN_KEYWORD, winname, compname);
        cf.addParameter(integerValue);
        return cf;
    }


    /*********** <pre> 
                 Attempts to perform a ScrollLeft on a scrollbar.
               
                Attempts to perform a ScrollLeft on a scrollbar.  The input record 
                can optionally specify the number of iterations to perform the action.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>Google Android</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param integerValue  Optional:YES  DefaultVal:1 
                 Optional integer to specify how many times to perform the action.
              
     **********/
    static public ComponentFunction oneLeft (String winname, String compname, String integerValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "oneLeft.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "oneLeft.compname = null");

        ComponentFunction cf = new ComponentFunction(ONELeft_KEYWORD, winname, compname);
        cf.addParameter(integerValue);
        return cf;
    }


    /*********** <pre> 
                 Attempts to perform a ScrollRight on a scrollbar.
               
                Attempts to perform a ScrollRight on a scrollbar.  The input record 
                can optionally specify the number of iterations to perform the action.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>Google Android</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param integerValue  Optional:YES  DefaultVal:1 
                 Optional integer to specify how many times to perform the action.
              
     **********/
    static public ComponentFunction oneRight (String winname, String compname, String integerValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "oneRight.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "oneRight.compname = null");

        ComponentFunction cf = new ComponentFunction(ONERIGHT_KEYWORD, winname, compname);
        cf.addParameter(integerValue);
        return cf;
    }


    /*********** <pre> 
                 Attempts to perform a ScrollLineUp on a scrollbar.
               
                Attempts to perform a ScrollLineUp on a scrollbar.  The input record 
                can optionally specify the number of iterations to perform the action.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>Google Android</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param integerValue  Optional:YES  DefaultVal:1 
                 Optional integer to specify how many times to perform the action.
              
     **********/
    static public ComponentFunction oneUp (String winname, String compname, String integerValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "oneUp.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "oneUp.compname = null");

        ComponentFunction cf = new ComponentFunction(ONEUP_KEYWORD, winname, compname);
        cf.addParameter(integerValue);
        return cf;
    }


    /*********** <pre> 
                 Attempts to perform a ScrollPageDown on a scrollbar.
               
                Attempts to perform a ScrollPageDown on a scrollbar.  The input record 
                can optionally specify the number of iterations to perform the action.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>Google Android</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param integerValue  Optional:YES  DefaultVal:1 
                 Optional integer to specify how many times to perform the action.
              
     **********/
    static public ComponentFunction pageDown (String winname, String compname, String integerValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "pageDown.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "pageDown.compname = null");

        ComponentFunction cf = new ComponentFunction(PAGEDOWN_KEYWORD, winname, compname);
        cf.addParameter(integerValue);
        return cf;
    }


    /*********** <pre> 
                 Attempts to perform a ScrollPageLeft on a scrollbar.
               
                Attempts to perform a ScrollPageLeft on a scrollbar.  The input record 
                can optionally specify the number of iterations to perform the action.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>Google Android</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param integerValue  Optional:YES  DefaultVal:1 
                 Optional integer to specify how many times to perform the action.
              
     **********/
    static public ComponentFunction pageLeft (String winname, String compname, String integerValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "pageLeft.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "pageLeft.compname = null");

        ComponentFunction cf = new ComponentFunction(PAGELEFT_KEYWORD, winname, compname);
        cf.addParameter(integerValue);
        return cf;
    }


    /*********** <pre> 
                 Attempts to perform a ScrollPageRight on a scrollbar.
               
                Attempts to perform a ScrollPageRight on a scrollbar.  The input record 
                can optionally specify the number of iterations to perform the action.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>Google Android</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param integerValue  Optional:YES  DefaultVal:1 
                 Optional integer to specify how many times to perform the action.
              
     **********/
    static public ComponentFunction pageRight (String winname, String compname, String integerValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "pageRight.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "pageRight.compname = null");

        ComponentFunction cf = new ComponentFunction(PAGERIGHT_KEYWORD, winname, compname);
        cf.addParameter(integerValue);
        return cf;
    }


    /*********** <pre> 
                 Attempts to perform a ScrollPageUp on a scrollbar.
               
                Attempts to perform a ScrollPageUp on a scrollbar.  The input record 
                can optionally specify the number of iterations to perform the action.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>Automated QA TestComplete</LI>
        <LI>Google Android</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param integerValue  Optional:YES  DefaultVal:1 
                 Optional integer to specify how many times to perform the action.
              
     **********/
    static public ComponentFunction pageUp (String winname, String compname, String integerValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "pageUp.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "pageUp.compname = null");

        ComponentFunction cf = new ComponentFunction(PAGEUP_KEYWORD, winname, compname);
        cf.addParameter(integerValue);
        return cf;
    }


}
