
/******************************************************************************
 * DDDriverDeprecatedCommands.java
 *
 * Copyright (c) by SAS Institute Inc., Cary, NC 27513
 * General Public License: http://www.opensource.org/licenses/gpl-license.php
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   DDDriverDeprecatedCommands.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaCommandModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe DDDriverDeprecatedCommands.xml XSLJavaCommandModel.xsl -o DDDriverDeprecatedCommands.java
 *
 ******************************************************************************/ 
package org.safs.model.commands;


import org.safs.model.DriverCommand;


public class DDDriverDeprecatedCommands {

    /*****************
    Private Singleton Instance
    ****************/
    private static final DDDriverDeprecatedCommands singleton = new DDDriverDeprecatedCommands(); 

    /*****************
    Private Constructor
    Static class needing no instantiation.
    ****************/
    private DDDriverDeprecatedCommands() {}

    /*****************
    public Singleton to access class static methods via instance
    ****************/
    public static DDDriverDeprecatedCommands getInstance() { return singleton;}

    /** "EndRequirement" */
    static public final String ENDREQUIREMENT_KEYWORD = "EndRequirement";
    /** "EndTestcase" */
    static public final String ENDTESTCASE_KEYWORD = "EndTestcase";
    /** "GetVariableValueEx" */
    static public final String GETVARIABLEVALUEEX_KEYWORD = "GetVariableValueEx";
    /** "SetRequirement" */
    static public final String SETREQUIREMENT_KEYWORD = "SetRequirement";
    /** "SetTestcase" */
    static public final String SETTESTCASE_KEYWORD = "SetTestcase";


    /*********** <pre>
        DEPRECATED. Use StopRequirement instead.
          Log/process the end of testing associated with a user-defined Requirement.
          Currently no processing is done with this.  Only a log entry occurs.
          Use StopRequirement which now implements the original intent of this command.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param requirementID  Optional:YES
              The user-defined ID of the Requirement
     **********/
    static public DriverCommand endRequirement (String requirementID) {

        DriverCommand dc = new DriverCommand(ENDREQUIREMENT_KEYWORD);
        dc.addParameter(requirementID);
        return dc;
    }


    /*********** <pre>
        DEPRECATED. Use StopTestCase instead.
          Log/process the end of testing associated with a user-defined Testcase.
          Currently no processing is done with this.  Only a log entry occurs.
          Use StopTestCase which now implements the original intent of this command.
          
          In addition to the above, WRAFS will close the node created by the SETTESTCASE
          command in the log file.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param testCaseID  Optional:YES
              The user-defined ID of the Testcase.
     **********/
    static public DriverCommand endTestcase (String testCaseID) {

        DriverCommand dc = new DriverCommand(ENDTESTCASE_KEYWORD);
        dc.addParameter(testCaseID);
        return dc;
    }


    /*********** <pre> 
                 Replaced by CopyVariableValueEx    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param sourceVariable  Optional:NO 
                 The name of the variable to retrieve the value of
              
     @param destinationVariable  Optional:NO 
                 The name of the variable to hold the retrieved value
              
     **********/
    static public DriverCommand getVariableValueEx (String sourceVariable, String destinationVariable) {

        if ( destinationVariable == null ) throw new IllegalArgumentException ( "getVariableValueEx.destinationVariable = null");
        if ( sourceVariable == null ) throw new IllegalArgumentException ( "getVariableValueEx.sourceVariable = null");
        DriverCommand dc = new DriverCommand(GETVARIABLEVALUEEX_KEYWORD);
        dc.addParameter(sourceVariable);
        dc.addParameter(destinationVariable);
        return dc;
    }


    /*********** <pre> 
                 Replaced by CopyVariableValueEx    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        sourceVariable -- Optional:NO 
                 The name of the variable to retrieve the value of
              <BR/>        destinationVariable -- Optional:NO 
                 The name of the variable to hold the retrieved value
              
    </UL>

     **********/
    static public DriverCommand getVariableValueEx (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getVariableValueEx.parameters = null");
        DriverCommand dc = new DriverCommand(GETVARIABLEVALUEEX_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
        DEPRECATED. Use StartRequirement instead.
          Log/process the beginning of testing associated with a user-defined Requirement.
          Currently no processing is done with this.  Only a log entry occurs.
          Use StartRequirement which now implements the original intent of this command.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param requirementID  Optional:NO
              The user-defined ID of the Requirement
     @param description  Optional:YES
              A description of the Requirement
     **********/
    static public DriverCommand setRequirement (String requirementID, String description) {

        if ( requirementID == null ) throw new IllegalArgumentException ( "setRequirement.requirementID = null");
        DriverCommand dc = new DriverCommand(SETREQUIREMENT_KEYWORD);
        dc.addParameter(requirementID);
        dc.addParameter(description);
        return dc;
    }


    /*********** <pre>
        DEPRECATED. Use StartRequirement instead.
          Log/process the beginning of testing associated with a user-defined Requirement.
          Currently no processing is done with this.  Only a log entry occurs.
          Use StartRequirement which now implements the original intent of this command.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        requirementID -- Optional:NO
              The user-defined ID of the Requirement<BR/>        description -- Optional:YES
              A description of the Requirement
    </UL>

     **********/
    static public DriverCommand setRequirement (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "setRequirement.parameters = null");
        DriverCommand dc = new DriverCommand(SETREQUIREMENT_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
        DEPRECATED. Use StartTestCase instead.
          Log/process the beginning of testing associated with a user-defined Testcase.
          Currently no processing is done with this.  Only a log entry occurs.
          Use StartTestCase which now implements the original intent of this command.
          
          In addition to the above functionality, WRAFS will create a new node in the 
          log used by Winrunner. Care should be taken to only use one SETTESTCASE at a time,
          nesting these will have unpredictable results.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param testCaseID  Optional:NO
              The user-defined ID of the Testcase.
     @param description  Optional:YES
              A description of the Testcase
     **********/
    static public DriverCommand setTestcase (String testCaseID, String description) {

        if ( testCaseID == null ) throw new IllegalArgumentException ( "setTestcase.testCaseID = null");
        DriverCommand dc = new DriverCommand(SETTESTCASE_KEYWORD);
        dc.addParameter(testCaseID);
        dc.addParameter(description);
        return dc;
    }


    /*********** <pre>
        DEPRECATED. Use StartTestCase instead.
          Log/process the beginning of testing associated with a user-defined Testcase.
          Currently no processing is done with this.  Only a log entry occurs.
          Use StartTestCase which now implements the original intent of this command.
          
          In addition to the above functionality, WRAFS will create a new node in the 
          log used by Winrunner. Care should be taken to only use one SETTESTCASE at a time,
          nesting these will have unpredictable results.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        testCaseID -- Optional:NO
              The user-defined ID of the Testcase.<BR/>        description -- Optional:YES
              A description of the Testcase
    </UL>

     **********/
    static public DriverCommand setTestcase (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "setTestcase.parameters = null");
        DriverCommand dc = new DriverCommand(SETTESTCASE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


}
