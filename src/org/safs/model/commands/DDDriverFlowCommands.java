
/******************************************************************************
 * DDDriverFlowCommands.java
 *
 * Copyright (C) SAS Institute, All rights reserved.
 * General Public License: https://www.gnu.org/licenses/gpl-3.0.en.html
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   DDDriverFlowCommands.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaCommandModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe DDDriverFlowCommands.xml XSLJavaCommandModel.xsl -o DDDriverFlowCommands.java
 *
 ******************************************************************************/ 
package org.safs.model.commands;


import org.safs.model.DriverCommand;


public class DDDriverFlowCommands {

    /*****************
    Private Singleton Instance
    ****************/
    private static final DDDriverFlowCommands singleton = new DDDriverFlowCommands(); 

    /*****************
    Private Constructor
    Static class needing no instantiation.
    ****************/
    private DDDriverFlowCommands() {}

    /*****************
    public Singleton to access class static methods via instance
    ****************/
    public static DDDriverFlowCommands getInstance() { return singleton;}

    /** "CallCycle" */
    static public final String CALLCYCLE_KEYWORD = "CallCycle";
    /** "CallJUnit" */
    static public final String CALLJUNIT_KEYWORD = "CallJUnit";
    /** "CallScript" */
    static public final String CALLSCRIPT_KEYWORD = "CallScript";
    /** "CallStep" */
    static public final String CALLSTEP_KEYWORD = "CallStep";
    /** "CallSuite" */
    static public final String CALLSUITE_KEYWORD = "CallSuite";
    /** "CallTestNG" */
    static public final String CALLTESTNG_KEYWORD = "CallTestNG";
    /** "ExitCycle" */
    static public final String EXITCYCLE_KEYWORD = "ExitCycle";
    /** "ExitSuite" */
    static public final String EXITSUITE_KEYWORD = "ExitSuite";
    /** "ExitTable" */
    static public final String EXITTABLE_KEYWORD = "ExitTable";
    /** "GotoBlockID" */
    static public final String GOTOBLOCKID_KEYWORD = "GotoBlockID";
    /** "OnContainsGotoBlockID" */
    static public final String ONCONTAINSGOTOBLOCKID_KEYWORD = "OnContainsGotoBlockID";
    /** "OnDirectoryExistGotoBlockID" */
    static public final String OnDirectoryExistGotoBlockID_KEYWORD = "OnDirectoryExistGotoBlockID";
    /** "OnDirectoryNotExistGotoBlockID" */
    static public final String ONDIRECTORYNOTEXISTGOTOBLOCKID_KEYWORD = "OnDirectoryNotExistGotoBlockID";
    /** "OnEqualGotoBlockID" */
    static public final String ONEQUALGOTOBLOCKID_KEYWORD = "OnEqualGotoBlockID";
    /** "OnFileEOFGotoBlockID" */
    static public final String ONFILEEOFGOTOBLOCKID_KEYWORD = "OnFileEOFGotoBlockID";
    /** "OnFileExistGotoBlockID" */
    static public final String ONFILEEXISTGOTOBLOCKID_KEYWORD = "OnFileExistGotoBlockID";
    /** "OnFileNotExistGotoBlockID" */
    static public final String ONFILENOTEXISTGOTOBLOCKID_KEYWORD = "OnFileNotExistGotoBlockID";
    /** "OnGreaterThanGotoBlockID" */
    static public final String ONGREATERTHANGOTOBLOCKID_KEYWORD = "OnGreaterThanGotoBlockID";
    /** "OnGUIExistsGotoBlockID" */
    static public final String ONGUIEXISTSGOTOBLOCKID_KEYWORD = "OnGUIExistsGotoBlockID";
    /** "OnGUINotExistGotoBlockID" */
    static public final String ONGUINOTEXISTGOTOBLOCKID_KEYWORD = "OnGUINotExistGotoBlockID";
    /** "OnInRangeGotoBlockID" */
    static public final String ONINRANGEGOTOBLOCKID_KEYWORD = "OnInRangeGotoBlockID";
    /** "OnLessThanGotoBlockID" */
    static public final String ONLESSTHANGOTOBLOCKID_KEYWORD = "OnLessThanGotoBlockID";
    /** "OnMenuItemContainsStateGotoBlockID" */
    static public final String ONMENUITEMCONTAINSSTATEGOTOBLOCKID_KEYWORD = "OnMenuItemContainsStateGotoBlockID";
    /** "OnNotContainsGotoBlockID" */
    static public final String ONNOTCONTAINSGOTOBLOCKID_KEYWORD = "OnNotContainsGotoBlockID";
    /** "OnNotEqualGotoBlockID" */
    static public final String ONNOTEQUALGOTOBLOCKID_KEYWORD = "OnNotEqualGotoBlockID";
    /** "OnNotGreaterThanGotoBlockID" */
    static public final String ONNOTGREATERTHANGOTOBLOCKID_KEYWORD = "OnNotGreaterThanGotoBlockID";
    /** "OnNotInRangeGotoBlockID" */
    static public final String ONNOTINRANGEGOTOBLOCKID_KEYWORD = "OnNotInRangeGotoBlockID";
    /** "OnNotLessThanGotoBlockID" */
    static public final String ONNOTLESSTHANGOTOBLOCKID_KEYWORD = "OnNotLessThanGotoBlockID";
    /** "OnPartialMenuItemContainsStateGotoBlockID" */
    static public final String ONPARTIALMENUITEMCONTAINSSTATEGOTOBLOCKID_KEYWORD = "OnPartialMenuItemContainsStateGotoBlockID";
    /** "OnRegistryKeyExistGotoBlockID" */
    static public final String ONREGISTRYKEYEXISTGOTOBLOCKID_KEYWORD = "OnRegistryKeyExistGotoBlockID";
    /** "OnRegistryKeyNotExistGotoBlockID" */
    static public final String ONREGISTRYKEYNOTEXISTGOTOBLOCKID_KEYWORD = "OnRegistryKeyNotExistGotoBlockID";
    /** "SetExitTableBlock" */
    static public final String SETEXITTABLEBLOCK_KEYWORD = "SetExitTableBlock";
    /** "SetGeneralScriptFailureBlock" */
    static public final String SETGENERALSCRIPTFAILUREBLOCK_KEYWORD = "SetGeneralScriptFailureBlock";
    /** "SetInvalidFileIOBlock" */
    static public final String SETINVALIDFILEIOBLOCK_KEYWORD = "SetInvalidFileIOBlock";
    /** "SetNoScriptFailureBlock" */
    static public final String SETNOSCRIPTFAILUREBLOCK_KEYWORD = "SetNoScriptFailureBlock";
    /** "SetScriptNotExecutedBlock" */
    static public final String SETSCRIPTNOTEXECUTEDBLOCK_KEYWORD = "SetScriptNotExecutedBlock";
    /** "SetScriptWarningBlock" */
    static public final String SETSCRIPTWARNINGBLOCK_KEYWORD = "SetScriptWarningBlock";
    /** "UseLocalFlowControl" */
    static public final String USELOCALFLOWCONTROL_KEYWORD = "UseLocalFlowControl";


    /*********** <pre> 
                 Invoke a Cycle table (from StepDriver or SuiteDriver)
               
                 Since the Cycle is executed as a driver command 
                 and NOT as a test record, the call to the 
                 Cycle itself is not counted as a test pass or a test fail.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param cycleName  Optional:NO 
                 The name of the Cycle table to execute.
              
     @param cycleSeparator  Optional:YES  DefaultVal: 
                 The field separator used by the table--if required.
              
     @param parameterName  Optional:YES  DefaultVal:AValue 
                 One or more parameter values to send to the Cycle--each in their own field.
              
     **********/
    static public DriverCommand callCycle (String cycleName, String cycleSeparator, String parameterName) {

        if ( cycleName == null ) throw new IllegalArgumentException ( "callCycle.cycleName = null");
        DriverCommand dc = new DriverCommand(CALLCYCLE_KEYWORD);
        dc.addParameter(cycleName);
        dc.addParameter(cycleSeparator);
        dc.addParameter(parameterName);
        return dc;
    }


    /*********** <pre> 
                 Invoke a Cycle table (from StepDriver or SuiteDriver)
               
                 Since the Cycle is executed as a driver command 
                 and NOT as a test record, the call to the 
                 Cycle itself is not counted as a test pass or a test fail.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        cycleName -- Optional:NO 
                 The name of the Cycle table to execute.
              <BR/>        cycleSeparator -- Optional:YES  DefaultVal: 
                 The field separator used by the table--if required.
              <BR/>        parameterName -- Optional:YES  DefaultVal:AValue 
                 One or more parameter values to send to the Cycle--each in their own field.
              
    </UL>

     **********/
    static public DriverCommand callCycle (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "callCycle.parameters = null");
        DriverCommand dc = new DriverCommand(CALLCYCLE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Invoke one or more JUnit tests using the provided Class name(s).
               
                 Because JUnit is a testing framework; test_record, test_passes, and test_failure counts within the status counters 
                 will be updated when possible.
                 
                 If properly configured with SAFS RuntimeDataAwareness (dependency injection of SAFS Driver instances) the JUnit 
                 test has full access to all SAFS services including SAFS App Map data and SAFS Variable storage.
                 
                 JUnit tests can be intermixed with other SAFS tests.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param className  Optional:NO 
                 The name of one or more Classes to execute.
              
     **********/
    static public DriverCommand callJUnit (String className) {

        if ( className == null ) throw new IllegalArgumentException ( "callJUnit.className = null");
        DriverCommand dc = new DriverCommand(CALLJUNIT_KEYWORD);
        dc.addParameter(className);
        return dc;
    }


    /*********** <pre> 
                 Invoke a custom script with passed parameters/variables, if desired.
               
                 Since the script is executed as a Driver Command and NOT a test; 
                 test_record, test_passes, and test_failures information within the status counters 
                 are not updated.
                 For Rational Robot, if the called script wishes to record 
                 tests attempted, pass, and failure counts then it must 
                 do so itself by updating the ScriptStatusInfo fields 
                 accordingly.
                 The name of the script must not include the file extension.
                 Any number of parameters can be passed to the script.
                 These parameters are passed as DDVariables and\or SAFSVARS variables.
                 The variables and their values are available to the script and all of SAFS.
                 These parameters are usually specific to each called script.  The script can also 
                 set variable values for use by SAFS test tables.
                 With Robot, the script can get/set variable values from the DDVariableStore.
                 With Rational Functional Tester, the custom script should follow this Script Javadoc.
                 For Apple IOS, consult the SAFS IOS Developer's Guide.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>OpenQA Selenium</LI>
        <LI>Rational Robot</LI>
        <LI>Apple IOS</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param scriptName  Optional:NO 
                 The name of the Script to execute.
              
     @param parameterName  Optional:YES  DefaultVal:AValue 
                 One or more parameter values to send to the script--each in their own field.
              
     **********/
    static public DriverCommand callScript (String scriptName, String parameterName) {

        if ( scriptName == null ) throw new IllegalArgumentException ( "callScript.scriptName = null");
        DriverCommand dc = new DriverCommand(CALLSCRIPT_KEYWORD);
        dc.addParameter(scriptName);
        dc.addParameter(parameterName);
        return dc;
    }


    /*********** <pre> 
                 Invoke a custom script with passed parameters/variables, if desired.
               
                 Since the script is executed as a Driver Command and NOT a test; 
                 test_record, test_passes, and test_failures information within the status counters 
                 are not updated.
                 For Rational Robot, if the called script wishes to record 
                 tests attempted, pass, and failure counts then it must 
                 do so itself by updating the ScriptStatusInfo fields 
                 accordingly.
                 The name of the script must not include the file extension.
                 Any number of parameters can be passed to the script.
                 These parameters are passed as DDVariables and\or SAFSVARS variables.
                 The variables and their values are available to the script and all of SAFS.
                 These parameters are usually specific to each called script.  The script can also 
                 set variable values for use by SAFS test tables.
                 With Robot, the script can get/set variable values from the DDVariableStore.
                 With Rational Functional Tester, the custom script should follow this Script Javadoc.
                 For Apple IOS, consult the SAFS IOS Developer's Guide.
                 
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>OpenQA Selenium</LI>
        <LI>Rational Robot</LI>
        <LI>Apple IOS</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        scriptName -- Optional:NO 
                 The name of the Script to execute.
              <BR/>        parameterName -- Optional:YES  DefaultVal:AValue 
                 One or more parameter values to send to the script--each in their own field.
              
    </UL>

     **********/
    static public DriverCommand callScript (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "callScript.parameters = null");
        DriverCommand dc = new DriverCommand(CALLSCRIPT_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Invoke a Step table from within another Step table (from StepDriver).
               
                 The command is only used at the Step level.  You do not use this 
                 command within Suites or Cycles.
                 Since the Step table is executed as a driver command by StepDriver 
                 and NOT as a CycleDriver or SuiteDriver test record, the call to the 
                 Step table itself is not counted as a test pass or a test fail.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param stepName  Optional:NO 
                 The name of the StepTable to execute.
              
     @param stepSeparator  Optional:YES  DefaultVal: 
                 The field separator used by the Step table--if required.
              
     @param parameterName  Optional:YES  DefaultVal:AValue 
                 One or more parameter values to send to the table--each in their own field.
              
     **********/
    static public DriverCommand callStep (String stepName, String stepSeparator, String parameterName) {

        if ( stepName == null ) throw new IllegalArgumentException ( "callStep.stepName = null");
        DriverCommand dc = new DriverCommand(CALLSTEP_KEYWORD);
        dc.addParameter(stepName);
        dc.addParameter(stepSeparator);
        dc.addParameter(parameterName);
        return dc;
    }


    /*********** <pre> 
                 Invoke a Step table from within another Step table (from StepDriver).
               
                 The command is only used at the Step level.  You do not use this 
                 command within Suites or Cycles.
                 Since the Step table is executed as a driver command by StepDriver 
                 and NOT as a CycleDriver or SuiteDriver test record, the call to the 
                 Step table itself is not counted as a test pass or a test fail.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        stepName -- Optional:NO 
                 The name of the StepTable to execute.
              <BR/>        stepSeparator -- Optional:YES  DefaultVal: 
                 The field separator used by the Step table--if required.
              <BR/>        parameterName -- Optional:YES  DefaultVal:AValue 
                 One or more parameter values to send to the table--each in their own field.
              
    </UL>

     **********/
    static public DriverCommand callStep (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "callStep.parameters = null");
        DriverCommand dc = new DriverCommand(CALLSTEP_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Invoke a Suite table (from StepDriver or SuiteDriver)
               
                 You cannot use CallSuite in a CycleDriver test table.
                 Since the Suite is executed as a driver command by SuiteDriver or 
                 StepDriver and NOT as a CycleDriver test record, the call to the 
                 Suite itself is not counted as a test pass or a test fail.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param suiteName  Optional:NO 
                 The name of the Suite to execute.
              
     @param suiteSeparator  Optional:YES  DefaultVal: 
                 The field separator used by the Suite--if required.
              
     @param parameterName  Optional:YES  DefaultVal:AValue 
                 One or more parameter values to send to the suite--each in their own field.
              
     **********/
    static public DriverCommand callSuite (String suiteName, String suiteSeparator, String parameterName) {

        if ( suiteName == null ) throw new IllegalArgumentException ( "callSuite.suiteName = null");
        DriverCommand dc = new DriverCommand(CALLSUITE_KEYWORD);
        dc.addParameter(suiteName);
        dc.addParameter(suiteSeparator);
        dc.addParameter(parameterName);
        return dc;
    }


    /*********** <pre> 
                 Invoke a Suite table (from StepDriver or SuiteDriver)
               
                 You cannot use CallSuite in a CycleDriver test table.
                 Since the Suite is executed as a driver command by SuiteDriver or 
                 StepDriver and NOT as a CycleDriver test record, the call to the 
                 Suite itself is not counted as a test pass or a test fail.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        suiteName -- Optional:NO 
                 The name of the Suite to execute.
              <BR/>        suiteSeparator -- Optional:YES  DefaultVal: 
                 The field separator used by the Suite--if required.
              <BR/>        parameterName -- Optional:YES  DefaultVal:AValue 
                 One or more parameter values to send to the suite--each in their own field.
              
    </UL>

     **********/
    static public DriverCommand callSuite (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "callSuite.parameters = null");
        DriverCommand dc = new DriverCommand(CALLSUITE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Invoke TestNG tests using the provided TestNG parameters.
              
                 
                 If properly configured with SAFS RuntimeDataAwareness (dependency injection of SAFS Driver instances) the TestNG 
                 test has full access to all SAFS services including SAFS App Map data and SAFS Variable storage.
                 
                 TestNG tests can be intermixed with other SAFS tests.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param testNGParameters  Optional:NO 
                 The parameters accepted by TestNG.
              
     **********/
    static public DriverCommand callTestNG (String testNGParameters) {

        if ( testNGParameters == null ) throw new IllegalArgumentException ( "callTestNG.testNGParameters = null");
        DriverCommand dc = new DriverCommand(CALLTESTNG_KEYWORD);
        dc.addParameter(testNGParameters);
        return dc;
    }


    /*********** <pre> 
                 Exit the currently running Step, Suite, and/or Cycle table.
               
                 Exit the currently running Step, Suite, and/or Cycle table.
                 Generally called from Step or Suite Driver to exit or abort the entire 
                 Cycle test currently running.
                 
                 The Step or Suite table containing the command is exited.  If an ExitTable 
                 processing block has been set by SetExitTableBlock then that block 
                 will be executed.  Otherwise, the table will immediately exit.  
                 
                 Any Suite and/or Cycle table that invoked the table will also be exited.  
                 If an ExitTable processing block has been set by SetExitTableBlock for the table 
                 then that block will be executed.  Otherwise, the table will immediately exit.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     **********/
    static public DriverCommand exitCycle () {

        DriverCommand dc = new DriverCommand(EXITCYCLE_KEYWORD);
        return dc;
    }


    /*********** <pre> 
                 Exit the currently running Step and/or Suite table.
               
                 Exit the currently running Step and/or Suite table.
                 Generally only called from Step Driver to exit the current Step 
                 table AND the Suite that invoked it.  The command should have no 
                 effect inside a Cycle table.
                 
                 The Step or Suite table containing the command is exited.  If an ExitTable 
                 processing block has been set by SetExitTableBlock then that block 
                 will be executed.  Otherwise, the table will immediately exit.  
                 
                 If the table containing the command was a Step table, then the Suite that 
                 called the Step table will also be exited.  If an ExitTable 
                 processing block has been set by SetExitTableBlock for the Suite,
                 then that block will be executed.  Otherwise, the Suite will immediately exit.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     **********/
    static public DriverCommand exitSuite () {

        DriverCommand dc = new DriverCommand(EXITSUITE_KEYWORD);
        return dc;
    }


    /*********** <pre> 
                 Exit the currently running Step, Suite, or Cycle table.
               
                 Exit the currently running Step, Suite, or Cycle table.
                 The table containing the command is exited.  No other table 
                 is automatically exited because of this command.  If an ExitTable 
                 processing block has been set by SetExitTableBlock then that block 
                 will be executed.  Otherwise, the table will immediately exit.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     **********/
    static public DriverCommand exitTable () {

        DriverCommand dc = new DriverCommand(EXITTABLE_KEYWORD);
        return dc;
    }


    /*********** <pre> 
                 Goto a named block in the current table.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param blockID  Optional:NO 
                 The name of the block to Goto.
              
     **********/
    static public DriverCommand gotoBlockID (String blockID) {

        if ( blockID == null ) throw new IllegalArgumentException ( "gotoBlockID.blockID = null");
        DriverCommand dc = new DriverCommand(GOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block in the current table if value2 is contained within value1.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param blockID  Optional:NO 
                 The name of the block to Goto.
              
     @param value1  Optional:NO 
                 The value to be searched for the Value2 substring
              
     @param value2  Optional:NO 
                 A string to search Value1 for an occurance of
              
     @param caseSensitive  Optional:YES 
                 Set to 'CaseInsensitive' so comparisons are NOT case-sensitive.
                 Comparisons are case-sensitive by default.
              
     **********/
    static public DriverCommand onContainsGotoBlockID (String blockID, String value1, String value2, String caseSensitive) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onContainsGotoBlockID.blockID = null");
        if ( value1 == null ) throw new IllegalArgumentException ( "onContainsGotoBlockID.value1 = null");
        if ( value2 == null ) throw new IllegalArgumentException ( "onContainsGotoBlockID.value2 = null");
        DriverCommand dc = new DriverCommand(ONCONTAINSGOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(value1);
        dc.addParameter(value2);
        dc.addParameter(caseSensitive);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block in the current table if value2 is contained within value1.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO 
                 The name of the block to Goto.
              <BR/>        value1 -- Optional:NO 
                 The value to be searched for the Value2 substring
              <BR/>        value2 -- Optional:NO 
                 A string to search Value1 for an occurance of
              <BR/>        caseSensitive -- Optional:YES 
                 Set to 'CaseInsensitive' so comparisons are NOT case-sensitive.
                 Comparisons are case-sensitive by default.
              
    </UL>

     **********/
    static public DriverCommand onContainsGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onContainsGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(ONCONTAINSGOTOBLOCKID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block in the current table if the directory exists.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param blockID  Optional:NO 
                 The name of the block to Goto.
              
     @param directoryName  Optional:NO 
                 The directory name of the directory relative to Datapool/Test to be verified for existance.  Case sensitivity is handled by the underlying operating system (i.e. a case sensitive platform makes this keyword case sensitive).
              
     **********/
    static public DriverCommand onDirectoryExistGotoBlockID (String blockID, String directoryName) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onDirectoryExistGotoBlockID.blockID = null");
        if ( directoryName == null ) throw new IllegalArgumentException ( "onDirectoryExistGotoBlockID.directoryName = null");
        DriverCommand dc = new DriverCommand(OnDirectoryExistGotoBlockID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(directoryName);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block in the current table if the directory exists.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO 
                 The name of the block to Goto.
              <BR/>        directoryName -- Optional:NO 
                 The directory name of the directory relative to Datapool/Test to be verified for existance.  Case sensitivity is handled by the underlying operating system (i.e. a case sensitive platform makes this keyword case sensitive).
              
    </UL>

     **********/
    static public DriverCommand onDirectoryExistGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onDirectoryExistGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(OnDirectoryExistGotoBlockID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block in the current table if the Directory does not exist.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param blockID  Optional:NO 
                 The name of the block to Goto.
              
     @param directoryName  Optional:NO 
                 The directory name relatvie to Datapool/Text of the directory to be verified for non existance.  Case sensitivity is handled by the underlying operating system (i.e. a case sensitive platform makes this keyword case sensitive).
              
     **********/
    static public DriverCommand onDirectoryNotExistGotoBlockID (String blockID, String directoryName) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onDirectoryNotExistGotoBlockID.blockID = null");
        if ( directoryName == null ) throw new IllegalArgumentException ( "onDirectoryNotExistGotoBlockID.directoryName = null");
        DriverCommand dc = new DriverCommand(ONDIRECTORYNOTEXISTGOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(directoryName);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block in the current table if the Directory does not exist.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO 
                 The name of the block to Goto.
              <BR/>        directoryName -- Optional:NO 
                 The directory name relatvie to Datapool/Text of the directory to be verified for non existance.  Case sensitivity is handled by the underlying operating system (i.e. a case sensitive platform makes this keyword case sensitive).
              
    </UL>

     **********/
    static public DriverCommand onDirectoryNotExistGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onDirectoryNotExistGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(ONDIRECTORYNOTEXISTGOTOBLOCKID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block in the current table if two values are equal.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param blockID  Optional:NO 
                 The name of the block to Goto.
              
     @param value1  Optional:NO 
                 The first value for the comparison.
              
     @param value2  Optional:NO 
                 The second value for the comparison.
              
     @param caseSensitive  Optional:YES 
                 Set to 'CaseInsensitive' so comparisons are NOT case-sensitive.
                 Comparisons are case-sensitive by default.
              
     **********/
    static public DriverCommand onEqualGotoBlockID (String blockID, String value1, String value2, String caseSensitive) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onEqualGotoBlockID.blockID = null");
        if ( value1 == null ) throw new IllegalArgumentException ( "onEqualGotoBlockID.value1 = null");
        if ( value2 == null ) throw new IllegalArgumentException ( "onEqualGotoBlockID.value2 = null");
        DriverCommand dc = new DriverCommand(ONEQUALGOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(value1);
        dc.addParameter(value2);
        dc.addParameter(caseSensitive);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block in the current table if two values are equal.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO 
                 The name of the block to Goto.
              <BR/>        value1 -- Optional:NO 
                 The first value for the comparison.
              <BR/>        value2 -- Optional:NO 
                 The second value for the comparison.
              <BR/>        caseSensitive -- Optional:YES 
                 Set to 'CaseInsensitive' so comparisons are NOT case-sensitive.
                 Comparisons are case-sensitive by default.
              
    </UL>

     **********/
    static public DriverCommand onEqualGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onEqualGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(ONEQUALGOTOBLOCKID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
          Goto the named block in the current table if the file is at EOF.
            </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param blockID  Optional:NO
              The name of the block to Goto.
            
     @param fileNumber  Optional:NO
              The file number of the file to be verified for EOF.
            
     **********/
    static public DriverCommand onFileEOFGotoBlockID (String blockID, String fileNumber) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onFileEOFGotoBlockID.blockID = null");
        if ( fileNumber == null ) throw new IllegalArgumentException ( "onFileEOFGotoBlockID.fileNumber = null");
        DriverCommand dc = new DriverCommand(ONFILEEOFGOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(fileNumber);
        return dc;
    }


    /*********** <pre>
          Goto the named block in the current table if the file is at EOF.
            </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO
              The name of the block to Goto.
            <BR/>        fileNumber -- Optional:NO
              The file number of the file to be verified for EOF.
            
    </UL>

     **********/
    static public DriverCommand onFileEOFGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onFileEOFGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(ONFILEEOFGOTOBLOCKID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block in the current table if the file exists.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param blockID  Optional:NO 
                 The name of the block to Goto.
              
     @param fileName  Optional:NO 
                 The file name of the file relative to Datapool/Test to be verified for existance.  Case sensitivity is handled by the underlying operating system (i.e. a case sensitive platform makes this keyword case sensitive).
              
     **********/
    static public DriverCommand onFileExistGotoBlockID (String blockID, String fileName) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onFileExistGotoBlockID.blockID = null");
        if ( fileName == null ) throw new IllegalArgumentException ( "onFileExistGotoBlockID.fileName = null");
        DriverCommand dc = new DriverCommand(ONFILEEXISTGOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(fileName);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block in the current table if the file exists.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO 
                 The name of the block to Goto.
              <BR/>        fileName -- Optional:NO 
                 The file name of the file relative to Datapool/Test to be verified for existance.  Case sensitivity is handled by the underlying operating system (i.e. a case sensitive platform makes this keyword case sensitive).
              
    </UL>

     **********/
    static public DriverCommand onFileExistGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onFileExistGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(ONFILEEXISTGOTOBLOCKID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block in the current table if the file does not exist.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param blockID  Optional:NO 
                 The name of the block to Goto.
              
     @param fileName  Optional:NO 
                 The file name of the file relative to Datapool/Test to be verified for existance.  Case sensitivity is handled by the underlying operating system (i.e. a case sensitive platform makes this keyword case sensitive).
              
     **********/
    static public DriverCommand onFileNotExistGotoBlockID (String blockID, String fileName) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onFileNotExistGotoBlockID.blockID = null");
        if ( fileName == null ) throw new IllegalArgumentException ( "onFileNotExistGotoBlockID.fileName = null");
        DriverCommand dc = new DriverCommand(ONFILENOTEXISTGOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(fileName);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block in the current table if the file does not exist.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO 
                 The name of the block to Goto.
              <BR/>        fileName -- Optional:NO 
                 The file name of the file relative to Datapool/Test to be verified for existance.  Case sensitivity is handled by the underlying operating system (i.e. a case sensitive platform makes this keyword case sensitive).
              
    </UL>

     **********/
    static public DriverCommand onFileNotExistGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onFileNotExistGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(ONFILENOTEXISTGOTOBLOCKID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block in the current table if value1 is greater than value2.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param blockID  Optional:NO 
                 The name of the block to Goto.
              
     @param value1  Optional:NO 
                 The value to be compared.
              
     @param value2  Optional:NO 
                 The value to be compared against.
              
     @param caseSensitive  Optional:YES 
                 Set to 'CaseInsensitive' so comparisons are NOT case-sensitive.
                 Comparisons are case-sensitive by default.
              
     **********/
    static public DriverCommand onGreaterThanGotoBlockID (String blockID, String value1, String value2, String caseSensitive) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onGreaterThanGotoBlockID.blockID = null");
        if ( value1 == null ) throw new IllegalArgumentException ( "onGreaterThanGotoBlockID.value1 = null");
        if ( value2 == null ) throw new IllegalArgumentException ( "onGreaterThanGotoBlockID.value2 = null");
        DriverCommand dc = new DriverCommand(ONGREATERTHANGOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(value1);
        dc.addParameter(value2);
        dc.addParameter(caseSensitive);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block in the current table if value1 is greater than value2.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO 
                 The name of the block to Goto.
              <BR/>        value1 -- Optional:NO 
                 The value to be compared.
              <BR/>        value2 -- Optional:NO 
                 The value to be compared against.
              <BR/>        caseSensitive -- Optional:YES 
                 Set to 'CaseInsensitive' so comparisons are NOT case-sensitive.
                 Comparisons are case-sensitive by default.
              
    </UL>

     **********/
    static public DriverCommand onGreaterThanGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onGreaterThanGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(ONGREATERTHANGOTOBLOCKID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
                 Goto the named block in the current table if a GUI component exists.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>Apple IOS</LI>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param blockID  Optional:NO
                 The name of the block to Goto.
              
     @param windowID  Optional:NO
                 A Window reference from the app map.
              
     @param componentID  Optional:NO
                 A reference from the app map for the Component within the Window.
              
     @param timeOut  Optional:YES  DefaultVal:15
                 Timeout value in seconds before exiting automatically (no branch).
              
     **********/
    static public DriverCommand onGUIExistsGotoBlockID (String blockID, String windowID, String componentID, String timeOut) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onGUIExistsGotoBlockID.blockID = null");
        if ( componentID == null ) throw new IllegalArgumentException ( "onGUIExistsGotoBlockID.componentID = null");
        if ( windowID == null ) throw new IllegalArgumentException ( "onGUIExistsGotoBlockID.windowID = null");
        DriverCommand dc = new DriverCommand(ONGUIEXISTSGOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(windowID);
        dc.addParameter(componentID);
        dc.addParameter(timeOut);
        return dc;
    }


    /*********** <pre>
                 Goto the named block in the current table if a GUI component exists.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>Apple IOS</LI>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO
                 The name of the block to Goto.
              <BR/>        windowID -- Optional:NO
                 A Window reference from the app map.
              <BR/>        componentID -- Optional:NO
                 A reference from the app map for the Component within the Window.
              <BR/>        timeOut -- Optional:YES  DefaultVal:15
                 Timeout value in seconds before exiting automatically (no branch).
              
    </UL>

     **********/
    static public DriverCommand onGUIExistsGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onGUIExistsGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(ONGUIEXISTSGOTOBLOCKID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
                 Goto the named block in the current table if a GUI component does not exist.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>Apple IOS</LI>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param blockID  Optional:NO
                 The name of the block to Goto.
              
     @param windowID  Optional:NO
                 A Window reference from the app map.
              
     @param componentID  Optional:NO
                 A reference from the app map for the Component within the Window.
              
     @param timeOut  Optional:YES  DefaultVal:15
                 Timeout value in seconds before exiting automatically (no branch).
              
     **********/
    static public DriverCommand onGUINotExistGotoBlockID (String blockID, String windowID, String componentID, String timeOut) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onGUINotExistGotoBlockID.blockID = null");
        if ( componentID == null ) throw new IllegalArgumentException ( "onGUINotExistGotoBlockID.componentID = null");
        if ( windowID == null ) throw new IllegalArgumentException ( "onGUINotExistGotoBlockID.windowID = null");
        DriverCommand dc = new DriverCommand(ONGUINOTEXISTGOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(windowID);
        dc.addParameter(componentID);
        dc.addParameter(timeOut);
        return dc;
    }


    /*********** <pre>
                 Goto the named block in the current table if a GUI component does not exist.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>Apple IOS</LI>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO
                 The name of the block to Goto.
              <BR/>        windowID -- Optional:NO
                 A Window reference from the app map.
              <BR/>        componentID -- Optional:NO
                 A reference from the app map for the Component within the Window.
              <BR/>        timeOut -- Optional:YES  DefaultVal:15
                 Timeout value in seconds before exiting automatically (no branch).
              
    </UL>

     **********/
    static public DriverCommand onGUINotExistGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onGUINotExistGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(ONGUINOTEXISTGOTOBLOCKID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
                 Goto named block if value1 is between value2 and value3.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param blockID  Optional:NO
                 The name of the block to Goto.
              
     @param value1  Optional:NO
                 The value to be compared.
              
     @param value2  Optional:NO
                 The low end of range to be compared against.
              
     @param value3  Optional:NO
                 The high end of range to be compared against.
              
     @param caseSensitive  Optional:YES 
                 Set to 'CaseInsensitive' so string comparisons are NOT case-sensitive.
                 String Comparisons are case-sensitive by default.
              
     **********/
    static public DriverCommand onInRangeGotoBlockID (String blockID, String value1, String value2, String value3, String caseSensitive) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onInRangeGotoBlockID.blockID = null");
        if ( value1 == null ) throw new IllegalArgumentException ( "onInRangeGotoBlockID.value1 = null");
        if ( value2 == null ) throw new IllegalArgumentException ( "onInRangeGotoBlockID.value2 = null");
        if ( value3 == null ) throw new IllegalArgumentException ( "onInRangeGotoBlockID.value3 = null");
        DriverCommand dc = new DriverCommand(ONINRANGEGOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(value1);
        dc.addParameter(value2);
        dc.addParameter(value3);
        dc.addParameter(caseSensitive);
        return dc;
    }


    /*********** <pre>
                 Goto named block if value1 is between value2 and value3.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO
                 The name of the block to Goto.
              <BR/>        value1 -- Optional:NO
                 The value to be compared.
              <BR/>        value2 -- Optional:NO
                 The low end of range to be compared against.
              <BR/>        value3 -- Optional:NO
                 The high end of range to be compared against.
              <BR/>        caseSensitive -- Optional:YES 
                 Set to 'CaseInsensitive' so string comparisons are NOT case-sensitive.
                 String Comparisons are case-sensitive by default.
              
    </UL>

     **********/
    static public DriverCommand onInRangeGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onInRangeGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(ONINRANGEGOTOBLOCKID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block if value1 is less than value2.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param blockID  Optional:NO 
                 The name of the block to Goto.
              
     @param value1  Optional:NO 
                 The value to be compared.
              
     @param value2  Optional:NO 
                 The value to be compared against.
              
     @param caseSensitive  Optional:YES 
                 Set to 'CaseInsensitive' so string comparisons are NOT case-sensitive.
                 String Comparisons are case-sensitive by default.
              
     **********/
    static public DriverCommand onLessThanGotoBlockID (String blockID, String value1, String value2, String caseSensitive) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onLessThanGotoBlockID.blockID = null");
        if ( value1 == null ) throw new IllegalArgumentException ( "onLessThanGotoBlockID.value1 = null");
        if ( value2 == null ) throw new IllegalArgumentException ( "onLessThanGotoBlockID.value2 = null");
        DriverCommand dc = new DriverCommand(ONLESSTHANGOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(value1);
        dc.addParameter(value2);
        dc.addParameter(caseSensitive);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block if value1 is less than value2.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO 
                 The name of the block to Goto.
              <BR/>        value1 -- Optional:NO 
                 The value to be compared.
              <BR/>        value2 -- Optional:NO 
                 The value to be compared against.
              <BR/>        caseSensitive -- Optional:YES 
                 Set to 'CaseInsensitive' so string comparisons are NOT case-sensitive.
                 String Comparisons are case-sensitive by default.
              
    </UL>

     **********/
    static public DriverCommand onLessThanGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onLessThanGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(ONLESSTHANGOTOBLOCKID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                   Goto the named block in the current table if state is part of the state information of the menuitem.
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param blockID  Optional:NO 
                   The name of the block to transfer control to if state is 
                   part of the state information of the menuitem.
                
     @param windowName  Optional:NO 
                   The window name.
                
     @param componentName  Optional:NO 
                   The component name.
                
     @param menuItem  Optional:NO 
                   Menu->MenuItem hierarchy string to identify which menu item                              to test. This menu hierarchy is case-sensitive.
                   to test. This menu hierarchy is case-sensitive.
                
     @param state  Optional:NO 
                   Expected status string (or part thereof) to verify. 
		   Ex: "Enabled Checked" OR "Disabled Grayed" etc. Each item 
		   separated by a space will be evaluated separately so the order 
		   of the status items does not matter. These status items are 
		   case-sensitive.
                
     **********/
    static public DriverCommand onMenuItemContainsStateGotoBlockID (String blockID, String windowName, String componentName, String menuItem, String state) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onMenuItemContainsStateGotoBlockID.blockID = null");
        if ( componentName == null ) throw new IllegalArgumentException ( "onMenuItemContainsStateGotoBlockID.componentName = null");
        if ( menuItem == null ) throw new IllegalArgumentException ( "onMenuItemContainsStateGotoBlockID.menuItem = null");
        if ( state == null ) throw new IllegalArgumentException ( "onMenuItemContainsStateGotoBlockID.state = null");
        if ( windowName == null ) throw new IllegalArgumentException ( "onMenuItemContainsStateGotoBlockID.windowName = null");
        DriverCommand dc = new DriverCommand(ONMENUITEMCONTAINSSTATEGOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(windowName);
        dc.addParameter(componentName);
        dc.addParameter(menuItem);
        dc.addParameter(state);
        return dc;
    }


    /*********** <pre> 
                   Goto the named block in the current table if state is part of the state information of the menuitem.
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO 
                   The name of the block to transfer control to if state is 
                   part of the state information of the menuitem.
                <BR/>        windowName -- Optional:NO 
                   The window name.
                <BR/>        componentName -- Optional:NO 
                   The component name.
                <BR/>        menuItem -- Optional:NO 
                   Menu->MenuItem hierarchy string to identify which menu item                              to test. This menu hierarchy is case-sensitive.
                   to test. This menu hierarchy is case-sensitive.
                <BR/>        state -- Optional:NO 
                   Expected status string (or part thereof) to verify. 
		   Ex: "Enabled Checked" OR "Disabled Grayed" etc. Each item 
		   separated by a space will be evaluated separately so the order 
		   of the status items does not matter. These status items are 
		   case-sensitive.
                
    </UL>

     **********/
    static public DriverCommand onMenuItemContainsStateGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onMenuItemContainsStateGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(ONMENUITEMCONTAINSSTATEGOTOBLOCKID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block in the current table if value2 is NOT a substring of value1.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Rational Robot</LI>
    </UL>

     @param blockID  Optional:NO 
                 The name of the block to Goto.
              
     @param value1  Optional:NO 
                 The value to be searched for the Value2 substring
              
     @param value2  Optional:NO 
                 The substring to seek in VALUE1
              
     @param caseSensitive  Optional:YES 
                 Set to 'CaseInsensitive' so comparisons are NOT case-sensitive.
                 Comparisons are case-sensitive by default.
              
     **********/
    static public DriverCommand onNotContainsGotoBlockID (String blockID, String value1, String value2, String caseSensitive) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onNotContainsGotoBlockID.blockID = null");
        if ( value1 == null ) throw new IllegalArgumentException ( "onNotContainsGotoBlockID.value1 = null");
        if ( value2 == null ) throw new IllegalArgumentException ( "onNotContainsGotoBlockID.value2 = null");
        DriverCommand dc = new DriverCommand(ONNOTCONTAINSGOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(value1);
        dc.addParameter(value2);
        dc.addParameter(caseSensitive);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block in the current table if value2 is NOT a substring of value1.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Rational Robot</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO 
                 The name of the block to Goto.
              <BR/>        value1 -- Optional:NO 
                 The value to be searched for the Value2 substring
              <BR/>        value2 -- Optional:NO 
                 The substring to seek in VALUE1
              <BR/>        caseSensitive -- Optional:YES 
                 Set to 'CaseInsensitive' so comparisons are NOT case-sensitive.
                 Comparisons are case-sensitive by default.
              
    </UL>

     **********/
    static public DriverCommand onNotContainsGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onNotContainsGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(ONNOTCONTAINSGOTOBLOCKID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block in the current table if two values are not equal.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param blockID  Optional:NO 
                 The name of the block to Goto.
              
     @param value1  Optional:NO 
                 The first value for the comparison.
              
     @param value2  Optional:NO 
                 The second value for the comparison.
              
     @param caseSensitive  Optional:YES 
                 Set to 'CaseInsensitive' so string comparisons are NOT case-sensitive.
                 String Comparisons are case-sensitive by default.
              
     **********/
    static public DriverCommand onNotEqualGotoBlockID (String blockID, String value1, String value2, String caseSensitive) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onNotEqualGotoBlockID.blockID = null");
        if ( value1 == null ) throw new IllegalArgumentException ( "onNotEqualGotoBlockID.value1 = null");
        if ( value2 == null ) throw new IllegalArgumentException ( "onNotEqualGotoBlockID.value2 = null");
        DriverCommand dc = new DriverCommand(ONNOTEQUALGOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(value1);
        dc.addParameter(value2);
        dc.addParameter(caseSensitive);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block in the current table if two values are not equal.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO 
                 The name of the block to Goto.
              <BR/>        value1 -- Optional:NO 
                 The first value for the comparison.
              <BR/>        value2 -- Optional:NO 
                 The second value for the comparison.
              <BR/>        caseSensitive -- Optional:YES 
                 Set to 'CaseInsensitive' so string comparisons are NOT case-sensitive.
                 String Comparisons are case-sensitive by default.
              
    </UL>

     **********/
    static public DriverCommand onNotEqualGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onNotEqualGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(ONNOTEQUALGOTOBLOCKID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block in the current table if value1 is NOT greater than value2.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param blockID  Optional:NO 
                 The name of the block to Goto.
              
     @param value1  Optional:NO 
                 The value expected to be NOT greater than VALUE2.
              
     @param value2  Optional:NO 
                 The value expected to be equal or greater than VALUE1.
              
     @param caseSensitive  Optional:YES 
                 Set to 'CaseInsensitive' so comparisons are NOT case-sensitive.
                 Comparisons are case-sensitive by default.
              
     **********/
    static public DriverCommand onNotGreaterThanGotoBlockID (String blockID, String value1, String value2, String caseSensitive) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onNotGreaterThanGotoBlockID.blockID = null");
        if ( value1 == null ) throw new IllegalArgumentException ( "onNotGreaterThanGotoBlockID.value1 = null");
        if ( value2 == null ) throw new IllegalArgumentException ( "onNotGreaterThanGotoBlockID.value2 = null");
        DriverCommand dc = new DriverCommand(ONNOTGREATERTHANGOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(value1);
        dc.addParameter(value2);
        dc.addParameter(caseSensitive);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block in the current table if value1 is NOT greater than value2.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO 
                 The name of the block to Goto.
              <BR/>        value1 -- Optional:NO 
                 The value expected to be NOT greater than VALUE2.
              <BR/>        value2 -- Optional:NO 
                 The value expected to be equal or greater than VALUE1.
              <BR/>        caseSensitive -- Optional:YES 
                 Set to 'CaseInsensitive' so comparisons are NOT case-sensitive.
                 Comparisons are case-sensitive by default.
              
    </UL>

     **********/
    static public DriverCommand onNotGreaterThanGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onNotGreaterThanGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(ONNOTGREATERTHANGOTOBLOCKID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
                 Goto the named block in the current table if value1 is not between value2 and value3.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param blockID  Optional:NO
                 The name of the block to Goto.
              
     @param value1  Optional:NO
                 The value to be compared.
              
     @param value2  Optional:NO
                 The low end of range to be compared against.
              
     @param value3  Optional:NO
                 The high end of range to be compared against.
              
     @param caseSensitive  Optional:YES 
                 Set to 'CaseInsensitive' so string comparisons are NOT case-sensitive.
                 String Comparisons are case-sensitive by default.
              
     **********/
    static public DriverCommand onNotInRangeGotoBlockID (String blockID, String value1, String value2, String value3, String caseSensitive) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onNotInRangeGotoBlockID.blockID = null");
        if ( value1 == null ) throw new IllegalArgumentException ( "onNotInRangeGotoBlockID.value1 = null");
        if ( value2 == null ) throw new IllegalArgumentException ( "onNotInRangeGotoBlockID.value2 = null");
        if ( value3 == null ) throw new IllegalArgumentException ( "onNotInRangeGotoBlockID.value3 = null");
        DriverCommand dc = new DriverCommand(ONNOTINRANGEGOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(value1);
        dc.addParameter(value2);
        dc.addParameter(value3);
        dc.addParameter(caseSensitive);
        return dc;
    }


    /*********** <pre>
                 Goto the named block in the current table if value1 is not between value2 and value3.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO
                 The name of the block to Goto.
              <BR/>        value1 -- Optional:NO
                 The value to be compared.
              <BR/>        value2 -- Optional:NO
                 The low end of range to be compared against.
              <BR/>        value3 -- Optional:NO
                 The high end of range to be compared against.
              <BR/>        caseSensitive -- Optional:YES 
                 Set to 'CaseInsensitive' so string comparisons are NOT case-sensitive.
                 String Comparisons are case-sensitive by default.
              
    </UL>

     **********/
    static public DriverCommand onNotInRangeGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onNotInRangeGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(ONNOTINRANGEGOTOBLOCKID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block if value1 is NOT less than value2.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param blockID  Optional:NO 
                 The name of the block to Goto.
              
     @param value1  Optional:NO 
                 The value that should be NOT less than VALUE2.
              
     @param value2  Optional:NO 
                 The value that should be equal or less than VALUE1.
              
     @param caseSensitive  Optional:YES 
                 Set to 'CaseInsensitive' so string comparisons are NOT case-sensitive.
                 String Comparisons are case-sensitive by default.
              
     **********/
    static public DriverCommand onNotLessThanGotoBlockID (String blockID, String value1, String value2, String caseSensitive) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onNotLessThanGotoBlockID.blockID = null");
        if ( value1 == null ) throw new IllegalArgumentException ( "onNotLessThanGotoBlockID.value1 = null");
        if ( value2 == null ) throw new IllegalArgumentException ( "onNotLessThanGotoBlockID.value2 = null");
        DriverCommand dc = new DriverCommand(ONNOTLESSTHANGOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(value1);
        dc.addParameter(value2);
        dc.addParameter(caseSensitive);
        return dc;
    }


    /*********** <pre> 
                 Goto the named block if value1 is NOT less than value2.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO 
                 The name of the block to Goto.
              <BR/>        value1 -- Optional:NO 
                 The value that should be NOT less than VALUE2.
              <BR/>        value2 -- Optional:NO 
                 The value that should be equal or less than VALUE1.
              <BR/>        caseSensitive -- Optional:YES 
                 Set to 'CaseInsensitive' so string comparisons are NOT case-sensitive.
                 String Comparisons are case-sensitive by default.
              
    </UL>

     **********/
    static public DriverCommand onNotLessThanGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onNotLessThanGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(ONNOTLESSTHANGOTOBLOCKID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                   Goto the named block in the current table if state is part of the state information of the menuitem.
                   This command allows for a partial match of the menu item.
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param blockID  Optional:NO 
                   The name of the block to transfer control to if state is 
                   part of the state information of the menuitem.
                
     @param windowName  Optional:NO 
                   The window name.
                
     @param componentName  Optional:NO 
                   The component name.
                
     @param menuItem  Optional:NO 
                   Menu->MenuItem hierarchy string to identify which menu item                              to test. This menu hierarchy is case-sensitive.
                   to test. This menu hierarchy is case-sensitive.
                
     @param state  Optional:NO 
                   Expected status string (or part thereof) to verify. 
		   Ex: "Enabled Checked" OR "Disabled Grayed" etc. Each item 
		   separated by a space will be evaluated separately so the order 
		   of the status items does not matter. These status items are 
		   case-sensitive.
                
     **********/
    static public DriverCommand onPartialMenuItemContainsStateGotoBlockID (String blockID, String windowName, String componentName, String menuItem, String state) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onPartialMenuItemContainsStateGotoBlockID.blockID = null");
        if ( componentName == null ) throw new IllegalArgumentException ( "onPartialMenuItemContainsStateGotoBlockID.componentName = null");
        if ( menuItem == null ) throw new IllegalArgumentException ( "onPartialMenuItemContainsStateGotoBlockID.menuItem = null");
        if ( state == null ) throw new IllegalArgumentException ( "onPartialMenuItemContainsStateGotoBlockID.state = null");
        if ( windowName == null ) throw new IllegalArgumentException ( "onPartialMenuItemContainsStateGotoBlockID.windowName = null");
        DriverCommand dc = new DriverCommand(ONPARTIALMENUITEMCONTAINSSTATEGOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(windowName);
        dc.addParameter(componentName);
        dc.addParameter(menuItem);
        dc.addParameter(state);
        return dc;
    }


    /*********** <pre> 
                   Goto the named block in the current table if state is part of the state information of the menuitem.
                   This command allows for a partial match of the menu item.
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO 
                   The name of the block to transfer control to if state is 
                   part of the state information of the menuitem.
                <BR/>        windowName -- Optional:NO 
                   The window name.
                <BR/>        componentName -- Optional:NO 
                   The component name.
                <BR/>        menuItem -- Optional:NO 
                   Menu->MenuItem hierarchy string to identify which menu item                              to test. This menu hierarchy is case-sensitive.
                   to test. This menu hierarchy is case-sensitive.
                <BR/>        state -- Optional:NO 
                   Expected status string (or part thereof) to verify. 
		   Ex: "Enabled Checked" OR "Disabled Grayed" etc. Each item 
		   separated by a space will be evaluated separately so the order 
		   of the status items does not matter. These status items are 
		   case-sensitive.
                
    </UL>

     **********/
    static public DriverCommand onPartialMenuItemContainsStateGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onPartialMenuItemContainsStateGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(ONPARTIALMENUITEMCONTAINSSTATEGOTOBLOCKID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
                 Goto the named block in the current table if the Registry Key exists.
              On Windows XP (and higher?) this is accomplished via 
              the REG.EXE provided by the operating system.  If this program is NOT available 
              then the Registry commands will not work until another means is implemented--possibly 
              Windows Scripting Host scripts, etc..
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param blockID  Optional:NO
                 The name of the block to Goto.
              
     @param key  Optional:NO
                 The Registry Key to seek.
              
     @param keyValue  Optional:YES
                 The optional Registry subkey value to seek.
              
     @param timeOut  Optional:YES  DefaultVal:15
                 Timeout value in seconds before exiting automatically (no branch).
              
     **********/
    static public DriverCommand onRegistryKeyExistGotoBlockID (String blockID, String key, String keyValue, String timeOut) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onRegistryKeyExistGotoBlockID.blockID = null");
        if ( key == null ) throw new IllegalArgumentException ( "onRegistryKeyExistGotoBlockID.key = null");
        DriverCommand dc = new DriverCommand(ONREGISTRYKEYEXISTGOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(key);
        dc.addParameter(keyValue);
        dc.addParameter(timeOut);
        return dc;
    }


    /*********** <pre>
                 Goto the named block in the current table if the Registry Key exists.
              On Windows XP (and higher?) this is accomplished via 
              the REG.EXE provided by the operating system.  If this program is NOT available 
              then the Registry commands will not work until another means is implemented--possibly 
              Windows Scripting Host scripts, etc..
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO
                 The name of the block to Goto.
              <BR/>        key -- Optional:NO
                 The Registry Key to seek.
              <BR/>        keyValue -- Optional:YES
                 The optional Registry subkey value to seek.
              <BR/>        timeOut -- Optional:YES  DefaultVal:15
                 Timeout value in seconds before exiting automatically (no branch).
              
    </UL>

     **********/
    static public DriverCommand onRegistryKeyExistGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onRegistryKeyExistGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(ONREGISTRYKEYEXISTGOTOBLOCKID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
                 Goto the named block in the current table if the Registry Key does not exist.
              On Windows XP (and higher?) this is accomplished via 
              the REG.EXE provided by the operating system.  If this program is NOT available 
              then the Registry commands will not work until another means is implemented--possibly 
              Windows Scripting Host scripts, etc..
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param blockID  Optional:NO
                 The name of the block to Goto.
              
     @param key  Optional:NO
                 The Registry Key to seek.
              
     @param keyValue  Optional:YES
                 The optional Registry subkey value to seek.
              
     @param timeOut  Optional:YES  DefaultVal:15
                 Timeout value in seconds before exiting automatically (no branch).
              
     **********/
    static public DriverCommand onRegistryKeyNotExistGotoBlockID (String blockID, String key, String keyValue, String timeOut) {

        if ( blockID == null ) throw new IllegalArgumentException ( "onRegistryKeyNotExistGotoBlockID.blockID = null");
        if ( key == null ) throw new IllegalArgumentException ( "onRegistryKeyNotExistGotoBlockID.key = null");
        DriverCommand dc = new DriverCommand(ONREGISTRYKEYNOTEXISTGOTOBLOCKID_KEYWORD);
        dc.addParameter(blockID);
        dc.addParameter(key);
        dc.addParameter(keyValue);
        dc.addParameter(timeOut);
        return dc;
    }


    /*********** <pre>
                 Goto the named block in the current table if the Registry Key does not exist.
              On Windows XP (and higher?) this is accomplished via 
              the REG.EXE provided by the operating system.  If this program is NOT available 
              then the Registry commands will not work until another means is implemented--possibly 
              Windows Scripting Host scripts, etc..
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        blockID -- Optional:NO
                 The name of the block to Goto.
              <BR/>        key -- Optional:NO
                 The Registry Key to seek.
              <BR/>        keyValue -- Optional:YES
                 The optional Registry subkey value to seek.
              <BR/>        timeOut -- Optional:YES  DefaultVal:15
                 Timeout value in seconds before exiting automatically (no branch).
              
    </UL>

     **********/
    static public DriverCommand onRegistryKeyNotExistGotoBlockID (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "onRegistryKeyNotExistGotoBlockID.parameters = null");
        DriverCommand dc = new DriverCommand(ONREGISTRYKEYNOTEXISTGOTOBLOCKID_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Set or clear the name of a block to execute when the ExitTable command is encountered.
               
                 Set or clear the name of a block to execute when the ExitTable command is encountered.
                 You can reset this to nothing by leaving the BlockID parameter blank 
                 or providing an empty BlockID.  This reset should be done as part of the ExitTable 
                 processing.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param blockID  Optional:YES  DefaultVal: 
                 The name of the block to Goto when ExitTable is encountered.
              
     **********/
    static public DriverCommand setExitTableBlock (String blockID) {

        DriverCommand dc = new DriverCommand(SETEXITTABLEBLOCK_KEYWORD);
        dc.addParameter(blockID);
        return dc;
    }


    /*********** <pre> 
                 Set or clear the name of a block to execute when GeneralScriptFailure occurs.
               
                 Set or clear the name of a block to execute when GeneralScriptFailure occurs.
                 Status is evaluated after the completion of every record in a table. 
                 
                 You can reset this to nothing by leaving the BlockID parameter blank 
                 or providing an empty BlockID.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param blockID  Optional:YES  DefaultVal: 
                 The name of the block to Goto on status GeneralScriptFailure.
              
     **********/
    static public DriverCommand setGeneralScriptFailureBlock (String blockID) {

        DriverCommand dc = new DriverCommand(SETGENERALSCRIPTFAILUREBLOCK_KEYWORD);
        dc.addParameter(blockID);
        return dc;
    }


    /*********** <pre> 
                 Set or clear the name of a block to execute when InvalidFileIO occurs.
               
                 Set or clear the name of a block to execute when InvalidFileIO occurs.
                 Status is evaluated after the completion of every record in a table. 
                 
                 You can reset this to nothing by leaving the BlockID parameter blank 
                 or providing an empty BlockID.
                 
                 Note, an InvalidFileIO generated from the test table itself will not 
                 be processed by this block.  In general, that would not be possible 
                 because the FileIO error likely means the table cannot be processed.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param blockID  Optional:YES  DefaultVal: 
                 The name of the block to Goto on status InvalidFileIO.
              
     **********/
    static public DriverCommand setInvalidFileIOBlock (String blockID) {

        DriverCommand dc = new DriverCommand(SETINVALIDFILEIOBLOCK_KEYWORD);
        dc.addParameter(blockID);
        return dc;
    }


    /*********** <pre> 
                 Set or clear the name of a block to execute when NoScriptFailure occurs.
               
                 Set or clear the name of a block to execute when NoScriptFailure occurs.
                 Status is evaluated after the completion of every record in a table. 
                 So event the simple logging of message can return NoScriptFailure.
                 
                 This block setting is automatically cleared when a jump is executed as 
                 a result of this condition.  This command is generally used immediately 
                 before the record you expect to pass or fail.  You can reset this to 
                 nothing by leaving the BlockID parameter blank or providing an empty
                 BlockID.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param blockID  Optional:YES  DefaultVal: 
                 The name of the block to Goto on status NoScriptFailure.
              
     **********/
    static public DriverCommand setNoScriptFailureBlock (String blockID) {

        DriverCommand dc = new DriverCommand(SETNOSCRIPTFAILUREBLOCK_KEYWORD);
        dc.addParameter(blockID);
        return dc;
    }


    /*********** <pre> 
                 Set or clear the name of a block to execute when ScriptNotExecuted occurs.
               
                 Set or clear the name of a block to execute when ScriptNotExecuted occurs.
                 Status is evaluated after the completion of every record in a table.  In general, 
                 ScriptNotExecuted only occurs when the drivers are not able to be invoked or 
                 StepDriver cannot properly locate GUI items or the functions to process them.
                 
                 You can reset this to nothing by leaving the BlockID parameter blank 
                 or providing an empty BlockID.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param blockID  Optional:YES  DefaultVal: 
                 The name of the block to Goto on status ScriptNotExecuted.
              
     **********/
    static public DriverCommand setScriptNotExecutedBlock (String blockID) {

        DriverCommand dc = new DriverCommand(SETSCRIPTNOTEXECUTEDBLOCK_KEYWORD);
        dc.addParameter(blockID);
        return dc;
    }


    /*********** <pre> 
                 Set or clear the name of a block to execute when ScriptWarning occurs.
               
                 Set or clear the name of a block to execute when ScriptWarning occurs.
                 Status is evaluated after the completion of every record in a table. 
                 
                 You can reset this to nothing by leaving the BlockID parameter blank 
                 or providing an empty BlockID.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param blockID  Optional:YES  DefaultVal: 
                 The name of the block to Goto on status ScriptWarning.
              
     **********/
    static public DriverCommand setScriptWarningBlock (String blockID) {

        DriverCommand dc = new DriverCommand(SETSCRIPTWARNINGBLOCK_KEYWORD);
        dc.addParameter(blockID);
        return dc;
    }


    /*********** <pre> 
                 When TRUE then flow control block IDs have current table scope only.
               
                 By default, flow control block IDs provided with the SetXXXBlock commands 
                 have test level scope.  That is, a block ID set stays in effect for all test 
                 tables at that test level until the block ID is changed or cleared.
                 
                 By setting UseLocalFlowControl=TRUE then any flow control block ID set 
                 has only local scope.  It is only valid for the currently executing table.
                 
                 Note, if no parameter is provided the parameter will default to TRUE.
                 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param state  Optional:YES  DefaultVal:TRUE 
                 The TRUE or FALSE value to use.
              
     **********/
    static public DriverCommand useLocalFlowControl (String state) {

        DriverCommand dc = new DriverCommand(USELOCALFLOWCONTROL_KEYWORD);
        dc.addParameter(state);
        return dc;
    }


}
