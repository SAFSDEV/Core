
/******************************************************************************
 * DDDriverTimerCommands.java
 *
 * Copyright (C) SAS Institute, All rights reserved.
 * General Public License: https://www.gnu.org/licenses/gpl-3.0.en.html
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   DDDriverTimerCommands.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaCommandModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe DDDriverTimerCommands.xml XSLJavaCommandModel.xsl -o DDDriverTimerCommands.java
 *
 ******************************************************************************/ 
package org.safs.model.commands;


import org.safs.model.DriverCommand;


public class DDDriverTimerCommands {

    /*****************
    Private Singleton Instance
    ****************/
    private static final DDDriverTimerCommands singleton = new DDDriverTimerCommands(); 

    /*****************
    Private Constructor
    Static class needing no instantiation.
    ****************/
    private DDDriverTimerCommands() {}

    /*****************
    public Singleton to access class static methods via instance
    ****************/
    public static DDDriverTimerCommands getInstance() { return singleton;}

    /** "ResetTimer" */
    static public final String RESETTIMER_KEYWORD = "ResetTimer";
    /** "StartTimer" */
    static public final String StartTimer_KEYWORD = "StartTimer";
    /** "StopTimer" */
    static public final String StopTimer_KEYWORD = "StopTimer";
    /** "StoreTimerInfo" */
    static public final String StoreTimerInfo_KEYWORD = "StoreTimerInfo";
    /** "StoreTimerInfoFile" */
    static public final String StoreTimerInfoFile_KEYWORD = "StoreTimerInfoFile";
    /** "VerifyElapsedTimeInRange" */
    static public final String VerifyElapsedTimeInRange_KEYWORD = "VerifyElapsedTimeInRange";
    /** "VerifyElapsedTimeIsLess" */
    static public final String VerifyElapsedTimeIsLess_KEYWORD = "VerifyElapsedTimeIsLess";
    /** "VerifyElapsedTimeIsMore" */
    static public final String VerifyElapsedTimeIsMore_KEYWORD = "VerifyElapsedTimeIsMore";
    /** "VerifyTimer" */
    static public final String VerifyTimer_KEYWORD = "VerifyTimer";


    /*********** <pre>
                Reset a "stopped" timer for reuse.
                
                Returns internal status values to a reset state. This allows the timer to be used again with 
                a new start time when StartTimer is called with the same name as this timer. It should be 
                considered an error to attempt to reset a timer that is active (not stopped).
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param timerName  Optional:NO
                        timerName (should be unique)
                        
     **********/
    static public DriverCommand resetTimer (String timerName) {

        if ( timerName == null ) throw new IllegalArgumentException ( "resetTimer.timerName = null");
        DriverCommand dc = new DriverCommand(RESETTIMER_KEYWORD);
        dc.addParameter(timerName);
        return dc;
    }


    /*********** <pre>
                Will start a unique timer.
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param timerName  Optional:NO
                        timerName (should be unique)
                        
     @param verifyValue  Optional:YES
                        verifyValue will be used to verify the timer was less then then given value. If the parameter isn't given then no check will occur.
                        
     **********/
    static public DriverCommand startTimer (String timerName, String verifyValue) {

        if ( timerName == null ) throw new IllegalArgumentException ( "startTimer.timerName = null");
        DriverCommand dc = new DriverCommand(StartTimer_KEYWORD);
        dc.addParameter(timerName);
        dc.addParameter(verifyValue);
        return dc;
    }


    /*********** <pre>
                Will start a unique timer.
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        timerName -- Optional:NO
                        timerName (should be unique)
                        <BR/>        verifyValue -- Optional:YES
                        verifyValue will be used to verify the timer was less then then given value. If the parameter isn't given then no check will occur.
                        
    </UL>

     **********/
    static public DriverCommand startTimer (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "startTimer.parameters = null");
        DriverCommand dc = new DriverCommand(StartTimer_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
                Will end a unique timer and perform a verify test if a value was supplied at start time.
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param timerName  Optional:NO
                        timerName (should be unique)
                        
     **********/
    static public DriverCommand stopTimer (String timerName) {

        if ( timerName == null ) throw new IllegalArgumentException ( "stopTimer.timerName = null");
        DriverCommand dc = new DriverCommand(StopTimer_KEYWORD);
        dc.addParameter(timerName);
        return dc;
    }


    /*********** <pre>
                Well store the timer information in the given variable.
                Information stored:
                
                  
                    .elapsed - Amount of seconds that has passed.
                  
                  
                    .startTime - Time that the timer was started.
                  
                  
                    .endTime - Time that the timer was stopped.
                  
                  
                    .failures - Number of failures that happened on the timer (based on verify commands).
                  
                
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param timerName  Optional:NO
                        timerName (should be unique)
                        
     @param variable  Optional:No
                        variable to store time information in.
                        
     **********/
    static public DriverCommand storeTimerInfo (String timerName, String variable) {

        if ( timerName == null ) throw new IllegalArgumentException ( "storeTimerInfo.timerName = null");
        if ( variable == null ) throw new IllegalArgumentException ( "storeTimerInfo.variable = null");
        DriverCommand dc = new DriverCommand(StoreTimerInfo_KEYWORD);
        dc.addParameter(timerName);
        dc.addParameter(variable);
        return dc;
    }


    /*********** <pre>
                Well store the timer information in the given variable.
                Information stored:
                
                  
                    .elapsed - Amount of seconds that has passed.
                  
                  
                    .startTime - Time that the timer was started.
                  
                  
                    .endTime - Time that the timer was stopped.
                  
                  
                    .failures - Number of failures that happened on the timer (based on verify commands).
                  
                
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        timerName -- Optional:NO
                        timerName (should be unique)
                        <BR/>        variable -- Optional:No
                        variable to store time information in.
                        
    </UL>

     **********/
    static public DriverCommand storeTimerInfo (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "storeTimerInfo.parameters = null");
        DriverCommand dc = new DriverCommand(StoreTimerInfo_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
                Well store the timer information in the given file, in csv format. Will use absolute path if given otherwise uses SAFS Project Directory.
                Information Stored:Name,Start,Stop,Duration,Timeout,Pass?
                
                  
                    Name - Name of timer
                  
                  
                    Start - Time of start
                  
                  
                    Stop - Time of stop
                  
                  
                    Duration - total elapsed time.
                  
                  
                    Timeout - 
                  
                  
                    Pass? - if the timer passed any verfiy commands.
                  
                
                Variable TimerStorageVariables can list additional variables to be stored in the file (comma delimited).
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param timerName  Optional:NO
                        timerName (should be unique)
                        
     @param fileLoc  Optional:No
                        fileLoc is the location of the file to write (including filename). If an absolute path is given then it is used other wise the default path is SAFS Project Directory. If the file exists it is just appended to.
                        
     **********/
    static public DriverCommand storeTimerInfoFile (String timerName, String fileLoc) {

        if ( fileLoc == null ) throw new IllegalArgumentException ( "storeTimerInfoFile.fileLoc = null");
        if ( timerName == null ) throw new IllegalArgumentException ( "storeTimerInfoFile.timerName = null");
        DriverCommand dc = new DriverCommand(StoreTimerInfoFile_KEYWORD);
        dc.addParameter(timerName);
        dc.addParameter(fileLoc);
        return dc;
    }


    /*********** <pre>
                Well store the timer information in the given file, in csv format. Will use absolute path if given otherwise uses SAFS Project Directory.
                Information Stored:Name,Start,Stop,Duration,Timeout,Pass?
                
                  
                    Name - Name of timer
                  
                  
                    Start - Time of start
                  
                  
                    Stop - Time of stop
                  
                  
                    Duration - total elapsed time.
                  
                  
                    Timeout - 
                  
                  
                    Pass? - if the timer passed any verfiy commands.
                  
                
                Variable TimerStorageVariables can list additional variables to be stored in the file (comma delimited).
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        timerName -- Optional:NO
                        timerName (should be unique)
                        <BR/>        fileLoc -- Optional:No
                        fileLoc is the location of the file to write (including filename). If an absolute path is given then it is used other wise the default path is SAFS Project Directory. If the file exists it is just appended to.
                        
    </UL>

     **********/
    static public DriverCommand storeTimerInfoFile (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "storeTimerInfoFile.parameters = null");
        DriverCommand dc = new DriverCommand(StoreTimerInfoFile_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
                Well verify that a timer was in the range of the given values.
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param timerName  Optional:NO
                        timerName (should be unique)
                        
     @param verifyValue1  Optional:No
                        verifyValue1 will be used as the lower bounds of the check.
                        
     @param verifyValue2  Optional:No
                        verifyValue2 will be used as the higher bounds of the check.
                        
     **********/
    static public DriverCommand verifyElapsedTimeInRange (String timerName, String verifyValue1, String verifyValue2) {

        if ( timerName == null ) throw new IllegalArgumentException ( "verifyElapsedTimeInRange.timerName = null");
        if ( verifyValue2 == null ) throw new IllegalArgumentException ( "verifyElapsedTimeInRange.verifyValue2 = null");
        if ( verifyValue1 == null ) throw new IllegalArgumentException ( "verifyElapsedTimeInRange.verifyValue1 = null");
        DriverCommand dc = new DriverCommand(VerifyElapsedTimeInRange_KEYWORD);
        dc.addParameter(timerName);
        dc.addParameter(verifyValue1);
        dc.addParameter(verifyValue2);
        return dc;
    }


    /*********** <pre>
                Well verify that a timer was in the range of the given values.
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        timerName -- Optional:NO
                        timerName (should be unique)
                        <BR/>        verifyValue1 -- Optional:No
                        verifyValue1 will be used as the lower bounds of the check.
                        <BR/>        verifyValue2 -- Optional:No
                        verifyValue2 will be used as the higher bounds of the check.
                        
    </UL>

     **********/
    static public DriverCommand verifyElapsedTimeInRange (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyElapsedTimeInRange.parameters = null");
        DriverCommand dc = new DriverCommand(VerifyElapsedTimeInRange_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
                Well verify that a timer was less then the given value.
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param timerName  Optional:NO
                        timerName (should be unique)
                        
     @param verifyValue  Optional:No
                        verifyValue will be used to as the check value.
                        
     **********/
    static public DriverCommand verifyElapsedTimeIsLess (String timerName, String verifyValue) {

        if ( timerName == null ) throw new IllegalArgumentException ( "verifyElapsedTimeIsLess.timerName = null");
        if ( verifyValue == null ) throw new IllegalArgumentException ( "verifyElapsedTimeIsLess.verifyValue = null");
        DriverCommand dc = new DriverCommand(VerifyElapsedTimeIsLess_KEYWORD);
        dc.addParameter(timerName);
        dc.addParameter(verifyValue);
        return dc;
    }


    /*********** <pre>
                Well verify that a timer was less then the given value.
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        timerName -- Optional:NO
                        timerName (should be unique)
                        <BR/>        verifyValue -- Optional:No
                        verifyValue will be used to as the check value.
                        
    </UL>

     **********/
    static public DriverCommand verifyElapsedTimeIsLess (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyElapsedTimeIsLess.parameters = null");
        DriverCommand dc = new DriverCommand(VerifyElapsedTimeIsLess_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
                Well verify that a timer was greater then the given value.
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param timerName  Optional:NO
                        timerName (should be unique)
                        
     @param verifyValue  Optional:No
                        verifyValue will be used to as the check value.
                        
     **********/
    static public DriverCommand verifyElapsedTimeIsMore (String timerName, String verifyValue) {

        if ( timerName == null ) throw new IllegalArgumentException ( "verifyElapsedTimeIsMore.timerName = null");
        if ( verifyValue == null ) throw new IllegalArgumentException ( "verifyElapsedTimeIsMore.verifyValue = null");
        DriverCommand dc = new DriverCommand(VerifyElapsedTimeIsMore_KEYWORD);
        dc.addParameter(timerName);
        dc.addParameter(verifyValue);
        return dc;
    }


    /*********** <pre>
                Well verify that a timer was greater then the given value.
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        timerName -- Optional:NO
                        timerName (should be unique)
                        <BR/>        verifyValue -- Optional:No
                        verifyValue will be used to as the check value.
                        
    </UL>

     **********/
    static public DriverCommand verifyElapsedTimeIsMore (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyElapsedTimeIsMore.parameters = null");
        DriverCommand dc = new DriverCommand(VerifyElapsedTimeIsMore_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>
                Well verify that a timer was less then the given value.
                    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param timerName  Optional:NO
                        timerName (should be unique)
                        
     @param verifyValue  Optional:YES
                        verifyValue will be used to as the check value. If nothing is given then the value given during StartTimer will be use, if nothing was given then the value -1 is used.
                        
     **********/
    static public DriverCommand verifyTimer (String timerName, String verifyValue) {

        if ( timerName == null ) throw new IllegalArgumentException ( "verifyTimer.timerName = null");
        DriverCommand dc = new DriverCommand(VerifyTimer_KEYWORD);
        dc.addParameter(timerName);
        dc.addParameter(verifyValue);
        return dc;
    }


    /*********** <pre>
                Well verify that a timer was less then the given value.
                    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        timerName -- Optional:NO
                        timerName (should be unique)
                        <BR/>        verifyValue -- Optional:YES
                        verifyValue will be used to as the check value. If nothing is given then the value given during StartTimer will be use, if nothing was given then the value -1 is used.
                        
    </UL>

     **********/
    static public DriverCommand verifyTimer (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyTimer.parameters = null");
        DriverCommand dc = new DriverCommand(VerifyTimer_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


}
