
/******************************************************************************
 * ComboListBoxFunctions.java
 *
 * Copyright (C) SAS Institute, All rights reserved.
 * General Public License: https://www.gnu.org/licenses/gpl-3.0.en.html
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   ComboListBoxFunctions.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaCommandModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe ComboListBoxFunctions.xml XSLJavaCommandModel.xsl -o ComboListBoxFunctions.java
 *
 ******************************************************************************/ 
package org.safs.model.commands;


import org.safs.model.ComponentFunction;


public class ComboListBoxFunctions {

    /*****************
    Private Singleton Instance
    ****************/
    private static final ComboListBoxFunctions singleton = new ComboListBoxFunctions(); 

    /*****************
    Private Constructor
    Static class needing no instantiation.
    ****************/
    private ComboListBoxFunctions() {}

    /*****************
    public Singleton to access class static methods via instance
    ****************/
    public static ComboListBoxFunctions getInstance() { return singleton;}

    /** "Select" */
    static public final String SELECT_KEYWORD = "Select";
    /** "SelectIndex" */
    static public final String SELECTINDEX_KEYWORD = "SelectIndex";


    /*********** <pre> 
                 Select an item by its text value from an exposed combobox dropdown list.
               
                 Select an item by its text value from an exposed combobox dropdown list.  
                    This method requires that the list already be exposed via a ComboBox 
                    Click command.  To combine both the Click and the Selection in a single
                    command use the ComboBox Select command.
                 
                 We first test to make sure the item to select is actually in the list.
                 If it is not, we report the failure and issue an ESCAPE character to 
                 close the list. 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param textValue  Optional:NO 
                 The case-sensitive text item to select
              
     **********/
    static public ComponentFunction select (String winname, String compname, String textValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "select.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "select.compname = null");

        if ( textValue == null ) throw new IllegalArgumentException ( "select.textValue = null");
        ComponentFunction cf = new ComponentFunction(SELECT_KEYWORD, winname, compname);
        cf.addParameter(textValue);
        return cf;
    }


    /*********** <pre> 
                 Select an item by its index from a combolistbox.
               
                Select an item by its index from a combolistbox.  
                The list must already be exposed via a preceeding ComboBox Click.
                
                The routine will attempt to see if the index exists in the list. 
                It will fail if it cannot validate the index or cannot 
                read the array of items.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>Automated QA TestComplete</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param indexValue  Optional:NO 
                 The item index in the exposed list to select.
              
     **********/
    static public ComponentFunction selectIndex (String winname, String compname, String indexValue) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectIndex.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectIndex.compname = null");

        if ( indexValue == null ) throw new IllegalArgumentException ( "selectIndex.indexValue = null");
        ComponentFunction cf = new ComponentFunction(SELECTINDEX_KEYWORD, winname, compname);
        cf.addParameter(indexValue);
        return cf;
    }


}
