
/******************************************************************************
 * DDDriverCommands.java
 *
 * Copyright (c) by SAS Institute Inc., Cary, NC 27513
 * General Public License: http://www.opensource.org/licenses/gpl-license.php
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   DDDriverCommands.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaCommandModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe DDDriverCommands.xml XSLJavaCommandModel.xsl -o DDDriverCommands.java
 *
 ******************************************************************************/ 
package org.safs.model.commands;


import org.safs.model.DriverCommand;


public class DDDriverCommands {

    /*****************
    Private Singleton Instance
    ****************/
    private static final DDDriverCommands singleton = new DDDriverCommands(); 

    /*****************
    Private Constructor
    Static class needing no instantiation.
    ****************/
    private DDDriverCommands() {}

    /*****************
    public Singleton to access class static methods via instance
    ****************/
    public static DDDriverCommands getInstance() { return singleton;}

    /** "AppMapChaining" */
    static public final String APPMAPCHAINING_KEYWORD = "AppMapChaining";
    /** "AppMapResolve" */
    static public final String APPMAPRESOLVE_KEYWORD = "AppMapResolve";
    /** "AssignClipboardVariable" */
    static public final String ASSIGNCLIPBOARDVARIABLE_KEYWORD = "AssignClipboardVariable";
    /** "CallRemote" */
    static public final String CALLREMOTE_KEYWORD = "CallRemote";
    /** "CaptureMousePositionOnScreen" */
    static public final String CAPTUREMOUSEPOSITIONONSCREEN_KEYWORD = "CaptureMousePositionOnScreen";
    /** "ClearAllVariables" */
    static public final String CLEARALLVARIABLES_KEYWORD = "ClearAllVariables";
    /** "ClearAppMapCache" */
    static public final String CLEARAPPMAPCACHE_KEYWORD = "ClearAppMapCache";
    /** "ClearArrayVariables" */
    static public final String CLEARARRAYVARIABLES_KEYWORD = "ClearArrayVariables";
    /** "ClearClipboard" */
    static public final String CLEARCLIPBOARD_KEYWORD = "ClearClipboard";
    /** "CloseApplication" */
    static public final String CLOSEAPPLICATION_KEYWORD = "CloseApplication";
    /** "CloseApplicationMap" */
    static public final String CLOSEAPPLICATIONMAP_KEYWORD = "CloseApplicationMap";
    /** "CopyVariableValueEx" */
    static public final String COPYVARIABLEVALUEEX_KEYWORD = "CopyVariableValueEx";
    /** "Delay" */
    static public final String DELAY_KEYWORD = "Delay";
    /** "DisableDomain" */
    static public final String DISABLEDOMAIN_KEYWORD = "DisableDomain";
    /** "EnableDomain" */
    static public final String ENABLEDOMAIN_KEYWORD = "EnableDomain";
    /** "Expressions" */
    static public final String EXPRESSIONS_KEYWORD = "Expressions";
    /** "GetSecsBeforeMouseDown" */
    static public final String GET_SECS_BEFORE_MOUSE_DOWN_KEYWORD = "GetSecsBeforeMouseDown";
    /** "GetSecsBeforeMouseUp" */
    static public final String GET_SECS_BEFORE_MOUSE_UP_KEYWORD = "GetSecsBeforeMouseUp";
    /** "GetAppMapValue" */
    static public final String GETAPPMAPVALUE_KEYWORD = "GetAppMapValue";
    /** "GetCompScreenResolution" */
    static public final String GETCOMPSCREENRESOLUTION_KEYWORD = "GetCompScreenResolution";
    /** "GetDeltaDate" */
    static public final String GETDELTADATE_KEYWORD = "GetDeltaDate";
    /** "GetMillisBetweenRecords" */
    static public final String GETMILLISBETWEENRECORDS_KEYWORD = "GetMillisBetweenRecords";
    /** "GetRegistryKeyValue" */
    static public final String GETREGISTRYKEYVALUE_KEYWORD = "GetRegistryKeyValue";
    /** "GetSecsAfterWindowActive" */
    static public final String GETSECSAFTERWINDOWACTIVE_KEYWORD = "GetSecsAfterWindowActive";
    /** "GetSecsDelayRetryComponent" */
    static public final String GETSECSDELAYRETRYCOMPONENT_KEYWORD = "GetSecsDelayRetryComponent";
    /** "GetSecsSeekComponent" */
    static public final String GETSECSSEEKCOMPONENT_KEYWORD = "GetSecsSeekComponent";
    /** "GetSystemDate" */
    static public final String GETSYSTEMDATE_KEYWORD = "GetSystemDate";
    /** "GetSystemDateTime" */
    static public final String GETSYSTEMDATETIME_KEYWORD = "GetSystemDateTime";
    /** "GetSystemTime" */
    static public final String GETSYSTEMTIME_KEYWORD = "GetSystemTime";
    /** "GetURL" */
    static public final String GETURL_KEYWORD = "GetURL";
    /** "GetVersion" */
    static public final String GETVERSION_KEYWORD = "GetVersion";
    /** "HideSoftKeyboard" */
    static public final String HIDESOFTKEYBOARD_KEYWORD = "HideSoftKeyboard";
    /** "HighLight" */
    static public final String HIGHLIGHT_KEYWORD = "HighLight";
    /** "LaunchApplication" */
    static public final String LAUNCHAPPLICATION_KEYWORD = "LaunchApplication";
    /** "NotifyAndWait" */
    static public final String NOTIFYANDWAIT_KEYWORD = "NotifyAndWait";
    /** "Pause" */
    static public final String PAUSE_KEYWORD = "Pause";
    /** "SaveClipboardToFile" */
    static public final String SAVECLIPBOARDTOFILE_KEYWORD = "SaveClipboardToFile";
    /** "SaveURLToFile" */
    static public final String SAVEURLTOFILE_KEYWORD = "SaveURLToFile";
    /** "ScrollWheel" */
    static public final String SCROLLWHEEL_KEYWORD = "ScrollWheel";
    /** "SendEmail" */
    static public final String SENDEMAIL_KEYWORD = "SendEmail";
    /** "SetSecsBeforeMouseDown" */
    static public final String SET_SECS_BEFORE_MOUSE_DOWN_KEYWORD = "SetSecsBeforeMouseDown";
    /** "SetSecsBeforeMouseUp" */
    static public final String SET_SECS_BEFORE_MOUSE_UP_KEYWORD = "SetSecsBeforeMouseUp";
    /** "SetApplicationMap" */
    static public final String SETAPPLICATIONMAP_KEYWORD = "SetApplicationMap";
    /** "SetBenchDirectory" */
    static public final String SETBENCHDIRECTORY_KEYWORD = "SetBenchDirectory";
    /** "SetClipboard" */
    static public final String SETCLIPBOARD_KEYWORD = "SetClipboard";
    /** "SetContext" */
    static public final String SETCONTEXT_KEYWORD = "SetContext";
    /** "SetDifDirectory" */
    static public final String SETDIFDIRECTORY_KEYWORD = "SetDifDirectory";
    /** "SetFocus" */
    static public final String SETFOCUS_KEYWORD = "SetFocus";
    /** "SetImageDebug" */
    static public final String SETIMAGEDEBUG_KEYWORD = "SetImageDebug";
    /** "SetImageFuzzyMatching" */
    static public final String SETIMAGEFUZZYMATCHING_KEYWORD = "SetImageFuzzyMatching";
    /** "SetMillisBetweenRecords" */
    static public final String SETMILLISBETWEENRECORDS_KEYWORD = "SetMillisBetweenRecords";
    /** "SetMultipleThreadSearch" */
    static public final String SETMULTIPLETHREADSEARCH_KEYWORD = "SetMultipleThreadSearch";
    /** "SetProjectDirectory" */
    static public final String SETPROJECTDIRECTORY_KEYWORD = "SetProjectDirectory";
    /** "SetRootVerifyDirectory" */
    static public final String SETROOTVERIFYDIRECTORY_KEYWORD = "SetRootVerifyDirectory";
    /** "SetSecsAfterWindowActive" */
    static public final String SETSECSAFTERWINDOWACTIVE_KEYWORD = "SetSecsAfterWindowActive";
    /** "SetSecsDelayRetryComponent" */
    static public final String SETSECSDELAYRETRYCOMPONENT_KEYWORD = "SetSecsDelayRetryComponent";
    /** "SetSecsSeekComponent" */
    static public final String SETSECSSEEKCOMPONENT_KEYWORD = "SetSecsSeekComponent";
    /** "SetTestDirectory" */
    static public final String SETTESTDIRECTORY_KEYWORD = "SetTestDirectory";
    /** "SetVariableValueEx" */
    static public final String SETVARIABLEVALUEEX_KEYWORD = "SetVariableValueEx";
    /** "SetVariableValues" */
    static public final String SETVARIABLEVALUES_KEYWORD = "SetVariableValues";
    /** "ShowSoftKeyboard" */
    static public final String SHOWSOFTKEYBOARD_KEYWORD = "ShowSoftKeyboard";
    /** "StartWebBrowser" */
    static public final String STARTWEBBROWSER_KEYWORD = "StartWebBrowser";
    /** "StopWebBrowser" */
    static public final String STOPWEBBROWSER_KEYWORD = "StopWebBrowser";
    /** "TakeScreenShot" */
    static public final String TAKESCREENSHOT_KEYWORD = "TakeScreenShot";
    /** "UseAbbotFunctions" */
    static public final String USEABBOTFUNCTIONS_KEYWORD = "UseAbbotFunctions";
    /** "UseDroidFunctions" */
    static public final String USEDRIODFUNCTIONS_KEYWORD = "UseDroidFunctions";
    /** "UseIOSFunctions" */
    static public final String USEIOSFUNCTIONS_KEYWORD = "UseIOSFunctions";
    /** "UseQTPFunctions" */
    static public final String USEQTPFUNCTIONS_KEYWORD = "UseQTPFunctions";
    /** "UseRobotJFunctions" */
    static public final String USEROBOTJFUNCTIONS_KEYWORD = "UseRobotJFunctions";
    /** "UseSAFSFunctions" */
    static public final String USESAFSFUNCTIONS_KEYWORD = "UseSAFSFunctions";
    /** "UseSeleniumFunctions" */
    static public final String USESELENIUMFUNCTIONS_KEYWORD = "UseSeleniumFunctions";
    /** "UseTestCompleteFunctions" */
    static public final String USETESTCOMPLETEFUNCTIONS_KEYWORD = "UseTestCompleteFunctions";
    /** "UseWebBrowser" */
    static public final String USEWEBBROWSER_KEYWORD = "UseWebBrowser";
    /** "VerifyClipboardToFile" */
    static public final String VERIFYCLIPBOARDTOFILE_KEYWORD = "VerifyClipboardToFile";
    /** "VerifyURLContent" */
    static public final String VERIFYURLCONTENT_KEYWORD = "VerifyURLContent";
    /** "VerifyURLToFile" */
    static public final String VERIFYURLTOFILE_KEYWORD = "VerifyURLToFile";
    /** "Version" */
    static public final String VERSION_KEYWORD = "Version";
    /** "WaitForGUI" */
    static public final String WAITFORGUI_KEYWORD = "WaitForGUI";
    /** "WaitForGUIGone" */
    static public final String WAITFORGUIGONE_KEYWORD = "WaitForGUIGone";
    /** "WaitForPropertyValue" */
    static public final String WAITFORPROPERTYVALUE_KEYWORD = "WaitForPropertyValue";
    /** "WaitForPropertyValueGone" */
    static public final String WAITFORPROPERTYVALUEGONE_KEYWORD = "WaitForPropertyValueGone";
    /** "WaitForRegistryKeyExists" */
    static public final String WAITFORREGISTRYKEYEXISTS_KEYWORD = "WaitForRegistryKeyExists";
    /** "WaitForRegistryKeyValue" */
    static public final String WAITFORREGISTRYKEYVALUE_KEYWORD = "WaitForRegistryKeyValue";
    /** "WaitForWebPage" */
    static public final String WAITFORWEBPAGE_KEYWORD = "WaitForWebPage";


    /*********** <pre> 
                 Enable and Disable support for App Map chaining.
              
		 The SAFSMAPS service historically looked for values in the 'default' AppMap.  
		 This is typically the last AppMap that was OPENed.  This service will now lookup 
		 values in what is called the AppMap 'chain'.  This chain is simply a 
		 Last-In-First-Out (LIFO) buffer of open AppMaps.  As an AppMap is OPENed it is 
		 placed at the top of the search chain.  AppMaps already in the chain are moved 
		 down the chain and searched in a LIFO order.  This allows a primary AppMap to 
		 be OPENed that might contain many default and shared values while subsequently 
		 opened AppMaps might have overriding entries, entries that build upon the 
		 defaults, or contain locale-specific entries for things like NLS testing.
		 
		 Support is currently provided via the SAFSMAPS service.
		 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS SDCommands</LI>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param mode  Optional:NO  DefaultVal:ON 
                 Enable("ON") or Disable("OFF") this feature.
              
     **********/
    static public DriverCommand appMapChaining (String mode) {

        if ( mode == null ) throw new IllegalArgumentException ( "appMapChaining.mode = null");
        DriverCommand dc = new DriverCommand(APPMAPCHAINING_KEYWORD);
        dc.addParameter(mode);
        return dc;
    }


    /*********** <pre> 
                 Enable and Disable support for embedded DDVariables in App Map strings.
              
                 When enabled (ON), the App Map processor will resolve DDVariable references when 
                 they are wrapped in curly braces {^varName} anywhere in the value portion of an 
                 AppMap entry.  There should be no spaces anywhere between the curly braces or the 
                 variable will be considered literal text and will not be resolved.
                 
		 ;these two items have no section identifier
		 ;they are part of an initial, unnamed section
		 AnItem  = A normal static value
		 NewItem = Another static value
		 
		 [ASection]
		 AnItem = A normal static value
		 Item2  = Type=Component;Text={^text}
		 Item3  = Type=Window;Caption={^caption};\;Type=CheckBox;Text={^text}
		 
		 The syntax for Item2 specifies that the value of the DDVariable ^text should be 
		 retrieved and embedded in the value provided for Item2.
		 
		 The syntax for Item3 specifies that the value of the DDVariables ^caption and 
		 ^text should be retrieved and embedded in the value provided for Item3.
		 
		 
		 Support is currently provided via the SAFSMAPS service.
		 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS SDCommands</LI>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param mode  Optional:NO  DefaultVal:ON 
                 Enable("ON") or Disable("OFF") this feature.
              
     **********/
    static public DriverCommand appMapResolve (String mode) {

        if ( mode == null ) throw new IllegalArgumentException ( "appMapResolve.mode = null");
        DriverCommand dc = new DriverCommand(APPMAPRESOLVE_KEYWORD);
        dc.addParameter(mode);
        return dc;
    }


    /*********** <pre> 
                 Copy the clipboard contents to a DDVariable.
              
                 Copy the clipboard contents to a DDVariable. 
                 This command can only copy text contents of the clipboard.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
        <LI>Google Android</LI>
    </UL>

     @param varName  Optional:NO 
                 The variable to copy the clipboard text into.
              
     **********/
    static public DriverCommand assignClipboardVariable (String varName) {

        if ( varName == null ) throw new IllegalArgumentException ( "assignClipboardVariable.varName = null");
        DriverCommand dc = new DriverCommand(ASSIGNCLIPBOARDVARIABLE_KEYWORD);
        dc.addParameter(varName);
        return dc;
    }


    /*********** <pre>Execute a command on an external system / application.
               Execute a command on an external system / application. This command presently supports only the STAF protocol.
               Command syntax, parameters, and values will be dependent upon the protocol specified and 
               the command issued to the remote (or even local) system.
                </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param protocol  Optional:No
              The name of the protocol to use. Presently only 'STAF' is supported.
     @param systemName  Optional:No
			  The name of the system to send the command to.
     @param serviceName  Optional:No
              The service name to be called on the external system / application.
     @param command  Optional:No
              The service command to be issued to the external system / application.
     @param varName  Optional:Yes  DefaultVal:result
                 The DDVariable root name to receive the results.
              
     @param parameters  Optional:Yes
              Additional parameters to be passed to the service command.
     **********/
    static public DriverCommand callRemote (String protocol, String systemName, String serviceName, String command, String varName, String parameters) {

        if ( command == null ) throw new IllegalArgumentException ( "callRemote.command = null");
        if ( protocol == null ) throw new IllegalArgumentException ( "callRemote.protocol = null");
        if ( serviceName == null ) throw new IllegalArgumentException ( "callRemote.serviceName = null");
        if ( systemName == null ) throw new IllegalArgumentException ( "callRemote.systemName = null");
        DriverCommand dc = new DriverCommand(CALLREMOTE_KEYWORD);
        dc.addParameter(protocol);
        dc.addParameter(systemName);
        dc.addParameter(serviceName);
        dc.addParameter(command);
        dc.addParameter(varName);
        dc.addParameter(parameters);
        return dc;
    }


    /*********** <pre>Execute a command on an external system / application.
               Execute a command on an external system / application. This command presently supports only the STAF protocol.
               Command syntax, parameters, and values will be dependent upon the protocol specified and 
               the command issued to the remote (or even local) system.
                </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        protocol -- Optional:No
              The name of the protocol to use. Presently only 'STAF' is supported.<BR/>        systemName -- Optional:No
			  The name of the system to send the command to.<BR/>        serviceName -- Optional:No
              The service name to be called on the external system / application.<BR/>        command -- Optional:No
              The service command to be issued to the external system / application.<BR/>        varName -- Optional:Yes  DefaultVal:result
                 The DDVariable root name to receive the results.
              <BR/>        parameters -- Optional:Yes
              Additional parameters to be passed to the service command.
    </UL>

     **********/
    static public DriverCommand callRemote (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "callRemote.parameters = null");
        DriverCommand dc = new DriverCommand(CALLREMOTE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Capture the location of the mouse pointer relative to the screen and save the x and y components into variables.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS SDCommands</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>AutomatedQA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param x_VariableName  Optional:NO 
                 The name of the DDVariable to store the X component of the mouse position.
              
     @param y_VariableName  Optional:NO 
                 The name of the DDVariable to store the Y component of the mouse position.
              
     **********/
    static public DriverCommand captureMousePositionOnScreen (String x_VariableName, String y_VariableName) {

        if ( x_VariableName == null ) throw new IllegalArgumentException ( "captureMousePositionOnScreen.x_VariableName = null");
        if ( y_VariableName == null ) throw new IllegalArgumentException ( "captureMousePositionOnScreen.y_VariableName = null");
        DriverCommand dc = new DriverCommand(CAPTUREMOUSEPOSITIONONSCREEN_KEYWORD);
        dc.addParameter(x_VariableName);
        dc.addParameter(y_VariableName);
        return dc;
    }


    /*********** <pre> 
                 Capture the location of the mouse pointer relative to the screen and save the x and y components into variables.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS SDCommands</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>AutomatedQA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        x_VariableName -- Optional:NO 
                 The name of the DDVariable to store the X component of the mouse position.
              <BR/>        y_VariableName -- Optional:NO 
                 The name of the DDVariable to store the Y component of the mouse position.
              
    </UL>

     **********/
    static public DriverCommand captureMousePositionOnScreen (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "captureMousePositionOnScreen.parameters = null");
        DriverCommand dc = new DriverCommand(CAPTUREMOUSEPOSITIONONSCREEN_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Clear storage of all DDVariables.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     **********/
    static public DriverCommand clearAllVariables () {

        DriverCommand dc = new DriverCommand(CLEARALLVARIABLES_KEYWORD);
        return dc;
    }


    /*********** <pre>
             Clear the internal application map cache.
           
             Engines often maintain an internal cache for AppMap data.
             In RobotJ, there exists a cache of
             TestObject objects, that cache is cleared by this command
             so that the recognition string algorithm has to be re-run
             the next time a window or component is to be recognized.
             This is useful for cases when a dialog pops up, goes
             away, then pops up again.  The cached version of the
             dialog or it's components may not correspond to the new 
             instance.  This command lets a tester clear the cache when
             this kind of condition may arrise.
             (Future: instruct the safsmaps service
             to reload it's application map data)
              </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
        <LI>AutomatedQA TestComplete</LI>
        <LI>Google Android</LI>
    </UL>

     **********/
    static public DriverCommand clearAppMapCache () {

        DriverCommand dc = new DriverCommand(CLEARAPPMAPCACHE_KEYWORD);
        return dc;
    }


    /*********** <pre> 
              Clear storage of all SAFS variables containing a specific prefix.
              
              Users can use SAFSVARS to store pseudo-arrays simply by adding a numeric suffix to any vaiable name prefix.
              
              For example:
              
              TCAFS.UID.1
              TCAFS.UID.2
              TCAFS.UID.3
              
              This command allows you to clear/delete all such SAFSVARS array variables with a specific prefix.
              
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param arrayName  Optional:NO 
                 The variable name prefix to use for the delete.
              
     **********/
    static public DriverCommand clearArrayVariables (String arrayName) {

        if ( arrayName == null ) throw new IllegalArgumentException ( "clearArrayVariables.arrayName = null");
        DriverCommand dc = new DriverCommand(CLEARARRAYVARIABLES_KEYWORD);
        dc.addParameter(arrayName);
        return dc;
    }


    /*********** <pre> 
                 Clear the contents of the Window's clipboard.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>Google Android</LI>
    </UL>

     **********/
    static public DriverCommand clearClipboard () {

        DriverCommand dc = new DriverCommand(CLEARCLIPBOARD_KEYWORD);
        return dc;
    }


    /*********** <pre> 
                 Close a named application process launched with LaunchApplication.
               
                 Currently we can only TERMINATE processes successfully 
                 providing a TASKID during LaunchApplication.  If we were 
                 unable to get a TASKID, then we will not be able to 
                 terminate the task with this command.
                 For IOS: This simply tries to close any and all instances of the 
                 running XCode Instruments application that is driving the IOS tests.
                 For Android testing: The AUT information is configured via the test INI file and 
                 the installed APKs.  There are no parameters to provide to the CloseApplication call when 
                 closing the application under test.
              
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Apple IOS</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param applicationID  Optional:NO 
                 The Application ID or reference provided to LaunchApplication
              
     **********/
    static public DriverCommand closeApplication (String applicationID) {

        if ( applicationID == null ) throw new IllegalArgumentException ( "closeApplication.applicationID = null");
        DriverCommand dc = new DriverCommand(CLOSEAPPLICATION_KEYWORD);
        dc.addParameter(applicationID);
        return dc;
    }


    /*********** <pre> 
                 By map ID, Close a opened Application Map in map chain.
               
                 By map ID, Close a opened Application Map in map chain. Closing an App Map releases all resources 
                 used by the map and removes it from any active App Map chaining.  If the closed App Map 
                 was the "default" map then the next App Map in the chain becomes the "default" App Map.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param applicationMap  Optional:NO 
                 The path and/or filename (ID) of the Application Map to close.
              
     **********/
    static public DriverCommand closeApplicationMap (String applicationMap) {

        if ( applicationMap == null ) throw new IllegalArgumentException ( "closeApplicationMap.applicationMap = null");
        DriverCommand dc = new DriverCommand(CLOSEAPPLICATIONMAP_KEYWORD);
        dc.addParameter(applicationMap);
        return dc;
    }


    /*********** <pre> 
                 Copy the value of a (dynamic) DDVariable to another. 
                 Both fields can contain literal strings, DDVariables, or
                 any expression that evaluates to a valid variable name.  The primary 
                 purpose of this is to allow for dynamic variable creation via expressions.
                 That is something that "SetVariableValues" cannot do.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param sourceVariable  Optional:NO 
                 The name of the variable to copy.
              
     @param destinationVariable  Optional:NO 
                 The name of the variable to receive the copy
              
     **********/
    static public DriverCommand copyVariableValueEx (String sourceVariable, String destinationVariable) {

        if ( destinationVariable == null ) throw new IllegalArgumentException ( "copyVariableValueEx.destinationVariable = null");
        if ( sourceVariable == null ) throw new IllegalArgumentException ( "copyVariableValueEx.sourceVariable = null");
        DriverCommand dc = new DriverCommand(COPYVARIABLEVALUEEX_KEYWORD);
        dc.addParameter(sourceVariable);
        dc.addParameter(destinationVariable);
        return dc;
    }


    /*********** <pre> 
                 Copy the value of a (dynamic) DDVariable to another. 
                 Both fields can contain literal strings, DDVariables, or
                 any expression that evaluates to a valid variable name.  The primary 
                 purpose of this is to allow for dynamic variable creation via expressions.
                 That is something that "SetVariableValues" cannot do.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        sourceVariable -- Optional:NO 
                 The name of the variable to copy.
              <BR/>        destinationVariable -- Optional:NO 
                 The name of the variable to receive the copy
              
    </UL>

     **********/
    static public DriverCommand copyVariableValueEx (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "copyVariableValueEx.parameters = null");
        DriverCommand dc = new DriverCommand(COPYVARIABLEVALUEEX_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Delay for a specified number of milliseconds.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param timeout  Optional:NO 
                 The number of milliseconds to delay.
              
     **********/
    static public DriverCommand delay (String timeout) {

        if ( timeout == null ) throw new IllegalArgumentException ( "delay.timeout = null");
        DriverCommand dc = new DriverCommand(DELAY_KEYWORD);
        dc.addParameter(timeout);
        return dc;
    }


    /*********** <pre> 
               Disable a particular test domain for testing.
           
               Some tools support multiple test domains like Java, Html, Net, and Win domains.
               This command instructs the engine to dynamically disable a particular test domain. 
               This is the opposite of, and often used in conjunction with the command 'EnableDomain'.
               Disabling unnecessary domains may drastically improve test performance.
               </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param domain  Optional:NO 
                 The generic name of the domain to disable.
              
     **********/
    static public DriverCommand disableDomain (String domain) {

        if ( domain == null ) throw new IllegalArgumentException ( "disableDomain.domain = null");
        DriverCommand dc = new DriverCommand(DISABLEDOMAIN_KEYWORD);
        dc.addParameter(domain);
        return dc;
    }


    /*********** <pre> 
               Enable a particular test domain for testing.
           
               Some tools support multiple test domains like Java, Html, Net, and Win domains.
               This command instructs the engine to dynamically enable a particular test domain. 
               This is the opposite of, and often used in conjunction with the command 'DisableDomain'.
               Disabling unnecessary domains may drastically improve test performance.
               </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param domain  Optional:NO 
                 The generic name of the domain to enable.
              
     **********/
    static public DriverCommand enableDomain (String domain) {

        if ( domain == null ) throw new IllegalArgumentException ( "enableDomain.domain = null");
        DriverCommand dc = new DriverCommand(ENABLEDOMAIN_KEYWORD);
        dc.addParameter(domain);
        return dc;
    }


    /*********** <pre> 
                 Enable and Disable enhanced expressions.
              
                 Enable and Disable enhanced expressions. 
                 When enabled, records are pre-processed for advanced
                 expressions (math and string) conversions with DDVariables.
                 When disabled, records are pre-processed with 
                 standard DDVariable conversions for backwards compatibility.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param mode  Optional:NO  DefaultVal:OFF 
                 The status for enhanced expression handling.
              
     **********/
    static public DriverCommand expressions (String mode) {

        if ( mode == null ) throw new IllegalArgumentException ( "expressions.mode = null");
        DriverCommand dc = new DriverCommand(EXPRESSIONS_KEYWORD);
        dc.addParameter(mode);
        return dc;
    }


    /*********** <pre>Assign a DDVariable a value from an App Map.
        Allows the extraction of an App Map item value into a DDVariable.  The user can optionally 
        provide the App Map ID and Section from which the entry is sought.  The default is to 
        retrieve the value from the default section in the default App Map.
           </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param appMapID  Optional:YES  DefaultVal:
              The ID provided for the AppMap when OPENed.
     @param section  Optional:YES  DefaultVal:
              The Section within the App Map to locate the entry.
     @param item  Optional:NO  DefaultVal:
              The Item within the App Map to retrieve.
     @param varName  Optional:NO  DefaultVal:
              The name of the variable to receive the value.
     **********/
    static public DriverCommand getAppMapValue (String appMapID, String section, String item, String varName) {

        if ( item == null ) throw new IllegalArgumentException ( "getAppMapValue.item = null");
        if ( varName == null ) throw new IllegalArgumentException ( "getAppMapValue.varName = null");
        DriverCommand dc = new DriverCommand(GETAPPMAPVALUE_KEYWORD);
        dc.addParameter(appMapID);
        dc.addParameter(section);
        dc.addParameter(item);
        dc.addParameter(varName);
        return dc;
    }


    /*********** <pre>Assign a DDVariable a value from an App Map.
        Allows the extraction of an App Map item value into a DDVariable.  The user can optionally 
        provide the App Map ID and Section from which the entry is sought.  The default is to 
        retrieve the value from the default section in the default App Map.
           </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        appMapID -- Optional:YES  DefaultVal:
              The ID provided for the AppMap when OPENed.<BR/>        section -- Optional:YES  DefaultVal:
              The Section within the App Map to locate the entry.<BR/>        item -- Optional:NO  DefaultVal:
              The Item within the App Map to retrieve.<BR/>        varName -- Optional:NO  DefaultVal:
              The name of the variable to receive the value.
    </UL>

     **********/
    static public DriverCommand getAppMapValue (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getAppMapValue.parameters = null");
        DriverCommand dc = new DriverCommand(GETAPPMAPVALUE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>Gets the current computer screen resolution and returns x and y values.
        Gets the current computer screen resolution and returns x and y values.
           </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param xWidthVariable  Optional:NO
              SAFSVARS name to be used to store x screen resolution
     @param yHeightVariable  Optional:NO
              SAFSVARS name to be used to store y screen resolution
     **********/
    static public DriverCommand getCompScreenResolution (String xWidthVariable, String yHeightVariable) {

        if ( xWidthVariable == null ) throw new IllegalArgumentException ( "getCompScreenResolution.xWidthVariable = null");
        if ( yHeightVariable == null ) throw new IllegalArgumentException ( "getCompScreenResolution.yHeightVariable = null");
        DriverCommand dc = new DriverCommand(GETCOMPSCREENRESOLUTION_KEYWORD);
        dc.addParameter(xWidthVariable);
        dc.addParameter(yHeightVariable);
        return dc;
    }


    /*********** <pre>Gets the current computer screen resolution and returns x and y values.
        Gets the current computer screen resolution and returns x and y values.
           </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        xWidthVariable -- Optional:NO
              SAFSVARS name to be used to store x screen resolution<BR/>        yHeightVariable -- Optional:NO
              SAFSVARS name to be used to store y screen resolution
    </UL>

     **********/
    static public DriverCommand getCompScreenResolution (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getCompScreenResolution.parameters = null");
        DriverCommand dc = new DriverCommand(GETCOMPSCREENRESOLUTION_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>Calculates the delta date positive or negative delta days from the supplied date
        Calculates the delta date positive or negative delta days from the supplied date.
        The resulting date is in the "Short Date" format.
           </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param sourceDateString  Optional:NO
              String containing the date from which to calculate the delta date
     @param deltaDays  Optional:NO
              Positive or Negative number of days to calculate date from source date
     @param resultString  Optional:NO
              Variable name to receive the newly formatted date.
            
     **********/
    static public DriverCommand getDeltaDate (String sourceDateString, String deltaDays, String resultString) {

        if ( deltaDays == null ) throw new IllegalArgumentException ( "getDeltaDate.deltaDays = null");
        if ( resultString == null ) throw new IllegalArgumentException ( "getDeltaDate.resultString = null");
        if ( sourceDateString == null ) throw new IllegalArgumentException ( "getDeltaDate.sourceDateString = null");
        DriverCommand dc = new DriverCommand(GETDELTADATE_KEYWORD);
        dc.addParameter(sourceDateString);
        dc.addParameter(deltaDays);
        dc.addParameter(resultString);
        return dc;
    }


    /*********** <pre>Calculates the delta date positive or negative delta days from the supplied date
        Calculates the delta date positive or negative delta days from the supplied date.
        The resulting date is in the "Short Date" format.
           </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        sourceDateString -- Optional:NO
              String containing the date from which to calculate the delta date<BR/>        deltaDays -- Optional:NO
              Positive or Negative number of days to calculate date from source date<BR/>        resultString -- Optional:NO
              Variable name to receive the newly formatted date.
            
    </UL>

     **********/
    static public DriverCommand getDeltaDate (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getDeltaDate.parameters = null");
        DriverCommand dc = new DriverCommand(GETDELTADATE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                Get the pause between two records, and assigns the value to a DDVariable. 
              
                Get the pause between two records, and assigns the value to a DDVariable.
                This time is milli-seconds.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param variableName  Optional:NO 
                 The name of the variable to receive the pause between two records.
              
     **********/
    static public DriverCommand getMillisBetweenRecords (String variableName) {

        if ( variableName == null ) throw new IllegalArgumentException ( "getMillisBetweenRecords.variableName = null");
        DriverCommand dc = new DriverCommand(GETMILLISBETWEENRECORDS_KEYWORD);
        dc.addParameter(variableName);
        return dc;
    }


    /*********** <pre> 
                 Assign the value of the specified Registry Key to a variable.
              On Windows XP (and higher?) this is accomplished via 
              the REG.EXE provided by the operating system.  If this program is NOT available 
              then the Registry commands will not work until another means is implemented--possibly 
              Windows Scripting Host scripts, etc..
              If the registry key does not exist then a failure will be recorded and no value--an  
              empty string--will be assigned to the variable.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS SDCommands</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param key  Optional:NO 
                 The Registry Key name to seek.
              
     @param keyValue  Optional:NO 
                 The value name under the parent key to seek.
              
     @param varName  Optional:NO 
                 The name of the variable to receive the value of the registry key.
              
     **********/
    static public DriverCommand getRegistryKeyValue (String key, String keyValue, String varName) {

        if ( key == null ) throw new IllegalArgumentException ( "getRegistryKeyValue.key = null");
        if ( keyValue == null ) throw new IllegalArgumentException ( "getRegistryKeyValue.keyValue = null");
        if ( varName == null ) throw new IllegalArgumentException ( "getRegistryKeyValue.varName = null");
        DriverCommand dc = new DriverCommand(GETREGISTRYKEYVALUE_KEYWORD);
        dc.addParameter(key);
        dc.addParameter(keyValue);
        dc.addParameter(varName);
        return dc;
    }


    /*********** <pre> 
                 Assign the value of the specified Registry Key to a variable.
              On Windows XP (and higher?) this is accomplished via 
              the REG.EXE provided by the operating system.  If this program is NOT available 
              then the Registry commands will not work until another means is implemented--possibly 
              Windows Scripting Host scripts, etc..
              If the registry key does not exist then a failure will be recorded and no value--an  
              empty string--will be assigned to the variable.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS SDCommands</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        key -- Optional:NO 
                 The Registry Key name to seek.
              <BR/>        keyValue -- Optional:NO 
                 The value name under the parent key to seek.
              <BR/>        varName -- Optional:NO 
                 The name of the variable to receive the value of the registry key.
              
    </UL>

     **********/
    static public DriverCommand getRegistryKeyValue (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getRegistryKeyValue.parameters = null");
        DriverCommand dc = new DriverCommand(GETREGISTRYKEYVALUE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                Get the delay after window is activated, and assigns the value to a DDVariable. 
              
                Get the delay after window is activated, and assigns the value to a DDVariable.
                This time is seconds.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param variableName  Optional:NO 
                 The name of the variable to receive the delay after window is activated.
              
     **********/
    static public DriverCommand getSecsAfterWindowActive (String variableName) {

        if ( variableName == null ) throw new IllegalArgumentException ( "getSecsAfterWindowActive.variableName = null");
        DriverCommand dc = new DriverCommand(GETSECSAFTERWINDOWACTIVE_KEYWORD);
        dc.addParameter(variableName);
        return dc;
    }


    /*********** <pre> 
                Get the delay before mouse down, and assigns the value to a DDVariable. 
              
                Get the delay before mouse down, and assigns the value to a DDVariable.
                This time is seconds.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param variableName  Optional:NO 
                 The name of the variable to receive the delay before mouse down.
              
     **********/
    static public DriverCommand getSecsBeforeMouseDown (String variableName) {

        if ( variableName == null ) throw new IllegalArgumentException ( "getSecsBeforeMouseDown.variableName = null");
        DriverCommand dc = new DriverCommand(GET_SECS_BEFORE_MOUSE_DOWN_KEYWORD);
        dc.addParameter(variableName);
        return dc;
    }


    /*********** <pre> 
                Get the delay before mouse up, and assigns the value to a DDVariable. 
              
                Get the delay before mouse up, and assigns the value to a DDVariable.
                This time is seconds.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param variableName  Optional:NO 
                 The name of the variable to receive the delay before mouse up.
              
     **********/
    static public DriverCommand getSecsBeforeMouseUp (String variableName) {

        if ( variableName == null ) throw new IllegalArgumentException ( "getSecsBeforeMouseUp.variableName = null");
        DriverCommand dc = new DriverCommand(GET_SECS_BEFORE_MOUSE_UP_KEYWORD);
        dc.addParameter(variableName);
        return dc;
    }


    /*********** <pre> 
                Get the delay of re-finding object, and assigns the value to a DDVariable. 
              
                Get the delay of re-finding object, and assigns the value to a DDVariable.
                This time is seconds.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param variableName  Optional:NO 
                 The name of the variable to receive the delay of re-finding object.
              
     **********/
    static public DriverCommand getSecsDelayRetryComponent (String variableName) {

        if ( variableName == null ) throw new IllegalArgumentException ( "getSecsDelayRetryComponent.variableName = null");
        DriverCommand dc = new DriverCommand(GETSECSDELAYRETRYCOMPONENT_KEYWORD);
        dc.addParameter(variableName);
        return dc;
    }


    /*********** <pre> 
                Get the timeout of finding object, and assigns the value to a DDVariable. 
              
                Get the timeout of finding object, and assigns the value to a DDVariable.
                This time is seconds.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param variableName  Optional:NO 
                 The name of the variable to receive the timeout of finding object.
              
     **********/
    static public DriverCommand getSecsSeekComponent (String variableName) {

        if ( variableName == null ) throw new IllegalArgumentException ( "getSecsSeekComponent.variableName = null");
        DriverCommand dc = new DriverCommand(GETSECSSEEKCOMPONENT_KEYWORD);
        dc.addParameter(variableName);
        return dc;
    }


    /*********** <pre> 
                Assigns the string value of the system date to a DDVariable. 
              
                Assigns the string value of the system date to a DDVariable. 
                This date is in the format MM-DD-YYYY.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param variableName  Optional:NO 
                 The name of the variable to receive the System Date.
              
     **********/
    static public DriverCommand getSystemDate (String variableName) {

        if ( variableName == null ) throw new IllegalArgumentException ( "getSystemDate.variableName = null");
        DriverCommand dc = new DriverCommand(GETSYSTEMDATE_KEYWORD);
        dc.addParameter(variableName);
        return dc;
    }


    /*********** <pre> 
                Assigns the string value of the system datetime to a DDVariable. 
              
                Assigns the string value of the system datetime to a DDVariable. 
                This date is in the format MM-DD-YYYY HH:MM:SS, it is in AM-PM 12-hours
                format (1-12) be default; If you set the second parameter 'GetMilitaryTime'
                to True, the time will be 24-hours military format (0-23). Use military time
                is recommanded, as am-pm time has confusion without AM or PM
                (example: 18:00 and 06:00 will be both 06:00)
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param variableName  Optional:NO 
                 The name of the variable to receive the System DateTime.
              
     @param getMilitaryTime  Optional:YES 
                 If true, the converted time is in 24-hours military time format
              
     **********/
    static public DriverCommand getSystemDateTime (String variableName, String getMilitaryTime) {

        if ( variableName == null ) throw new IllegalArgumentException ( "getSystemDateTime.variableName = null");
        DriverCommand dc = new DriverCommand(GETSYSTEMDATETIME_KEYWORD);
        dc.addParameter(variableName);
        dc.addParameter(getMilitaryTime);
        return dc;
    }


    /*********** <pre> 
                Assigns the string value of the system datetime to a DDVariable. 
              
                Assigns the string value of the system datetime to a DDVariable. 
                This date is in the format MM-DD-YYYY HH:MM:SS, it is in AM-PM 12-hours
                format (1-12) be default; If you set the second parameter 'GetMilitaryTime'
                to True, the time will be 24-hours military format (0-23). Use military time
                is recommanded, as am-pm time has confusion without AM or PM
                (example: 18:00 and 06:00 will be both 06:00)
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        variableName -- Optional:NO 
                 The name of the variable to receive the System DateTime.
              <BR/>        getMilitaryTime -- Optional:YES 
                 If true, the converted time is in 24-hours military time format
              
    </UL>

     **********/
    static public DriverCommand getSystemDateTime (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getSystemDateTime.parameters = null");
        DriverCommand dc = new DriverCommand(GETSYSTEMDATETIME_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                Assigns the string value of the current system time to a DDVariable. 
              
                Assigns the string value of the current system time to a DDVariable. 
                This date is in the format HH:MM:SS, it is in AM-PM 12-hours
                format (1-12) be default; If you set the second parameter 'GetMilitaryTime'
                to True, the time will be 24-hours military format (0-23). Use military time
                is recommanded, as am-pm time has confusion without AM or PM
                (example: 18:00 and 06:00 will be both 06:00)                
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param variableName  Optional:NO 
                 The name of the variable to receive the System Time.
              
     @param getMilitaryTime  Optional:YES 
                 If true, the converted time is in 24-hours military time format
              
     **********/
    static public DriverCommand getSystemTime (String variableName, String getMilitaryTime) {

        if ( variableName == null ) throw new IllegalArgumentException ( "getSystemTime.variableName = null");
        DriverCommand dc = new DriverCommand(GETSYSTEMTIME_KEYWORD);
        dc.addParameter(variableName);
        dc.addParameter(getMilitaryTime);
        return dc;
    }


    /*********** <pre> 
                Assigns the string value of the current system time to a DDVariable. 
              
                Assigns the string value of the current system time to a DDVariable. 
                This date is in the format HH:MM:SS, it is in AM-PM 12-hours
                format (1-12) be default; If you set the second parameter 'GetMilitaryTime'
                to True, the time will be 24-hours military format (0-23). Use military time
                is recommanded, as am-pm time has confusion without AM or PM
                (example: 18:00 and 06:00 will be both 06:00)                
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        variableName -- Optional:NO 
                 The name of the variable to receive the System Time.
              <BR/>        getMilitaryTime -- Optional:YES 
                 If true, the converted time is in 24-hours military time format
              
    </UL>

     **********/
    static public DriverCommand getSystemTime (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getSystemTime.parameters = null");
        DriverCommand dc = new DriverCommand(GETSYSTEMTIME_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>Send an HTTP GET request, and get the response.    </pre>    Supporting Engines:
    <P/><UL>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param uRL  Optional:NoThe URL to request.
     @param variable  Optional:NoThe name of the variable holding the response sent back from the server.
     @param timeout  Optional:YesThe timeout (in seconds) waiting for the response from HTTP server. The default value is 120 seconds.
     @param headerName  Optional:YesThe HTTP request header name.
     @param headerValue  Optional:YesThe value to set for the HTTP request header.
     **********/
    static public DriverCommand getURL (String uRL, String variable, String timeout, String headerName, String headerValue) {

        if ( uRL == null ) throw new IllegalArgumentException ( "getURL.uRL = null");
        if ( variable == null ) throw new IllegalArgumentException ( "getURL.variable = null");
        DriverCommand dc = new DriverCommand(GETURL_KEYWORD);
        dc.addParameter(uRL);
        dc.addParameter(variable);
        dc.addParameter(timeout);
        dc.addParameter(headerName);
        dc.addParameter(headerValue);
        return dc;
    }


    /*********** <pre>Send an HTTP GET request, and get the response.    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        uRL -- Optional:NoThe URL to request.<BR/>        variable -- Optional:NoThe name of the variable holding the response sent back from the server.<BR/>        timeout -- Optional:YesThe timeout (in seconds) waiting for the response from HTTP server. The default value is 120 seconds.<BR/>        headerName -- Optional:YesThe HTTP request header name.<BR/>        headerValue -- Optional:YesThe value to set for the HTTP request header.
    </UL>

     **********/
    static public DriverCommand getURL (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getURL.parameters = null");
        DriverCommand dc = new DriverCommand(GETURL_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>Get the engine VERSION
        Used to specify the VERSION of the engine.
           </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param variable  Optional:NO  DefaultVal:1.0
              A variable to accept the VERSION
     **********/
    static public DriverCommand getVersion (String variable) {

        if ( variable == null ) throw new IllegalArgumentException ( "getVersion.variable = null");
        DriverCommand dc = new DriverCommand(GETVERSION_KEYWORD);
        dc.addParameter(variable);
        return dc;
    }


    /*********** <pre> 
                 Hide the soft keyboard.
              
                 Hide the soft keyboard. The soft keyboard will be shown if user click on an edit box, 
                 but the soft keyboard will show over the other components. User can use this keyword 
                 to make this soft keyboard disappear.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
    </UL>

     **********/
    static public DriverCommand hideSoftKeyboard () {

        DriverCommand dc = new DriverCommand(HIDESOFTKEYBOARD_KEYWORD);
        return dc;
    }


    /*********** <pre> 
                 Turn on or off the component highlight functionality.
              
		When enabled (ON) each call to a component function will temporarily highlight 
		the targeted component. The intent is to provide a design-time verification that the tool 
		is finding the desired target component. It is not recommended this command be used during 
		production runtime testing as there can be significant performance impact with some tools.
	       </pre>    Supporting Engines:
    <P/><UL>
        <LI>AutomatedQA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param mode  Optional:Yes 
                 The status for highlight functionality. It can be On or Off. The Default is OFF.
              
     **********/
    static public DriverCommand highLight (String mode) {

        DriverCommand dc = new DriverCommand(HIGHLIGHT_KEYWORD);
        dc.addParameter(mode);
        return dc;
    }


    /*********** <pre> 
                 Identify and Launch a specified application
              
              For IOS: This command is used to Launch the IOS Instruments testing tool.
              The user-defined Instrument's tracetemplate is used to launch the required application. 
              The tester must run the Driver Command UseIOSFunctions set to "ON" before 
              LaunchApplication or the IOS implementation of the command will not be invoked.
              For IOS Simulator testing: The Trace Template must be configured to hold all required 
              information such as:
              
              the application to be tested
              the IOS SDK Version to use/simulate
              the location for Instruments output logging
              
              For IOS Device testing: The Trace Template should be configured to hold the same 
              information. However, at runtime the user still has to (re)specify the device name and 
              application to run in the LaunchApplication CMDLineParams (see below). In addition, 
              the devicename and/or appname CANNOT contain certain special characters like an apostrophe or 
              single-quote (') since this will prevent AppleScript from making their proper selection.
              For Android testing: The AUT information is configured via the test INI file and 
              the installed APKs.  There are no parameters to provide to the LaunchApplication call when 
              launching the application to be tested.
              
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Apple IOS</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param applicationID  Optional:NO 
                 A text ID or name to reference the application
              
     @param executablePath  Optional:NO 
                 The path, filename, and parameters for the executable OR an ApplicationConstant.
              
     @param workDir  Optional:YES  DefaultVal: 
                 A Working Directory for the application (if required)
              
     @param cMDLineParam  Optional:YES  DefaultVal: 
                 Separate command line parameters for the application (if required).
              
     @param appMap  Optional:YES 
                 Filename to the Application Map for the application.
              
     **********/
    static public DriverCommand launchApplication (String applicationID, String executablePath, String workDir, String cMDLineParam, String appMap) {

        if ( applicationID == null ) throw new IllegalArgumentException ( "launchApplication.applicationID = null");
        if ( executablePath == null ) throw new IllegalArgumentException ( "launchApplication.executablePath = null");
        DriverCommand dc = new DriverCommand(LAUNCHAPPLICATION_KEYWORD);
        dc.addParameter(applicationID);
        dc.addParameter(executablePath);
        dc.addParameter(workDir);
        dc.addParameter(cMDLineParam);
        dc.addParameter(appMap);
        return dc;
    }


    /*********** <pre> 
                 Identify and Launch a specified application
              
              For IOS: This command is used to Launch the IOS Instruments testing tool.
              The user-defined Instrument's tracetemplate is used to launch the required application. 
              The tester must run the Driver Command UseIOSFunctions set to "ON" before 
              LaunchApplication or the IOS implementation of the command will not be invoked.
              For IOS Simulator testing: The Trace Template must be configured to hold all required 
              information such as:
              
              the application to be tested
              the IOS SDK Version to use/simulate
              the location for Instruments output logging
              
              For IOS Device testing: The Trace Template should be configured to hold the same 
              information. However, at runtime the user still has to (re)specify the device name and 
              application to run in the LaunchApplication CMDLineParams (see below). In addition, 
              the devicename and/or appname CANNOT contain certain special characters like an apostrophe or 
              single-quote (') since this will prevent AppleScript from making their proper selection.
              For Android testing: The AUT information is configured via the test INI file and 
              the installed APKs.  There are no parameters to provide to the LaunchApplication call when 
              launching the application to be tested.
              
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Apple IOS</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        applicationID -- Optional:NO 
                 A text ID or name to reference the application
              <BR/>        executablePath -- Optional:NO 
                 The path, filename, and parameters for the executable OR an ApplicationConstant.
              <BR/>        workDir -- Optional:YES  DefaultVal: 
                 A Working Directory for the application (if required)
              <BR/>        cMDLineParam -- Optional:YES  DefaultVal: 
                 Separate command line parameters for the application (if required).
              <BR/>        appMap -- Optional:YES 
                 Filename to the Application Map for the application.
              
    </UL>

     **********/
    static public DriverCommand launchApplication (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "launchApplication.parameters = null");
        DriverCommand dc = new DriverCommand(LAUNCHAPPLICATION_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Display a user-defined message dialog and wait until dismissed.
              
                 Display a user-defined message dialog and wait until dismissed.
                 If prompting the user to perform some action the message should indicate the action 
                 should be completed BEFORE the dialog is dismissed.  Once the dialog is dismissed 
                 automated test execution proceeds immediately.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param message  Optional:NO 
                 The text message to be displayed in the dialog.
              
     @param title  Optional:YES 
                 A short user-defined title for the dialog.
              
     **********/
    static public DriverCommand notifyAndWait (String message, String title) {

        if ( message == null ) throw new IllegalArgumentException ( "notifyAndWait.message = null");
        DriverCommand dc = new DriverCommand(NOTIFYANDWAIT_KEYWORD);
        dc.addParameter(message);
        dc.addParameter(title);
        return dc;
    }


    /*********** <pre> 
                 Display a user-defined message dialog and wait until dismissed.
              
                 Display a user-defined message dialog and wait until dismissed.
                 If prompting the user to perform some action the message should indicate the action 
                 should be completed BEFORE the dialog is dismissed.  Once the dialog is dismissed 
                 automated test execution proceeds immediately.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        message -- Optional:NO 
                 The text message to be displayed in the dialog.
              <BR/>        title -- Optional:YES 
                 A short user-defined title for the dialog.
              
    </UL>

     **********/
    static public DriverCommand notifyAndWait (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "notifyAndWait.parameters = null");
        DriverCommand dc = new DriverCommand(NOTIFYANDWAIT_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Pause for a specified number of seconds.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param timeout  Optional:NO 
                 The number of seconds to Pause.
              
     **********/
    static public DriverCommand pause (String timeout) {

        if ( timeout == null ) throw new IllegalArgumentException ( "pause.timeout = null");
        DriverCommand dc = new DriverCommand(PAUSE_KEYWORD);
        dc.addParameter(timeout);
        return dc;
    }


    /*********** <pre> 
                 Save the clipboard contents to a text file.
              
                 Save the clipboard contents to a text file.
                 
                 This command can only save text contents of the clipboard. The
                 length of the clipboard text should not exceed 32,767 characters
                 due to the inherent size limit of SQABasic's String data type.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Google Android</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param file  Optional:NO 
                 The file to save the clipboard contents to.
              
     @param encoding  Optional:Yes 
                 The encoding used to write a file.
              
     **********/
    static public DriverCommand saveClipboardToFile (String file, String encoding) {

        if ( file == null ) throw new IllegalArgumentException ( "saveClipboardToFile.file = null");
        DriverCommand dc = new DriverCommand(SAVECLIPBOARDTOFILE_KEYWORD);
        dc.addParameter(file);
        dc.addParameter(encoding);
        return dc;
    }


    /*********** <pre> 
                 Save the clipboard contents to a text file.
              
                 Save the clipboard contents to a text file.
                 
                 This command can only save text contents of the clipboard. The
                 length of the clipboard text should not exceed 32,767 characters
                 due to the inherent size limit of SQABasic's String data type.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Google Android</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        file -- Optional:NO 
                 The file to save the clipboard contents to.
              <BR/>        encoding -- Optional:Yes 
                 The encoding used to write a file.
              
    </UL>

     **********/
    static public DriverCommand saveClipboardToFile (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "saveClipboardToFile.parameters = null");
        DriverCommand dc = new DriverCommand(SAVECLIPBOARDTOFILE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>Send an HTTP GET request, and save the response into a file.    </pre>    Supporting Engines:
    <P/><UL>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param uRL  Optional:NoThe URL to request.
     @param file  Optional:NoThe name of the file holding the response sent back from the server.
     @param timeout  Optional:YesThe timeout (in seconds) waiting for the response from HTTP server. The default value is 120 seconds.
     @param headerName  Optional:YesThe HTTP request header name.
     @param headerValue  Optional:YesThe value to set for the HTTP request header.
     **********/
    static public DriverCommand saveURLToFile (String uRL, String file, String timeout, String headerName, String headerValue) {

        if ( file == null ) throw new IllegalArgumentException ( "saveURLToFile.file = null");
        if ( uRL == null ) throw new IllegalArgumentException ( "saveURLToFile.uRL = null");
        DriverCommand dc = new DriverCommand(SAVEURLTOFILE_KEYWORD);
        dc.addParameter(uRL);
        dc.addParameter(file);
        dc.addParameter(timeout);
        dc.addParameter(headerName);
        dc.addParameter(headerValue);
        return dc;
    }


    /*********** <pre>Send an HTTP GET request, and save the response into a file.    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        uRL -- Optional:NoThe URL to request.<BR/>        file -- Optional:NoThe name of the file holding the response sent back from the server.<BR/>        timeout -- Optional:YesThe timeout (in seconds) waiting for the response from HTTP server. The default value is 120 seconds.<BR/>        headerName -- Optional:YesThe HTTP request header name.<BR/>        headerValue -- Optional:YesThe value to set for the HTTP request header.
    </UL>

     **********/
    static public DriverCommand saveURLToFile (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "saveURLToFile.parameters = null");
        DriverCommand dc = new DriverCommand(SAVEURLTOFILE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                Move mouse wheel forward (up) or backward (down). 
              
                Move mouse wheel forward (up) or backward (down).
                A positive value indicates the wheel was moved forward (up) and a negative value indicates the wheel was moved backward (down).
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>AutomatedQA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param numClicks  Optional:NO 
                 The number of mouse wheel clicks to move.
.              
     **********/
    static public DriverCommand scrollWheel (String numClicks) {

        if ( numClicks == null ) throw new IllegalArgumentException ( "scrollWheel.numClicks = null");
        DriverCommand dc = new DriverCommand(SCROLLWHEEL_KEYWORD);
        dc.addParameter(numClicks);
        return dc;
    }


    /*********** <pre>Send email notification with attachments.Send email notification with attachments.
                      Mutiple TOs, custom subject line, custom message and attachment are allowed. 
                      HTML tag pass into message to display message into HTML format.    </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param from  Optional:NOEmail address sending the Email.
     @param to  Optional:NOEmail addresses to receive the email.
     @param subject  Optional:NOThe Subject of the email.
     @param message  Optional:YESText or HTML message.
     @param attachment  Optional:YESEmail attachment file path
     **********/
    static public DriverCommand sendEmail (String from, String to, String subject, String message, String attachment) {

        if ( from == null ) throw new IllegalArgumentException ( "sendEmail.from = null");
        if ( subject == null ) throw new IllegalArgumentException ( "sendEmail.subject = null");
        if ( to == null ) throw new IllegalArgumentException ( "sendEmail.to = null");
        DriverCommand dc = new DriverCommand(SENDEMAIL_KEYWORD);
        dc.addParameter(from);
        dc.addParameter(to);
        dc.addParameter(subject);
        dc.addParameter(message);
        dc.addParameter(attachment);
        return dc;
    }


    /*********** <pre>Send email notification with attachments.Send email notification with attachments.
                      Mutiple TOs, custom subject line, custom message and attachment are allowed. 
                      HTML tag pass into message to display message into HTML format.    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        from -- Optional:NOEmail address sending the Email.<BR/>        to -- Optional:NOEmail addresses to receive the email.<BR/>        subject -- Optional:NOThe Subject of the email.<BR/>        message -- Optional:YESText or HTML message.<BR/>        attachment -- Optional:YESEmail attachment file path
    </UL>

     **********/
    static public DriverCommand sendEmail (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "sendEmail.parameters = null");
        DriverCommand dc = new DriverCommand(SENDEMAIL_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Provide the Application Map for the DDE to use
               
                 Provide the Application Map for the DDE to use.  This command must be used 
                 prior to ANY other command or script referencing the AppMap can be used.  The 
                 AppMap can also be set by the DDE initialization script or another script with 
                 the function AUSetCurrentAppMap.
              
              In addition to loading the Application Map, WRAFS will also load the GUI Map file
              in Winrunner. For this reason, the Application map and GUI Map File must have
              the same name.
              
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param applicationMap  Optional:NO 
                 The path and/or filename of the Application Map to use
              
     **********/
    static public DriverCommand setApplicationMap (String applicationMap) {

        if ( applicationMap == null ) throw new IllegalArgumentException ( "setApplicationMap.applicationMap = null");
        DriverCommand dc = new DriverCommand(SETAPPLICATIONMAP_KEYWORD);
        dc.addParameter(applicationMap);
        return dc;
    }


    /*********** <pre> 
                 Set/Change the directory in which the framework will find 
                 benchmark files by default.
              
                  The path must already exist.  If the path is invalid 
                  the previous setting will be retained (and logged).
                  Any incomplete path will be assumed to be relative 
                  to the current project directory.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param path  Optional:NO 
                 The full or project relative path to the new directory.
              
     **********/
    static public DriverCommand setBenchDirectory (String path) {

        if ( path == null ) throw new IllegalArgumentException ( "setBenchDirectory.path = null");
        DriverCommand dc = new DriverCommand(SETBENCHDIRECTORY_KEYWORD);
        dc.addParameter(path);
        return dc;
    }


    /*********** <pre> 
                 Set the clipboard contents to a string.
              
                 Set the clipboard contents to a string.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Google Android</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param str  Optional:NO 
                 The string to set the clipboard contents to.
              
     **********/
    static public DriverCommand setClipboard (String str) {

        if ( str == null ) throw new IllegalArgumentException ( "setClipboard.str = null");
        DriverCommand dc = new DriverCommand(SETCLIPBOARD_KEYWORD);
        dc.addParameter(str);
        return dc;
    }


    /*********** <pre> 
                 Set a Window or Window Component as the current Robot context.
              
                 Set a Window or Window Component as the current Robot context.
                 
                 Note, this does not SetFocus on the object.  This 
                 sets an object of reference for future Robot commands.  This may 
                 generate an ignored Script Command Failure if the object is not 
                 valid or visible.
                 
                 This command is not necessary for the normal operation of the DDE 
                 and the processing of Test records.  The DDE will automatically 
                 generate numerous SetContext commands during the normal processing 
                 of Test records.  This command is for other extraordinary cases not 
                 covered by normal Test record processing.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
        <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param windowID  Optional:NO 
                 A Window reference from the AppMap
              
     @param componentID  Optional:NO 
                 A reference from the AppMap for the Component within the Window.
              
     **********/
    static public DriverCommand setContext (String windowID, String componentID) {

        if ( componentID == null ) throw new IllegalArgumentException ( "setContext.componentID = null");
        if ( windowID == null ) throw new IllegalArgumentException ( "setContext.windowID = null");
        DriverCommand dc = new DriverCommand(SETCONTEXT_KEYWORD);
        dc.addParameter(windowID);
        dc.addParameter(componentID);
        return dc;
    }


    /*********** <pre> 
                 Set a Window or Window Component as the current Robot context.
              
                 Set a Window or Window Component as the current Robot context.
                 
                 Note, this does not SetFocus on the object.  This 
                 sets an object of reference for future Robot commands.  This may 
                 generate an ignored Script Command Failure if the object is not 
                 valid or visible.
                 
                 This command is not necessary for the normal operation of the DDE 
                 and the processing of Test records.  The DDE will automatically 
                 generate numerous SetContext commands during the normal processing 
                 of Test records.  This command is for other extraordinary cases not 
                 covered by normal Test record processing.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
        <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        windowID -- Optional:NO 
                 A Window reference from the AppMap
              <BR/>        componentID -- Optional:NO 
                 A reference from the AppMap for the Component within the Window.
              
    </UL>

     **********/
    static public DriverCommand setContext (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "setContext.parameters = null");
        DriverCommand dc = new DriverCommand(SETCONTEXT_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Set/Change the directory in which the framework will locate 
                 file compare differences.
              
                  The path must already exist.  If the path is invalid 
                  the previous setting will be retained (and logged).
                  Any incomplete path will be assumed to be relative 
                  to the current project directory.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param path  Optional:NO 
                 The full or project relative path to the new directory.
              
     **********/
    static public DriverCommand setDifDirectory (String path) {

        if ( path == null ) throw new IllegalArgumentException ( "setDifDirectory.path = null");
        DriverCommand dc = new DriverCommand(SETDIFDIRECTORY_KEYWORD);
        dc.addParameter(path);
        return dc;
    }


    /*********** <pre> 
                 Give a Window or Window Component input focus.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
        <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param windowID  Optional:NO 
                 A Window reference from the AppMap
              
     @param componentID  Optional:NO 
                 A reference from the AppMap for the Component within the Window to get input focus.
              
     **********/
    static public DriverCommand setFocus (String windowID, String componentID) {

        if ( componentID == null ) throw new IllegalArgumentException ( "setFocus.componentID = null");
        if ( windowID == null ) throw new IllegalArgumentException ( "setFocus.windowID = null");
        DriverCommand dc = new DriverCommand(SETFOCUS_KEYWORD);
        dc.addParameter(windowID);
        dc.addParameter(componentID);
        return dc;
    }


    /*********** <pre> 
                 Give a Window or Window Component input focus.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
        <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        windowID -- Optional:NO 
                 A Window reference from the AppMap
              <BR/>        componentID -- Optional:NO 
                 A reference from the AppMap for the Component within the Window to get input focus.
              
    </UL>

     **********/
    static public DriverCommand setFocus (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "setFocus.parameters = null");
        DriverCommand dc = new DriverCommand(SETFOCUS_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Enable/Disable verbose debug log output and high-res failure snapshots.
              
                 By default the image-based testing algorithm writes JPG screenshots to the Datapool\Test 
                 directory when an image search fails to locate the desired image onscreen.  These images 
                 can help the user know the state of the system at the time of a specific test failure.
                 
                 However, these images are not suitable for more advanced debugging purposes such as finding 
                 out 'why' a target image was not found in the screenshot when it appears it should have been 
                 found.
                 
                 Enabling image debugging allows the system to output full-resolution BMP images into the 
                 Datapool\Test directory instead of JPG images.  It also writes more verbose debug information 
                 into the SAFS Debug Log if the user has the Debug Log running during the test. 
                 See: Debug Log Doc
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param mode  Optional:NO  DefaultVal:OFF 
                 The boolean status for enabling extended image debugging. 
              
     **********/
    static public DriverCommand setImageDebug (String mode) {

        if ( mode == null ) throw new IllegalArgumentException ( "setImageDebug.mode = null");
        DriverCommand dc = new DriverCommand(SETIMAGEDEBUG_KEYWORD);
        dc.addParameter(mode);
        return dc;
    }


    /*********** <pre> 
                 Enable/Disable Image-Based Testing Fuzzy Matching.
              
                 Allows more robust fuzzy matching on image comparisons during Image-Based Testing.  
                 Image-Based Testing recognition strings must have a BitTolerance (BT) of less than 
                 100% specified for an image that is intended to be found with the fuzzy matching algorithm.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param mode  Optional:NO  DefaultVal:OFF 
                 The boolean status for enabling extended image-based fuzzy matching. 
              
     **********/
    static public DriverCommand setImageFuzzyMatching (String mode) {

        if ( mode == null ) throw new IllegalArgumentException ( "setImageFuzzyMatching.mode = null");
        DriverCommand dc = new DriverCommand(SETIMAGEFUZZYMATCHING_KEYWORD);
        dc.addParameter(mode);
        return dc;
    }


    /*********** <pre> 
                Set the pause between two records. 
              
                Set the pause between two records.
                This time is milli-seconds.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param value  Optional:NO 
                 The value of the pause between two records.
              
     **********/
    static public DriverCommand setMillisBetweenRecords (String value) {

        if ( value == null ) throw new IllegalArgumentException ( "setMillisBetweenRecords.value = null");
        DriverCommand dc = new DriverCommand(SETMILLISBETWEENRECORDS_KEYWORD);
        dc.addParameter(value);
        return dc;
    }


    /*********** <pre> 
                 Turn on or trun off the multi-thread-search way to search an image.
              
                 Turn on or trun off the multi-thread-search way to search an image.
                 If set true, program will search an image by multi-thread; If false, program
                 will use single-thread to search.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param onOrOff  Optional:NO 
                 Turn on or turn off multi-thread-search. This parameter should be given as "On" or "Off".
              
     **********/
    static public DriverCommand setMultipleThreadSearch (String onOrOff) {

        if ( onOrOff == null ) throw new IllegalArgumentException ( "setMultipleThreadSearch.onOrOff = null");
        DriverCommand dc = new DriverCommand(SETMULTIPLETHREADSEARCH_KEYWORD);
        dc.addParameter(onOrOff);
        return dc;
    }


    /*********** <pre> 
                 Set/Change the framework project directory.
              
                  The path must already exist.  If the path is invalid 
                  the previous setting will be retained (and logged).
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param path  Optional:NO 
                 The full path to the new directory.
              
     **********/
    static public DriverCommand setProjectDirectory (String path) {

        if ( path == null ) throw new IllegalArgumentException ( "setProjectDirectory.path = null");
        DriverCommand dc = new DriverCommand(SETPROJECTDIRECTORY_KEYWORD);
        dc.addParameter(path);
        return dc;
    }


    /*********** <pre> 
                 Set/Change the Bench, Test, and Dif directories 
                 to be subdirectories off of the provided path.
              
                 The path must already exist.  If the path is invalid 
                 the previous settings for Bench, Test, and Dif will
                 be retained and a FAILURE will be reported.  The Bench, 
                 Test, and Dif subdirectories must also exist.
                          
                 Any incomplete path will be assumed to be relative 
                 to the current project directory.  It is important 
                 to note that the provided path can be valid, yet 
                 the expected "Bench", "Test", and "Dif" subdirectories 
                 may not be valid.  In that scenario, no failure 
                 will be reported, and the previous settings for 
                 Bench, Test, and Dif will be retained (and logged).
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param path  Optional:NO 
                 The full or project relative path to the root directory for
                 Bench, Test, and Dif.
              
     **********/
    static public DriverCommand setRootVerifyDirectory (String path) {

        if ( path == null ) throw new IllegalArgumentException ( "setRootVerifyDirectory.path = null");
        DriverCommand dc = new DriverCommand(SETROOTVERIFYDIRECTORY_KEYWORD);
        dc.addParameter(path);
        return dc;
    }


    /*********** <pre> 
                Set the delay after window is activated. 
              
                Set the delay after window is activated.
                This time is seconds.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param value  Optional:NO 
                 The value of the delay after window is activated.
              
     **********/
    static public DriverCommand setSecsAfterWindowActive (String value) {

        if ( value == null ) throw new IllegalArgumentException ( "setSecsAfterWindowActive.value = null");
        DriverCommand dc = new DriverCommand(SETSECSAFTERWINDOWACTIVE_KEYWORD);
        dc.addParameter(value);
        return dc;
    }


    /*********** <pre> 
                Set the delay before mouse down. 
              
                Set the delay before mouse down.
                This time is seconds.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param value  Optional:NO 
                 The value of the delay before mouse down.
              
     **********/
    static public DriverCommand setSecsBeforeMouseDown (String value) {

        if ( value == null ) throw new IllegalArgumentException ( "setSecsBeforeMouseDown.value = null");
        DriverCommand dc = new DriverCommand(SET_SECS_BEFORE_MOUSE_DOWN_KEYWORD);
        dc.addParameter(value);
        return dc;
    }


    /*********** <pre> 
                Set the delay before mouse up. 
              
                Set the delay before mouse up.
                This time is seconds.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param value  Optional:NO 
                 The value of the delay before mouse up.
              
     **********/
    static public DriverCommand setSecsBeforeMouseUp (String value) {

        if ( value == null ) throw new IllegalArgumentException ( "setSecsBeforeMouseUp.value = null");
        DriverCommand dc = new DriverCommand(SET_SECS_BEFORE_MOUSE_UP_KEYWORD);
        dc.addParameter(value);
        return dc;
    }


    /*********** <pre> 
                Set the delay of re-finding object. 
              
                Set the delay of re-finding object.
                This time is seconds.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param value  Optional:NO 
                 The value of the delay of re-finding object.
              
     **********/
    static public DriverCommand setSecsDelayRetryComponent (String value) {

        if ( value == null ) throw new IllegalArgumentException ( "setSecsDelayRetryComponent.value = null");
        DriverCommand dc = new DriverCommand(SETSECSDELAYRETRYCOMPONENT_KEYWORD);
        dc.addParameter(value);
        return dc;
    }


    /*********** <pre> 
                Set the timeout of finding object. 
              
                Set the timeout of finding object.
                This time is seconds.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param variableName  Optional:NO 
                 The value of the timeout of finding object.
              
     **********/
    static public DriverCommand setSecsSeekComponent (String variableName) {

        if ( variableName == null ) throw new IllegalArgumentException ( "setSecsSeekComponent.variableName = null");
        DriverCommand dc = new DriverCommand(SETSECSSEEKCOMPONENT_KEYWORD);
        dc.addParameter(variableName);
        return dc;
    }


    /*********** <pre> 
                 Set/Change the directory in which the framework will find 
                 test files (captured "actuals") by default.
              
                  The path must already exist.  If the path is invalid 
                  the previous setting will be retained (and logged).
                  Any incomplete path will be assumed to be relative 
                  to the current project directory.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
    </UL>

     @param path  Optional:NO 
                 The full or project relative path to the new directory.
              
     **********/
    static public DriverCommand setTestDirectory (String path) {

        if ( path == null ) throw new IllegalArgumentException ( "setTestDirectory.path = null");
        DriverCommand dc = new DriverCommand(SETTESTDIRECTORY_KEYWORD);
        dc.addParameter(path);
        return dc;
    }


    /*********** <pre> 
                 Set the value of a DDVariable  
                 The name field can contain literal string, DDVariable, or
                 any expression that evaluates to a valid variable name.     </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param variableName  Optional:NO 
                 The name of the variable
              
     @param variableValue  Optional:NO 
                 The value to assign to the variable
              
     **********/
    static public DriverCommand setVariableValueEx (String variableName, String variableValue) {

        if ( variableName == null ) throw new IllegalArgumentException ( "setVariableValueEx.variableName = null");
        if ( variableValue == null ) throw new IllegalArgumentException ( "setVariableValueEx.variableValue = null");
        DriverCommand dc = new DriverCommand(SETVARIABLEVALUEEX_KEYWORD);
        dc.addParameter(variableName);
        dc.addParameter(variableValue);
        return dc;
    }


    /*********** <pre> 
                 Set the value of a DDVariable  
                 The name field can contain literal string, DDVariable, or
                 any expression that evaluates to a valid variable name.     </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        variableName -- Optional:NO 
                 The name of the variable
              <BR/>        variableValue -- Optional:NO 
                 The value to assign to the variable
              
    </UL>

     **********/
    static public DriverCommand setVariableValueEx (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "setVariableValueEx.parameters = null");
        DriverCommand dc = new DriverCommand(SETVARIABLEVALUEEX_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Preset the value of one or more DDVariables  
                 Preset the value of one or more DDVariables.
                 Each subsequent field can contain one variable expression. 
                 Note: SAFS/DriverCommands and RobotJ actually implement an incompatible 
                 version of this command.  However, that version is normally never called by 
                 standard SAFS Drivers.
                 The variable handling is actually already done before Driver Commands can 
                 be called, and true Drivers or Processors do nothing but log success and return "NoScriptFailure".
                 The command remains for RobotJ and SAFS/DriverCommands for those people using 
                 not standard Drivers that do not process expressions before this call.  These are a rare breed, indeed!
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param variableName  Optional:NO 
                 The name of the variable along with its value assignment
              
     **********/
    static public DriverCommand setVariableValues (String variableName) {

        if ( variableName == null ) throw new IllegalArgumentException ( "setVariableValues.variableName = null");
        DriverCommand dc = new DriverCommand(SETVARIABLEVALUES_KEYWORD);
        dc.addParameter(variableName);
        return dc;
    }


    /*********** <pre> 
                 Show the soft keyboard.
              
                 Show the soft keyboard.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
    </UL>

     **********/
    static public DriverCommand showSoftKeyboard () {

        DriverCommand dc = new DriverCommand(SHOWSOFTKEYBOARD_KEYWORD);
        return dc;
    }


    /*********** <pre> 
                 Launch a new web browser and optionally load a document into it.
              
              Windows TID, SDC, and RFT Support:
              This command in the above engines now supports using the System default browser. 
              By default, the System default browser will be used to launch the URL.  (Previous 
              versions of this command were unfortunately hardcoded to use Internet Explorer only.)
              
              In addition, the tester can set a SAFS variable directly or through ApplicationConstants 
              to provide the full path to an alternate browser executable.  By setting and clearing 
              this variable the tester can switch between using the System default browser and an 
              alternate browser dynamically during runtime.
              
              Variable Name: SAFSWebBrowserPath
              
			
Sample SAFS variable usage:	

;Set an alternate browser to use:
C, SetVariableValues, ^SAFSWebBrowserPath="C:\Program Files\Mozilla Firefox\firefox.exe"
			
;Clear to return to System default browser:
C, SetVariableValues, ^SAFSWebBrowserPath=""
			
Sample ApplicationConstants usage:
			
;provide a value used for all browser launches
[ApplicationConstants]
...
SAFSWebBrowserPath="C:\Program Files\Mozilla Firefox\firefox.exe"


		(Note: if the tester ever "sets" or clears the SAFS variable then 
		     any ApplicationConstants setting is no longer used.)
		 Selenium Note:The parameters from 4 are specially for Selenium 2.0 (WebDriver) for now.
		 					 The parameters from 8 are extra parameter settings for Selenium 2.0 (WebDriver), they appear as pair(key, value),
		 					 for example #8 is the key, #9 is the value; #10 is the key, #11 is the value; and so on.
		 					 you can specify extra parameters as many as wanted if they are supported.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param uRL  Optional:YES  DefaultVal: 
                 URL of a web resource to load in the new browser instance.
             
     @param windowTag  Optional:YES  DefaultVal: 
                 A WindowTag or Browser ID to call the new browser instance. 
     @param browserName  Optional:YES  DefaultVal:firefox 
				SE2The browser to open. It can be "explorer", "chrome" or "firefox". "firefox" is default.
             
     @param timeout  Optional:YES  DefaultVal:15 
				SE2Specifies the amount of time the selenium web driver should wait 
				when searching for an element if it is not immediately present.
             
     @param isRemoteBrowser  Optional:YES  DefaultVal:true 
		SE2True = use Selenium RemoteDriver.
     @param extraParamKey  Optional:YES 
				SE2The extra parameter key. You can use one of 
				Extra parameter keys.
             
     @param extraParamValue  Optional:YES 
				SE2The value of the extra parameter indicated by ExtraParamKey above.
             
     **********/
    static public DriverCommand startWebBrowser (String uRL, String windowTag, String browserName, String timeout, String isRemoteBrowser, String extraParamKey, String extraParamValue) {

        DriverCommand dc = new DriverCommand(STARTWEBBROWSER_KEYWORD);
        dc.addParameter(uRL);
        dc.addParameter(windowTag);
        dc.addParameter(browserName);
        dc.addParameter(timeout);
        dc.addParameter(isRemoteBrowser);
        dc.addParameter(extraParamKey);
        dc.addParameter(extraParamValue);
        return dc;
    }


    /*********** <pre> 
                 Launch a new web browser and optionally load a document into it.
              
              Windows TID, SDC, and RFT Support:
              This command in the above engines now supports using the System default browser. 
              By default, the System default browser will be used to launch the URL.  (Previous 
              versions of this command were unfortunately hardcoded to use Internet Explorer only.)
              
              In addition, the tester can set a SAFS variable directly or through ApplicationConstants 
              to provide the full path to an alternate browser executable.  By setting and clearing 
              this variable the tester can switch between using the System default browser and an 
              alternate browser dynamically during runtime.
              
              Variable Name: SAFSWebBrowserPath
              
			
Sample SAFS variable usage:	

;Set an alternate browser to use:
C, SetVariableValues, ^SAFSWebBrowserPath="C:\Program Files\Mozilla Firefox\firefox.exe"
			
;Clear to return to System default browser:
C, SetVariableValues, ^SAFSWebBrowserPath=""
			
Sample ApplicationConstants usage:
			
;provide a value used for all browser launches
[ApplicationConstants]
...
SAFSWebBrowserPath="C:\Program Files\Mozilla Firefox\firefox.exe"


		(Note: if the tester ever "sets" or clears the SAFS variable then 
		     any ApplicationConstants setting is no longer used.)
		 Selenium Note:The parameters from 4 are specially for Selenium 2.0 (WebDriver) for now.
		 					 The parameters from 8 are extra parameter settings for Selenium 2.0 (WebDriver), they appear as pair(key, value),
		 					 for example #8 is the key, #9 is the value; #10 is the key, #11 is the value; and so on.
		 					 you can specify extra parameters as many as wanted if they are supported.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        uRL -- Optional:YES  DefaultVal: 
                 URL of a web resource to load in the new browser instance.
             <BR/>        windowTag -- Optional:YES  DefaultVal: 
                 A WindowTag or Browser ID to call the new browser instance. <BR/>        browserName -- Optional:YES  DefaultVal:firefox 
				SE2The browser to open. It can be "explorer", "chrome" or "firefox". "firefox" is default.
             <BR/>        timeout -- Optional:YES  DefaultVal:15 
				SE2Specifies the amount of time the selenium web driver should wait 
				when searching for an element if it is not immediately present.
             <BR/>        isRemoteBrowser -- Optional:YES  DefaultVal:true 
		SE2True = use Selenium RemoteDriver.<BR/>        extraParamKey -- Optional:YES 
				SE2The extra parameter key. You can use one of 
				Extra parameter keys.
             <BR/>        extraParamValue -- Optional:YES 
				SE2The value of the extra parameter indicated by ExtraParamKey above.
             
    </UL>

     **********/
    static public DriverCommand startWebBrowser (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "startWebBrowser.parameters = null");
        DriverCommand dc = new DriverCommand(STARTWEBBROWSER_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Stop an opened web browser indicated by ID.
              
             	Stop an opened web browser indicated by ID. This ID is assigned by user
             	during calling keyword StartWebBrowser.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param browserID  Optional:YES  DefaultVal:MainApp 
				The indentifier used to get the webdriver for the opened browser. This ID is assigned by user
             	during calling keyword StartWebBrowser.
             
     **********/
    static public DriverCommand stopWebBrowser (String browserID) {

        DriverCommand dc = new DriverCommand(STOPWEBBROWSER_KEYWORD);
        dc.addParameter(browserID);
        return dc;
    }


    /*********** <pre> 
                 Take screenshot and save it to a file on test machine.
              
                 Take screenshot and save it to a file on test machine.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param fileName  Optional:NO 
                 The file to store the screeshot. (For Android Engine, the screenshot is device/emulator's)
              
     @param rotatable  Optional:YES 
                 For other Engine, this parameter will be ignored.
                 For Android Engine, if the android application is rotatable, you set this parameter to True. The default is True.
              
     @param subArea  Optional:YES
             Optional sbuarea indicating partial image of the screen to capture.
              
     **********/
    static public DriverCommand takeScreenShot (String fileName, String rotatable, String subArea) {

        if ( fileName == null ) throw new IllegalArgumentException ( "takeScreenShot.fileName = null");
        DriverCommand dc = new DriverCommand(TAKESCREENSHOT_KEYWORD);
        dc.addParameter(fileName);
        dc.addParameter(rotatable);
        dc.addParameter(subArea);
        return dc;
    }


    /*********** <pre> 
                 Take screenshot and save it to a file on test machine.
              
                 Take screenshot and save it to a file on test machine.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        fileName -- Optional:NO 
                 The file to store the screeshot. (For Android Engine, the screenshot is device/emulator's)
              <BR/>        rotatable -- Optional:YES 
                 For other Engine, this parameter will be ignored.
                 For Android Engine, if the android application is rotatable, you set this parameter to True. The default is True.
              <BR/>        subArea -- Optional:YES
             Optional sbuarea indicating partial image of the screen to capture.
              
    </UL>

     **********/
    static public DriverCommand takeScreenShot (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "takeScreenShot.parameters = null");
        DriverCommand dc = new DriverCommand(TAKESCREENSHOT_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Enable/Disable the switch to "prefer" ABBOT Functions over 
                 any other engine functions.
              
                 If enabled, and the ABBOT engine is up and running, the Driver 
                 will always attempt to execute test records through Abbot first before 
                 any other.
                 
                 If the ABBOT engine is not fully available, this command will generate and 
                 log a WARNING.  If the record type contains the "W" (Warning allowed) 
                 modifier then we will issue an appropriate log message, but no WARNING 
                 will be counted.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param mode  Optional:NO  DefaultVal:OFF 
                 The switch status for enabling the preference of the engine.
                 Valid values are "ON" and "OFF".
              
     **********/
    static public DriverCommand useAbbotFunctions (String mode) {

        if ( mode == null ) throw new IllegalArgumentException ( "useAbbotFunctions.mode = null");
        DriverCommand dc = new DriverCommand(USEABBOTFUNCTIONS_KEYWORD);
        dc.addParameter(mode);
        return dc;
    }


    /*********** <pre> 
                 Enable/Disable the switch to "prefer" Droid Functions over 
                 the current engine functions (like Robot Classic).
              
                 If enabled and the Droid hooking mechanism is up and running the Driver 
                 will always attempt to execute test records through Droid first before 
                 defaulting to the current engine (like Robot Classic).
                 
                 If the Droid hook is not fully available, this command will generate and 
                 log a WARNING.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param mode  Optional:NO  DefaultVal:OFF 
                 The switch status for enabling the use of the Droid hook.
                 Valid values are "ON" and "OFF".
              
     **********/
    static public DriverCommand useDroidFunctions (String mode) {

        if ( mode == null ) throw new IllegalArgumentException ( "useDroidFunctions.mode = null");
        DriverCommand dc = new DriverCommand(USEDRIODFUNCTIONS_KEYWORD);
        dc.addParameter(mode);
        return dc;
    }


    /*********** <pre> 
                 Enable/Disable the switch to "prefer" IOS Functions over 
                 any other engine functions.
              
                 If enabled, and the IOS engine is up and running, the Driver 
                 will always attempt to execute test records through IOS first before 
                 any other.
                 
                 If the IOS engine is not fully available, this command will generate and 
                 log a WARNING.  If the record type contains the "W" (Warning allowed) 
                 modifier then we will issue an appropriate log message, but no WARNING 
                 will be counted.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param mode  Optional:NO  DefaultVal:OFF 
                 The switch status for enabling the preference of the engine.
                 Valid values are "ON" and "OFF".
              
     **********/
    static public DriverCommand useIOSFunctions (String mode) {

        if ( mode == null ) throw new IllegalArgumentException ( "useIOSFunctions.mode = null");
        DriverCommand dc = new DriverCommand(USEIOSFUNCTIONS_KEYWORD);
        dc.addParameter(mode);
        return dc;
    }


    /*********** <pre> 
                 Enable/Disable the switch to "prefer" QTP Functions over 
                 any other engine functions.
              
                 If enabled, and the QTP engine is up and running, the Driver 
                 will always attempt to execute test records through QTP first before 
                 any other.
                 
                 If the QTP engine is not fully available, this command will generate and 
                 log a WARNING.  If the record type contains the "W" (Warning allowed) 
                 modifier then we will issue an appropriate log message, but no WARNING 
                 will be counted.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param mode  Optional:NO  DefaultVal:OFF 
                 The switch status for enabling the preference of the engine.
                 Valid values are "ON" and "OFF".
              
     **********/
    static public DriverCommand useQTPFunctions (String mode) {

        if ( mode == null ) throw new IllegalArgumentException ( "useQTPFunctions.mode = null");
        DriverCommand dc = new DriverCommand(USEQTPFUNCTIONS_KEYWORD);
        dc.addParameter(mode);
        return dc;
    }


    /*********** <pre> 
                 Enable/Disable the switch to "prefer" RobotJ Hook Component Functions over 
                 Robot Classic Component Functions.
              
                 If enabled and the RobotJ hooking mechanism is up and running then StepDriver 
                 will always attempt to execute test records (T) through RobotJ first before 
                 defaulting to Robot Classic.
                 
                 If the RobotJ hook is not fully available, this command will generate and 
                 log a WARNING.  If the record type is "CW" (Warning allowed), then we 
                 will issue an appropriate log message, but no WARNING will be counted.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param mode  Optional:NO  DefaultVal:OFF 
                 The switch status for enabling the use of the RobotJ hook.
                 Valid values are "ON" and "OFF".
              
     **********/
    static public DriverCommand useRobotJFunctions (String mode) {

        if ( mode == null ) throw new IllegalArgumentException ( "useRobotJFunctions.mode = null");
        DriverCommand dc = new DriverCommand(USEROBOTJFUNCTIONS_KEYWORD);
        dc.addParameter(mode);
        return dc;
    }


    /*********** <pre> 
                 Enable/Disable the switch to "prefer" SAFS (SDC) Functions over 
                 the current engine functions (like Robot Classic).
              
                 If enabled and the SAFS hooking mechanism is up and running the Driver 
                 will always attempt to execute test records through SAFS first before 
                 defaulting to the current engine (like Robot Classic).
                 
                 If the SAFS hook is not fully available, this command will generate and 
                 log a WARNING.  If the record type contains the "W" (Warning allowed) 
                 modifier then we will issue an appropriate log message, but no WARNING 
                 will be counted.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param mode  Optional:NO  DefaultVal:OFF 
                 The switch status for enabling the use of the SAFS hook.
                 Valid values are "ON" and "OFF".
              
     **********/
    static public DriverCommand useSAFSFunctions (String mode) {

        if ( mode == null ) throw new IllegalArgumentException ( "useSAFSFunctions.mode = null");
        DriverCommand dc = new DriverCommand(USESAFSFUNCTIONS_KEYWORD);
        dc.addParameter(mode);
        return dc;
    }


    /*********** <pre> 
                 Enable/Disable the switch to "prefer" Selenium Functions over 
                 the current engine functions (like Robot Classic).
              
                 If enabled and the Selenium hooking mechanism is up and running the Driver 
                 will always attempt to execute test records through Selenium first before 
                 defaulting to the current engine (like Robot Classic).
                 
                 If the Selenium hook is not fully available, this command will generate and 
                 log a WARNING.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param mode  Optional:NO  DefaultVal:OFF 
                 The switch status for enabling the use of the Selenium hook.
                 Valid values are "ON" and "OFF".
              
     **********/
    static public DriverCommand useSeleniumFunctions (String mode) {

        if ( mode == null ) throw new IllegalArgumentException ( "useSeleniumFunctions.mode = null");
        DriverCommand dc = new DriverCommand(USESELENIUMFUNCTIONS_KEYWORD);
        dc.addParameter(mode);
        return dc;
    }


    /*********** <pre> 
                 Enable/Disable the switch to "prefer" TestComplete (TCAFS) Functions over 
                 any other engine functions.
              
                 If enabled, and the TCAFS engine is up and running, the Driver 
                 will always attempt to execute test records through TCAFS first before 
                 any other.
                 
                 If the TCAFS engine is not fully available, this command will generate and 
                 log a WARNING.  If the record type contains the "W" (Warning allowed) 
                 modifier then we will issue an appropriate log message, but no WARNING 
                 will be counted.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>SAFS TIDDriverCommands</LI>
    </UL>

     @param mode  Optional:NO  DefaultVal:OFF 
                 The switch status for enabling the preference of the engine.
                 Valid values are "ON" and "OFF".
              
     **********/
    static public DriverCommand useTestCompleteFunctions (String mode) {

        if ( mode == null ) throw new IllegalArgumentException ( "useTestCompleteFunctions.mode = null");
        DriverCommand dc = new DriverCommand(USETESTCOMPLETEFUNCTIONS_KEYWORD);
        dc.addParameter(mode);
        return dc;
    }


    /*********** <pre> 
                 Switch to use an opened web browser indicated by ID.
              
             	Switch to use an opened web browser indicated by ID. This ID is assigned by user
             	during calling keyword StartWebBrowser.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param browserID  Optional:YES  DefaultVal:MainApp 
				The indentifier used to get the webdriver for the opened browser. This ID is assigned by user
             	during calling keyword StartWebBrowser.
             
     **********/
    static public DriverCommand useWebBrowser (String browserID) {

        DriverCommand dc = new DriverCommand(USEWEBBROWSER_KEYWORD);
        dc.addParameter(browserID);
        return dc;
    }


    /*********** <pre> 
             Verify the current contents of the Windows clipboard with a benchmark file.
              
             Verify the current contents of the Windows clipboard with a benchmark file.
             Typically, benchmarks are stored in the Datapool\Bench directory.
             In that event, only the filename.ext is needed.  There is currently
             a limit of 32K allowed for this type of comparison.  
             The Window and Component objects are not validated and have no role.
             The Window and Component strings can be any text, but they cannot be blank.
             
             The command will produce a TEST WARNING if the user has configured an 
             alternate DIFF tool for which we have no means to compare the diff results.
             If this WARNING is expected, the user should use the "TW" test record type.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Google Android</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param benchmarkFile  Optional:NO
             The name of the file used as the comparison benchmark.
              
     @param encoding  Optional:Yes 
                 The encoding used to read a file.
              
     **********/
    static public DriverCommand verifyClipboardToFile (String benchmarkFile, String encoding) {

        if ( benchmarkFile == null ) throw new IllegalArgumentException ( "verifyClipboardToFile.benchmarkFile = null");
        DriverCommand dc = new DriverCommand(VERIFYCLIPBOARDTOFILE_KEYWORD);
        dc.addParameter(benchmarkFile);
        dc.addParameter(encoding);
        return dc;
    }


    /*********** <pre> 
             Verify the current contents of the Windows clipboard with a benchmark file.
              
             Verify the current contents of the Windows clipboard with a benchmark file.
             Typically, benchmarks are stored in the Datapool\Bench directory.
             In that event, only the filename.ext is needed.  There is currently
             a limit of 32K allowed for this type of comparison.  
             The Window and Component objects are not validated and have no role.
             The Window and Component strings can be any text, but they cannot be blank.
             
             The command will produce a TEST WARNING if the user has configured an 
             alternate DIFF tool for which we have no means to compare the diff results.
             If this WARNING is expected, the user should use the "TW" test record type.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>SAFS SDCommands</LI>
        <LI>Google Android</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        benchmarkFile -- Optional:NO
             The name of the file used as the comparison benchmark.
              <BR/>        encoding -- Optional:Yes 
                 The encoding used to read a file.
              
    </UL>

     **********/
    static public DriverCommand verifyClipboardToFile (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyClipboardToFile.parameters = null");
        DriverCommand dc = new DriverCommand(VERIFYCLIPBOARDTOFILE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>Send an HTTP GET request, and verify the response with the content provided as parameter.    </pre>    Supporting Engines:
    <P/><UL>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param uRL  Optional:NoThe URL to request.
     @param benchContent  Optional:NoThe bench content to be compared with the response sent back from the server.
     @param timeout  Optional:YesThe timeout (in seconds) waiting for the response from HTTP server. The default value is 120 seconds.
     @param headerName  Optional:YesThe HTTP request header name.
     @param headerValue  Optional:YesThe value to set for the HTTP request header.
     **********/
    static public DriverCommand verifyURLContent (String uRL, String benchContent, String timeout, String headerName, String headerValue) {

        if ( benchContent == null ) throw new IllegalArgumentException ( "verifyURLContent.benchContent = null");
        if ( uRL == null ) throw new IllegalArgumentException ( "verifyURLContent.uRL = null");
        DriverCommand dc = new DriverCommand(VERIFYURLCONTENT_KEYWORD);
        dc.addParameter(uRL);
        dc.addParameter(benchContent);
        dc.addParameter(timeout);
        dc.addParameter(headerName);
        dc.addParameter(headerValue);
        return dc;
    }


    /*********** <pre>Send an HTTP GET request, and verify the response with the content provided as parameter.    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        uRL -- Optional:NoThe URL to request.<BR/>        benchContent -- Optional:NoThe bench content to be compared with the response sent back from the server.<BR/>        timeout -- Optional:YesThe timeout (in seconds) waiting for the response from HTTP server. The default value is 120 seconds.<BR/>        headerName -- Optional:YesThe HTTP request header name.<BR/>        headerValue -- Optional:YesThe value to set for the HTTP request header.
    </UL>

     **********/
    static public DriverCommand verifyURLContent (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyURLContent.parameters = null");
        DriverCommand dc = new DriverCommand(VERIFYURLCONTENT_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>Send an HTTP GET request, and verify the response with the content of a file.    </pre>    Supporting Engines:
    <P/><UL>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param uRL  Optional:NoThe URL to request.
     @param benchFile  Optional:NoThe name of the bench file holding the content to be compared with the response sent back from the server.
     @param timeout  Optional:YesThe timeout (in seconds) waiting for the response from HTTP server. The default value is 120 seconds.
     @param headerName  Optional:YesThe HTTP request header name.
     @param headerValue  Optional:YesThe value to set for the HTTP request header.
     **********/
    static public DriverCommand verifyURLToFile (String uRL, String benchFile, String timeout, String headerName, String headerValue) {

        if ( benchFile == null ) throw new IllegalArgumentException ( "verifyURLToFile.benchFile = null");
        if ( uRL == null ) throw new IllegalArgumentException ( "verifyURLToFile.uRL = null");
        DriverCommand dc = new DriverCommand(VERIFYURLTOFILE_KEYWORD);
        dc.addParameter(uRL);
        dc.addParameter(benchFile);
        dc.addParameter(timeout);
        dc.addParameter(headerName);
        dc.addParameter(headerValue);
        return dc;
    }


    /*********** <pre>Send an HTTP GET request, and verify the response with the content of a file.    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        uRL -- Optional:NoThe URL to request.<BR/>        benchFile -- Optional:NoThe name of the bench file holding the content to be compared with the response sent back from the server.<BR/>        timeout -- Optional:YesThe timeout (in seconds) waiting for the response from HTTP server. The default value is 120 seconds.<BR/>        headerName -- Optional:YesThe HTTP request header name.<BR/>        headerValue -- Optional:YesThe value to set for the HTTP request header.
    </UL>

     **********/
    static public DriverCommand verifyURLToFile (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "verifyURLToFile.parameters = null");
        DriverCommand dc = new DriverCommand(VERIFYURLTOFILE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre>Specify the table format VERSION
        Used to specify the VERSION of the table format.  
        This is currently not required since there is only one 
        current version of the table format--1.0.
           </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param version  Optional:NO  DefaultVal:1.0
              The VERSION of the table format. Initially "1.0"
     **********/
    static public DriverCommand version (String version) {

        if ( version == null ) throw new IllegalArgumentException ( "version.version = null");
        DriverCommand dc = new DriverCommand(VERSION_KEYWORD);
        dc.addParameter(version);
        return dc;
    }


    /*********** <pre> 
                 Wait for a Window or Window Component to become valid.
              
		
		Note: the TID supports this command using 
		Image-Based Testing 
		techniques and App Map entries.
		    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
        <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param windowID  Optional:NO 
                 A Window reference from the AppMap
              
     @param componentID  Optional:NO 
                 A reference from the AppMap for the Component within the Window to wait for.
              
     @param timeout  Optional:YES  DefaultVal:15 
                 Timeout value in seconds before exiting automatically.
              
     **********/
    static public DriverCommand waitForGUI (String windowID, String componentID, String timeout) {

        if ( componentID == null ) throw new IllegalArgumentException ( "waitForGUI.componentID = null");
        if ( windowID == null ) throw new IllegalArgumentException ( "waitForGUI.windowID = null");
        DriverCommand dc = new DriverCommand(WAITFORGUI_KEYWORD);
        dc.addParameter(windowID);
        dc.addParameter(componentID);
        dc.addParameter(timeout);
        return dc;
    }


    /*********** <pre> 
                 Wait for a Window or Window Component to become valid.
              
		
		Note: the TID supports this command using 
		Image-Based Testing 
		techniques and App Map entries.
		    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
        <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        windowID -- Optional:NO 
                 A Window reference from the AppMap
              <BR/>        componentID -- Optional:NO 
                 A reference from the AppMap for the Component within the Window to wait for.
              <BR/>        timeout -- Optional:YES  DefaultVal:15 
                 Timeout value in seconds before exiting automatically.
              
    </UL>

     **********/
    static public DriverCommand waitForGUI (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "waitForGUI.parameters = null");
        DriverCommand dc = new DriverCommand(WAITFORGUI_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Wait for a Window or Window Component to become invalid.
              
		
		Note: the TID supports this command using 
		Image-Based Testing 
		techniques and App Map entries.
		    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>AutomatedQA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param windowID  Optional:NO 
                 A Window reference from the AppMap
              
     @param componentID  Optional:NO 
                 A reference from the AppMap for the Component within the Window to watch.
              
     @param timeout  Optional:YES  DefaultVal:15 
                 Timeout value in seconds before exiting automatically.
              
     **********/
    static public DriverCommand waitForGUIGone (String windowID, String componentID, String timeout) {

        if ( componentID == null ) throw new IllegalArgumentException ( "waitForGUIGone.componentID = null");
        if ( windowID == null ) throw new IllegalArgumentException ( "waitForGUIGone.windowID = null");
        DriverCommand dc = new DriverCommand(WAITFORGUIGONE_KEYWORD);
        dc.addParameter(windowID);
        dc.addParameter(componentID);
        dc.addParameter(timeout);
        return dc;
    }


    /*********** <pre> 
                 Wait for a Window or Window Component to become invalid.
              
		
		Note: the TID supports this command using 
		Image-Based Testing 
		techniques and App Map entries.
		    </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>AutomatedQA TestComplete</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        windowID -- Optional:NO 
                 A Window reference from the AppMap
              <BR/>        componentID -- Optional:NO 
                 A reference from the AppMap for the Component within the Window to watch.
              <BR/>        timeout -- Optional:YES  DefaultVal:15 
                 Timeout value in seconds before exiting automatically.
              
    </UL>

     **********/
    static public DriverCommand waitForGUIGone (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "waitForGUIGone.parameters = null");
        DriverCommand dc = new DriverCommand(WAITFORGUIGONE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Wait for a specific Window or Component property value to match an expected value.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param windowID  Optional:NO 
                 A Window reference from the AppMap
              
     @param componentID  Optional:NO 
                 A reference from the AppMap for the Component within the Window.
              
     @param propertyName  Optional:NO 
                 Case-sensitive name of the object property to watch.
              
     @param expectedValue  Optional:NO 
                 Case-sensitive value of the object property to match.
              
     @param timeout  Optional:YES  DefaultVal:15 
                 Timeout value in seconds before exiting automatically.
              
     @param caseInsensitive  Optional:YES
             Values of "CASE-INSENSITIVE", "CASEINSENSITIVE", and "FALSE" will cause the 
             comparison of the property value and the expected value to ignore case.
              
     **********/
    static public DriverCommand waitForPropertyValue (String windowID, String componentID, String propertyName, String expectedValue, String timeout, String caseInsensitive) {

        if ( componentID == null ) throw new IllegalArgumentException ( "waitForPropertyValue.componentID = null");
        if ( expectedValue == null ) throw new IllegalArgumentException ( "waitForPropertyValue.expectedValue = null");
        if ( propertyName == null ) throw new IllegalArgumentException ( "waitForPropertyValue.propertyName = null");
        if ( windowID == null ) throw new IllegalArgumentException ( "waitForPropertyValue.windowID = null");
        DriverCommand dc = new DriverCommand(WAITFORPROPERTYVALUE_KEYWORD);
        dc.addParameter(windowID);
        dc.addParameter(componentID);
        dc.addParameter(propertyName);
        dc.addParameter(expectedValue);
        dc.addParameter(timeout);
        dc.addParameter(caseInsensitive);
        return dc;
    }


    /*********** <pre> 
                 Wait for a specific Window or Component property value to match an expected value.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        windowID -- Optional:NO 
                 A Window reference from the AppMap
              <BR/>        componentID -- Optional:NO 
                 A reference from the AppMap for the Component within the Window.
              <BR/>        propertyName -- Optional:NO 
                 Case-sensitive name of the object property to watch.
              <BR/>        expectedValue -- Optional:NO 
                 Case-sensitive value of the object property to match.
              <BR/>        timeout -- Optional:YES  DefaultVal:15 
                 Timeout value in seconds before exiting automatically.
              <BR/>        caseInsensitive -- Optional:YES
             Values of "CASE-INSENSITIVE", "CASEINSENSITIVE", and "FALSE" will cause the 
             comparison of the property value and the expected value to ignore case.
              
    </UL>

     **********/
    static public DriverCommand waitForPropertyValue (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "waitForPropertyValue.parameters = null");
        DriverCommand dc = new DriverCommand(WAITFORPROPERTYVALUE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Wait for a specific Window or Component property value to change from a known value.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param windowID  Optional:NO 
                 A Window reference from the AppMap
              
     @param componentID  Optional:NO 
                 A reference from the AppMap for the Component within the Window.
              
     @param propertyName  Optional:NO 
                 Case-sensitive name of the object property to watch.
              
     @param expectedValue  Optional:NO 
                 Case-sensitive known value of the property to change to something else.
              
     @param timeout  Optional:YES  DefaultVal:15 
                 Timeout value in seconds before exiting automatically.
              
     @param caseInsensitive  Optional:YES
             Values of "CASE-INSENSITIVE", "CASEINSENSITIVE", and "FALSE" will cause the 
             comparison of the property value and the expected value to ignore case.
              
     **********/
    static public DriverCommand waitForPropertyValueGone (String windowID, String componentID, String propertyName, String expectedValue, String timeout, String caseInsensitive) {

        if ( componentID == null ) throw new IllegalArgumentException ( "waitForPropertyValueGone.componentID = null");
        if ( expectedValue == null ) throw new IllegalArgumentException ( "waitForPropertyValueGone.expectedValue = null");
        if ( propertyName == null ) throw new IllegalArgumentException ( "waitForPropertyValueGone.propertyName = null");
        if ( windowID == null ) throw new IllegalArgumentException ( "waitForPropertyValueGone.windowID = null");
        DriverCommand dc = new DriverCommand(WAITFORPROPERTYVALUEGONE_KEYWORD);
        dc.addParameter(windowID);
        dc.addParameter(componentID);
        dc.addParameter(propertyName);
        dc.addParameter(expectedValue);
        dc.addParameter(timeout);
        dc.addParameter(caseInsensitive);
        return dc;
    }


    /*********** <pre> 
                 Wait for a specific Window or Component property value to change from a known value.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>AutomatedQA TestComplete</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        windowID -- Optional:NO 
                 A Window reference from the AppMap
              <BR/>        componentID -- Optional:NO 
                 A reference from the AppMap for the Component within the Window.
              <BR/>        propertyName -- Optional:NO 
                 Case-sensitive name of the object property to watch.
              <BR/>        expectedValue -- Optional:NO 
                 Case-sensitive known value of the property to change to something else.
              <BR/>        timeout -- Optional:YES  DefaultVal:15 
                 Timeout value in seconds before exiting automatically.
              <BR/>        caseInsensitive -- Optional:YES
             Values of "CASE-INSENSITIVE", "CASEINSENSITIVE", and "FALSE" will cause the 
             comparison of the property value and the expected value to ignore case.
              
    </UL>

     **********/
    static public DriverCommand waitForPropertyValueGone (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "waitForPropertyValueGone.parameters = null");
        DriverCommand dc = new DriverCommand(WAITFORPROPERTYVALUEGONE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Wait for a Registry Key to become valid.
              On Windows XP (and higher?) this is accomplished via 
              the REG.EXE provided by the operating system.  If this program is NOT available 
              then the Registry commands will not work until another means is implemented--possibly 
              Windows Scripting Host scripts, etc..
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS SDCommands</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param key  Optional:NO 
                 The Registry Key name to seek.
              
     @param keyValue  Optional:YES 
                 The value name under the parent key to seek.
              
     @param timeout  Optional:YES  DefaultVal:15 
                 Timeout value in seconds before exiting automatically.
              
     **********/
    static public DriverCommand waitForRegistryKeyExists (String key, String keyValue, String timeout) {

        if ( key == null ) throw new IllegalArgumentException ( "waitForRegistryKeyExists.key = null");
        DriverCommand dc = new DriverCommand(WAITFORREGISTRYKEYEXISTS_KEYWORD);
        dc.addParameter(key);
        dc.addParameter(keyValue);
        dc.addParameter(timeout);
        return dc;
    }


    /*********** <pre> 
                 Wait for a Registry Key to become valid.
              On Windows XP (and higher?) this is accomplished via 
              the REG.EXE provided by the operating system.  If this program is NOT available 
              then the Registry commands will not work until another means is implemented--possibly 
              Windows Scripting Host scripts, etc..
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS SDCommands</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        key -- Optional:NO 
                 The Registry Key name to seek.
              <BR/>        keyValue -- Optional:YES 
                 The value name under the parent key to seek.
              <BR/>        timeout -- Optional:YES  DefaultVal:15 
                 Timeout value in seconds before exiting automatically.
              
    </UL>

     **********/
    static public DriverCommand waitForRegistryKeyExists (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "waitForRegistryKeyExists.parameters = null");
        DriverCommand dc = new DriverCommand(WAITFORREGISTRYKEYEXISTS_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Wait for a specific Registry KeyValue to match an expected value.
              On Windows XP (and higher?) this is accomplished via 
              the REG.EXE provided by the operating system.  If this program is NOT available 
              then the Registry commands will not work until another means is implemented--possibly 
              Windows Scripting Host scripts, etc..
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS SDCommands</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param key  Optional:NO 
                 The Registry Key name to seek
              
     @param keyValue  Optional:NO 
                 The value name under the parent key to seek.
              
     @param expectedValue  Optional:NO 
                 Case-sensitive value to match with the key value.
              
     @param timeout  Optional:YES  DefaultVal:15 
                 Timeout value in seconds before exiting automatically.
              
     @param caseInsensitive  Optional:YES
             Values of "CASE-INSENSITIVE", "CASEINSENSITIVE", and "FALSE" will cause the 
             comparison of the key value and the expected value to ignore case.
              
     **********/
    static public DriverCommand waitForRegistryKeyValue (String key, String keyValue, String expectedValue, String timeout, String caseInsensitive) {

        if ( expectedValue == null ) throw new IllegalArgumentException ( "waitForRegistryKeyValue.expectedValue = null");
        if ( key == null ) throw new IllegalArgumentException ( "waitForRegistryKeyValue.key = null");
        if ( keyValue == null ) throw new IllegalArgumentException ( "waitForRegistryKeyValue.keyValue = null");
        DriverCommand dc = new DriverCommand(WAITFORREGISTRYKEYVALUE_KEYWORD);
        dc.addParameter(key);
        dc.addParameter(keyValue);
        dc.addParameter(expectedValue);
        dc.addParameter(timeout);
        dc.addParameter(caseInsensitive);
        return dc;
    }


    /*********** <pre> 
                 Wait for a specific Registry KeyValue to match an expected value.
              On Windows XP (and higher?) this is accomplished via 
              the REG.EXE provided by the operating system.  If this program is NOT available 
              then the Registry commands will not work until another means is implemented--possibly 
              Windows Scripting Host scripts, etc..
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>SAFS SDCommands</LI>
        <LI>SAFS TIDDriverCommands</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        key -- Optional:NO 
                 The Registry Key name to seek
              <BR/>        keyValue -- Optional:NO 
                 The value name under the parent key to seek.
              <BR/>        expectedValue -- Optional:NO 
                 Case-sensitive value to match with the key value.
              <BR/>        timeout -- Optional:YES  DefaultVal:15 
                 Timeout value in seconds before exiting automatically.
              <BR/>        caseInsensitive -- Optional:YES
             Values of "CASE-INSENSITIVE", "CASEINSENSITIVE", and "FALSE" will cause the 
             comparison of the key value and the expected value to ignore case.
              
    </UL>

     **********/
    static public DriverCommand waitForRegistryKeyValue (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "waitForRegistryKeyValue.parameters = null");
        DriverCommand dc = new DriverCommand(WAITFORREGISTRYKEYVALUE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


    /*********** <pre> 
                 Wait for a web document to finish loading within a timeout period.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param windowID  Optional:YES  DefaultVal: 
                 A Window reference from the AppMap
              
     @param componentID  Optional:YES  DefaultVal: 
                 A reference from the AppMap for the Frame/HTMLDocument within WindowID to wait for.
              
     @param timeout  Optional:YES  DefaultVal:30 
                 Timeout value in seconds before exiting automatically.
              
     **********/
    static public DriverCommand waitForWebPage (String windowID, String componentID, String timeout) {

        DriverCommand dc = new DriverCommand(WAITFORWEBPAGE_KEYWORD);
        dc.addParameter(windowID);
        dc.addParameter(componentID);
        dc.addParameter(timeout);
        return dc;
    }


    /*********** <pre> 
                 Wait for a web document to finish loading within a timeout period.
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        windowID -- Optional:YES  DefaultVal: 
                 A Window reference from the AppMap
              <BR/>        componentID -- Optional:YES  DefaultVal: 
                 A reference from the AppMap for the Frame/HTMLDocument within WindowID to wait for.
              <BR/>        timeout -- Optional:YES  DefaultVal:30 
                 Timeout value in seconds before exiting automatically.
              
    </UL>

     **********/
    static public DriverCommand waitForWebPage (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "waitForWebPage.parameters = null");
        DriverCommand dc = new DriverCommand(WAITFORWEBPAGE_KEYWORD);
        dc.addParameters(parameters);
        return dc;
    }


}
