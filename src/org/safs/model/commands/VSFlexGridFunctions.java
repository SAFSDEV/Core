
/******************************************************************************
 * VSFlexGridFunctions.java
 *
 * Copyright (c) by SAS Institute Inc., Cary, NC 27513
 * General Public License: http://www.opensource.org/licenses/gpl-license.php
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   VSFlexGridFunctions.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaCommandModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe VSFlexGridFunctions.xml XSLJavaCommandModel.xsl -o VSFlexGridFunctions.java
 *
 ******************************************************************************/ 
package org.safs.model.commands;


import org.safs.model.ComponentFunction;


public class VSFlexGridFunctions {

    /*****************
    Private Singleton Instance
    ****************/
    private static final VSFlexGridFunctions singleton = new VSFlexGridFunctions(); 

    /*****************
    Private Constructor
    Static class needing no instantiation.
    ****************/
    private VSFlexGridFunctions() {}

    /*****************
    public Singleton to access class static methods via instance
    ****************/
    public static VSFlexGridFunctions getInstance() { return singleton;}

    /** "ClickCell" */
    static public final String CLICKCELL_KEYWORD = "ClickCell";
    /** "SelectCell" */
    static public final String SELECTCELL_KEYWORD = "SelectCell";
    /** "VerifyValuesToFile" */
    static public final String VERIFYVALUESTOFILE_KEYWORD = "VerifyValuesToFile";


    /*********** <pre> 
                 Attempts to perform a single Click on a table cell.
               
                 The cell to Click is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1. 
                 Logical Cells are those data cells viewable to the 
                 user.  They do not include hidden or fixed cells. 
                 Thus, the first top left cell for real grid data 
                 is considered cell 1,1.  
                 The grid will remain in edit mode if edit mode goes 
                 active. 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param row  Optional:YES  DefaultVal: 
             The 1-based logical row to select.
              
     @param col  Optional:YES  DefaultVal: 
             The 1-based logical col to select.
              
     **********/
    static public ComponentFunction clickCell (String winname, String compname, String row, String col) {

        if ( winname == null ) throw new IllegalArgumentException ( "clickCell.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "clickCell.compname = null");

        ComponentFunction cf = new ComponentFunction(CLICKCELL_KEYWORD, winname, compname);
        cf.addParameter(row);
        cf.addParameter(col);
        return cf;
    }


    /*********** <pre> 
                 Attempts to perform a single Click on a table cell.
               
                 The cell to Click is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1. 
                 Logical Cells are those data cells viewable to the 
                 user.  They do not include hidden or fixed cells. 
                 Thus, the first top left cell for real grid data 
                 is considered cell 1,1.  
                 The grid will remain in edit mode if edit mode goes 
                 active. 
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        row -- Optional:YES  DefaultVal: 
             The 1-based logical row to select.
              <BR/>        col -- Optional:YES  DefaultVal: 
             The 1-based logical col to select.
              
    </UL>

     **********/
    static public ComponentFunction clickCell(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "clickCell.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "clickCell.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "clickCell.parameters = null");
        ComponentFunction cf = new ComponentFunction(CLICKCELL_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
                 Attempts to perform a Select on a table cell.
               
                 The cell to Select is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1. 
                 Logical Cells are those data cells viewable to the 
                 user.  They do not include hidden or fixed cells. 
                 Thus, the first top left cell for real grid data 
                 is considered cell 1,1.  
                 We will ESCAPE out of edit mode if edit mode goes 
                 active. 
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param row  Optional:YES  DefaultVal: 
             The 1-based logical row to select.
              
     @param col  Optional:YES  DefaultVal: 
             The 1-based logical col to select.
              
     **********/
    static public ComponentFunction selectCell (String winname, String compname, String row, String col) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectCell.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectCell.compname = null");

        ComponentFunction cf = new ComponentFunction(SELECTCELL_KEYWORD, winname, compname);
        cf.addParameter(row);
        cf.addParameter(col);
        return cf;
    }


    /*********** <pre> 
                 Attempts to perform a Select on a table cell.
               
                 The cell to Select is provided in separate row and col 
                 parameters.  Missing parameters indicate index=1. The 
                 indexes are 1-based.  That is, the first row is row 1.
                 The first col is col 1. 
                 Logical Cells are those data cells viewable to the 
                 user.  They do not include hidden or fixed cells. 
                 Thus, the first top left cell for real grid data 
                 is considered cell 1,1.  
                 We will ESCAPE out of edit mode if edit mode goes 
                 active. 
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        row -- Optional:YES  DefaultVal: 
             The 1-based logical row to select.
              <BR/>        col -- Optional:YES  DefaultVal: 
             The 1-based logical col to select.
              
    </UL>

     **********/
    static public ComponentFunction selectCell(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "selectCell.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "selectCell.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "selectCell.parameters = null");
        ComponentFunction cf = new ComponentFunction(SELECTCELL_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


    /*********** <pre> 
             Verify the string values of a grid block to a file benchmark.
              
             Grid rows and cols are considered 1-based.  You can specify a 
             subset of the grid by providing the optional values for 
             rowMin, rowMax, colMin, colMax.  The benchmark and the actual 
             will be stored as TAB delimited files.
             Typically, benchmarks are stored in the Datapool\Bench directory.  
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param benchmarkFile  Optional:NO 
             The name of the file used as the comparison benchmark.
              
     @param rowMin  Optional:YES  DefaultVal:1 
             The first row to include in the capture and compare.
              
     @param rowMax  Optional:YES 
             The last row to include in the capture and compare.
              
     @param colMin  Optional:YES  DefaultVal:1 
             The first col to include in the capture and compare.
              
     @param colMax  Optional:YES 
             The last col to include in the capture and compare.
              
     **********/
    static public ComponentFunction verifyValuesToFile (String winname, String compname, String benchmarkFile, String rowMin, String rowMax, String colMin, String colMax) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyValuesToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyValuesToFile.compname = null");

        if ( benchmarkFile == null ) throw new IllegalArgumentException ( "verifyValuesToFile.benchmarkFile = null");
        ComponentFunction cf = new ComponentFunction(VERIFYVALUESTOFILE_KEYWORD, winname, compname);
        cf.addParameter(benchmarkFile);
        cf.addParameter(rowMin);
        cf.addParameter(rowMax);
        cf.addParameter(colMin);
        cf.addParameter(colMax);
        return cf;
    }


    /*********** <pre> 
             Verify the string values of a grid block to a file benchmark.
              
             Grid rows and cols are considered 1-based.  You can specify a 
             subset of the grid by providing the optional values for 
             rowMin, rowMax, colMin, colMax.  The benchmark and the actual 
             will be stored as TAB delimited files.
             Typically, benchmarks are stored in the Datapool\Bench directory.  
                  </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        benchmarkFile -- Optional:NO 
             The name of the file used as the comparison benchmark.
              <BR/>        rowMin -- Optional:YES  DefaultVal:1 
             The first row to include in the capture and compare.
              <BR/>        rowMax -- Optional:YES 
             The last row to include in the capture and compare.
              <BR/>        colMin -- Optional:YES  DefaultVal:1 
             The first col to include in the capture and compare.
              <BR/>        colMax -- Optional:YES 
             The last col to include in the capture and compare.
              
    </UL>

     **********/
    static public ComponentFunction verifyValuesToFile(String winname, String compname, String[] parameters) {

        if ( winname == null ) throw new IllegalArgumentException ( "verifyValuesToFile.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "verifyValuesToFile.compname = null");
        if ( parameters == null ) throw new IllegalArgumentException ( "verifyValuesToFile.parameters = null");
        ComponentFunction cf = new ComponentFunction(VERIFYVALUESTOFILE_KEYWORD, winname, compname);
        cf.addParameters(parameters);
        return cf;
    }


}
