
/******************************************************************************
 * EngineComponentCommands.java
 *
 * Copyright (c) by SAS Institute Inc., Cary, NC 27513
 * General Public License: http://www.opensource.org/licenses/gpl-license.php
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   EngineComponentCommands.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaCommandModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe EngineComponentCommands.xml XSLJavaCommandModel.xsl -o EngineComponentCommands.java
 *
 ******************************************************************************/ 
package org.safs.model.commands;


import org.safs.model.EngineCommand;


public class EngineComponentCommands {

    /*****************
    Private Singleton Instance
    ****************/
    private static final EngineComponentCommands singleton = new EngineComponentCommands(); 

    /*****************
    Private Constructor
    Static class needing no instantiation.
    ****************/
    private EngineComponentCommands() {}

    /*****************
    public Singleton to access class static methods via instance
    ****************/
    public static EngineComponentCommands getInstance() { return singleton;}

    /** "ClearHighlightedDialog" */
    static public final String CLEARHIGHLIGHTEDDIALOG_KEYWORD = "ClearHighlightedDialog";
    /** "ClearReferenceCache" */
    static public final String CLEARREFERENCECACHE_KEYWORD = "ClearReferenceCache";
    /** "EnableDomains" */
    static public final String ENABLEDOMAINS_KEYWORD = "EnableDomains";
    /** "GetAccessibleName" */
    static public final String GETACCESSIBLENAME_KEYWORD = "GetAccessibleName";
    /** "GetCaption" */
    static public final String GETCAPTION_KEYWORD = "GetCaption";
    /** "GetChildCount" */
    static public final String GETCHILDCOUNT_KEYWORD = "GetChildCount";
    /** "GetChildren" */
    static public final String GETCHILDREN_KEYWORD = "GetChildren";
    /** "GetClassIndex" */
    static public final String GETCLASSINDEX_KEYWORD = "GetClassIndex";
    /** "GetClassname" */
    static public final String GETCLASSNAME_KEYWORD = "GetClassname";
    /** "GetComponentRectangle" */
    static public final String GETCOMPONENTRECTANGLE_KEYWORD = "GetComponentRectangle";
    /** "GetCurrentWindow" */
    static public final String GETCURRENTWINDOW_KEYWORD = "GetCurrentWindow";
    /** "GetId" */
    static public final String GETID_KEYWORD = "GetId";
    /** "GetLevel" */
    static public final String GETLEVEL_KEYWORD = "GetLevel";
    /** "GetMatchingChildKeysAtPoint" */
    static public final String GETMATCHINGCHILDKEYSATPOINT_KEYWORD = "GetMatchingChildKeysAtPoint";
    /** "GetMatchingChildObjects" */
    static public final String GETMATCHINGCHILDOBJECTS_KEYWORD = "GetMatchingChildObjects";
    /** "GetMatchingParentObject" */
    static public final String GETMATCHINGPARENTOBJECT_KEYWORD = "GetMatchingParentObject";
    /** "GetMatchingPathObject" */
    static public final String GETMATCHINGPATHOBJECT_KEYWORD = "GetMatchingPathObject";
    /** "GetName" */
    static public final String GETNAME_KEYWORD = "GetName";
    /** "GetNonAccessibleName" */
    static public final String GETNONACCESSIBLENAME_KEYWORD = "GetNonAccessibleName";
    /** "GetProperty" */
    static public final String GETPROPERTY_KEYWORD = "GetProperty";
    /** "GetPropertyNames" */
    static public final String GETPROPERTYNAMES_KEYWORD = "GetPropertyNames";
    /** "GetStringData" */
    static public final String GETSTRINGDATA_KEYWORD = "GetStringData";
    /** "GetSuperClassnames" */
    static public final String GETSUPERCLASSNAMES_KEYWORD = "GetSuperClassnames";
    /** "GetText" */
    static public final String GETTEXT_KEYWORD = "GetText";
    /** "GetTopLevelCount" */
    static public final String GETTOPLEVELCOUNT_KEYWORD = "GetTopLevelCount";
    /** "GetTopLevelWindows" */
    static public final String GETTOPLEVELWINDOWS_KEYWORD = "GetTopLevelWindows";
    /** "GetTopWindowHandle" */
    static public final String GETTOPWINDOWHANDLE_KEYWORD = "GetTopWindowHandle";
    /** "HighlightMatchingChildObject" */
    static public final String HIGHLIGHTMATCHINGCHILDOBJECT_KEYWORD = "HighlightMatchingChildObject";
    /** "HighlightMatchingChildObjectByKey" */
    static public final String HIGHLIGHTMATCHINGCHILDOBJECTBYKEY_KEYWORD = "HighlightMatchingChildObjectByKey";
    /** "IsEnabled" */
    static public final String ISENABLED_KEYWORD = "IsEnabled";
    /** "IsMatchingPath" */
    static public final String ISMATCHINGPATH_KEYWORD = "IsMatchingPath";
    /** "IsShowing" */
    static public final String ISSHOWING_KEYWORD = "IsShowing";
    /** "IsTopLevelPopupContainer" */
    static public final String ISTOPLEVELPOPUPCONTAINER_KEYWORD = "IsTopLevelPopupContainer";
    /** "IsValid" */
    static public final String ISVALID_KEYWORD = "IsValid";
    /** "SetActiveWindow" */
    static public final String SETACTIVEWINDOW_KEYWORD = "SetActiveWindow";


    /*********** <pre>Clean the highlight rectangle.
                Clean the highlight rectangle. When a component is highlighted, a red rectangle may be drawn by us around
                that component, this keyword is used to clean that rectangle.
                </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>Google Android</LI>
    </UL>

     **********/
    static public EngineCommand clearHighlightedDialog () {

        EngineCommand ec = new EngineCommand(CLEARHIGHLIGHTEDDIALOG_KEYWORD);
        return ec;
    }


    /*********** <pre>Clear the Object reference cache used in a remote engine.
                Clear the Object reference cache used in a remote engine. 
                When a driver or controller requests a unique reference for a remote Object the Object and a String 
                Key are stored in an internal cache in the remote engine.  This command instructs the remote engine 
                to clear its internal cache of Objects and Keys.
                </pre>    Supporting Engines:
    <P/><UL>
        <LI>AutomatedQA TestComplete</LI>
        <LI>Google Android</LI>
    </UL>

     **********/
    static public EngineCommand clearReferenceCache () {

        EngineCommand ec = new EngineCommand(CLEARREFERENCECACHE_KEYWORD);
        return ec;
    }


    /*********** <pre>Enable searching domains.
                Enable the domains for searching target main window within these domains.
                Up to now, RobotJ engine supports Java, DotNet, Win, Html, SWT and Flex.
                </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param domains  Optional:NOA string that contains at least one domain.
     **********/
    static public EngineCommand enableDomains (String domains) {

        if ( domains == null ) throw new IllegalArgumentException ( "enableDomains.domains = null");
        EngineCommand ec = new EngineCommand(ENABLEDOMAINS_KEYWORD);
        ec.addParameter(domains);
        return ec;
    }


    /*********** <pre>Get the AccessibleName of the component, if any.
                If no AccessibleName is present the engine should return 
                "<SAFS_NULL>".
            
            The Android Engine also persists these values as SAFS variables.
            
            ^DroidEngine.Command    = [command]
            ^DroidEngine.StatusCode = [statuscode string]
            ^DroidEngine.StatusInfo = [statusinfo]
            
            See DEngineCommandProcessor.setStatusVars().
            
                </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param component  Optional:NOAn object reference or proxy reference to the component.
     **********/
    static public EngineCommand getAccessibleName (String component) {

        if ( component == null ) throw new IllegalArgumentException ( "getAccessibleName.component = null");
        EngineCommand ec = new EngineCommand(GETACCESSIBLENAME_KEYWORD);
        ec.addParameter(component);
        return ec;
    }


    /*********** <pre>Get the Caption of a component, if any.
                Normally, this is only valid for window or child window components.  
                If no caption is present, or the component does not support captions, the 
                engine should return "<SAFS_NULL>".
            
            The Android Engine also persists these values as SAFS variables.
            
            ^DroidEngine.Command    = [command]
            ^DroidEngine.StatusCode = [statuscode string]
            ^DroidEngine.StatusInfo = [statusinfo]
            
            See DEngineCommandProcessor.setStatusVars().
            
                </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>Google Android</LI>
    </UL>

     @param component  Optional:NOAn object reference or proxy reference to the component.
     **********/
    static public EngineCommand getCaption (String component) {

        if ( component == null ) throw new IllegalArgumentException ( "getCaption.component = null");
        EngineCommand ec = new EngineCommand(GETCAPTION_KEYWORD);
        ec.addParameter(component);
        return ec;
    }


    /*********** <pre>Get the number of children, if any, for the provided container component.
                This is only valid for windows and other containers of child components.
                If no children are present (or supported) then the returned count should be 0.
            
            The Android Engine also persists these values as SAFS variables.
            
            ^DroidEngine.Command    = [command]
            ^DroidEngine.StatusCode = [statuscode string]
            ^DroidEngine.StatusInfo = [statusinfo]
            
            See DEngineCommandProcessor.setStatusVars().
            
                </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>Google Android</LI>
    </UL>

     @param component  Optional:NOAn object reference or proxy reference to the component.
     **********/
    static public EngineCommand getChildCount (String component) {

        if ( component == null ) throw new IllegalArgumentException ( "getChildCount.component = null");
        EngineCommand ec = new EngineCommand(GETCHILDCOUNT_KEYWORD);
        ec.addParameter(component);
        return ec;
    }


    /*********** <pre>Get references to the children, if any, for the provided container component.
                Normally, this is only valid for windows or other container components.  
                If no children exist then an empty string is returned.  If children are present then 
                a single string of separated values is returned.  The first character in the 
	        returned string defines the delimiter character used to separate child references.
            
            The Android Engine also persists these values as SAFS variables.
            
            ^DroidEngine.Command    = [command]
            ^DroidEngine.StatusCode = [statuscode string]
            ^DroidEngine.StatusInfo = [statusinfo]
            
            See DEngineCommandProcessor.setStatusVars().
            
                </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>Google Android</LI>
    </UL>

     @param component  Optional:NOAn object reference or proxy reference to the component.
     **********/
    static public EngineCommand getChildren (String component) {

        if ( component == null ) throw new IllegalArgumentException ( "getChildren.component = null");
        EngineCommand ec = new EngineCommand(GETCHILDREN_KEYWORD);
        ec.addParameter(component);
        return ec;
    }


    /*********** <pre>Get the ClassIndex of the component, if any.
                If no ClassIndex is present the engine should return "0".
            
            The Android Engine also persists these values as SAFS variables.
            
            ^DroidEngine.Command    = [command]
            ^DroidEngine.StatusCode = [statuscode string]
            ^DroidEngine.StatusInfo = [statusinfo]
            
            See DEngineCommandProcessor.setStatusVars().
            
                </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
    </UL>

     @param component  Optional:NOAn object reference or proxy reference to the component.
     **********/
    static public EngineCommand getClassIndex (String component) {

        if ( component == null ) throw new IllegalArgumentException ( "getClassIndex.component = null");
        EngineCommand ec = new EngineCommand(GETCLASSINDEX_KEYWORD);
        ec.addParameter(component);
        return ec;
    }


    /*********** <pre>Get the Classname of a component.
                If no classname is returned, or the domain does not support "classes", the 
                engine should return "<SAFS_NULL>".
            
            The Android Engine also persists these values as SAFS variables.
            
            ^DroidEngine.Command    = [command]
            ^DroidEngine.StatusCode = [statuscode string]
            ^DroidEngine.StatusInfo = [statusinfo]
            
            See DEngineCommandProcessor.setStatusVars().
            
                </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param component  Optional:NOAn object reference or proxy reference to the component.
     **********/
    static public EngineCommand getClassname (String component) {

        if ( component == null ) throw new IllegalArgumentException ( "getClassname.component = null");
        EngineCommand ec = new EngineCommand(GETCLASSNAME_KEYWORD);
        ec.addParameter(component);
        return ec;
    }


    /*********** <pre>Find the component according to Component Test Object's key and get its screen location.
                Find the component according to Component Test Object's key and get its screen location. The component's
                screen location is returned as a string "UpLeftX, UpLeftY, Width, Height". 
                </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param componentKey  Optional:NOA string represents the key of component's Test Object.
     **********/
    static public EngineCommand getComponentRectangle (String componentKey) {

        if ( componentKey == null ) throw new IllegalArgumentException ( "getComponentRectangle.componentKey = null");
        EngineCommand ec = new EngineCommand(GETCOMPONENTRECTANGLE_KEYWORD);
        ec.addParameter(componentKey);
        return ec;
    }


    /*********** <pre>Return a reference to the top-most active (Window) with focus.
            
            The Android Engine also persists these values as SAFS variables.
            
            ^DroidEngine.Command    = [command]
            ^DroidEngine.StatusCode = [statuscode string]
            ^DroidEngine.StatusInfo = [statusinfo]
            
            See DEngineCommandProcessor.setStatusVars().
            
            
            The TestComplete Engine (TCAFS) also persists these values as SAFS variables.
                        
            ^TCAFS.Command    = [command]
            ^TCAFS.StatusCode = [statuscode string]
            ^TCAFS.StatusInfo = [statusinfo]
            ^TCAFS.FullName   = [object.FullName] -- the TestObjects.FullName string--if command returns only 1 reference.
            ^TCAFS.UID.Count  = [Number of UID References created last]
            ^TCAFS.UID.1      = [First UID Reference created]
            
                </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>AutomatedQA TestComplete</LI>
    </UL>

     **********/
    static public EngineCommand getCurrentWindow () {

        EngineCommand ec = new EngineCommand(GETCURRENTWINDOW_KEYWORD);
        return ec;
    }


    /*********** <pre>Get the ID of a component, if any.
                If no ID is present, or the component does not support IDs, the 
                engine should return "<SAFS_NULL>".
            
            The Android Engine also persists these values as SAFS variables.
            
            ^DroidEngine.Command    = [command]
            ^DroidEngine.StatusCode = [statuscode string]
            ^DroidEngine.StatusInfo = [statusinfo]
            
            See DEngineCommandProcessor.setStatusVars().
            
                </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>Google Android</LI>
    </UL>

     @param component  Optional:NOAn object reference or proxy reference to the component.
     **********/
    static public EngineCommand getId (String component) {

        if ( component == null ) throw new IllegalArgumentException ( "getId.component = null");
        EngineCommand ec = new EngineCommand(GETID_KEYWORD);
        ec.addParameter(component);
        return ec;
    }


    /*********** <pre>Get the Z-order of a component--usually a Window.
	    	Level is generally considered to be the Z-Order information of the object--where in 
		the Window Z-Order the object (usually a Window) resides.
		Level is combined with another recognition method when the other method does not uniquely identify 
		the windows. For example, if there are multiple windows with the same caption, and Caption is the 
		recognition method being used. The Level qualifier specifies which one of the similarly-identified 
		windows should be targeted for the action, based on the Windows' Z-Order. The first window is a
		ssigned "Level=1", the second "Level=2", and so on. Level serves as a clarifier only and is used 		
		only after all other methods have been attempted.
		
		If the Level cannot be determined then the engine should return -1.
		
	    </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param component  Optional:NOAn object reference or proxy reference to the component.
     **********/
    static public EngineCommand getLevel (String component) {

        if ( component == null ) throw new IllegalArgumentException ( "getLevel.component = null");
        EngineCommand ec = new EngineCommand(GETLEVEL_KEYWORD);
        ec.addParameter(component);
        return ec;
    }


    /*********** <pre>According to screen location, find the test object at that point and return all matching keys in cache.
                According to screen location, find the test object at that point and return all matching keys in cache. The keys
                will be separaged by a separator, the separator is determinated dynamically and it may be "," "|" ":" ";" "_" "#" "!"
                </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>Google Android</LI>
    </UL>

     @param windowKey  Optional:NOA string represents the key of window's Test Object.
     @param componentLocationX  Optional:NOA string represents the component's x location on screen.
     @param componentLocationY  Optional:NOA string represents the component's y location on screen.
     **********/
    static public EngineCommand getMatchingChildKeysAtPoint (String windowKey, String componentLocationX, String componentLocationY) {

        if ( componentLocationX == null ) throw new IllegalArgumentException ( "getMatchingChildKeysAtPoint.componentLocationX = null");
        if ( componentLocationY == null ) throw new IllegalArgumentException ( "getMatchingChildKeysAtPoint.componentLocationY = null");
        if ( windowKey == null ) throw new IllegalArgumentException ( "getMatchingChildKeysAtPoint.windowKey = null");
        EngineCommand ec = new EngineCommand(GETMATCHINGCHILDKEYSATPOINT_KEYWORD);
        ec.addParameter(windowKey);
        ec.addParameter(componentLocationX);
        ec.addParameter(componentLocationY);
        return ec;
    }


    /*********** <pre>According to screen location, find the test object at that point and return all matching keys in cache.
                According to screen location, find the test object at that point and return all matching keys in cache. The keys
                will be separaged by a separator, the separator is determinated dynamically and it may be "," "|" ":" ";" "_" "#" "!"
                </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>Google Android</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        windowKey -- Optional:NOA string represents the key of window's Test Object.<BR/>        componentLocationX -- Optional:NOA string represents the component's x location on screen.<BR/>        componentLocationY -- Optional:NOA string represents the component's y location on screen.
    </UL>

     **********/
    static public EngineCommand getMatchingChildKeysAtPoint (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getMatchingChildKeysAtPoint.parameters = null");
        EngineCommand ec = new EngineCommand(GETMATCHINGCHILDKEYSATPOINT_KEYWORD);
        ec.addParameters(parameters);
        return ec;
    }


    /*********** <pre>Retrieve an array of child objects that match a recognition string.
                Normally, this is only valid for window or other container components.  
                If no matching child objects exist then the engine should return 
                "<SAFS_NULL>".
                
                Returns a character delimited string of child references. The first character in the returned string 
                defines the delimiter used to separate the items. 
                
                Currently, the engine command processors only support returning the first child matching the recognition string.
            
            The Android Engine also persists these values as SAFS variables.
            
            ^DroidEngine.Command    = [command]
            ^DroidEngine.StatusCode = [statuscode string]
            ^DroidEngine.StatusInfo = [statusinfo]
            
            See DEngineCommandProcessor.setStatusVars().
            
                </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>Google Android</LI>
    </UL>

     @param component  Optional:NOAn object reference or proxy reference to the component.
     @param recognition  Optional:NORecognition string describing the children to find.
     **********/
    static public EngineCommand getMatchingChildObjects (String component, String recognition) {

        if ( component == null ) throw new IllegalArgumentException ( "getMatchingChildObjects.component = null");
        if ( recognition == null ) throw new IllegalArgumentException ( "getMatchingChildObjects.recognition = null");
        EngineCommand ec = new EngineCommand(GETMATCHINGCHILDOBJECTS_KEYWORD);
        ec.addParameter(component);
        ec.addParameter(recognition);
        return ec;
    }


    /*********** <pre>Retrieve an array of child objects that match a recognition string.
                Normally, this is only valid for window or other container components.  
                If no matching child objects exist then the engine should return 
                "<SAFS_NULL>".
                
                Returns a character delimited string of child references. The first character in the returned string 
                defines the delimiter used to separate the items. 
                
                Currently, the engine command processors only support returning the first child matching the recognition string.
            
            The Android Engine also persists these values as SAFS variables.
            
            ^DroidEngine.Command    = [command]
            ^DroidEngine.StatusCode = [statuscode string]
            ^DroidEngine.StatusInfo = [statusinfo]
            
            See DEngineCommandProcessor.setStatusVars().
            
                </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>Google Android</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        component -- Optional:NOAn object reference or proxy reference to the component.<BR/>        recognition -- Optional:NORecognition string describing the children to find.
    </UL>

     **********/
    static public EngineCommand getMatchingChildObjects (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getMatchingChildObjects.parameters = null");
        EngineCommand ec = new EngineCommand(GETMATCHINGCHILDOBJECTS_KEYWORD);
        ec.addParameters(parameters);
        return ec;
    }


    /*********** <pre>Get a reference to the toplevel Window\Parent that matches the recognition string provided.
            	Locate a toplevel Window\Parent matching the recognition string and return a unique 
            	reference to that component.  If no match is found the engine should return 
            	"<SAFS_NULL>".
            
            The Android Engine also persists these values as SAFS variables.
            
            ^DroidEngine.Command    = [command]
            ^DroidEngine.StatusCode = [statuscode string]
            ^DroidEngine.StatusInfo = [statusinfo]
            
            See DEngineCommandProcessor.setStatusVars().
            
                </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param recognition  Optional:NORecognition string describing the Window\Parent to find.
     **********/
    static public EngineCommand getMatchingParentObject (String recognition) {

        if ( recognition == null ) throw new IllegalArgumentException ( "getMatchingParentObject.recognition = null");
        EngineCommand ec = new EngineCommand(GETMATCHINGPARENTOBJECT_KEYWORD);
        ec.addParameter(recognition);
        return ec;
    }


    /*********** <pre>Get the subitem object\node matching the provided Path.
                Normally, this is only valid for components whose subitems, nodes, or children are located 
                by Path syntax: Root->Branch->Leaf.  This is often the case for Menus, MenuItems, and Tree nodes.
                
                If no match is found the engine should return: 
                "<SAFS_NULL>".
                
                </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param component  Optional:NOAn object reference or proxy reference to the component.
     @param path  Optional:NOThe Path object\node to locate relative to the Component.
     **********/
    static public EngineCommand getMatchingPathObject (String component, String path) {

        if ( component == null ) throw new IllegalArgumentException ( "getMatchingPathObject.component = null");
        if ( path == null ) throw new IllegalArgumentException ( "getMatchingPathObject.path = null");
        EngineCommand ec = new EngineCommand(GETMATCHINGPATHOBJECT_KEYWORD);
        ec.addParameter(component);
        ec.addParameter(path);
        return ec;
    }


    /*********** <pre>Get the subitem object\node matching the provided Path.
                Normally, this is only valid for components whose subitems, nodes, or children are located 
                by Path syntax: Root->Branch->Leaf.  This is often the case for Menus, MenuItems, and Tree nodes.
                
                If no match is found the engine should return: 
                "<SAFS_NULL>".
                
                </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        component -- Optional:NOAn object reference or proxy reference to the component.<BR/>        path -- Optional:NOThe Path object\node to locate relative to the Component.
    </UL>

     **********/
    static public EngineCommand getMatchingPathObject (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getMatchingPathObject.parameters = null");
        EngineCommand ec = new EngineCommand(GETMATCHINGPATHOBJECT_KEYWORD);
        ec.addParameters(parameters);
        return ec;
    }


    /*********** <pre>Get the Name (AccessibleName or Name) of the component, if any. The AccessibleName shall be found first and returned, if any.
                If no Name is present the engine should return 
                "<SAFS_NULL>".
            
            The Android Engine also persists these values as SAFS variables.
            
            ^DroidEngine.Command    = [command]
            ^DroidEngine.StatusCode = [statuscode string]
            ^DroidEngine.StatusInfo = [statusinfo]
            
            See DEngineCommandProcessor.setStatusVars().
            
                </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param component  Optional:NOAn object reference or proxy reference to the component.
     **********/
    static public EngineCommand getName (String component) {

        if ( component == null ) throw new IllegalArgumentException ( "getName.component = null");
        EngineCommand ec = new EngineCommand(GETNAME_KEYWORD);
        ec.addParameter(component);
        return ec;
    }


    /*********** <pre>Get the non-AccessibleName (Name except for AccessibleName) of the component, if any.
                If no non-AccessibleName is present the engine should return 
                "<SAFS_NULL>".
            
            The Android Engine also persists these values as SAFS variables.
            
            ^DroidEngine.Command    = [command]
            ^DroidEngine.StatusCode = [statuscode string]
            ^DroidEngine.StatusInfo = [statusinfo]
            
            See DEngineCommandProcessor.setStatusVars().
            
                </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param component  Optional:NOAn object reference or proxy reference to the component.
     **********/
    static public EngineCommand getNonAccessibleName (String component) {

        if ( component == null ) throw new IllegalArgumentException ( "getNonAccessibleName.component = null");
        EngineCommand ec = new EngineCommand(GETNONACCESSIBLENAME_KEYWORD);
        ec.addParameter(component);
        return ec;
    }


    /*********** <pre>Get the value of a specific property from a component.
                Retrieves the value of the specified property.  Property names are case-sensitive.
                If the property name provided is invalid or unsupported the engine should return 
                "<SAFS_NULL>".
            
            The Android Engine also persists these values as SAFS variables.
            
            ^DroidEngine.Command    = [command]
            ^DroidEngine.StatusCode = [statuscode string]
            ^DroidEngine.StatusInfo = [statusinfo]
            
            See DEngineCommandProcessor.setStatusVars().
            
                </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param component  Optional:NOAn object reference or proxy reference to the component.
     @param property  Optional:NOThe property name to retrieve.
     **********/
    static public EngineCommand getProperty (String component, String property) {

        if ( component == null ) throw new IllegalArgumentException ( "getProperty.component = null");
        if ( property == null ) throw new IllegalArgumentException ( "getProperty.property = null");
        EngineCommand ec = new EngineCommand(GETPROPERTY_KEYWORD);
        ec.addParameter(component);
        ec.addParameter(property);
        return ec;
    }


    /*********** <pre>Get the value of a specific property from a component.
                Retrieves the value of the specified property.  Property names are case-sensitive.
                If the property name provided is invalid or unsupported the engine should return 
                "<SAFS_NULL>".
            
            The Android Engine also persists these values as SAFS variables.
            
            ^DroidEngine.Command    = [command]
            ^DroidEngine.StatusCode = [statuscode string]
            ^DroidEngine.StatusInfo = [statusinfo]
            
            See DEngineCommandProcessor.setStatusVars().
            
                </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        component -- Optional:NOAn object reference or proxy reference to the component.<BR/>        property -- Optional:NOThe property name to retrieve.
    </UL>

     **********/
    static public EngineCommand getProperty (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "getProperty.parameters = null");
        EngineCommand ec = new EngineCommand(GETPROPERTY_KEYWORD);
        ec.addParameters(parameters);
        return ec;
    }


    /*********** <pre>Get the names of all available properties for a component.
                Returns a delimited string list of case-sensitive property names for the component.  
                The first character in the string is the delimiter used to separate each 
                property name in the list.
            
            The Android Engine also persists these values as SAFS variables.
            
            ^DroidEngine.Command    = [command]
            ^DroidEngine.StatusCode = [statuscode string]
            ^DroidEngine.StatusInfo = [statusinfo]
            
            See DEngineCommandProcessor.setStatusVars().
            
                </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param component  Optional:NOAn object reference or proxy reference to the component.
     **********/
    static public EngineCommand getPropertyNames (String component) {

        if ( component == null ) throw new IllegalArgumentException ( "getPropertyNames.component = null");
        EngineCommand ec = new EngineCommand(GETPROPERTYNAMES_KEYWORD);
        ec.addParameter(component);
        return ec;
    }


    /*********** <pre>Get the values, text, or data associated with the component.
                This is returned as a String containing a delimited list of values forming a 
                2D array or table of values.  The first character in the string specifies the 
                delimiter used to separate values.  The first value between delimiters specifies 
                the number of rows of data.  The second value between delimiters specifies the number of 
                columns of data.  This is immediately followed by all the values separated by delimiters.
                
                Example return string showing a single value (1 row and 1 column): ",1,1,MyValue"
                
                Missing values are represented simply by two delimiters back-to-back with no value 
                between them.
                
                Example return string of 3 rows with 2 columns with missing values in the last two rows:
                
                ",3,2,a,b,,d,e,"
                
                Whitespace in a value is retained.  Everything between delimiters is treated as 
                part of the value.
                
                If there is no retrievable text or data the engine should return 
                "<SAFS_NULL>".
                
                </pre>    Supporting Engines:
    <P/><UL>
    </UL>

     @param component  Optional:NOAn object reference or proxy reference to the component.
     **********/
    static public EngineCommand getStringData (String component) {

        if ( component == null ) throw new IllegalArgumentException ( "getStringData.component = null");
        EngineCommand ec = new EngineCommand(GETSTRINGDATA_KEYWORD);
        ec.addParameter(component);
        return ec;
    }


    /*********** <pre>Get the hierarchy of superclasses for the component.
                Returns a delimited string list of case-sensitive classnames for the component.  
                The first character in the string is the delimiter used to separate each 
                classname in the hierarchy.  
                If there is no superclass or hierarchy the engine will return a delimited 
                list of one value--the component's classname.  (Ex: ",Html.BUTTON")
                                
                When a superclass hierarchy does exist the first value after the delimiter 
                is the component's classname.  Each delimited value after that goes one higher 
                in the hierarchy until the topmost superclass has been processed.
                (Ex: ",CustomButton,java.awt.Button,java.awt.Component,java.lang.Object")
                
                If the component itself has no classname and no hierarchy (unusual!) then 
                the engine should simply return an empty, 0-length string.
                
            
            The Android Engine also persists these values as SAFS variables.
            
            ^DroidEngine.Command    = [command]
            ^DroidEngine.StatusCode = [statuscode string]
            ^DroidEngine.StatusInfo = [statusinfo]
            
            See DEngineCommandProcessor.setStatusVars().
            
                </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param component  Optional:NOAn object reference or proxy reference to the component.
     **********/
    static public EngineCommand getSuperClassnames (String component) {

        if ( component == null ) throw new IllegalArgumentException ( "getSuperClassnames.component = null");
        EngineCommand ec = new EngineCommand(GETSUPERCLASSNAMES_KEYWORD);
        ec.addParameter(component);
        return ec;
    }


    /*********** <pre>Get the (text) value of a component, if any.
                If the component does not have text or any "value" the engine should return 
                "<SAFS_NULL>".
            
            The Android Engine also persists these values as SAFS variables.
            
            ^DroidEngine.Command    = [command]
            ^DroidEngine.StatusCode = [statuscode string]
            ^DroidEngine.StatusInfo = [statusinfo]
            
            See DEngineCommandProcessor.setStatusVars().
            
                </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param component  Optional:NOAn object reference or proxy reference to the component.
     **********/
    static public EngineCommand getText (String component) {

        if ( component == null ) throw new IllegalArgumentException ( "getText.component = null");
        EngineCommand ec = new EngineCommand(GETTEXT_KEYWORD);
        ec.addParameter(component);
        return ec;
    }


    /*********** <pre>Get the number of visible top-level items (Windows?) for the engine.
                Returns the number of visible top-level items, or 0.  Not all engines can see all items. 
                For example, Selenium only looks for Web clients.  Some engines may only look for 
                Java clients, etc..  Some engines can see other top-level items that are not 
                Windows--like Processes, or Threads, etc...
            
            The Android Engine also persists these values as SAFS variables.
            
            ^DroidEngine.Command    = [command]
            ^DroidEngine.StatusCode = [statuscode string]
            ^DroidEngine.StatusInfo = [statusinfo]
            
            See DEngineCommandProcessor.setStatusVars().
            
            
            The TestComplete Engine (TCAFS) also persists these values as SAFS variables.
                        
            ^TCAFS.Command    = [command]
            ^TCAFS.StatusCode = [statuscode string]
            ^TCAFS.StatusInfo = [statusinfo]
            
                </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>Rational RobotJ</LI>
        <LI>AutomatedQA TestComplete</LI>
    </UL>

     **********/
    static public EngineCommand getTopLevelCount () {

        EngineCommand ec = new EngineCommand(GETTOPLEVELCOUNT_KEYWORD);
        return ec;
    }


    /*********** <pre>Return references to all known top-level items (Windows).
                The engine can only return references to those top-level items it has 
                knowledge of.  Not all engines can see all items. 
                For example, Selenium only looks for Web clients.  Some engines may only look for 
                Java clients, etc..  Some engines can see other top-level items that are not 
                Windows--like Processes, or Threads, etc...
                
                The engine's array of objects will be returned as a delimited list of fields. 
                The first character in the String will identify the separator used between 
                each reference.  If no top level windows were found then the engine will return 
                an empty string.
                
            
            The Android Engine also persists these values as SAFS variables.
            
            ^DroidEngine.Command    = [command]
            ^DroidEngine.StatusCode = [statuscode string]
            ^DroidEngine.StatusInfo = [statusinfo]
            
            See DEngineCommandProcessor.setStatusVars().
            
            
            The TestComplete Engine (TCAFS) also persists these values as SAFS variables.
                        
            ^TCAFS.Command    = [command]
            ^TCAFS.StatusCode = [statuscode string]
            ^TCAFS.StatusInfo = [statusinfo]
            ^TCAFS.UID.Count  = [Number of UID References created last]
            ^TCAFS.UID.1      = [First UID Reference created]
            ^TCAFS.UID.n      = [UID Reference number n]            
            
                </pre>    Supporting Engines:
    <P/><UL>
        <LI>Google Android</LI>
        <LI>AutomatedQA TestComplete</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     **********/
    static public EngineCommand getTopLevelWindows () {

        EngineCommand ec = new EngineCommand(GETTOPLEVELWINDOWS_KEYWORD);
        return ec;
    }


    /*********** <pre>Get the Windows native handle of the top window containing the component.
                Get the Windows native handle of the top window containing the component. 
                </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param componentKey  Optional:NOA string represents the key of component's Test Object.
     **********/
    static public EngineCommand getTopWindowHandle (String componentKey) {

        if ( componentKey == null ) throw new IllegalArgumentException ( "getTopWindowHandle.componentKey = null");
        EngineCommand ec = new EngineCommand(GETTOPWINDOWHANDLE_KEYWORD);
        ec.addParameter(componentKey);
        return ec;
    }


    /*********** <pre>Find the component according to Recognition String and highlight it.
                According to the Window's and Component's Recognition String, find the Component Test Object
                and highlight it by a red rectangle. 
                </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param windowRS  Optional:NOA string represents the window's Recognition String.
     @param componentRS  Optional:NOA string represents the component's Recognition String.
     **********/
    static public EngineCommand highlightMatchingChildObject (String windowRS, String componentRS) {

        if ( componentRS == null ) throw new IllegalArgumentException ( "highlightMatchingChildObject.componentRS = null");
        if ( windowRS == null ) throw new IllegalArgumentException ( "highlightMatchingChildObject.windowRS = null");
        EngineCommand ec = new EngineCommand(HIGHLIGHTMATCHINGCHILDOBJECT_KEYWORD);
        ec.addParameter(windowRS);
        ec.addParameter(componentRS);
        return ec;
    }


    /*********** <pre>Find the component according to Recognition String and highlight it.
                According to the Window's and Component's Recognition String, find the Component Test Object
                and highlight it by a red rectangle. 
                </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        windowRS -- Optional:NOA string represents the window's Recognition String.<BR/>        componentRS -- Optional:NOA string represents the component's Recognition String.
    </UL>

     **********/
    static public EngineCommand highlightMatchingChildObject (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "highlightMatchingChildObject.parameters = null");
        EngineCommand ec = new EngineCommand(HIGHLIGHTMATCHINGCHILDOBJECT_KEYWORD);
        ec.addParameters(parameters);
        return ec;
    }


    /*********** <pre>Find the component according to Window/Component Test Object's key and highlight it.
                According to the Window's and Component's Test Object key, get the Component Test Object and highlight it 
                by a red rectangle. 
                </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>Google Android</LI>
    </UL>

     @param windowKey  Optional:NOA string represents the key of window's Test Object.
     @param componentKey  Optional:NOA string represents the key of component's Test Object.
     **********/
    static public EngineCommand highlightMatchingChildObjectByKey (String windowKey, String componentKey) {

        if ( componentKey == null ) throw new IllegalArgumentException ( "highlightMatchingChildObjectByKey.componentKey = null");
        if ( windowKey == null ) throw new IllegalArgumentException ( "highlightMatchingChildObjectByKey.windowKey = null");
        EngineCommand ec = new EngineCommand(HIGHLIGHTMATCHINGCHILDOBJECTBYKEY_KEYWORD);
        ec.addParameter(windowKey);
        ec.addParameter(componentKey);
        return ec;
    }


    /*********** <pre>Find the component according to Window/Component Test Object's key and highlight it.
                According to the Window's and Component's Test Object key, get the Component Test Object and highlight it 
                by a red rectangle. 
                </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
        <LI>Google Android</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        windowKey -- Optional:NOA string represents the key of window's Test Object.<BR/>        componentKey -- Optional:NOA string represents the key of component's Test Object.
    </UL>

     **********/
    static public EngineCommand highlightMatchingChildObjectByKey (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "highlightMatchingChildObjectByKey.parameters = null");
        EngineCommand ec = new EngineCommand(HIGHLIGHTMATCHINGCHILDOBJECTBYKEY_KEYWORD);
        ec.addParameters(parameters);
        return ec;
    }


    /*********** <pre>Is the component Enabled (vs. disabled)? 
                Should return text "true" if the component is Enabled. 
                Return text "false" if it is not.
            
            The Android Engine also persists these values as SAFS variables.
            
            ^DroidEngine.Command    = [command]
            ^DroidEngine.StatusCode = [statuscode string]
            ^DroidEngine.StatusInfo = [statusinfo]
            
            See DEngineCommandProcessor.setStatusVars().
            
            
            The TestComplete Engine (TCAFS) also persists these values as SAFS variables.
                        
            ^TCAFS.Command    = [command]
            ^TCAFS.StatusCode = [statuscode string]
            ^TCAFS.StatusInfo = [statusinfo]
            ^TCAFS.FullName   = [object.FullName] -- the TestObjects.FullName string--if command returns only 1 reference.
            
                </pre>    Supporting Engines:
    <P/><UL>
        <LI>AutomatedQA TestComplete</LI>
        <LI>Google Android</LI>
    </UL>

     @param component  Optional:NOAn object reference or proxy reference to the component.
     **********/
    static public EngineCommand isEnabled (String component) {

        if ( component == null ) throw new IllegalArgumentException ( "isEnabled.component = null");
        EngineCommand ec = new EngineCommand(ISENABLED_KEYWORD);
        ec.addParameter(component);
        return ec;
    }


    /*********** <pre>Determine if there is a matching Path object.
                
                Normally, this is only valid for components whose subitems, nodes, or 
                children are found by Path syntax: Root->Branch->Leaf.  This is often 
                the case for Menus, MenuItems, and Tree nodes.
                
                Returns text "true" if an object matching the provided Path was found.  
                Returns text "false" if no such object was found.
                </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param component  Optional:NOAn object reference or proxy reference to a component.
     @param path  Optional:NOThe Path to locate relative to the Component.
     **********/
    static public EngineCommand isMatchingPath (String component, String path) {

        if ( component == null ) throw new IllegalArgumentException ( "isMatchingPath.component = null");
        if ( path == null ) throw new IllegalArgumentException ( "isMatchingPath.path = null");
        EngineCommand ec = new EngineCommand(ISMATCHINGPATH_KEYWORD);
        ec.addParameter(component);
        ec.addParameter(path);
        return ec;
    }


    /*********** <pre>Determine if there is a matching Path object.
                
                Normally, this is only valid for components whose subitems, nodes, or 
                children are found by Path syntax: Root->Branch->Leaf.  This is often 
                the case for Menus, MenuItems, and Tree nodes.
                
                Returns text "true" if an object matching the provided Path was found.  
                Returns text "false" if no such object was found.
                </pre>    
    Supporting Engines:
    <P/><UL>
        <LI>Rational RobotJ</LI>
    </UL>

     @param parameters  Optional:NO
            An array containing the following parameters:
    <UL>
<BR/>        component -- Optional:NOAn object reference or proxy reference to a component.<BR/>        path -- Optional:NOThe Path to locate relative to the Component.
    </UL>

     **********/
    static public EngineCommand isMatchingPath (String[] parameters) {

        if ( parameters == null ) throw new IllegalArgumentException ( "isMatchingPath.parameters = null");
        EngineCommand ec = new EngineCommand(ISMATCHINGPATH_KEYWORD);
        ec.addParameters(parameters);
        return ec;
    }


    /*********** <pre>Is the component visible?
                Returns text "true" if the component is set to be visible.
                Returns text "false" if the component is set to be hidden or 
                otherwise is not visible.
            
            The Android Engine also persists these values as SAFS variables.
            
            ^DroidEngine.Command    = [command]
            ^DroidEngine.StatusCode = [statuscode string]
            ^DroidEngine.StatusInfo = [statusinfo]
            
            See DEngineCommandProcessor.setStatusVars().
            
            
            The TestComplete Engine (TCAFS) also persists these values as SAFS variables.
                        
            ^TCAFS.Command    = [command]
            ^TCAFS.StatusCode = [statuscode string]
            ^TCAFS.StatusInfo = [statusinfo]
            ^TCAFS.FullName   = [object.FullName] -- the TestObjects.FullName string--if command returns only 1 reference.
            
               </pre>    Supporting Engines:
    <P/><UL>
        <LI>AutomatedQA TestComplete</LI>
        <LI>Google Android</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param component  Optional:NOAn object reference or proxy reference to the component.
     **********/
    static public EngineCommand isShowing (String component) {

        if ( component == null ) throw new IllegalArgumentException ( "isShowing.component = null");
        EngineCommand ec = new EngineCommand(ISSHOWING_KEYWORD);
        ec.addParameter(component);
        return ec;
    }


    /*********** <pre>Is the component a top-level Popup Container? 
                Should return text "true" if the component is. Return text "false" if it is not.
                Different domains or environs will have different classes or types that are Popup Windows or 
                Popup containers.
            
            The Android Engine also persists these values as SAFS variables.
            
            ^DroidEngine.Command    = [command]
            ^DroidEngine.StatusCode = [statuscode string]
            ^DroidEngine.StatusInfo = [statusinfo]
            
            See DEngineCommandProcessor.setStatusVars().
            
            
            The TestComplete Engine (TCAFS) also persists these values as SAFS variables.
                        
            ^TCAFS.Command    = [command]
            ^TCAFS.StatusCode = [statuscode string]
            ^TCAFS.StatusInfo = [statusinfo]
            ^TCAFS.FullName   = [object.FullName] -- the TestObjects.FullName string--if command returns only 1 reference.
            
                </pre>    Supporting Engines:
    <P/><UL>
        <LI>AutomatedQA TestComplete</LI>
        <LI>Google Android</LI>
    </UL>

     @param component  Optional:NOAn object reference or proxy reference to the component.
     **********/
    static public EngineCommand isTopLevelPopupContainer (String component) {

        if ( component == null ) throw new IllegalArgumentException ( "isTopLevelPopupContainer.component = null");
        EngineCommand ec = new EngineCommand(ISTOPLEVELPOPUPCONTAINER_KEYWORD);
        ec.addParameter(component);
        return ec;
    }


    /*********** <pre>Does the component still exist as a valid object?
                Should return text "true" if the component is still valid. 
                Return text "false" if it is not.
            
            The Android Engine also persists these values as SAFS variables.
            
            ^DroidEngine.Command    = [command]
            ^DroidEngine.StatusCode = [statuscode string]
            ^DroidEngine.StatusInfo = [statusinfo]
            
            See DEngineCommandProcessor.setStatusVars().
            
            
            The TestComplete Engine (TCAFS) also persists these values as SAFS variables.
                        
            ^TCAFS.Command    = [command]
            ^TCAFS.StatusCode = [statuscode string]
            ^TCAFS.StatusInfo = [statusinfo]
            ^TCAFS.FullName   = [object.FullName] -- the TestObjects.FullName string--if command returns only 1 reference.
            
                </pre>    Supporting Engines:
    <P/><UL>
        <LI>AutomatedQA TestComplete</LI>
        <LI>Google Android</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param component  Optional:NOAn object reference or proxy reference to the component.
     **********/
    static public EngineCommand isValid (String component) {

        if ( component == null ) throw new IllegalArgumentException ( "isValid.component = null");
        EngineCommand ec = new EngineCommand(ISVALID_KEYWORD);
        ec.addParameter(component);
        return ec;
    }


    /*********** <pre>Make the component the active (topmost?) Window or Component.
                Normally, this is only valid for window or child window components.  
                There is currently nothing defined to be returned by this command.
            
            The Android Engine also persists these values as SAFS variables.
            
            ^DroidEngine.Command    = [command]
            ^DroidEngine.StatusCode = [statuscode string]
            ^DroidEngine.StatusInfo = [statusinfo]
            
            See DEngineCommandProcessor.setStatusVars().
            
            
            The TestComplete Engine (TCAFS) also persists these values as SAFS variables.
                        
            ^TCAFS.Command    = [command]
            ^TCAFS.StatusCode = [statuscode string]
            ^TCAFS.StatusInfo = [statusinfo]
            ^TCAFS.FullName   = [object.FullName] -- the TestObjects.FullName string--if command returns only 1 reference.
            
               </pre>    Supporting Engines:
    <P/><UL>
        <LI>AutomatedQA TestComplete</LI>
        <LI>Google Android</LI>
        <LI>Rational RobotJ</LI>
    </UL>

     @param component  Optional:NOAn object reference or proxy reference to the component.
     **********/
    static public EngineCommand setActiveWindow (String component) {

        if ( component == null ) throw new IllegalArgumentException ( "setActiveWindow.component = null");
        EngineCommand ec = new EngineCommand(SETACTIVEWINDOW_KEYWORD);
        ec.addParameter(component);
        return ec;
    }


}
