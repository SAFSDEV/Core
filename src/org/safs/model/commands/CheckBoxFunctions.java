
/******************************************************************************
 * CheckBoxFunctions.java
 *
 * Copyright (C) SAS Institute, All rights reserved.
 * General Public License: https://www.gnu.org/licenses/gpl-3.0.en.html
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file is automatically generated from XML source.  Any changes you make 
 * here will be erased the next time the file is generated.
 *
 * The following assets are needed to generate this file:
 *
 *   CheckBoxFunctions.xml
 *   keyword_library.dtd
 *   XSLJavaCommonFunctions.xsl
 *   XSLJavaCommandModel.xsl
 *
 * Example invocation to generate:
 *
 *   msxsl.exe CheckBoxFunctions.xml XSLJavaCommandModel.xsl -o CheckBoxFunctions.java
 *
 ******************************************************************************/ 
package org.safs.model.commands;


import org.safs.model.ComponentFunction;


public class CheckBoxFunctions {

    /*****************
    Private Singleton Instance
    ****************/
    private static final CheckBoxFunctions singleton = new CheckBoxFunctions(); 

    /*****************
    Private Constructor
    Static class needing no instantiation.
    ****************/
    private CheckBoxFunctions() {}

    /*****************
    public Singleton to access class static methods via instance
    ****************/
    public static CheckBoxFunctions getInstance() { return singleton;}

    /** "Check" */
    static public final String CHECK_KEYWORD = "Check";
    /** "Click" */
    static public final String CLICK_KEYWORD = "Click";
    /** "UnCheck" */
    static public final String UNCHECK_KEYWORD = "UnCheck";


    /*********** <pre> 
                Tries to perform a Check on the Checkbox.
               
                Tries to perform a Check on the Checkbox.  If the Checkbox does not 
                have a checkmark, it will set the checkmark.  If the Checkbox already 
                has a checkmark, then it should leave it alone.
                Currently, this handles most generic checkboxes and HTMLCheckboxes.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
        <LI>AutomatedQA TestComplete</LI>
        <LI>Google Android</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     **********/
    static public ComponentFunction check (String winname, String compname) {

        if ( winname == null ) throw new IllegalArgumentException ( "check.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "check.compname = null");

        ComponentFunction cf = new ComponentFunction(CHECK_KEYWORD, winname, compname);
        return cf;
    }


    /*********** <pre> 
                 Use Generic Object Click
               
                 Tries to perform a standard Click on the Checkbox which generally
                 toggles the current selection status.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Mercury Interactive WinRunner</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     **********/
    static public ComponentFunction click (String winname, String compname) {

        if ( winname == null ) throw new IllegalArgumentException ( "click.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "click.compname = null");

        ComponentFunction cf = new ComponentFunction(CLICK_KEYWORD, winname, compname);
        return cf;
    }


    /*********** <pre> 
                Tries to perform a UnCheck on the Checkbox.
               
                Tries to UnCheck the Checkbox.  If the Checkbox does not 
                have a checkmark, it will leave it alone.  If the Checkbox already 
                has a checkmark, then it should uncheck (deselect) it.
                Currently, this handles most generic Checkboxes and HTMLCheckboxes.
                  </pre>    Supporting Engines:
    <P/><UL>
        <LI>Rational Robot</LI>
        <LI>Rational RobotJ</LI>
        <LI>Mercury Interactive WinRunner</LI>
        <LI>OpenQA Selenium</LI>
        <LI>OpenQA Selenium</LI>
        <LI>AutomatedQA TestComplete</LI>
        <LI>Google Android</LI>
    </UL>

     @param winname  Optional:NO
            The name of the window to act upon.
     @param compname  Optional:NO
            The name of the component to act upon.
     **********/
    static public ComponentFunction unCheck (String winname, String compname) {

        if ( winname == null ) throw new IllegalArgumentException ( "unCheck.winname = null");
        if ( compname == null ) throw new IllegalArgumentException ( "unCheck.compname = null");

        ComponentFunction cf = new ComponentFunction(UNCHECK_KEYWORD, winname, compname);
        return cf;
    }


}
